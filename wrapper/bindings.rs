/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _GLIBCXX_STRING: u32 = 1;
pub const _REQUIRES_FREESTANDING_H: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 13;
pub const __GLIBCXX__: u32 = 20240904;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 1;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_HAVE_FLOAT128_MATH: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 12000;
pub const _PSTL_VERSION_MAJOR: u32 = 12;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_UDR_PRESENT: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STACKTRACE: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_MMAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STATIC_TZDATA: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CHDIR: u32 = 1;
pub const _GLIBCXX_USE_CHMOD: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_FSEEKO_FTELLO: u32 = 1;
pub const _GLIBCXX_USE_GETCWD: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_MKDIR: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GLIBCXX_ZONEINFO_DIR: &[u8; 20] = b"/usr/share/zoneinfo\0";
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STRINGFWD_H: u32 = 1;
pub const _MEMORYFWD_H: u32 = 1;
pub const _CHAR_TRAITS_H: u32 = 1;
pub const _GLIBCXX_POSTYPES_H: u32 = 1;
pub const _WCHAR_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _GLIBCXX_CWCHAR: u32 = 1;
pub const _GLIBCXX_TYPE_TRAITS: u32 = 1;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_constexpr_char_traits: u32 = 201611;
pub const _ALLOCATOR_H: u32 = 1;
pub const _GLIBCXX_CXX_ALLOCATOR_H: u32 = 1;
pub const _STD_NEW_ALLOCATOR_H: u32 = 1;
pub const __EXCEPTION_H: u32 = 1;
pub const __cpp_lib_launder: u32 = 201606;
pub const _FUNCTEXCEPT_H: u32 = 1;
pub const _EXCEPTION_DEFINES_H: u32 = 1;
pub const _MOVE_H: u32 = 1;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const _CPP_TYPE_TRAITS_H: u32 = 1;
pub const _LOCALE_FWD_H: u32 = 1;
pub const _GLIBCXX_CXX_LOCALE_H: u32 = 1;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const _GLIBCXX_CLOCALE: u32 = 1;
pub const _GLIBCXX_C_LOCALE_GNU: u32 = 1;
pub const _GLIBCXX_NUM_CATEGORIES: u32 = 6;
pub const _GLIBCXX_IOSFWD: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _GLIBCXX_CCTYPE: u32 = 1;
pub const _OSTREAM_INSERT_H: u32 = 1;
pub const _CXXABI_FORCED_H: u32 = 1;
pub const _STL_ITERATOR_BASE_FUNCS_H: u32 = 1;
pub const _CONCEPT_CHECK_H: u32 = 1;
pub const _GLIBCXX_DEBUG_ASSERTIONS_H: u32 = 1;
pub const _STL_ITERATOR_BASE_TYPES_H: u32 = 1;
pub const _STL_ITERATOR_H: u32 = 1;
pub const _EXT_TYPE_TRAITS: u32 = 1;
pub const _PTR_TRAITS_H: u32 = 1;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const _STL_FUNCTION_H: u32 = 1;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const _BACKWARD_BINDERS_H: u32 = 1;
pub const _EXT_NUMERIC_TRAITS: u32 = 1;
pub const _STL_ALGOBASE_H: u32 = 1;
pub const _STL_PAIR_H: u32 = 1;
pub const _GLIBCXX_UTILITY_H: u32 = 1;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const _GLIBCXX_DEBUG_MACRO_SWITCH_H: u32 = 1;
pub const _GLIBCXX_PREDEFINED_OPS_H: u32 = 1;
pub const _GLIBCXX_BIT: u32 = 1;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const _GLIBCXX_REFWRAP_H: u32 = 1;
pub const _GLIBCXX_INVOKE_H: u32 = 1;
pub const _GLIBCXX_RANGE_ACCESS_H: u32 = 1;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const _BASIC_STRING_H: u32 = 1;
pub const _EXT_ALLOC_TRAITS_H: u32 = 1;
pub const _ALLOC_TRAITS_H: u32 = 1;
pub const _STL_CONSTRUCT_H: u32 = 1;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const _GLIBCXX_STRING_VIEW: u32 = 1;
pub const _FUNCTIONAL_HASH_H: u32 = 1;
pub const _HASH_BYTES_H: u32 = 1;
pub const __cpp_lib_string_view: u32 = 201803;
pub const _GLIBCXX_STRING_VIEW_TCC: u32 = 1;
pub const __cpp_lib_constexpr_string: u32 = 201611;
pub const _STRING_CONVERSIONS_H: u32 = 1;
pub const _GLIBCXX_CSTDLIB: u32 = 1;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _GLIBCXX_CSTDIO: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const _GLIBCXX_CERRNO: u32 = 1;
pub const _GLIBCXX_CHARCONV_H: u32 = 1;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const _BASIC_STRING_TCC: u32 = 1;
pub const _GLIBCXX_MEMORY_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const __cpp_lib_byte: u32 = 201603;
pub const _USES_ALLOCATOR_H: u32 = 1;
pub const _USES_ALLOCATOR_ARGS: u32 = 1;
pub const _GLIBCXX_TUPLE: u32 = 1;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_IOSTREAM: u32 = 1;
pub const _GLIBCXX_OSTREAM: u32 = 1;
pub const _GLIBCXX_IOS: u32 = 1;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const _CXXABI_INIT_EXCEPTION_H: u32 = 1;
pub const _GLIBCXX_HAVE_CDTOR_CALLABI: u32 = 0;
pub const __GXX_MERGED_TYPEINFO_NAMES: u32 = 0;
pub const __GXX_TYPEINFO_EQUALITY_INLINE: u32 = 1;
pub const _GLIBCXX_NESTED_EXCEPTION_H: u32 = 1;
pub const _IOS_BASE_H: u32 = 1;
pub const _GLIBCXX_ATOMICITY_H: u32 = 1;
pub const __GTHREADS: u32 = 1;
pub const __GTHREADS_CXX0X: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const CLONE_NEWTIME: u32 = 128;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
pub const __GTHREAD_HAS_COND: u32 = 1;
pub const __GTHREAD_ONCE_INIT: u32 = 0;
pub const _GLIBCXX_ATOMIC_WORD_H: u32 = 1;
pub const _LOCALE_CLASSES_H: u32 = 1;
pub const _LOCALE_CLASSES_TCC: u32 = 1;
pub const _GLIBCXX_SYSTEM_ERROR: u32 = 1;
pub const _GLIBCXX_ERROR_CONSTANTS: u32 = 1;
pub const _GLIBCXX_STDEXCEPT: u32 = 1;
pub const _GLIBXX_STREAMBUF: u32 = 1;
pub const _STREAMBUF_TCC: u32 = 1;
pub const _BASIC_IOS_H: u32 = 1;
pub const _LOCALE_FACETS_H: u32 = 1;
pub const _WCTYPE_H: u32 = 1;
pub const _BITS_WCTYPE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_CWCTYPE: u32 = 1;
pub const _STREAMBUF_ITERATOR_H: u32 = 1;
pub const _GLIBCXX_NUM_FACETS: u32 = 14;
pub const _GLIBCXX_NUM_UNICODE_FACETS: u32 = 2;
pub const _LOCALE_FACETS_TCC: u32 = 1;
pub const _BASIC_IOS_TCC: u32 = 1;
pub const _OSTREAM_TCC: u32 = 1;
pub const _GLIBCXX_ISTREAM: u32 = 1;
pub const _ISTREAM_TCC: u32 = 1;
pub const _GLIBCXX_UNORDERED_MAP: u32 = 1;
pub const _HASHTABLE_H: u32 = 1;
pub const _HASHTABLE_POLICY_H: u32 = 1;
pub const _ALIGNED_BUFFER_H: u32 = 1;
pub const _ENABLE_SPECIAL_MEMBERS_H: u32 = 1;
pub const _NODE_HANDLE: u32 = 1;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const _GLIBCXX_ERASE_IF_H: u32 = 1;
pub const _GLIBCXX_VECTOR: u32 = 1;
pub const _STL_UNINITIALIZED_H: u32 = 1;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const _STL_VECTOR_H: u32 = 1;
pub const _STL_BVECTOR_H: u32 = 1;
pub const _VECTOR_TCC: u32 = 1;
pub const _GLIBCXX_ALGORITHM: u32 = 1;
pub const _STL_ALGO_H: u32 = 1;
pub const _GLIBCXX_ALGORITHMFWD_H: u32 = 1;
pub const _STL_HEAP_H: u32 = 1;
pub const _STL_TEMPBUF_H: u32 = 1;
pub const __cpp_lib_clamp: u32 = 201603;
pub const __cpp_lib_sample: u32 = 201603;
pub const _PSTL_ALGORITHM_FORWARD_DECLARED: u32 = 1;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const _GLIBCXX_FUNCTIONAL: u32 = 1;
pub const _GLIBCXX_STD_FUNCTION_H: u32 = 1;
pub const _GLIBCXX_ARRAY: u32 = 1;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_not_fn: u32 = 201603;
pub const __cpp_lib_boyer_moore_searcher: u32 = 201603;
pub const _GLIBCXX_ITERATOR: u32 = 1;
pub const _STREAM_ITERATOR_H: u32 = 1;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const _GLIBCXX_MEMORY: u32 = 1;
pub const _STL_RAW_STORAGE_ITERATOR_H: u32 = 1;
pub const _GLIBCXX_ALIGN_H: u32 = 1;
pub const _UNIQUE_PTR_H: u32 = 1;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const _SHARED_PTR_H: u32 = 1;
pub const _SHARED_PTR_BASE_H: u32 = 1;
pub const _ALLOCATED_PTR_H: u32 = 1;
pub const _CONCURRENCE_H: u32 = 1;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const _SHARED_PTR_ATOMIC_H: u32 = 1;
pub const _GLIBCXX_ATOMIC_BASE_H: u32 = 1;
pub const _GLIBCXX_ATOMIC_LOCK_FREE_H: u32 = 1;
pub const _BACKWARD_AUTO_PTR_H: u32 = 1;
pub const _GLIBCXX_UTILITY: u32 = 1;
pub const _STL_RELOPS_H: u32 = 1;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_as_const: u32 = 201510;
pub const NLOHMANN_JSON_VERSION_MAJOR: u32 = 3;
pub const NLOHMANN_JSON_VERSION_MINOR: u32 = 12;
pub const NLOHMANN_JSON_VERSION_PATCH: u32 = 0;
pub const JSON_DIAGNOSTICS: u32 = 0;
pub const JSON_DIAGNOSTIC_POSITIONS: u32 = 0;
pub const JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON: u32 = 0;
pub const NLOHMANN_JSON_NAMESPACE_NO_VERSION: u32 = 0;
pub const _GLIBCXX_FORWARD_LIST: u32 = 1;
pub const _FORWARD_LIST_H: u32 = 1;
pub const _FORWARD_LIST_TCC: u32 = 1;
pub const _GLIBCXX_MAP: u32 = 1;
pub const _STL_TREE_H: u32 = 1;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const _STL_MAP_H: u32 = 1;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const _STL_MULTIMAP_H: u32 = 1;
pub const _GLIBCXX_VALARRAY: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __FP_LONG_MAX: u64 = 9223372036854775807;
pub const FP_LLOGB0: i64 = -9223372036854775808;
pub const FP_LLOGBNAN: i64 = -9223372036854775808;
pub const FP_INT_UPWARD: u32 = 0;
pub const FP_INT_DOWNWARD: u32 = 1;
pub const FP_INT_TOWARDZERO: u32 = 2;
pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
pub const FP_INT_TONEAREST: u32 = 4;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_Ef: f64 = 2.718281828459045;
pub const M_LOG2Ef: f64 = 1.4426950408889634;
pub const M_LOG10Ef: f64 = 0.4342944819032518;
pub const M_LN2f: f64 = 0.6931471805599453;
pub const M_LN10f: f64 = 2.302585092994046;
pub const M_PIf: f64 = 3.141592653589793;
pub const M_PI_2f: f64 = 1.5707963267948966;
pub const M_PI_4f: f64 = 0.7853981633974483;
pub const M_1_PIf: f64 = 0.3183098861837907;
pub const M_2_PIf: f64 = 0.6366197723675814;
pub const M_2_SQRTPIf: f64 = 1.1283791670955126;
pub const M_SQRT2f: f64 = 1.4142135623730951;
pub const M_SQRT1_2f: f64 = 0.7071067811865476;
pub const M_El: f64 = 2.718281828459045;
pub const M_LOG2El: f64 = 1.4426950408889634;
pub const M_LOG10El: f64 = 0.4342944819032518;
pub const M_LN2l: f64 = 0.6931471805599453;
pub const M_LN10l: f64 = 2.302585092994046;
pub const M_PIl: f64 = 3.141592653589793;
pub const M_PI_2l: f64 = 1.5707963267948966;
pub const M_PI_4l: f64 = 0.7853981633974483;
pub const M_1_PIl: f64 = 0.3183098861837907;
pub const M_2_PIl: f64 = 0.6366197723675814;
pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
pub const M_SQRT2l: f64 = 1.4142135623730951;
pub const M_SQRT1_2l: f64 = 0.7071067811865476;
pub const _GLIBCXX_CMATH: u32 = 1;
pub const __cpp_lib_hypot: u32 = 201603;
pub const _GLIBCXX_BITS_SPECFUN_H: u32 = 1;
pub const __STDCPP_MATH_SPEC_FUNCS__: u32 = 201003;
pub const __cpp_lib_math_special_functions: u32 = 201603;
pub const _GLIBCXX_NUMERIC_LIMITS: u32 = 1;
pub const _GLIBCXX_TR1_GAMMA_TCC: u32 = 1;
pub const _GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H: u32 = 1;
pub const _GLIBCXX_TR1_BESSEL_FUNCTION_TCC: u32 = 1;
pub const _GLIBCXX_TR1_BETA_FUNCTION_TCC: u32 = 1;
pub const _GLIBCXX_TR1_ELL_INTEGRAL_TCC: u32 = 1;
pub const _GLIBCXX_TR1_EXP_INTEGRAL_TCC: u32 = 1;
pub const _GLIBCXX_TR1_HYPERGEOMETRIC_TCC: u32 = 1;
pub const _GLIBCXX_TR1_LEGENDRE_FUNCTION_TCC: u32 = 1;
pub const _GLIBCXX_TR1_MODIFIED_BESSEL_FUNC_TCC: u32 = 1;
pub const _GLIBCXX_TR1_POLY_HERMITE_TCC: u32 = 1;
pub const _GLIBCXX_TR1_POLY_LAGUERRE_TCC: u32 = 1;
pub const _GLIBCXX_TR1_RIEMANN_ZETA_TCC: u32 = 1;
pub const _VALARRAY_ARRAY_H: u32 = 1;
pub const _VALARRAY_ARRAY_TCC: u32 = 1;
pub const _VALARRAY_BEFORE_H: u32 = 1;
pub const _SLICE_ARRAY_H: u32 = 1;
pub const _VALARRAY_AFTER_H: u32 = 1;
pub const _GSLICE_H: u32 = 1;
pub const _GSLICE_ARRAY_H: u32 = 1;
pub const _MASK_ARRAY_H: u32 = 1;
pub const _INDIRECT_ARRAY_H: u32 = 1;
pub const JSON_HEDLEY_VERSION: u32 = 15;
pub const __cpp_lib_to_chars: u32 = 201611;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_any: u32 = 201606;
pub const __cpp_lib_atomic_is_always_lock_free: u32 = 201603;
pub const __cpp_lib_gcd: u32 = 201606;
pub const __cpp_lib_gcd_lcm: u32 = 201606;
pub const __cpp_lib_lcm: u32 = 201606;
pub const __cpp_lib_optional: u32 = 201606;
pub const __cpp_lib_variant: u32 = 202102;
pub const __cpp_lib_chrono: u32 = 201611;
pub const __cpp_lib_execution: u32 = 201902;
pub const __cpp_lib_filesystem: u32 = 201703;
pub const __cpp_lib_memory_resource: u32 = 201603;
pub const __cpp_lib_scoped_lock: u32 = 201703;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const JSON_HAS_FILESYSTEM: u32 = 1;
pub const JSON_HAS_EXPERIMENTAL_FILESYSTEM: u32 = 0;
pub const JSON_HAS_THREE_WAY_COMPARISON: u32 = 0;
pub const JSON_HAS_RANGES: u32 = 0;
pub const JSON_HAS_STATIC_RTTI: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const JSON_USE_IMPLICIT_CONVERSIONS: u32 = 1;
pub const JSON_DISABLE_ENUM_SERIALIZATION: u32 = 0;
pub const JSON_USE_GLOBAL_UDLS: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _GLIBCXX_CSTRING: u32 = 1;
pub const _GLIBCXX_FILESYSTEM: u32 = 1;
pub const _GLIBCXX_FS_FWD_H: u32 = 1;
pub const _GLIBCXX_CHRONO_H: u32 = 1;
pub const _GLIBCXX_RATIO: u32 = 1;
pub const _GLIBCXX_CTIME: u32 = 1;
pub const _GLIBCXX_PARSE_NUMBERS_H: u32 = 1;
pub const _GLIBCXX_FS_PATH_H: u32 = 1;
pub const _GLIBCXX_LOCALE: u32 = 1;
pub const _LOCALE_FACETS_NONIO_H: u32 = 1;
pub const _LIBINTL_H: u32 = 1;
pub const __USE_GNU_GETTEXT: u32 = 1;
pub const _CODECVT_H: u32 = 1;
pub const _LOCALE_FACETS_NONIO_TCC: u32 = 1;
pub const _LOCALE_CONV_H: u32 = 1;
pub const _GLIBCXX_IOMANIP: u32 = 1;
pub const _GLIBCXX_QUOTED_STRING_H: u32 = 1;
pub const _GLIBCXX_SSTREAM: u32 = 1;
pub const _SSTREAM_TCC: u32 = 1;
pub const _GLIBCXX_CODECVT: u32 = 1;
pub const _GLIBCXX_FS_DIR_H: u32 = 1;
pub const _GLIBCXX_FS_OPS_H: u32 = 1;
pub const _GLIBCXX_OPTIONAL: u32 = 1;
pub const _GLIBCXX_NUMERIC: u32 = 1;
pub const _STL_NUMERIC_H: u32 = 1;
pub const _PSTL_NUMERIC_FORWARD_DECLARED: u32 = 1;
pub const _GLIBCXX_ANY: u32 = 1;
pub const _GLIBCXX_CHRONO: u32 = 1;
pub const _GLIBCXX_CONDITION_VARIABLE: u32 = 1;
pub const _GLIBCXX_MUTEX_H: u32 = 1;
pub const _GLIBCXX_UNIQUE_LOCK_H: u32 = 1;
pub const _GLIBCXX_DEQUE: u32 = 1;
pub const _STL_DEQUE_H: u32 = 1;
pub const _GLIBCXX_DEQUE_BUF_SIZE: u32 = 512;
pub const _DEQUE_TCC: u32 = 1;
pub const _GLIBCXX_MUTEX: u32 = 1;
pub const _GLIBCXX_ATOMIC: u32 = 1;
pub const _GLIBCXX_THREAD: u32 = 1;
pub const _GLIBCXX_THREAD_H: u32 = 1;
pub const _GLIBCXX_THIS_THREAD_SLEEP_H: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const XLINK_MAX_MX_ID_SIZE: u32 = 32;
pub const XLINK_MAX_NAME_SIZE: u32 = 64;
pub const XLINK_MAX_STREAMS: u32 = 32;
pub const XLINK_MAX_PACKETS_PER_STREAM: u32 = 64;
pub const XLINK_NO_RW_TIMEOUT: u32 = 4294967295;
pub const XLINK_DEVICE_DEFAULT_SEARCH_TIMEOUT_MS: u32 = 500;
pub const INVALID_STREAM_ID: u32 = 3735936685;
pub const INVALID_STREAM_ID_OUT_OF_MEMORY: u32 = 3735945215;
pub const INVALID_LINK_ID: u32 = 255;
pub const MAX_STREAM_NAME_LENGTH: u32 = 52;
pub const _GLIBCXX_LIST: u32 = 1;
pub const _STL_LIST_H: u32 = 1;
pub const _LIST_TCC: u32 = 1;
pub const _GLIBCXX_VARIANT: u32 = 1;
pub const _GLIBCXX_UNORDERED_SET: u32 = 1;
pub const _GLIBCXX_SET: u32 = 1;
pub const _STL_SET_H: u32 = 1;
pub const _STL_MULTISET_H: u32 = 1;
pub const _GLIBCXX_QUEUE: u32 = 1;
pub const _STL_QUEUE_H: u32 = 1;
pub const _GLIBCXX_FSTREAM: u32 = 1;
pub const _GLIBCXX_BASIC_FILE_STDIO_H: u32 = 1;
pub const _GLIBCXX_CXX_IO_H: u32 = 1;
pub const _GLIBCXX_BUFSIZ: u32 = 8192;
pub const _FSTREAM_TCC: u32 = 1;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
#[repr(C)]
pub struct std_basic_string<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_dataplus: std_basic_string__Alloc_hider,
    pub _M_string_length: std_basic_string_size_type,
    pub __bindgen_anon_1: std_basic_string__bindgen_ty_2<_CharT>,
}
pub type std_basic_string__Char_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_allocator_type = std_basic_string__Char_alloc_type;
pub type std_basic_string_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_string_iterator = __gnu_cxx___normal_iterator<std_basic_string_pointer>;
pub type std_basic_string_const_iterator =
    __gnu_cxx___normal_iterator<std_basic_string_const_pointer>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string___const_iterator = std_basic_string_const_iterator;
pub type std_basic_string___sv_type<_CharT> = std_basic_string_view<_CharT>;
pub type std_basic_string__If_sv = std_enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___sv_wrapper<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_sv: std_basic_string___sv_type<_CharT>,
}
#[repr(C)]
pub struct std_basic_string__Alloc_hider {
    pub _M_p: std_basic_string_pointer,
}
pub const std_basic_string__S_local_capacity: std_basic_string__bindgen_ty_1 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
pub struct std_basic_string__bindgen_ty_2<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_local_buf: __BindgenUnionField<*mut _CharT>,
    pub _M_allocated_capacity: __BindgenUnionField<std_basic_string_size_type>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_collate {
    pub _base: std_locale_facet,
    pub _M_c_locale_collate: std___c_locale,
}
pub type std_collate_char_type<_CharT> = _CharT;
pub type std_collate_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_collate_byname {
    pub _base: std_collate,
}
pub type std_collate_byname_char_type<_CharT> = _CharT;
pub type std_collate_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_locale_facet,
    pub _M_data: *mut std_numpunct___cache_type<_CharT>,
}
pub type std_numpunct_char_type<_CharT> = _CharT;
pub type std_numpunct_string_type = std_basic_string<_CharT>;
pub type std_numpunct___cache_type<_CharT> = std___numpunct_cache<_CharT>;
unsafe extern "C" {
    #[link_name = "\u{1}id"]
    pub static mut std_id: std_locale_id;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_numpunct_byname<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_numpunct<_CharT>,
}
pub type std_numpunct_byname_char_type<_CharT> = _CharT;
pub type std_numpunct_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_get {
    pub _base: std_locale_facet,
}
pub type std_time_get_char_type<_CharT> = _CharT;
pub type std_time_get_iter_type<_InIter> = _InIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_get_byname {
    pub _base: std_time_get,
}
pub type std_time_get_byname_char_type<_CharT> = _CharT;
pub type std_time_get_byname_iter_type<_InIter> = _InIter;
pub type std_moneypunct_char_type<_CharT> = _CharT;
pub type std_moneypunct_string_type = std_basic_string<_CharT>;
pub type std_moneypunct___cache_type = u8;
unsafe extern "C" {
    #[link_name = "\u{1}intl"]
    pub static std_intl: bool;
}
pub type std_moneypunct_byname_char_type<_CharT> = _CharT;
pub type std_moneypunct_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_money_get {
    pub _base: std_locale_facet,
}
pub type std_money_get_char_type<_CharT> = _CharT;
pub type std_money_get_iter_type<_InIter> = _InIter;
pub type std_money_get_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_money_put {
    pub _base: std_locale_facet,
}
pub type std_money_put_char_type<_CharT> = _CharT;
pub type std_money_put_iter_type<_OutIter> = _OutIter;
pub type std_money_put_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_messages {
    pub _base: std_locale_facet,
    pub _M_c_locale_messages: std___c_locale,
    pub _M_name_messages: *const ::std::os::raw::c_char,
}
pub type std_messages_char_type<_CharT> = _CharT;
pub type std_messages_string_type = std_basic_string<_CharT>;
#[repr(C)]
#[derive(Debug)]
pub struct std_messages_byname {
    pub _base: std_messages,
}
pub type std_messages_byname_char_type<_CharT> = _CharT;
pub type std_messages_byname_string_type = std_basic_string<_CharT>;
#[repr(C)]
pub struct std_wstring_convert<_Codecvt, _Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Codecvt>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _M_cvt: std___detail__Scoped_ptr<_Codecvt>,
    pub _M_byte_err_string: std_wstring_convert_byte_string,
    pub _M_wide_err_string: std_wstring_convert_wide_string<_Elem>,
    pub _M_state: std_wstring_convert_state_type,
    pub _M_count: usize,
    pub _M_with_cvtstate: bool,
    pub _M_with_strings: bool,
}
pub type std_wstring_convert_byte_string = std_basic_string<_CharT>;
pub type std_wstring_convert_wide_string<_Elem> = std_basic_string<_Elem>;
pub type std_wstring_convert_state_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_wstring_convert_int_type<_Elem> = std_wstring_convert_wide_string<_Elem>;
#[repr(C)]
pub struct std_basic_stringbuf<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_streambuf<_CharT>,
    pub _M_mode: std_ios_base_openmode,
    pub _M_string: std_basic_stringbuf___string_type<_CharT>,
}
pub type std_basic_stringbuf_allocator_traits = std_allocator_traits;
pub type std_basic_stringbuf__Noexcept_swap = std___or_;
pub type std_basic_stringbuf_char_type<_CharT> = _CharT;
pub type std_basic_stringbuf_traits_type<_Traits> = _Traits;
pub type std_basic_stringbuf_allocator_type<_Alloc> = _Alloc;
pub type std_basic_stringbuf_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringbuf_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringbuf_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringbuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_stringbuf_char_type<_CharT>>;
pub type std_basic_stringbuf___string_type<_CharT> =
    std_basic_string<std_basic_stringbuf_char_type<_CharT>>;
pub type std_basic_stringbuf___size_type<_CharT> = std_basic_stringbuf___string_type<_CharT>;
#[repr(C)]
pub struct std_basic_stringbuf___xfer_bufptrs<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_to: *mut std_basic_stringbuf<_CharT>,
    pub _M_goff: [std_basic_stringbuf_off_type; 3usize],
    pub _M_poff: [std_basic_stringbuf_off_type; 3usize],
}
#[repr(C)]
pub struct std_basic_istringstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_istream<_CharT>,
    pub _M_stringbuf: std_basic_istringstream___stringbuf_type<_CharT>,
}
pub type std_basic_istringstream_char_type<_CharT> = _CharT;
pub type std_basic_istringstream_traits_type<_Traits> = _Traits;
pub type std_basic_istringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_istringstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istringstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istringstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istringstream___string_type<_CharT> = std_basic_string<_CharT>;
pub type std_basic_istringstream___stringbuf_type<_CharT> = std_basic_stringbuf<_CharT>;
pub type std_basic_istringstream___istream_type<_CharT> =
    std_basic_istream<std_basic_istringstream_char_type<_CharT>>;
#[repr(C)]
pub struct std_basic_ostringstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_ostream<_CharT>,
    pub _M_stringbuf: std_basic_ostringstream___stringbuf_type<_CharT>,
}
pub type std_basic_ostringstream_char_type<_CharT> = _CharT;
pub type std_basic_ostringstream_traits_type<_Traits> = _Traits;
pub type std_basic_ostringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_ostringstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostringstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostringstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostringstream___string_type<_CharT> = std_basic_string<_CharT>;
pub type std_basic_ostringstream___stringbuf_type<_CharT> = std_basic_stringbuf<_CharT>;
pub type std_basic_ostringstream___ostream_type<_CharT> =
    std_basic_ostream<std_basic_ostringstream_char_type<_CharT>>;
#[repr(C)]
pub struct std_basic_stringstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_iostream<_CharT>,
    pub _M_stringbuf: std_basic_stringstream___stringbuf_type<_CharT>,
}
pub type std_basic_stringstream_char_type<_CharT> = _CharT;
pub type std_basic_stringstream_traits_type<_Traits> = _Traits;
pub type std_basic_stringstream_allocator_type<_Alloc> = _Alloc;
pub type std_basic_stringstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_stringstream___string_type<_CharT> = std_basic_string<_CharT>;
pub type std_basic_stringstream___stringbuf_type<_CharT> = std_basic_stringbuf<_CharT>;
pub type std_basic_stringstream___iostream_type<_CharT> =
    std_basic_iostream<std_basic_stringstream_char_type<_CharT>>;
#[repr(C)]
pub struct std__List_base {
    pub _M_impl: std__List_base__List_impl,
}
pub type std__List_base__Tp_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__List_base__Tp_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__List_base__Node_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__List_base__Node_alloc_traits = __gnu_cxx___alloc_traits;
#[repr(C)]
pub struct std__List_base__List_impl {
    pub _M_node: std___detail__List_node_header,
}
pub type std__List_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_list {
    pub _base: std__List_base,
}
pub type std_list__Base = std__List_base;
pub type std_list__Tp_alloc_type = std_list__Base;
pub type std_list__Tp_alloc_traits = std_list__Base;
pub type std_list__Node_alloc_type = std_list__Base;
pub type std_list__Node_alloc_traits = std_list__Base;
pub type std_list_value_type<_Tp> = _Tp;
pub type std_list_pointer = std_list__Tp_alloc_traits;
pub type std_list_const_pointer = std_list__Tp_alloc_traits;
pub type std_list_reference = std_list__Tp_alloc_traits;
pub type std_list_const_reference = std_list__Tp_alloc_traits;
pub type std_list_iterator = std__List_iterator;
pub type std_list_const_iterator = std__List_const_iterator;
pub type std_list_const_reverse_iterator = std_reverse_iterator<std_list_const_iterator>;
pub type std_list_reverse_iterator = std_reverse_iterator<std_list_iterator>;
pub type std_list_size_type = usize;
pub type std_list_difference_type = isize;
pub type std_list_allocator_type<_Alloc> = _Alloc;
pub type std_list__Node = std__List_node;
pub type std_list___remove_return_type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct std_list__Finalize_merge {
    pub _M_dest: *mut std_list,
    pub _M_src: *mut std_list,
    pub _M_next: *const std_list_iterator,
}
pub type std_string = std_basic_string<::std::os::raw::c_char>;
pub type std_wstring = std_basic_string<u32>;
pub type std_u16string = std_basic_string<u16>;
pub type std_u32string = std_basic_string<u32>;
pub type std_streamoff = ::std::os::raw::c_long;
pub type std_streamsize = isize;
#[repr(C)]
#[derive(Debug)]
pub struct std_fpos<_StateT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
    pub _M_off: std_streamoff,
    pub _M_state: _StateT,
}
pub type std_streampos = std_fpos<__mbstate_t>;
pub type std_wstreampos = std_fpos<__mbstate_t>;
pub type std_u16streampos = std_fpos<__mbstate_t>;
pub type std_u32streampos = std_fpos<__mbstate_t>;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std___bool_constant = u8;
pub type std_bool_constant = u8;
pub type std___enable_if_t = u8;
pub type std___conditional_type<_Tp> = _Tp;
pub type std___conditional_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_identity {
    pub _address: u8,
}
pub type std___type_identity_type<_Type> = _Type;
pub type std___type_identity_t = std___type_identity;
pub type std___detail___first_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___disjunction_impl {
    pub _address: u8,
}
pub type std___detail___disjunction_impl_type<_B1> = _B1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___conjunction_impl {
    pub _address: u8,
}
pub type std___detail___conjunction_impl_type<_B1> = _B1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___detail___variant__Never_valueless_alt_open0_std_any_close0",
    ][::std::mem::size_of::<std___detail___variant__Never_valueless_alt>() - 1usize];
    [
        "Align of template specialization: std___detail___variant__Never_valueless_alt_open0_std_any_close0",
    ][::std::mem::align_of::<std___detail___variant__Never_valueless_alt>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant___variant_cookie {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail___variant___variant_cookie"]
        [::std::mem::size_of::<std___detail___variant___variant_cookie>() - 1usize];
    ["Alignment of std___detail___variant___variant_cookie"]
        [::std::mem::align_of::<std___detail___variant___variant_cookie>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant___variant_idx_cookie {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail___variant___variant_idx_cookie"]
        [::std::mem::size_of::<std___detail___variant___variant_idx_cookie>() - 1usize];
    ["Alignment of std___detail___variant___variant_idx_cookie"]
        [::std::mem::align_of::<std___detail___variant___variant_idx_cookie>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant___deduce_visit_result {
    pub _address: u8,
}
pub type std___detail___variant___deduce_visit_result_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant__Traits {
    pub _address: u8,
}
#[repr(C)]
pub union std___detail___variant__Variadic_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant__Never_valueless_alt {
    pub _address: u8,
}
pub type std___detail___variant___select_index = u8;
pub type std___detail___variant__Variant_storage_alias = u8;
pub type std___detail___variant__Copy_ctor_base__Base =
    std___detail___variant__Variant_storage_alias;
pub type std___detail___variant__Copy_ctor_alias = u8;
pub type std___detail___variant__Move_ctor_base__Base = std___detail___variant__Copy_ctor_alias;
pub type std___detail___variant__Move_ctor_alias = u8;
pub type std___detail___variant__Copy_assign_base__Base = std___detail___variant__Move_ctor_alias;
pub type std___detail___variant__Copy_assign_alias = u8;
pub type std___detail___variant__Move_assign_base__Base = std___detail___variant__Copy_assign_alias;
pub type std___detail___variant__Move_assign_alias = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant__Variant_base {
    pub _address: u8,
}
pub type std___detail___variant__Variant_base__Base = std___detail___variant__Move_assign_alias;
#[repr(C)]
#[derive(Debug)]
pub struct std___detail___variant__Arr<_Ti> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ti>>,
    pub _M_x: [_Ti; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant__Build_FUNs {
    pub _address: u8,
}
pub type std___detail___variant__FUN_type = std___detail___variant__Build_FUNs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant___gen_vtable_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant___gen_vtable {
    pub _address: u8,
}
pub type std___detail___variant___gen_vtable__Array_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___variant__Variant_hash_base {
    pub _address: u8,
}
pub type std___detail___variant___get_t = std___conditional_t;
pub type std___detail___variant___visit_result_t = std_invoke_result_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Identity {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Identity"][::std::mem::size_of::<std___detail__Identity>() - 1usize];
    ["Alignment of std___detail__Identity"]
        [::std::mem::align_of::<std___detail__Identity>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Select1st___1st_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Select1st"][::std::mem::size_of::<std___detail__Select1st>() - 1usize];
    ["Alignment of std___detail__Select1st"]
        [::std::mem::align_of::<std___detail__Select1st>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__ConvertToValueType {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__NodeBuilder {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___detail__NodeBuilder_open0_std___detail__Select1st_close0",
    ][::std::mem::size_of::<std___detail__NodeBuilder>() - 1usize];
    [
        "Align of template specialization: std___detail__NodeBuilder_open0_std___detail__Select1st_close0",
    ][::std::mem::align_of::<std___detail__NodeBuilder>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___detail__NodeBuilder_open0_std___detail__Identity_close0",
    ][::std::mem::size_of::<std___detail__NodeBuilder>() - 1usize];
    [
        "Align of template specialization: std___detail__NodeBuilder_open0_std___detail__Identity_close0",
    ][::std::mem::align_of::<std___detail__NodeBuilder>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___detail__ReuseOrAllocNode {
    pub _M_nodes: *mut std___detail__ReuseOrAllocNode___node_type,
    pub _M_h: *mut std___detail__ReuseOrAllocNode___hashtable_alloc,
}
pub type std___detail__ReuseOrAllocNode___node_alloc_type<_NodeAlloc> = _NodeAlloc;
pub type std___detail__ReuseOrAllocNode___hashtable_alloc = std___detail__Hashtable_alloc;
pub type std___detail__ReuseOrAllocNode___node_alloc_traits =
    std___detail__ReuseOrAllocNode___hashtable_alloc;
pub type std___detail__ReuseOrAllocNode___node_type =
    std___detail__ReuseOrAllocNode___hashtable_alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__AllocNode {
    pub _M_h: *mut std___detail__AllocNode___hashtable_alloc,
}
pub type std___detail__AllocNode___hashtable_alloc = std___detail__Hashtable_alloc;
pub type std___detail__AllocNode___node_type = std___detail__AllocNode___hashtable_alloc;
pub type std___detail__Hashtable_traits___hash_cached = std___bool_constant;
pub type std___detail__Hashtable_traits___constant_iterators = std___bool_constant;
pub type std___detail__Hashtable_traits___unique_keys = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Hashtable_hash_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Hash_node_base {
    pub _M_nxt: *mut std___detail__Hash_node_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Hash_node_base"]
        [::std::mem::size_of::<std___detail__Hash_node_base>() - 8usize];
    ["Alignment of std___detail__Hash_node_base"]
        [::std::mem::align_of::<std___detail__Hash_node_base>() - 8usize];
    ["Offset of field: std___detail__Hash_node_base::_M_nxt"]
        [::std::mem::offset_of!(std___detail__Hash_node_base, _M_nxt) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Hash_node_value_base {
    pub _M_storage: __gnu_cxx___aligned_buffer,
}
pub type std___detail__Hash_node_value_base_value_type<_Value> = _Value;
pub type std___detail__Node_iterator_base___node_type = u8;
pub type std___detail__Node_iterator___base_type = u8;
pub type std___detail__Node_iterator___node_type = std___detail__Node_iterator___base_type;
pub type std___detail__Node_iterator_value_type<_Value> = _Value;
pub type std___detail__Node_iterator_difference_type = isize;
pub type std___detail__Node_iterator_iterator_category = std_forward_iterator_tag;
pub type std___detail__Node_iterator_pointer = std___conditional_t;
pub type std___detail__Node_iterator_reference = std___conditional_t;
pub type std___detail__Node_const_iterator___base_type = u8;
pub type std___detail__Node_const_iterator___node_type =
    std___detail__Node_const_iterator___base_type;
pub type std___detail__Node_const_iterator_value_type<_Value> = _Value;
pub type std___detail__Node_const_iterator_difference_type = isize;
pub type std___detail__Node_const_iterator_iterator_category = std_forward_iterator_tag;
pub type std___detail__Node_const_iterator_pointer<_Value> =
    *const std___detail__Node_const_iterator_value_type<_Value>;
pub type std___detail__Node_const_iterator_reference<_Value> =
    *const std___detail__Node_const_iterator_value_type<_Value>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Mod_range_hashing {
    pub _address: u8,
}
pub type std___detail__Mod_range_hashing_first_argument_type = usize;
pub type std___detail__Mod_range_hashing_second_argument_type = usize;
pub type std___detail__Mod_range_hashing_result_type = usize;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Mod_range_hashing"]
        [::std::mem::size_of::<std___detail__Mod_range_hashing>() - 1usize];
    ["Alignment of std___detail__Mod_range_hashing"]
        [::std::mem::align_of::<std___detail__Mod_range_hashing>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Default_ranged_hash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Default_ranged_hash"]
        [::std::mem::size_of::<std___detail__Default_ranged_hash>() - 1usize];
    ["Alignment of std___detail__Default_ranged_hash"]
        [::std::mem::align_of::<std___detail__Default_ranged_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Prime_rehash_policy {
    pub _M_max_load_factor: f32,
    pub _M_next_resize: usize,
}
pub type std___detail__Prime_rehash_policy___has_load_factor = std_true_type;
pub type std___detail__Prime_rehash_policy__State = usize;
pub const std___detail__Prime_rehash_policy__S_growth_factor: usize = 2;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Prime_rehash_policy"]
        [::std::mem::size_of::<std___detail__Prime_rehash_policy>() - 16usize];
    ["Alignment of std___detail__Prime_rehash_policy"]
        [::std::mem::align_of::<std___detail__Prime_rehash_policy>() - 8usize];
    ["Offset of field: std___detail__Prime_rehash_policy::_M_max_load_factor"]
        [::std::mem::offset_of!(std___detail__Prime_rehash_policy, _M_max_load_factor) - 0usize];
    ["Offset of field: std___detail__Prime_rehash_policy::_M_next_resize"]
        [::std::mem::offset_of!(std___detail__Prime_rehash_policy, _M_next_resize) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEm"]
    pub fn std___detail__Prime_rehash_policy__M_next_bkt(
        this: *const std___detail__Prime_rehash_policy,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm"]
    pub fn std___detail__Prime_rehash_policy__M_need_rehash(
        this: *const std___detail__Prime_rehash_policy,
        __n_bkt: usize,
        __n_elt: usize,
        __n_ins: usize,
    ) -> std_pair<bool, usize>;
}
impl std___detail__Prime_rehash_policy {
    #[inline]
    pub unsafe fn _M_next_bkt(&self, __n: usize) -> usize {
        std___detail__Prime_rehash_policy__M_next_bkt(self, __n)
    }
    #[inline]
    pub unsafe fn _M_need_rehash(
        &self,
        __n_bkt: usize,
        __n_elt: usize,
        __n_ins: usize,
    ) -> std_pair<bool, usize> {
        std___detail__Prime_rehash_policy__M_need_rehash(self, __n_bkt, __n_elt, __n_ins)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Mask_range_hashing {
    pub _address: u8,
}
pub type std___detail__Mask_range_hashing_first_argument_type = usize;
pub type std___detail__Mask_range_hashing_second_argument_type = usize;
pub type std___detail__Mask_range_hashing_result_type = usize;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Mask_range_hashing"]
        [::std::mem::size_of::<std___detail__Mask_range_hashing>() - 1usize];
    ["Alignment of std___detail__Mask_range_hashing"]
        [::std::mem::align_of::<std___detail__Mask_range_hashing>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Power2_rehash_policy {
    pub _M_max_load_factor: f32,
    pub _M_next_resize: usize,
}
pub type std___detail__Power2_rehash_policy___has_load_factor = std_true_type;
pub type std___detail__Power2_rehash_policy__State = usize;
pub const std___detail__Power2_rehash_policy__S_growth_factor: usize = 2;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Power2_rehash_policy"]
        [::std::mem::size_of::<std___detail__Power2_rehash_policy>() - 16usize];
    ["Alignment of std___detail__Power2_rehash_policy"]
        [::std::mem::align_of::<std___detail__Power2_rehash_policy>() - 8usize];
    ["Offset of field: std___detail__Power2_rehash_policy::_M_max_load_factor"]
        [::std::mem::offset_of!(std___detail__Power2_rehash_policy, _M_max_load_factor) - 0usize];
    ["Offset of field: std___detail__Power2_rehash_policy::_M_next_resize"]
        [::std::mem::offset_of!(std___detail__Power2_rehash_policy, _M_next_resize) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Insert_base {
    pub _address: u8,
}
pub type std___detail__Insert_base___hashtable_base = std___detail__Hashtable_base;
pub type std___detail__Insert_base___hashtable<_RehashPolicy> = std__Hashtable<_RehashPolicy>;
pub type std___detail__Insert_base___hash_cached = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__Insert_base___constant_iterators = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__Insert_base___hashtable_alloc = std___detail__Hashtable_alloc;
pub type std___detail__Insert_base_value_type = std___detail__Insert_base___hashtable_base;
pub type std___detail__Insert_base_size_type = std___detail__Insert_base___hashtable_base;
pub type std___detail__Insert_base___unique_keys = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__Insert_base___node_alloc_type = std___detail__Insert_base___hashtable_alloc;
pub type std___detail__Insert_base___node_gen_type = std___detail__AllocNode;
pub type std___detail__Insert_base_iterator = u8;
pub type std___detail__Insert_base_const_iterator = u8;
pub type std___detail__Insert_base___ireturn_type = std___conditional_t;
pub type std___detail___has_load_factor = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Rehash_base {
    pub _address: u8,
}
pub type std___detail__Hash_code_base___ebo_hash = u8;
pub type std___detail__Hash_code_base_hasher<_Hash> = _Hash;
pub type std___detail__Hash_code_base___hash_code = usize;
pub type std___detail___hash_code_for_local_iter = u8;
pub type std___detail__Local_iterator___base_type = u8;
pub type std___detail__Local_iterator___hash_code_base = std___detail__Local_iterator___base_type;
pub type std___detail__Local_iterator_value_type<_Value> = _Value;
pub type std___detail__Local_iterator_pointer = std___conditional_t;
pub type std___detail__Local_iterator_reference = std___conditional_t;
pub type std___detail__Local_iterator_difference_type = isize;
pub type std___detail__Local_iterator_iterator_category = std_forward_iterator_tag;
pub type std___detail__Local_const_iterator___base_type = u8;
pub type std___detail__Local_const_iterator___hash_code_base =
    std___detail__Local_const_iterator___base_type;
pub type std___detail__Local_const_iterator_value_type<_Value> = _Value;
pub type std___detail__Local_const_iterator_pointer<_Value> =
    *const std___detail__Local_const_iterator_value_type<_Value>;
pub type std___detail__Local_const_iterator_reference<_Value> =
    *const std___detail__Local_const_iterator_value_type<_Value>;
pub type std___detail__Local_const_iterator_difference_type = isize;
pub type std___detail__Local_const_iterator_iterator_category = std_forward_iterator_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Hashtable_base {
    pub _address: u8,
}
pub type std___detail__Hashtable_base_key_type<_Key> = _Key;
pub type std___detail__Hashtable_base_value_type<_Value> = _Value;
pub type std___detail__Hashtable_base_key_equal<_Equal> = _Equal;
pub type std___detail__Hashtable_base_size_type = usize;
pub type std___detail__Hashtable_base_difference_type = isize;
pub type std___detail__Hashtable_base___traits_type<_Traits> = _Traits;
pub type std___detail__Hashtable_base___hash_cached = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__Hashtable_base___hash_code_base = u8;
pub type std___detail__Hashtable_base___hash_code = std___detail__Hashtable_base___hash_code_base;
pub type std___detail__Hashtable_base__EqualEBO = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Hashtable_alloc {
    pub _address: u8,
}
pub type std___detail__Hashtable_alloc___ebo_node_alloc = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Hashtable_alloc___get_value_type {
    pub _address: u8,
}
pub type std___detail__Hashtable_alloc___node_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__Hashtable_alloc___node_alloc_type<_NodeAlloc> = _NodeAlloc;
pub type std___detail__Hashtable_alloc___node_alloc_traits = __gnu_cxx___alloc_traits;
pub type std___detail__Hashtable_alloc___value_alloc_traits = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__Hashtable_alloc___node_ptr = *mut std___detail__Hashtable_alloc___node_type;
pub type std___detail__Hashtable_alloc___node_base = std___detail__Hash_node_base;
pub type std___detail__Hashtable_alloc___node_base_ptr =
    *mut std___detail__Hashtable_alloc___node_base;
pub type std___detail__Hashtable_alloc___buckets_alloc_type = std___alloc_rebind;
pub type std___detail__Hashtable_alloc___buckets_alloc_traits = std_allocator_traits;
pub type std___detail__Hashtable_alloc___buckets_ptr =
    *mut std___detail__Hashtable_alloc___node_base_ptr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__MakeUniq {
    pub _address: u8,
}
pub type std___detail__MakeUniq___single_object = std_unique_ptr;
pub type std___detail___unique_ptr_t = std___detail__MakeUniq;
pub type std___detail___unique_ptr_array_t = std___detail__MakeUniq;
pub type std___detail___invalid_make_unique_t = std___detail__MakeUniq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___floating_point_constant {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail___numeric_constants {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__UnClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__BinClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__SClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__GClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__IClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__ValFunClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__RefFunClos {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__ValArrayRef {
    pub _address: u8,
}
pub type std___detail__ValArrayRef___type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__FunBase<_Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_expr: std___detail__ValArrayRef,
    pub _M_func:
        ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> std___detail__FunBase_value_type>,
}
pub type std___detail__FunBase_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__UnBase {
    pub _M_expr: std___detail__ValArrayRef,
}
pub type std___detail__UnBase__Vt = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__UnBase_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__BinBase {
    pub _M_expr1: std___detail__ValArrayRef,
    pub _M_expr2: std___detail__ValArrayRef,
}
pub type std___detail__BinBase__Vt = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__BinBase_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std___detail__BinBase2 {
    pub _M_expr1: std___detail__ValArrayRef,
    pub _M_expr2: std___detail__BinBase2__Vt,
}
pub type std___detail__BinBase2__Vt = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__BinBase2_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std___detail__BinBase1 {
    pub _M_expr1: std___detail__BinBase1__Vt,
    pub _M_expr2: std___detail__ValArrayRef,
}
pub type std___detail__BinBase1__Vt = __BindgenOpaqueArray<u8, 0usize>;
pub type std___detail__BinBase1_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__SBase {
    pub _M_expr: std___detail__ValArrayRef,
    pub _M_slice: *const std_slice,
}
pub type std___detail__SBase_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__GBase {
    pub _M_expr: std___detail__ValArrayRef,
    pub _M_index: *const std_valarray<usize>,
}
pub type std___detail__GBase_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__IBase {
    pub _M_expr: std___detail__ValArrayRef,
    pub _M_index: *const std_valarray<usize>,
}
pub type std___detail__IBase_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug)]
pub struct std___detail__Scoped_ptr<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_ptr: *mut _Tp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Quoted_string<_String, _CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_String>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_string: _String,
    pub _M_delim: _CharT,
    pub _M_escape: _CharT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__List_node_base {
    pub _M_next: *mut std___detail__List_node_base,
    pub _M_prev: *mut std___detail__List_node_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__List_node_base"]
        [::std::mem::size_of::<std___detail__List_node_base>() - 16usize];
    ["Alignment of std___detail__List_node_base"]
        [::std::mem::align_of::<std___detail__List_node_base>() - 8usize];
    ["Offset of field: std___detail__List_node_base::_M_next"]
        [::std::mem::offset_of!(std___detail__List_node_base, _M_next) - 0usize];
    ["Offset of field: std___detail__List_node_base::_M_prev"]
        [::std::mem::offset_of!(std___detail__List_node_base, _M_prev) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8__detail15_List_node_base4swapERS0_S1_"]
    pub fn std___detail__List_node_base_swap(
        __x: *mut std___detail__List_node_base,
        __y: *mut std___detail__List_node_base,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_"]
    pub fn std___detail__List_node_base__M_transfer(
        this: *mut std___detail__List_node_base,
        __first: *mut std___detail__List_node_base,
        __last: *mut std___detail__List_node_base,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8__detail15_List_node_base10_M_reverseEv"]
    pub fn std___detail__List_node_base__M_reverse(this: *mut std___detail__List_node_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8__detail15_List_node_base7_M_hookEPS0_"]
    pub fn std___detail__List_node_base__M_hook(
        this: *mut std___detail__List_node_base,
        __position: *mut std___detail__List_node_base,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8__detail15_List_node_base9_M_unhookEv"]
    pub fn std___detail__List_node_base__M_unhook(this: *mut std___detail__List_node_base);
}
impl std___detail__List_node_base {
    #[inline]
    pub unsafe fn swap(
        __x: *mut std___detail__List_node_base,
        __y: *mut std___detail__List_node_base,
    ) {
        std___detail__List_node_base_swap(__x, __y)
    }
    #[inline]
    pub unsafe fn _M_transfer(
        &mut self,
        __first: *mut std___detail__List_node_base,
        __last: *mut std___detail__List_node_base,
    ) {
        std___detail__List_node_base__M_transfer(self, __first, __last)
    }
    #[inline]
    pub unsafe fn _M_reverse(&mut self) {
        std___detail__List_node_base__M_reverse(self)
    }
    #[inline]
    pub unsafe fn _M_hook(&mut self, __position: *mut std___detail__List_node_base) {
        std___detail__List_node_base__M_hook(self, __position)
    }
    #[inline]
    pub unsafe fn _M_unhook(&mut self) {
        std___detail__List_node_base__M_unhook(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__List_node_header {
    pub _base: std___detail__List_node_base,
    pub _M_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__List_node_header"]
        [::std::mem::size_of::<std___detail__List_node_header>() - 24usize];
    ["Alignment of std___detail__List_node_header"]
        [::std::mem::align_of::<std___detail__List_node_header>() - 8usize];
    ["Offset of field: std___detail__List_node_header::_M_size"]
        [::std::mem::offset_of!(std___detail__List_node_header, _M_size) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Scratch_list {
    pub _base: std___detail__List_node_base,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detail__Scratch_list__Ptr_cmp<_Cmp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Cmp>>,
    pub _M_cmp: _Cmp,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___detail__Scratch_list"]
        [::std::mem::size_of::<std___detail__Scratch_list>() - 16usize];
    ["Alignment of std___detail__Scratch_list"]
        [::std::mem::align_of::<std___detail__Scratch_list>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___or_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___and_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___not_ {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_conjunction {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_conjunction_open0_close0"]
        [::std::mem::size_of::<std_conjunction>() - 1usize];
    ["Align of template specialization: std_conjunction_open0_close0"]
        [::std::mem::align_of::<std_conjunction>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_disjunction {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_disjunction_open0_close0"]
        [::std::mem::size_of::<std_disjunction>() - 1usize];
    ["Align of template specialization: std_disjunction_open0_close0"]
        [::std::mem::align_of::<std_disjunction>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negation {
    pub _address: u8,
}
pub type std___remove_cv_t = std_remove_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_void_open0_void_close0"]
        [::std::mem::size_of::<std_is_void>() - 1usize];
    ["Align of template specialization: std_is_void_open0_void_close0"]
        [::std::mem::align_of::<std_is_void>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_void_open0_const_void_close0"]
        [::std::mem::size_of::<std_is_void>() - 1usize];
    ["Align of template specialization: std_is_void_open0_const_void_close0"]
        [::std::mem::align_of::<std_is_void>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_void_open0_volatile_void_close0"]
        [::std::mem::size_of::<std_is_void>() - 1usize];
    ["Align of template specialization: std_is_void_open0_volatile_void_close0"]
        [::std::mem::align_of::<std_is_void>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_void_open0_const_volatile_void_close0"]
        [::std::mem::size_of::<std_is_void>() - 1usize];
    ["Align of template specialization: std_is_void_open0_const_volatile_void_close0"]
        [::std::mem::align_of::<std_is_void>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integral_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_bool__close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_bool__close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char16_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char16_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_char32_t_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_char32_t_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_short_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_short_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_int_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_int_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_long_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_long_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integral_helper_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___is_integral_helper>() - 1usize];
    ["Align of template specialization: std___is_integral_helper_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___is_integral_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating_point_helper {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_float_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_float_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_double_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_double_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_point_helper_open0_long_double_close0"]
        [::std::mem::size_of::<std___is_floating_point_helper>() - 1usize];
    ["Align of template specialization: std___is_floating_point_helper_open0_long_double_close0"]
        [::std::mem::align_of::<std___is_floating_point_helper>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_object_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_function_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_null_pointer_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std_is_null_pointer>() - 1usize];
    ["Align of template specialization: std_is_null_pointer_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std_is_null_pointer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_null_pointer_open0_const_std__nullptr_t_close0"]
        [::std::mem::size_of::<std_is_null_pointer>() - 1usize];
    ["Align of template specialization: std_is_null_pointer_open0_const_std__nullptr_t_close0"]
        [::std::mem::align_of::<std_is_null_pointer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_null_pointer_open0_volatile_std__nullptr_t_close0"]
        [::std::mem::size_of::<std_is_null_pointer>() - 1usize];
    ["Align of template specialization: std_is_null_pointer_open0_volatile_std__nullptr_t_close0"]
        [::std::mem::align_of::<std_is_null_pointer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_is_null_pointer_open0_const_volatile_std__nullptr_t_close0",
    ][::std::mem::size_of::<std_is_null_pointer>() - 1usize];
    [
        "Align of template specialization: std_is_null_pointer_open0_const_volatile_std__nullptr_t_close0",
    ][::std::mem::align_of::<std_is_null_pointer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t {
    pub _base: std_is_null_pointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_member_pointer_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
pub type std___is_one_of = std___or_;
pub type std___is_signed_integer = std___is_one_of;
pub type std___is_unsigned_integer = std___is_one_of;
pub type std___is_standard_integer = std___or_;
pub type std___void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_known_bounds {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_unknown_bounds {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_destructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_destructible_impl"]
        [::std::mem::size_of::<std___do_is_destructible_impl>() - 1usize];
    ["Alignment of std___do_is_destructible_impl"]
        [::std::mem::align_of::<std___do_is_destructible_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_destructible_impl {
    pub _address: u8,
}
pub type std___is_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_nt_destructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_nt_destructible_impl"]
        [::std::mem::size_of::<std___do_is_nt_destructible_impl>() - 1usize];
    ["Alignment of std___do_is_nt_destructible_impl"]
        [::std::mem::align_of::<std___do_is_nt_destructible_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nt_destructible_impl {
    pub _address: u8,
}
pub type std___is_nt_destructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
pub type std___is_constructible_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___add_lvalue_reference_helper {
    pub _address: u8,
}
pub type std___add_lvalue_reference_helper_type<_Tp> = _Tp;
pub type std___add_lval_ref_t = std___add_lvalue_reference_helper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___add_rvalue_reference_helper {
    pub _address: u8,
}
pub type std___add_rvalue_reference_helper_type<_Tp> = _Tp;
pub type std___add_rval_ref_t = std___add_rvalue_reference_helper;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
pub type std___is_nothrow_constructible_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
pub type std___is_assignable_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
pub type std___is_nothrow_assignable_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
pub type std___is_trivially_constructible_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_is_implicitly_default_constructible_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_is_implicitly_default_constructible_impl"]
        [::std::mem::size_of::<std___do_is_implicitly_default_constructible_impl>() - 1usize];
    ["Alignment of std___do_is_implicitly_default_constructible_impl"]
        [::std::mem::align_of::<std___do_is_implicitly_default_constructible_impl>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt45__do_is_implicitly_default_constructible_impl6__testEz"]
    pub fn std___do_is_implicitly_default_constructible_impl___test() -> std_false_type;
}
impl std___do_is_implicitly_default_constructible_impl {
    #[inline]
    pub unsafe fn __test() -> std_false_type {
        std___do_is_implicitly_default_constructible_impl___test()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_impl {
    pub _address: u8,
}
pub type std___is_implicitly_default_constructible_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible_safe {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
pub type std___is_trivially_assignable_impl = std___bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _base: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
pub type std___is_array_convertible = std_is_convertible;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type<_Tp> = _Tp;
pub type std_remove_const_t = std_remove_const;
pub type std_remove_volatile_t = std_remove_volatile;
pub type std_remove_cv_t = std_remove_cv;
pub type std_add_const_t = std_add_const;
pub type std_add_volatile_t = std_add_volatile;
pub type std_add_cv_t = std_add_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std_add_lvalue_reference_type = std___add_lval_ref_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
pub type std_add_rvalue_reference_type = std___add_rval_ref_t;
pub type std_remove_reference_t = std_remove_reference;
pub type std_add_lvalue_reference_t = std_add_lvalue_reference;
pub type std_add_rvalue_reference_t = std_add_rvalue_reference;
pub type std___match_cv_qualifiers___match = u8;
pub type std___match_cv_qualifiers___type = std___match_cv_qualifiers___match;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned {
    pub _address: u8,
}
pub type std___make_unsigned___type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_signed_char_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_signed_char_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_short_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_short_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_int_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_int_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_long_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_long_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_long_long_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_long_long_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned_selector_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_unsigned_selector_base__List {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___make_unsigned_selector_base"]
        [::std::mem::size_of::<std___make_unsigned_selector_base>() - 1usize];
    ["Alignment of std___make_unsigned_selector_base"]
        [::std::mem::align_of::<std___make_unsigned_selector_base>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char16_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char16_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_unsigned_open0_char32_t_close0"]
        [::std::mem::size_of::<std___make_unsigned>() - 1usize];
    ["Align of template specialization: std___make_unsigned_open0_char32_t_close0"]
        [::std::mem::align_of::<std___make_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_signed {
    pub _address: u8,
}
pub type std___make_signed___type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char16_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char16_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_signed_open0_char32_t_close0"]
        [::std::mem::size_of::<std___make_signed>() - 1usize];
    ["Align of template specialization: std___make_signed_open0_char32_t_close0"]
        [::std::mem::align_of::<std___make_signed>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = u8;
pub type std_make_signed_t = std_make_signed;
pub type std_make_unsigned_t = std_make_unsigned;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Tp> = _Tp;
pub type std_remove_extent_t = std_remove_extent;
pub type std_remove_all_extents_t = std_remove_all_extents;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___remove_pointer_helper {
    pub _address: u8,
}
pub type std___remove_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___add_pointer_helper {
    pub _address: u8,
}
pub type std___add_pointer_helper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_t = std_remove_pointer;
pub type std_add_pointer_t = std_add_pointer;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___aligned_storage_msa___type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std___aligned_storage_msa___type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___aligned_storage_msa___type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___aligned_storage_msa___type"]
        [::std::mem::size_of::<std___aligned_storage_msa___type>() - 8usize];
    ["Alignment of std___aligned_storage_msa___type"]
        [::std::mem::align_of::<std___aligned_storage_msa___type>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_aligned_storage_type {
    pub __data: *mut ::std::os::raw::c_uchar,
    pub __align: std_aligned_storage_type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_aligned_storage_type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_aligned_storage_type"]
        [::std::mem::size_of::<std_aligned_storage_type>() - 8usize];
    ["Alignment of std_aligned_storage_type"]
        [::std::mem::align_of::<std_aligned_storage_type>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strictest_alignment {
    pub _address: u8,
}
pub type std_aligned_union___strictest = std___strictest_alignment;
pub type std_aligned_union_type = u8;
unsafe extern "C" {
    #[link_name = "\u{1}alignment_value"]
    pub static std_alignment_value: usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___decay_selector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay_type = std___decay_selector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___strip_reference_wrapper {
    pub _address: u8,
}
pub type std___strip_reference_wrapper___type<_Tp> = _Tp;
pub type std___decay_t = std_decay;
pub type std___decay_and_strip = std___strip_reference_wrapper;
pub type std__Require = std___enable_if_t;
pub type std___remove_cvref_t = std_remove_cv;
pub type std_conditional_type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___success_type {
    pub _address: u8,
}
pub type std___success_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___failure_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___failure_type"][::std::mem::size_of::<std___failure_type>() - 1usize];
    ["Alignment of std___failure_type"][::std::mem::align_of::<std___failure_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_common_type_impl {
    pub _address: u8,
}
pub type std___do_common_type_impl___cond_t<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___do_common_type_impl"]
        [::std::mem::size_of::<std___do_common_type_impl>() - 1usize];
    ["Alignment of std___do_common_type_impl"]
        [::std::mem::align_of::<std___do_common_type_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_common_type_open0_close0"]
        [::std::mem::size_of::<std_common_type>() - 1usize];
    ["Align of template specialization: std_common_type_open0_close0"]
        [::std::mem::align_of::<std_common_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_impl {
    pub _address: u8,
}
pub type std___common_type_impl_type = std_common_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_pack {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_fold {
    pub _address: u8,
}
pub type std___underlying_type_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___declval_protector {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_ref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memfun_ref"][::std::mem::size_of::<std___invoke_memfun_ref>() - 1usize];
    ["Alignment of std___invoke_memfun_ref"]
        [::std::mem::align_of::<std___invoke_memfun_ref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memfun_deref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memfun_deref"]
        [::std::mem::size_of::<std___invoke_memfun_deref>() - 1usize];
    ["Alignment of std___invoke_memfun_deref"]
        [::std::mem::align_of::<std___invoke_memfun_deref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_ref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memobj_ref"][::std::mem::size_of::<std___invoke_memobj_ref>() - 1usize];
    ["Alignment of std___invoke_memobj_ref"]
        [::std::mem::align_of::<std___invoke_memobj_ref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_memobj_deref {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_memobj_deref"]
        [::std::mem::size_of::<std___invoke_memobj_deref>() - 1usize];
    ["Alignment of std___invoke_memobj_deref"]
        [::std::mem::align_of::<std___invoke_memobj_deref>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_other {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___invoke_other"][::std::mem::size_of::<std___invoke_other>() - 1usize];
    ["Alignment of std___invoke_other"][::std::mem::align_of::<std___invoke_other>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_success {
    pub _address: u8,
}
pub type std___result_of_success___invoke_type<_Tag> = _Tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memfun_ref_impl"]
        [::std::mem::size_of::<std___result_of_memfun_ref_impl>() - 1usize];
    ["Alignment of std___result_of_memfun_ref_impl"]
        [::std::mem::align_of::<std___result_of_memfun_ref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_ref {
    pub _address: u8,
}
pub type std___result_of_memfun_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memfun_deref_impl"]
        [::std::mem::size_of::<std___result_of_memfun_deref_impl>() - 1usize];
    ["Alignment of std___result_of_memfun_deref_impl"]
        [::std::mem::align_of::<std___result_of_memfun_deref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun_deref {
    pub _address: u8,
}
pub type std___result_of_memfun_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memobj_ref_impl"]
        [::std::mem::size_of::<std___result_of_memobj_ref_impl>() - 1usize];
    ["Alignment of std___result_of_memobj_ref_impl"]
        [::std::mem::align_of::<std___result_of_memobj_ref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_ref {
    pub _address: u8,
}
pub type std___result_of_memobj_ref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_memobj_deref_impl"]
        [::std::mem::size_of::<std___result_of_memobj_deref_impl>() - 1usize];
    ["Alignment of std___result_of_memobj_deref_impl"]
        [::std::mem::align_of::<std___result_of_memobj_deref_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj_deref {
    pub _address: u8,
}
pub type std___result_of_memobj_deref_type<_MemPtr> = _MemPtr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memobj {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_memfun {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___inv_unwrap {
    pub _address: u8,
}
pub type std___inv_unwrap_type<_Tp> = _Tp;
pub type std___result_of_impl_type = std___failure_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___result_of_other_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___result_of_other_impl"]
        [::std::mem::size_of::<std___result_of_other_impl>() - 1usize];
    ["Alignment of std___result_of_other_impl"]
        [::std::mem::align_of::<std___result_of_other_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_result {
    pub _address: u8,
}
pub type std_aligned_storage_t = u8;
pub type std_aligned_union_t = u8;
pub type std_decay_t = std_decay;
pub type std_enable_if_t = u8;
pub type std_conditional_t = u8;
pub type std_common_type_t = std_common_type;
pub type std_underlying_type_t = std_underlying_type;
pub type std_result_of_t = std_result_of;
pub type std_void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___detector {
    pub _address: u8,
}
pub type std___detector_type<_Default> = _Default;
pub type std___detector___is_detected = std_false_type;
pub type std___detected_or = std___detector;
pub type std___detected_or_t = std___detected_or;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_tuple_like {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_swappable_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_details___do_is_swappable_impl"]
        [::std::mem::size_of::<std___swappable_details___do_is_swappable_impl>() - 1usize];
    ["Alignment of std___swappable_details___do_is_swappable_impl"]
        [::std::mem::align_of::<std___swappable_details___do_is_swappable_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_details___do_is_nothrow_swappable_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_details___do_is_nothrow_swappable_impl"]
        [::std::mem::size_of::<std___swappable_details___do_is_nothrow_swappable_impl>() - 1usize];
    ["Alignment of std___swappable_details___do_is_nothrow_swappable_impl"]
        [::std::mem::align_of::<std___swappable_details___do_is_nothrow_swappable_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_impl {
    pub _address: u8,
}
pub type std___is_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_swappable_with_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_with_details___do_is_swappable_with_impl"][::std::mem::size_of::<
        std___swappable_with_details___do_is_swappable_with_impl,
    >() - 1usize];
    ["Alignment of std___swappable_with_details___do_is_swappable_with_impl"][::std::mem::align_of::<
        std___swappable_with_details___do_is_swappable_with_impl,
    >() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___swappable_with_details___do_is_nothrow_swappable_with_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___swappable_with_details___do_is_nothrow_swappable_with_impl"][::std::mem::size_of::<
        std___swappable_with_details___do_is_nothrow_swappable_with_impl,
    >() - 1usize];
    ["Alignment of std___swappable_with_details___do_is_nothrow_swappable_with_impl"]
        [::std::mem::align_of::<std___swappable_with_details___do_is_nothrow_swappable_with_impl>(
        ) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable_with_impl {
    pub _address: u8,
}
pub type std___is_nothrow_swappable_with_impl_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_swappable_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_swappable_with {
    pub _address: u8,
}
pub type std___is_invocable_impl___nothrow_conv = std_false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___call_is_nothrow {
    pub _address: u8,
}
pub type std___call_is_nothrow_ = std___call_is_nothrow;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___nonesuchbase {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___nonesuchbase"][::std::mem::size_of::<std___nonesuchbase>() - 1usize];
    ["Alignment of std___nonesuchbase"][::std::mem::align_of::<std___nonesuchbase>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___nonesuch {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___nonesuch"][::std::mem::size_of::<std___nonesuch>() - 1usize];
    ["Alignment of std___nonesuch"][::std::mem::align_of::<std___nonesuch>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_invoke_result {
    pub _address: u8,
}
pub type std_invoke_result_t = std_invoke_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_invocable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_invocable {
    pub _address: u8,
}
pub type std___is_nt_invocable_impl = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_invocable_r {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_unique_object_representations {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_aggregate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_exception"][::std::mem::size_of::<std_exception>() - 8usize];
    ["Alignment of std_exception"][::std::mem::align_of::<std_exception>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_alloc"][::std::mem::size_of::<std_bad_alloc>() - 8usize];
    ["Alignment of std_bad_alloc"][::std::mem::align_of::<std_bad_alloc>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt9bad_allocD1Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_array_new_length"]
        [::std::mem::size_of::<std_bad_array_new_length>() - 8usize];
    ["Alignment of std_bad_array_new_length"]
        [::std::mem::align_of::<std_bad_array_new_length>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt20bad_array_new_lengthD1Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length_destructor(
        this: *mut std_bad_array_new_length,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt20bad_array_new_length4whatEv"]
    pub fn std_bad_array_new_length_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_align_val_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nothrow_t"][::std::mem::size_of::<std_nothrow_t>() - 1usize];
    ["Alignment of std_nothrow_t"][::std::mem::align_of::<std_nothrow_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15get_new_handlerv"]
    pub fn std_get_new_handler() -> std_new_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_bad_exceptionv"]
    pub fn std___throw_bad_exception() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17__throw_bad_allocv"]
    pub fn std___throw_bad_alloc() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt28__throw_bad_array_new_lengthv"]
    pub fn std___throw_bad_array_new_length() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt16__throw_bad_castv"]
    pub fn std___throw_bad_cast() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18__throw_bad_typeidv"]
    pub fn std___throw_bad_typeid() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_logic_errorPKc"]
    pub fn std___throw_logic_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_domain_errorPKc"]
    pub fn std___throw_domain_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_invalid_argumentPKc"]
    pub fn std___throw_invalid_argument(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_length_errorPKc"]
    pub fn std___throw_length_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_out_of_rangePKc"]
    pub fn std___throw_out_of_range(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt24__throw_out_of_range_fmtPKcz"]
    pub fn std___throw_out_of_range_fmt(arg1: *const ::std::os::raw::c_char, ...) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__throw_runtime_errorPKc"]
    pub fn std___throw_runtime_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_range_errorPKc"]
    pub fn std___throw_range_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt22__throw_overflow_errorPKc"]
    pub fn std___throw_overflow_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt23__throw_underflow_errorPKc"]
    pub fn std___throw_underflow_error(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKc"]
    pub fn std___throw_ios_failure(arg1: *const ::std::os::raw::c_char) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19__throw_ios_failurePKci"]
    pub fn std___throw_ios_failure1(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_system_errori"]
    pub fn std___throw_system_error(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20__throw_future_errori"]
    pub fn std___throw_future_error(arg1: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt25__throw_bad_function_callv"]
    pub fn std___throw_bad_function_call() -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_if_noexcept_cond {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___new_allocator {
    pub _address: u8,
}
pub type std___new_allocator_value_type<_Tp> = _Tp;
pub type std___new_allocator_size_type = usize;
pub type std___new_allocator_difference_type = isize;
pub type std___new_allocator_pointer<_Tp> = *mut _Tp;
pub type std___new_allocator_const_pointer<_Tp> = *const _Tp;
pub type std___new_allocator_reference<_Tp> = *mut _Tp;
pub type std___new_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___new_allocator_rebind {
    pub _address: u8,
}
pub type std___new_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std___allocator_base = std___new_allocator;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_value_type<_Tp> = _Tp;
pub type std_allocator_size_type = usize;
pub type std_allocator_difference_type = isize;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___true_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___true_type"][::std::mem::size_of::<std___true_type>() - 1usize];
    ["Alignment of std___true_type"][::std::mem::align_of::<std___true_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___false_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___false_type"][::std::mem::size_of::<std___false_type>() - 1usize];
    ["Alignment of std___false_type"][::std::mem::align_of::<std___false_type>() - 1usize];
};
pub type std___truth_type___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traitor {
    pub _address: u8,
}
pub const std___traitor___value: std___traitor__bindgen_ty_1 = 0;
pub type std___traitor__bindgen_ty_1 = i32;
pub type std___traitor___type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___are_same {
    pub _address: u8,
}
pub const std___are_same___value: std___are_same__bindgen_ty_1 = 0;
pub type std___are_same__bindgen_ty_1 = i32;
pub type std___are_same___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_void {
    pub _address: u8,
}
pub const std___is_void___value: std___is_void__bindgen_ty_1 = 0;
pub type std___is_void__bindgen_ty_1 = i32;
pub type std___is_void___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_void_open0_void_close0"]
        [::std::mem::size_of::<std___is_void>() - 1usize];
    ["Align of template specialization: std___is_void_open0_void_close0"]
        [::std::mem::align_of::<std___is_void>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_integer {
    pub _address: u8,
}
pub const std___is_integer___value: std___is_integer__bindgen_ty_1 = 0;
pub type std___is_integer__bindgen_ty_1 = i32;
pub type std___is_integer___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_bool__close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_bool__close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char16_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char16_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_char32_t_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_char32_t_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_short_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_short_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_int_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_int_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_long_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_long_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_integer_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___is_integer>() - 1usize];
    ["Align of template specialization: std___is_integer_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___is_integer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_floating {
    pub _address: u8,
}
pub const std___is_floating___value: std___is_floating__bindgen_ty_1 = 0;
pub type std___is_floating__bindgen_ty_1 = i32;
pub type std___is_floating___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_float_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_float_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_double_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_double_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_floating_open0_long_double_close0"]
        [::std::mem::size_of::<std___is_floating>() - 1usize];
    ["Align of template specialization: std___is_floating_open0_long_double_close0"]
        [::std::mem::align_of::<std___is_floating>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_pointer {
    pub _address: u8,
}
pub const std___is_pointer___value: std___is_pointer__bindgen_ty_1 = 0;
pub type std___is_pointer__bindgen_ty_1 = i32;
pub type std___is_pointer___type = std___false_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_char {
    pub _address: u8,
}
pub const std___is_char___value: std___is_char__bindgen_ty_1 = 0;
pub type std___is_char__bindgen_ty_1 = i32;
pub type std___is_char___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_char_open0_char_close0"]
        [::std::mem::size_of::<std___is_char>() - 1usize];
    ["Align of template specialization: std___is_char_open0_char_close0"]
        [::std::mem::align_of::<std___is_char>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_char_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___is_char>() - 1usize];
    ["Align of template specialization: std___is_char_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___is_char>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte {
    pub _address: u8,
}
pub const std___is_byte___value: std___is_byte__bindgen_ty_1 = 0;
pub type std___is_byte__bindgen_ty_1 = i32;
pub type std___is_byte___type = std___false_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_signed_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_signed_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___is_byte_open0_std_byte_close0"]
        [::std::mem::size_of::<std___is_byte>() - 1usize];
    ["Align of template specialization: std___is_byte_open0_std_byte_close0"]
        [::std::mem::align_of::<std___is_byte>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nonvolatile_trivially_copyable {
    pub _address: u8,
}
pub const std___is_nonvolatile_trivially_copyable___value:
    std___is_nonvolatile_trivially_copyable__bindgen_ty_1 = 0;
pub type std___is_nonvolatile_trivially_copyable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___memcpyable {
    pub _address: u8,
}
pub const std___memcpyable___value: std___memcpyable__bindgen_ty_1 = 0;
pub type std___memcpyable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___memcmpable {
    pub _address: u8,
}
pub const std___memcmpable___value: std___memcmpable__bindgen_ty_1 = 0;
pub type std___memcmpable__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_move_iterator {
    pub _address: u8,
}
pub const std___is_move_iterator___value: std___is_move_iterator__bindgen_ty_1 = 0;
pub type std___is_move_iterator__bindgen_ty_1 = i32;
pub type std___is_move_iterator___type = std___false_type;
pub type std___c_locale = __locale_t;
pub type std_ios = std_basic_ios<::std::os::raw::c_char>;
pub type std_streambuf = std_basic_streambuf<::std::os::raw::c_char>;
pub type std_istream = std_basic_istream<::std::os::raw::c_char>;
pub type std_ostream = std_basic_ostream<::std::os::raw::c_char>;
pub type std_iostream = std_basic_iostream<::std::os::raw::c_char>;
pub type std_stringbuf = std_basic_stringbuf<::std::os::raw::c_char>;
pub type std_istringstream = std_basic_istringstream<::std::os::raw::c_char>;
pub type std_ostringstream = std_basic_ostringstream<::std::os::raw::c_char>;
pub type std_stringstream = std_basic_stringstream<::std::os::raw::c_char>;
pub type std_filebuf = std_basic_filebuf<::std::os::raw::c_char>;
pub type std_ifstream = std_basic_ifstream<::std::os::raw::c_char>;
pub type std_ofstream = std_basic_ofstream<::std::os::raw::c_char>;
pub type std_fstream = std_basic_fstream<::std::os::raw::c_char>;
pub type std_wios = std_basic_ios<u32>;
pub type std_wstreambuf = std_basic_streambuf<u32>;
pub type std_wistream = std_basic_istream<u32>;
pub type std_wostream = std_basic_ostream<u32>;
pub type std_wiostream = std_basic_iostream<u32>;
pub type std_wstringbuf = std_basic_stringbuf<u32>;
pub type std_wistringstream = std_basic_istringstream<u32>;
pub type std_wostringstream = std_basic_ostringstream<u32>;
pub type std_wstringstream = std_basic_stringstream<u32>;
pub type std_wfilebuf = std_basic_filebuf<u32>;
pub type std_wifstream = std_basic_ifstream<u32>;
pub type std_wofstream = std_basic_ofstream<u32>;
pub type std_wfstream = std_basic_fstream<u32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_input_iterator_tag"][::std::mem::size_of::<std_input_iterator_tag>() - 1usize];
    ["Alignment of std_input_iterator_tag"]
        [::std::mem::align_of::<std_input_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_output_iterator_tag"][::std::mem::size_of::<std_output_iterator_tag>() - 1usize];
    ["Alignment of std_output_iterator_tag"]
        [::std::mem::align_of::<std_output_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_forward_iterator_tag"]
        [::std::mem::size_of::<std_forward_iterator_tag>() - 1usize];
    ["Alignment of std_forward_iterator_tag"]
        [::std::mem::align_of::<std_forward_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bidirectional_iterator_tag"]
        [::std::mem::size_of::<std_bidirectional_iterator_tag>() - 1usize];
    ["Alignment of std_bidirectional_iterator_tag"]
        [::std::mem::align_of::<std_bidirectional_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_random_access_iterator_tag"]
        [::std::mem::size_of::<std_random_access_iterator_tag>() - 1usize];
    ["Alignment of std_random_access_iterator_tag"]
        [::std::mem::align_of::<std_random_access_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_iterator_category<_Category> = _Category;
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iterator_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std___iter_category_t = std_iterator_traits;
pub type std__RequireInputIter = std___enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_random_access_iter {
    pub _address: u8,
}
pub type std___is_random_access_iter__Base = std_is_base_of;
pub const std___is_random_access_iter___value: std___is_random_access_iter__bindgen_ty_1 = 0;
pub type std___is_random_access_iter__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___undefined {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___get_first_arg {
    pub _address: u8,
}
pub type std___get_first_arg_type = std___undefined;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___replace_first_arg {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_elem {
    pub _address: u8,
}
pub type std___ptr_traits_elem_t = std___ptr_traits_elem;
pub type std___ptr_traits_ptr_to_pointer<_Ptr> = _Ptr;
pub type std___ptr_traits_ptr_to_element_type<_Elt> = _Elt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ptr_traits_impl {
    pub _address: u8,
}
pub type std___ptr_traits_impl___diff_t = __BindgenOpaqueArray<u8, 0usize>;
pub type std___ptr_traits_impl___rebind = std___type_identity;
pub type std___ptr_traits_impl_pointer<_Ptr> = _Ptr;
pub type std___ptr_traits_impl_element_type<_Elt> = _Elt;
pub type std___ptr_traits_impl_difference_type = std___detected_or_t;
pub type std___ptr_traits_impl_rebind = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std___ptr_rebind = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub current: _Iterator,
}
pub type std_reverse_iterator___traits_type = std_iterator_traits;
pub type std_reverse_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_reverse_iterator_pointer = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_difference_type = std_reverse_iterator___traits_type;
pub type std_reverse_iterator_reference = std_reverse_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_back_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_front_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
    pub iter: std_insert_iterator__Iter,
}
pub type std_insert_iterator__Iter = __BindgenOpaqueArray<u8, 0usize>;
pub type std_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _M_current: _Iterator,
}
pub type std_move_iterator___traits_type = std_iterator_traits;
pub type std_move_iterator___base_ref = std_move_iterator___traits_type;
pub type std_move_iterator_iterator_type<_Iterator> = _Iterator;
pub type std_move_iterator_iterator_category = std_move_iterator___traits_type;
pub type std_move_iterator_value_type = std_move_iterator___traits_type;
pub type std_move_iterator_difference_type = std_move_iterator___traits_type;
pub type std_move_iterator_pointer<_Iterator> = _Iterator;
pub type std_move_iterator_reference = std___conditional_t;
pub type std___iter_key_t = std_remove_const_t;
pub type std___iter_val_t = std_iterator_traits;
pub type std___iter_to_alloc_t = std_pair<std___iter_key_t, std___iter_val_t>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_function {
    pub _address: u8,
}
pub type std_unary_function_argument_type<_Arg> = _Arg;
pub type std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_transparent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_divides {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_modulus {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negate {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_plus_open0_void_close0"]
        [::std::mem::size_of::<std_plus>() - 1usize];
    ["Align of template specialization: std_plus_open0_void_close0"]
        [::std::mem::align_of::<std_plus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_minus_open0_void_close0"]
        [::std::mem::size_of::<std_minus>() - 1usize];
    ["Align of template specialization: std_minus_open0_void_close0"]
        [::std::mem::align_of::<std_minus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::size_of::<std_multiplies>() - 1usize];
    ["Align of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::align_of::<std_multiplies>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_divides_open0_void_close0"]
        [::std::mem::size_of::<std_divides>() - 1usize];
    ["Align of template specialization: std_divides_open0_void_close0"]
        [::std::mem::align_of::<std_divides>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::size_of::<std_modulus>() - 1usize];
    ["Align of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::align_of::<std_modulus>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_negate_open0_void_close0"]
        [::std::mem::size_of::<std_negate>() - 1usize];
    ["Align of template specialization: std_negate_open0_void_close0"]
        [::std::mem::align_of::<std_negate>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_not_equal_to>() - 1usize];
    ["Align of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_not_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_open0_void_close0"]
        [::std::mem::size_of::<std_greater>() - 1usize];
    ["Align of template specialization: std_greater_open0_void_close0"]
        [::std::mem::align_of::<std_greater>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_void_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_void_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::size_of::<std_greater_equal>() - 1usize];
    ["Align of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::align_of::<std_greater_equal>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::size_of::<std_less_equal>() - 1usize];
    ["Align of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::align_of::<std_less_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::size_of::<std_logical_and>() - 1usize];
    ["Align of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::align_of::<std_logical_and>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::size_of::<std_logical_or>() - 1usize];
    ["Align of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::align_of::<std_logical_or>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::size_of::<std_logical_not>() - 1usize];
    ["Align of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::align_of::<std_logical_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_and {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_or {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_xor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::size_of::<std_bit_and>() - 1usize];
    ["Align of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::align_of::<std_bit_and>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::size_of::<std_bit_or>() - 1usize];
    ["Align of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::align_of::<std_bit_or>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::size_of::<std_bit_xor>() - 1usize];
    ["Align of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::align_of::<std_bit_xor>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::size_of::<std_bit_not>() - 1usize];
    ["Align of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::align_of::<std_bit_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_unary_function<_Arg, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub _M_ptr: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Identity {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select1st {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Select2nd {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_ref_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_ref_t<_Ret> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn() -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_ref_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_ref_t<_Ret, _Arg> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ret>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _M_f: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Ret>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_is_transparent {
    pub _address: u8,
}
pub type std___has_is_transparent_t = std___has_is_transparent;
#[repr(C)]
pub struct std_binder1st<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: __BindgenOpaqueArray<u8, 0usize>,
}
#[repr(C)]
pub struct std_binder2nd<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: __BindgenOpaqueArray<u8, 0usize>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple_size {
    pub _address: u8,
}
pub type std___enable_if_has_tuple_size<_Tp> = _Tp;
pub type std___tuple_element_t = u8;
pub type std_tuple_element_t = u8;
pub type std__Build_index_tuple__IdxTuple = u8;
pub type std__Build_index_tuple___type = u8;
pub type std_integer_sequence_value_type<_Tp> = _Tp;
pub type std_make_integer_sequence = u8;
pub type std_index_sequence = u8;
pub type std_make_index_sequence = std_make_integer_sequence;
pub type std_index_sequence_for = std_make_index_sequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_in_place_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_in_place_t"][::std::mem::size_of::<std_in_place_t>() - 1usize];
    ["Alignment of std_in_place_t"][::std::mem::align_of::<std_in_place_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt8in_place"]
    pub static std_in_place: std_in_place_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_in_place_type_t {
    pub _address: u8,
}
pub type std___is_in_place_type = std_bool_constant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_piecewise_construct_t"]
        [::std::mem::size_of::<std_piecewise_construct_t>() - 1usize];
    ["Alignment of std_piecewise_construct_t"]
        [::std::mem::align_of::<std_piecewise_construct_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19piecewise_construct"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___pair_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_pair<_T1, _T2> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
    pub first: _T1,
    pub second: _T2,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
pub type std_pair__PCCP = u8;
pub type std_pair__PCCFP = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair___zero_as_null_pointer_constant {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___lc_rai {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0",
    ][::std::mem::size_of::<std___lc_rai>() - 1usize];
    [
        "Align of template specialization: std___lc_rai_open0_std_random_access_iterator_tag_std_random_access_iterator_tag_close0",
    ][::std::mem::align_of::<std___lc_rai>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_unary_or_binary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn_traits_base {
    pub _address: u8,
}
pub type std__Mem_fn_traits_base___result_type<_Res> = _Res;
pub type std__Mem_fn_traits_base___maybe_type = std__Maybe_unary_or_binary_function;
pub type std__Mem_fn_traits_base___arity = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Maybe_get_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Weak_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_base_arg1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Refwrap_base_arg2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Reference_wrapper_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_data: *mut _Tp,
}
pub type std_reference_wrapper___not_same = u8;
pub type std_reference_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_E> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_E>>,
    pub _M_array: std_initializer_list_iterator<_E>,
    pub _M_len: std_initializer_list_size_type,
}
pub type std_initializer_list_value_type<_E> = _E;
pub type std_initializer_list_reference<_E> = *const _E;
pub type std_initializer_list_const_reference<_E> = *const _E;
pub type std_initializer_list_size_type = usize;
pub type std_initializer_list_iterator<_E> = *const _E;
pub type std_initializer_list_const_iterator<_E> = *const _E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_traits_base___rebind {
    pub _address: u8,
}
pub type std___allocator_traits_base___pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___c_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___v_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___cv_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___pocca = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___pocma = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___pocs = __BindgenOpaqueArray<u8, 0usize>;
pub type std___allocator_traits_base___equal = std___type_identity;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___allocator_traits_base"]
        [::std::mem::size_of::<std___allocator_traits_base>() - 1usize];
    ["Alignment of std___allocator_traits_base"]
        [::std::mem::align_of::<std___allocator_traits_base>() - 1usize];
};
pub type std___alloc_rebind = std___allocator_traits_base;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_pointer = std___detected_or_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Ptr {
    pub _address: u8,
}
pub type std_allocator_traits__Ptr_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Diff {
    pub _address: u8,
}
pub type std_allocator_traits__Diff_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits__Size {
    pub _address: u8,
}
pub type std_allocator_traits_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_const_void_pointer = std_allocator_traits__Ptr;
pub type std_allocator_traits_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_allocator_traits_propagate_on_container_copy_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_move_assignment = std___detected_or_t;
pub type std_allocator_traits_propagate_on_container_swap = std___detected_or_t;
pub type std_allocator_traits_is_always_equal = std___detected_or_t;
pub type std_allocator_traits_rebind_alloc = std___alloc_rebind;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits___construct_helper {
    pub _address: u8,
}
pub type std_allocator_traits___construct_helper_type<_Alloc> = _Alloc;
pub type std_allocator_traits___has_construct = std_allocator_traits___construct_helper;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_traits_open0_std_allocator_open1_void_close1_close0",
    ][::std::mem::size_of::<std_allocator_traits>() - 1usize];
    [
        "Align of template specialization: std_allocator_traits_open0_std_allocator_open1_void_close1_close0",
    ][::std::mem::align_of::<std_allocator_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_alloc_insertable_impl {
    pub _base: std_false_type,
}
#[repr(C)]
pub struct std___is_copy_insertable {
    pub _address: u8,
}
#[repr(C)]
pub struct std___is_move_insertable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_allocator {
    pub _base: std_false_type,
}
pub type std__RequireAllocator = u8;
pub type std__RequireNotAllocator = u8;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt11_Hash_bytesPKvmm"]
    pub fn std__Hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: usize,
        __seed: usize,
    ) -> usize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15_Fnv_hash_bytesPKvmm"]
    pub fn std__Fnv_hash_bytes(
        __ptr: *const ::std::os::raw::c_void,
        __len: usize,
        __seed: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_base {
    pub _address: u8,
}
pub type std___hash_base_result_type<_Result> = _Result;
pub type std___hash_base_argument_type<_Arg> = _Arg;
#[repr(C)]
#[derive(Debug)]
pub struct std___poison_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_hash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Hash_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Hash_impl"][::std::mem::size_of::<std__Hash_impl>() - 1usize];
    ["Alignment of std__Hash_impl"][::std::mem::align_of::<std__Hash_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fnv_hash_impl {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Fnv_hash_impl"][::std::mem::size_of::<std__Fnv_hash_impl>() - 1usize];
    ["Alignment of std__Fnv_hash_impl"][::std::mem::align_of::<std__Fnv_hash_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_float_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_float_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_fast_hash {
    pub _base: std_true_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_long_double_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string_view<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_len: usize,
    pub _M_str: *const _CharT,
}
pub type std_basic_string_view_traits_type<_Traits> = _Traits;
pub type std_basic_string_view_value_type<_CharT> = _CharT;
pub type std_basic_string_view_pointer<_CharT> = *mut std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_const_pointer<_CharT> =
    *const std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_reference<_CharT> = *mut std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_const_reference<_CharT> =
    *const std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_const_iterator<_CharT> =
    *const std_basic_string_view_value_type<_CharT>;
pub type std_basic_string_view_iterator<_CharT> = std_basic_string_view_const_iterator<_CharT>;
pub type std_basic_string_view_const_reverse_iterator<_CharT> =
    std_reverse_iterator<std_basic_string_view_const_iterator<_CharT>>;
pub type std_basic_string_view_reverse_iterator<_CharT> =
    std_basic_string_view_const_reverse_iterator<_CharT>;
pub type std_basic_string_view_size_type = usize;
pub type std_basic_string_view_difference_type = isize;
pub type std_string_view = std_basic_string_view<::std::os::raw::c_char>;
pub type std_wstring_view = std_basic_string_view<u32>;
pub type std_u16string_view = std_basic_string_view<u16>;
pub type std_u32string_view = std_basic_string_view<u32>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char_std_char_traits_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char_std_char_traits_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_wchar_t_std_char_traits_open3_wchar_t_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_wchar_t_std_char_traits_open3_wchar_t_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char16_t_std_char_traits_open3_char16_t_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char16_t_std_char_traits_open3_char16_t_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char32_t_std_char_traits_open3_char32_t_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_view_open2_char32_t_std_char_traits_open3_char32_t_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline(
        __in: *mut std_basic_istream<::std::os::raw::c_char>,
        __str: *mut std_basic_string<::std::os::raw::c_char>,
        __delim: ::std::os::raw::c_char,
    ) -> *mut std_basic_istream<::std::os::raw::c_char>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7getlineIwSt11char_traitsIwESaIwEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_"]
    pub fn std_getline1(
        __in: *mut std_basic_istream<u32>,
        __str: *mut std_basic_string<u32>,
        __delim: u32,
    ) -> *mut std_basic_istream<u32>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___str_hash_base {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0__bindgen_ty_id_116403_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0__bindgen_ty_id_116403_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_wchar_t_std_char_traits_open3_wchar_t_close3_std_allocator_open3_wchar_t_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char16_t_std_char_traits_open3_char16_t_close3_std_allocator_open3_char16_t_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0",
    ][::std::mem::size_of::<std___is_fast_hash>() - 1usize];
    [
        "Align of template specialization: std___is_fast_hash_open0_std_hash_open1_std_basic_string_open2_char32_t_std_char_traits_open3_char32_t_close3_std_allocator_open3_char32_t_close3_close2_close1_close0",
    ][::std::mem::align_of::<std___is_fast_hash>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}npos"]
    pub static std_npos: std_basic_string_size_type;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u32>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u32>>() - 8usize];
};
pub type std_size_type = size_type;
pub type std_byte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___byte_operand {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_bool__close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_bool__close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_signed_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_signed_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char16_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char16_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_char32_t_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_char32_t_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_short_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_short_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_int_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_int_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_long_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_long_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___byte_operand_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___byte_operand>() - 1usize];
    ["Align of template specialization: std___byte_operand_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___byte_operand>() - 1usize];
};
pub type std___byte_op_t = std___byte_operand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___erased_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___erased_type"][::std::mem::size_of::<std___erased_type>() - 1usize];
    ["Alignment of std___erased_type"][::std::mem::align_of::<std___erased_type>() - 1usize];
};
pub type std___is_erased_or_convertible = std___or_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_allocator_arg_t"][::std::mem::size_of::<std_allocator_arg_t>() - 1usize];
    ["Alignment of std_allocator_arg_t"][::std::mem::align_of::<std_allocator_arg_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt13allocator_arg"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_allocator_helper {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc_base {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___uses_alloc_base"][::std::mem::size_of::<std___uses_alloc_base>() - 1usize];
    ["Alignment of std___uses_alloc_base"]
        [::std::mem::align_of::<std___uses_alloc_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc0 {
    pub _M_a: std___uses_alloc0__Sink,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc0__Sink {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___uses_alloc0__Sink"][::std::mem::size_of::<std___uses_alloc0__Sink>() - 1usize];
    ["Alignment of std___uses_alloc0__Sink"]
        [::std::mem::align_of::<std___uses_alloc0__Sink>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___uses_alloc0"][::std::mem::size_of::<std___uses_alloc0>() - 1usize];
    ["Alignment of std___uses_alloc0"][::std::mem::align_of::<std___uses_alloc0>() - 1usize];
    ["Offset of field: std___uses_alloc0::_M_a"]
        [::std::mem::offset_of!(std___uses_alloc0, _M_a) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc1<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_a: *const _Alloc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc2<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_a: *const _Alloc,
}
pub type std___uses_alloc_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_uses_allocator_predicate {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_uses_allocator_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_uses_allocator_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_empty_non_tuple {
    pub _address: u8,
}
pub type std___empty_not_final = std___conditional_t;
pub type std__TupleConstraints___constructible = std___and_;
pub type std__TupleConstraints___convertible = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub _address: u8,
}
pub type std_tuple__Inherited = u8;
pub type std_tuple__TCC = u8;
pub type std_tuple__ImplicitDefaultCtor = std___enable_if_t;
pub type std_tuple__ExplicitDefaultCtor = std___enable_if_t;
pub type std_tuple__ImplicitCtor = std___enable_if_t;
pub type std_tuple__ExplicitCtor = std___enable_if_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__UseOtherCtor {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_tuple_open0_close0"]
        [::std::mem::size_of::<std_tuple>() - 1usize];
    ["Align of template specialization: std_tuple_open0_close0"]
        [::std::mem::align_of::<std_tuple>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___do_make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_tuple {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___combine_tuples {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___combine_tuples_open0_close0"]
        [::std::mem::size_of::<std___combine_tuples>() - 1usize];
    ["Align of template specialization: std___combine_tuples_open0_close0"]
        [::std::mem::align_of::<std___combine_tuples>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_result {
    pub _address: u8,
}
pub type std___tuple_cat_result___type = std___combine_tuples;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_1st_indices {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___make_1st_indices_open0_close0"]
        [::std::mem::size_of::<std___make_1st_indices>() - 1usize];
    ["Align of template specialization: std___make_1st_indices_open0_close0"]
        [::std::mem::align_of::<std___make_1st_indices>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_concater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Swallow_assign {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Swallow_assign"][::std::mem::size_of::<std__Swallow_assign>() - 1usize];
    ["Alignment of std__Swallow_assign"][::std::mem::align_of::<std__Swallow_assign>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt6ignore"]
    pub static std_ignore: std__Swallow_assign;
}
#[repr(C)]
pub struct std_pmr_memory_resource__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_pmr_memory_resource {
    pub vtable_: *const std_pmr_memory_resource__bindgen_vtable,
}
pub const std_pmr_memory_resource__S_max_align: usize = 16;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_pmr_memory_resource"][::std::mem::size_of::<std_pmr_memory_resource>() - 8usize];
    ["Alignment of std_pmr_memory_resource"]
        [::std::mem::align_of::<std_pmr_memory_resource>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3pmr15memory_resourceD1Ev"]
    pub fn std_pmr_memory_resource_memory_resource_destructor(this: *mut std_pmr_memory_resource);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pmr_polymorphic_allocator {
    pub _M_resource: *mut std_pmr_memory_resource,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pmr_polymorphic_allocator___not_pair {
    pub _address: u8,
}
pub type std_pmr_polymorphic_allocator___not_pair_type = ::std::os::raw::c_void;
pub type std_pmr_polymorphic_allocator_value_type<_Tp> = _Tp;
pub type std_pmr_polymorphic_allocator___uses_alloc1_ =
    std___uses_alloc1<std_pmr_polymorphic_allocator>;
pub type std_pmr_polymorphic_allocator___uses_alloc2_ =
    std___uses_alloc2<std_pmr_polymorphic_allocator>;
pub type std_pmr_basic_string<_CharT> = std_basic_string<_CharT>;
pub type std_pmr_string = std_basic_string<::std::os::raw::c_char>;
pub type std_pmr_u16string = std_basic_string<u16>;
pub type std_pmr_u32string = std_basic_string<u32>;
pub type std_pmr_wstring = std_basic_string<u32>;
pub type std_pmr_unordered_map = std_unordered_map;
pub type std_pmr_unordered_multimap = std_unordered_multimap;
pub type std_pmr_vector = std_vector;
pub type std_pmr_forward_list = std_forward_list;
pub type std_pmr_map = std_map;
pub type std_pmr_multimap = std_multimap;
pub type std_pmr_deque = std_deque;
pub type std_pmr_list = std_list;
pub type std_pmr_unordered_set = std_unordered_set;
pub type std_pmr_unordered_multiset = std_unordered_multiset;
pub type std_pmr_set = std_set;
pub type std_pmr_multiset = std_multiset;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_exception"][::std::mem::size_of::<std_bad_exception>() - 8usize];
    ["Alignment of std_bad_exception"][::std::mem::align_of::<std_bad_exception>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13bad_exceptionD1Ev"]
    pub fn std_bad_exception_bad_exception_destructor(this: *mut std_bad_exception);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt13bad_exception4whatEv"]
    pub fn std_bad_exception_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt13set_terminatePFvvE"]
    pub fn std_set_terminate(arg1: std_terminate_handler) -> std_terminate_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt13get_terminatev"]
    pub fn std_get_terminate() -> std_terminate_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt9terminatev"]
    pub fn std_terminate() -> !;
}
pub type std_unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14set_unexpectedPFvvE"]
    pub fn std_set_unexpected(arg1: std_unexpected_handler) -> std_unexpected_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14get_unexpectedv"]
    pub fn std_get_unexpected() -> std_unexpected_handler;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt10unexpectedv"]
    pub fn std_unexpected() -> !;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18uncaught_exceptionv"]
    pub fn std_uncaught_exception() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt19uncaught_exceptionsv"]
    pub fn std_uncaught_exceptions() -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_type_info"][::std::mem::size_of::<std_type_info>() - 16usize];
    ["Alignment of std_type_info"][::std::mem::align_of::<std_type_info>() - 8usize];
    ["Offset of field: std_type_info::__name"]
        [::std::mem::offset_of!(std_type_info, __name) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info14__is_pointer_pEv"]
    pub fn std_type_info___is_pointer_p(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info15__is_function_pEv"]
    pub fn std_type_info___is_function_p(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info10__do_catchEPKS_PPvj"]
    pub fn std_type_info___do_catch(
        this: *mut ::std::os::raw::c_void,
        __thr_type: *const std_type_info,
        __thr_obj: *mut *mut ::std::os::raw::c_void,
        __outer: ::std::os::raw::c_uint,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv"]
    pub fn std_type_info___do_upcast(
        this: *mut ::std::os::raw::c_void,
        __target: *const __cxxabiv1___class_type_info,
        __obj_ptr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_cast"][::std::mem::size_of::<std_bad_cast>() - 8usize];
    ["Alignment of std_bad_cast"][::std::mem::align_of::<std_bad_cast>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8bad_castD1Ev"]
    pub fn std_bad_cast_bad_cast_destructor(this: *mut std_bad_cast);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt8bad_cast4whatEv"]
    pub fn std_bad_cast_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_typeid"][::std::mem::size_of::<std_bad_typeid>() - 8usize];
    ["Alignment of std_bad_typeid"][::std::mem::align_of::<std_bad_typeid>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10bad_typeidD1Ev"]
    pub fn std_bad_typeid_bad_typeid_destructor(this: *mut std_bad_typeid);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10bad_typeid4whatEv"]
    pub fn std_bad_typeid_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___exception_ptr_exception_ptr {
    pub _M_exception_object: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___exception_ptr_exception_ptr"]
        [::std::mem::size_of::<std___exception_ptr_exception_ptr>() - 8usize];
    ["Alignment of std___exception_ptr_exception_ptr"]
        [::std::mem::align_of::<std___exception_ptr_exception_ptr>() - 8usize];
    ["Offset of field: std___exception_ptr_exception_ptr::_M_exception_object"]
        [::std::mem::offset_of!(std___exception_ptr_exception_ptr, _M_exception_object) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv"]
    pub fn std___exception_ptr_exception_ptr___cxa_exception_type(
        this: *const std___exception_ptr_exception_ptr,
    ) -> *const std_type_info;
}
impl std___exception_ptr_exception_ptr {
    #[inline]
    pub unsafe fn __cxa_exception_type(&self) -> *const std_type_info {
        std___exception_ptr_exception_ptr___cxa_exception_type(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17current_exceptionv"]
    pub fn std_current_exception() -> std___exception_ptr_exception_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE"]
    pub fn std_rethrow_exception(arg1: std___exception_ptr_exception_ptr) -> !;
}
#[repr(C)]
pub struct std_nested_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_nested_exception {
    pub vtable_: *const std_nested_exception__bindgen_vtable,
    pub _M_ptr: std___exception_ptr_exception_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nested_exception"][::std::mem::size_of::<std_nested_exception>() - 16usize];
    ["Alignment of std_nested_exception"][::std::mem::align_of::<std_nested_exception>() - 8usize];
    ["Offset of field: std_nested_exception::_M_ptr"]
        [::std::mem::offset_of!(std_nested_exception, _M_ptr) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16nested_exceptionD1Ev"]
    pub fn std_nested_exception_nested_exception_destructor(this: *mut std_nested_exception);
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Nested_exception<_Except> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Except>>,
    pub _base: _Except,
    pub _base_1: std_nested_exception,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale {
    pub _M_impl: *mut std_locale__Impl,
}
pub type std_locale_category = ::std::os::raw::c_int;
pub const std_locale__S_categories_size: std_locale__bindgen_ty_1 = 12;
pub type std_locale__bindgen_ty_1 = ::std::os::raw::c_uint;
pub const std_locale_none: std_locale_category = 0;
pub const std_locale_ctype: std_locale_category = 1;
pub const std_locale_numeric: std_locale_category = 2;
pub const std_locale_collate: std_locale_category = 4;
pub const std_locale_time: std_locale_category = 8;
pub const std_locale_monetary: std_locale_category = 16;
pub const std_locale_messages: std_locale_category = 32;
pub const std_locale_all: std_locale_category = 63;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale10_S_classicE"]
    pub static mut std_locale__S_classic: *mut std_locale__Impl;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale9_S_globalE"]
    pub static mut std_locale__S_global: *mut std_locale__Impl;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale13_S_categoriesE"]
    pub static std_locale__S_categories: *const *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale7_S_onceE"]
    pub static mut std_locale__S_once: __gthread_once_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale17_S_twinned_facetsE"]
    pub static std_locale__S_twinned_facets: [*const std_locale_id; 0usize];
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale"][::std::mem::size_of::<std_locale>() - 8usize];
    ["Alignment of std_locale"][::std::mem::align_of::<std_locale>() - 8usize];
    ["Offset of field: std_locale::_M_impl"][::std::mem::offset_of!(std_locale, _M_impl) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt6locale4nameB5cxx11Ev"]
    pub fn std_locale_name(this: *const std_locale) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale6globalERKS_"]
    pub fn std_locale_global(__loc: *const std_locale) -> std_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale7classicEv"]
    pub fn std_locale_classic() -> *const std_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1Ev"]
    pub fn std_locale_locale(this: *mut std_locale);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1ERKS_"]
    pub fn std_locale_locale1(this: *mut std_locale, __other: *const std_locale);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1EPKc"]
    pub fn std_locale_locale2(this: *mut std_locale, __s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1ERKS_PKci"]
    pub fn std_locale_locale3(
        this: *mut std_locale,
        __base: *const std_locale,
        __s: *const ::std::os::raw::c_char,
        __cat: std_locale_category,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeC1ERKS_S1_i"]
    pub fn std_locale_locale4(
        this: *mut std_locale,
        __base: *const std_locale,
        __add: *const std_locale,
        __cat: std_locale_category,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6localeD1Ev"]
    pub fn std_locale_locale_destructor(this: *mut std_locale);
}
impl std_locale {
    #[inline]
    pub unsafe fn name(&self) -> std_string {
        std_locale_name(self)
    }
    #[inline]
    pub unsafe fn global(__loc: *const std_locale) -> std_locale {
        std_locale_global(__loc)
    }
    #[inline]
    pub unsafe fn classic() -> *const std_locale {
        std_locale_classic()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(__other: *const std_locale) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale1(__bindgen_tmp.as_mut_ptr(), __other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(__s: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale2(__bindgen_tmp.as_mut_ptr(), __s);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        __base: *const std_locale,
        __s: *const ::std::os::raw::c_char,
        __cat: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale3(__bindgen_tmp.as_mut_ptr(), __base, __s, __cat);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        __base: *const std_locale,
        __add: *const std_locale,
        __cat: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale4(__bindgen_tmp.as_mut_ptr(), __base, __add, __cat);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_locale_locale_destructor(self)
    }
}
#[repr(C)]
pub struct std_locale_facet__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_locale_facet {
    pub vtable_: *const std_locale_facet__bindgen_vtable,
    pub _M_refcount: _Atomic_word,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_facet___shim {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet11_S_c_localeE"]
    pub static mut std_locale_facet__S_c_locale: std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet9_S_c_nameE"]
    pub static std_locale_facet__S_c_name: [::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet7_S_onceE"]
    pub static mut std_locale_facet__S_once: __gthread_once_t;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale_facet"][::std::mem::size_of::<std_locale_facet>() - 16usize];
    ["Alignment of std_locale_facet"][::std::mem::align_of::<std_locale_facet>() - 8usize];
    ["Offset of field: std_locale_facet::_M_refcount"]
        [::std::mem::offset_of!(std_locale_facet, _M_refcount) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet18_S_create_c_localeERP15__locale_structPKcS2_"]
    pub fn std_locale_facet__S_create_c_locale(
        __cloc: *mut std___c_locale,
        __s: *const ::std::os::raw::c_char,
        __old: std___c_locale,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet17_S_clone_c_localeERP15__locale_struct"]
    pub fn std_locale_facet__S_clone_c_locale(__cloc: *mut std___c_locale) -> std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet19_S_destroy_c_localeERP15__locale_struct"]
    pub fn std_locale_facet__S_destroy_c_locale(__cloc: *mut std___c_locale);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet20_S_lc_ctype_c_localeEP15__locale_structPKc"]
    pub fn std_locale_facet__S_lc_ctype_c_locale(
        __cloc: std___c_locale,
        __s: *const ::std::os::raw::c_char,
    ) -> std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet15_S_get_c_localeEv"]
    pub fn std_locale_facet__S_get_c_locale() -> std___c_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facet13_S_get_c_nameEv"]
    pub fn std_locale_facet__S_get_c_name() -> *const ::std::os::raw::c_char;
}
impl std_locale_facet {
    #[inline]
    pub unsafe fn _S_create_c_locale(
        __cloc: *mut std___c_locale,
        __s: *const ::std::os::raw::c_char,
        __old: std___c_locale,
    ) {
        std_locale_facet__S_create_c_locale(__cloc, __s, __old)
    }
    #[inline]
    pub unsafe fn _S_clone_c_locale(__cloc: *mut std___c_locale) -> std___c_locale {
        std_locale_facet__S_clone_c_locale(__cloc)
    }
    #[inline]
    pub unsafe fn _S_destroy_c_locale(__cloc: *mut std___c_locale) {
        std_locale_facet__S_destroy_c_locale(__cloc)
    }
    #[inline]
    pub unsafe fn _S_lc_ctype_c_locale(
        __cloc: std___c_locale,
        __s: *const ::std::os::raw::c_char,
    ) -> std___c_locale {
        std_locale_facet__S_lc_ctype_c_locale(__cloc, __s)
    }
    #[inline]
    pub unsafe fn _S_get_c_locale() -> std___c_locale {
        std_locale_facet__S_get_c_locale()
    }
    #[inline]
    pub unsafe fn _S_get_c_name() -> *const ::std::os::raw::c_char {
        std_locale_facet__S_get_c_name()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5facetD1Ev"]
    pub fn std_locale_facet_facet_destructor(this: *mut std_locale_facet);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_id {
    pub _M_index: usize,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale2id11_S_refcountE"]
    pub static mut std_locale_id__S_refcount: _Atomic_word;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale_id"][::std::mem::size_of::<std_locale_id>() - 8usize];
    ["Alignment of std_locale_id"][::std::mem::align_of::<std_locale_id>() - 8usize];
    ["Offset of field: std_locale_id::_M_index"]
        [::std::mem::offset_of!(std_locale_id, _M_index) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt6locale2id5_M_idEv"]
    pub fn std_locale_id__M_id(this: *const std_locale_id) -> usize;
}
impl std_locale_id {
    #[inline]
    pub unsafe fn _M_id(&self) -> usize {
        std_locale_id__M_id(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale__Impl {
    pub _M_refcount: _Atomic_word,
    pub _M_facets: *mut *const std_locale_facet,
    pub _M_facets_size: usize,
    pub _M_caches: *mut *const std_locale_facet,
    pub _M_names: *mut *mut ::std::os::raw::c_char,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl11_S_id_ctypeE"]
    pub static std_locale__Impl__S_id_ctype: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_numericE"]
    pub static std_locale__Impl__S_id_numeric: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl13_S_id_collateE"]
    pub static std_locale__Impl__S_id_collate: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl10_S_id_timeE"]
    pub static std_locale__Impl__S_id_time: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_monetaryE"]
    pub static std_locale__Impl__S_id_monetary: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl14_S_id_messagesE"]
    pub static std_locale__Impl__S_id_messages: [*const std_locale_id; 0usize];
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6locale5_Impl19_S_facet_categoriesE"]
    pub static std_locale__Impl__S_facet_categories: [*const *const std_locale_id; 0usize];
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_locale__Impl"][::std::mem::size_of::<std_locale__Impl>() - 40usize];
    ["Alignment of std_locale__Impl"][::std::mem::align_of::<std_locale__Impl>() - 8usize];
    ["Offset of field: std_locale__Impl::_M_refcount"]
        [::std::mem::offset_of!(std_locale__Impl, _M_refcount) - 0usize];
    ["Offset of field: std_locale__Impl::_M_facets"]
        [::std::mem::offset_of!(std_locale__Impl, _M_facets) - 8usize];
    ["Offset of field: std_locale__Impl::_M_facets_size"]
        [::std::mem::offset_of!(std_locale__Impl, _M_facets_size) - 16usize];
    ["Offset of field: std_locale__Impl::_M_caches"]
        [::std::mem::offset_of!(std_locale__Impl, _M_caches) - 24usize];
    ["Offset of field: std_locale__Impl::_M_names"]
        [::std::mem::offset_of!(std_locale__Impl, _M_names) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_open0_char_close0"]
        [::std::mem::size_of::<std_collate>() - 24usize];
    ["Align of template specialization: std_collate_open0_char_close0"]
        [::std::mem::align_of::<std_collate>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_byname_open0_char_close0"]
        [::std::mem::size_of::<std_collate_byname>() - 24usize];
    ["Align of template specialization: std_collate_byname_open0_char_close0"]
        [::std::mem::align_of::<std_collate_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_collate>() - 24usize];
    ["Align of template specialization: std_collate_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_collate>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_collate_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_collate_byname>() - 24usize];
    ["Align of template specialization: std_collate_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_collate_byname>() - 8usize];
};
pub const std_errc_address_family_not_supported: std_errc = 97;
pub const std_errc_address_in_use: std_errc = 98;
pub const std_errc_address_not_available: std_errc = 99;
pub const std_errc_already_connected: std_errc = 106;
pub const std_errc_argument_list_too_long: std_errc = 7;
pub const std_errc_argument_out_of_domain: std_errc = 33;
pub const std_errc_bad_address: std_errc = 14;
pub const std_errc_bad_file_descriptor: std_errc = 9;
pub const std_errc_bad_message: std_errc = 74;
pub const std_errc_broken_pipe: std_errc = 32;
pub const std_errc_connection_aborted: std_errc = 103;
pub const std_errc_connection_already_in_progress: std_errc = 114;
pub const std_errc_connection_refused: std_errc = 111;
pub const std_errc_connection_reset: std_errc = 104;
pub const std_errc_cross_device_link: std_errc = 18;
pub const std_errc_destination_address_required: std_errc = 89;
pub const std_errc_device_or_resource_busy: std_errc = 16;
pub const std_errc_directory_not_empty: std_errc = 39;
pub const std_errc_executable_format_error: std_errc = 8;
pub const std_errc_file_exists: std_errc = 17;
pub const std_errc_file_too_large: std_errc = 27;
pub const std_errc_filename_too_long: std_errc = 36;
pub const std_errc_function_not_supported: std_errc = 38;
pub const std_errc_host_unreachable: std_errc = 113;
pub const std_errc_identifier_removed: std_errc = 43;
pub const std_errc_illegal_byte_sequence: std_errc = 84;
pub const std_errc_inappropriate_io_control_operation: std_errc = 25;
pub const std_errc_interrupted: std_errc = 4;
pub const std_errc_invalid_argument: std_errc = 22;
pub const std_errc_invalid_seek: std_errc = 29;
pub const std_errc_io_error: std_errc = 5;
pub const std_errc_is_a_directory: std_errc = 21;
pub const std_errc_message_size: std_errc = 90;
pub const std_errc_network_down: std_errc = 100;
pub const std_errc_network_reset: std_errc = 102;
pub const std_errc_network_unreachable: std_errc = 101;
pub const std_errc_no_buffer_space: std_errc = 105;
pub const std_errc_no_child_process: std_errc = 10;
pub const std_errc_no_link: std_errc = 67;
pub const std_errc_no_lock_available: std_errc = 37;
pub const std_errc_no_message_available: std_errc = 61;
pub const std_errc_no_message: std_errc = 42;
pub const std_errc_no_protocol_option: std_errc = 92;
pub const std_errc_no_space_on_device: std_errc = 28;
pub const std_errc_no_stream_resources: std_errc = 63;
pub const std_errc_no_such_device_or_address: std_errc = 6;
pub const std_errc_no_such_device: std_errc = 19;
pub const std_errc_no_such_file_or_directory: std_errc = 2;
pub const std_errc_no_such_process: std_errc = 3;
pub const std_errc_not_a_directory: std_errc = 20;
pub const std_errc_not_a_socket: std_errc = 88;
pub const std_errc_not_a_stream: std_errc = 60;
pub const std_errc_not_connected: std_errc = 107;
pub const std_errc_not_enough_memory: std_errc = 12;
pub const std_errc_not_supported: std_errc = 95;
pub const std_errc_operation_canceled: std_errc = 125;
pub const std_errc_operation_in_progress: std_errc = 115;
pub const std_errc_operation_not_permitted: std_errc = 1;
pub const std_errc_operation_not_supported: std_errc = 95;
pub const std_errc_operation_would_block: std_errc = 11;
pub const std_errc_owner_dead: std_errc = 130;
pub const std_errc_permission_denied: std_errc = 13;
pub const std_errc_protocol_error: std_errc = 71;
pub const std_errc_protocol_not_supported: std_errc = 93;
pub const std_errc_read_only_file_system: std_errc = 30;
pub const std_errc_resource_deadlock_would_occur: std_errc = 35;
pub const std_errc_resource_unavailable_try_again: std_errc = 11;
pub const std_errc_result_out_of_range: std_errc = 34;
pub const std_errc_state_not_recoverable: std_errc = 131;
pub const std_errc_stream_timeout: std_errc = 62;
pub const std_errc_text_file_busy: std_errc = 26;
pub const std_errc_timed_out: std_errc = 110;
pub const std_errc_too_many_files_open_in_system: std_errc = 23;
pub const std_errc_too_many_files_open: std_errc = 24;
pub const std_errc_too_many_links: std_errc = 31;
pub const std_errc_too_many_symbolic_link_levels: std_errc = 40;
pub const std_errc_value_too_large: std_errc = 75;
pub const std_errc_wrong_protocol_type: std_errc = 91;
pub type std_errc = ::std::os::raw::c_int;
#[repr(C)]
pub struct std___cow_string {
    pub __bindgen_anon_1: std___cow_string__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___cow_string__bindgen_ty_1 {
    pub _M_p: *const ::std::os::raw::c_char,
    pub _M_bytes: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___cow_string__bindgen_ty_1"]
        [::std::mem::size_of::<std___cow_string__bindgen_ty_1>() - 8usize];
    ["Alignment of std___cow_string__bindgen_ty_1"]
        [::std::mem::align_of::<std___cow_string__bindgen_ty_1>() - 8usize];
    ["Offset of field: std___cow_string__bindgen_ty_1::_M_p"]
        [::std::mem::offset_of!(std___cow_string__bindgen_ty_1, _M_p) - 0usize];
    ["Offset of field: std___cow_string__bindgen_ty_1::_M_bytes"]
        [::std::mem::offset_of!(std___cow_string__bindgen_ty_1, _M_bytes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___cow_string"][::std::mem::size_of::<std___cow_string>() - 8usize];
    ["Alignment of std___cow_string"][::std::mem::align_of::<std___cow_string>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1Ev"]
    pub fn std___cow_string___cow_string(this: *mut std___cow_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___cow_string___cow_string1(this: *mut std___cow_string, arg1: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1EPKcm"]
    pub fn std___cow_string___cow_string2(
        this: *mut std___cow_string,
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1ERKS_"]
    pub fn std___cow_string___cow_string3(
        this: *mut std___cow_string,
        arg1: *const std___cow_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringC1EOS_"]
    pub fn std___cow_string___cow_string4(this: *mut std___cow_string, arg1: *mut std___cow_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12__cow_stringD1Ev"]
    pub fn std___cow_string___cow_string_destructor(this: *mut std___cow_string);
}
impl std___cow_string {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string2(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(arg1: *mut std___cow_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___cow_string___cow_string4(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___cow_string___cow_string_destructor(self)
    }
}
pub type std___sso_string = std_basic_string<::std::os::raw::c_char>;
#[repr(C)]
pub struct std_logic_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_logic_error"][::std::mem::size_of::<std_logic_error>() - 16usize];
    ["Alignment of std_logic_error"][::std::mem::align_of::<std_logic_error>() - 8usize];
    ["Offset of field: std_logic_error::_M_msg"]
        [::std::mem::offset_of!(std_logic_error, _M_msg) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_logic_error_logic_error(this: *mut std_logic_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1EPKc"]
    pub fn std_logic_error_logic_error1(
        this: *mut std_logic_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1EOS_"]
    pub fn std_logic_error_logic_error2(this: *mut std_logic_error, arg1: *mut std_logic_error);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorC1ERKS_"]
    pub fn std_logic_error_logic_error3(this: *mut std_logic_error, arg1: *const std_logic_error);
}
impl std_logic_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *mut std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11logic_errorD1Ev"]
    pub fn std_logic_error_logic_error_destructor(this: *mut std_logic_error);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt11logic_error4whatEv"]
    pub fn std_logic_error_what(this: *mut ::std::os::raw::c_void)
    -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_domain_error {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_domain_error"][::std::mem::size_of::<std_domain_error>() - 16usize];
    ["Alignment of std_domain_error"][::std::mem::align_of::<std_domain_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_domain_error_domain_error(this: *mut std_domain_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorC1EPKc"]
    pub fn std_domain_error_domain_error1(
        this: *mut std_domain_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_domain_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_domain_error_domain_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12domain_errorD1Ev"]
    pub fn std_domain_error_domain_error_destructor(this: *mut std_domain_error);
}
#[repr(C)]
pub struct std_invalid_argument {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_invalid_argument"][::std::mem::size_of::<std_invalid_argument>() - 16usize];
    ["Alignment of std_invalid_argument"][::std::mem::align_of::<std_invalid_argument>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_invalid_argument_invalid_argument(
        this: *mut std_invalid_argument,
        __arg: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentC1EPKc"]
    pub fn std_invalid_argument_invalid_argument1(
        this: *mut std_invalid_argument,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_invalid_argument {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_invalid_argument_invalid_argument1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16invalid_argumentD1Ev"]
    pub fn std_invalid_argument_invalid_argument_destructor(this: *mut std_invalid_argument);
}
#[repr(C)]
pub struct std_length_error {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_length_error"][::std::mem::size_of::<std_length_error>() - 16usize];
    ["Alignment of std_length_error"][::std::mem::align_of::<std_length_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_length_error_length_error(this: *mut std_length_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorC1EPKc"]
    pub fn std_length_error_length_error1(
        this: *mut std_length_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_length_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_length_error_length_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_length_error_length_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12length_errorD1Ev"]
    pub fn std_length_error_length_error_destructor(this: *mut std_length_error);
}
#[repr(C)]
pub struct std_out_of_range {
    pub _base: std_logic_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_out_of_range"][::std::mem::size_of::<std_out_of_range>() - 16usize];
    ["Alignment of std_out_of_range"][::std::mem::align_of::<std_out_of_range>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_out_of_range_out_of_range(this: *mut std_out_of_range, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeC1EPKc"]
    pub fn std_out_of_range_out_of_range1(
        this: *mut std_out_of_range,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_out_of_range {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_out_of_range_out_of_range(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_out_of_range_out_of_range1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12out_of_rangeD1Ev"]
    pub fn std_out_of_range_out_of_range_destructor(this: *mut std_out_of_range);
}
#[repr(C)]
pub struct std_runtime_error {
    pub _base: std_exception,
    pub _M_msg: std___cow_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_runtime_error"][::std::mem::size_of::<std_runtime_error>() - 16usize];
    ["Alignment of std_runtime_error"][::std::mem::align_of::<std_runtime_error>() - 8usize];
    ["Offset of field: std_runtime_error::_M_msg"]
        [::std::mem::offset_of!(std_runtime_error, _M_msg) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_runtime_error_runtime_error(this: *mut std_runtime_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1EPKc"]
    pub fn std_runtime_error_runtime_error1(
        this: *mut std_runtime_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1EOS_"]
    pub fn std_runtime_error_runtime_error2(
        this: *mut std_runtime_error,
        arg1: *mut std_runtime_error,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorC1ERKS_"]
    pub fn std_runtime_error_runtime_error3(
        this: *mut std_runtime_error,
        arg1: *const std_runtime_error,
    );
}
impl std_runtime_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *mut std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt13runtime_errorD1Ev"]
    pub fn std_runtime_error_runtime_error_destructor(this: *mut std_runtime_error);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt13runtime_error4whatEv"]
    pub fn std_runtime_error_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_range_error {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_range_error"][::std::mem::size_of::<std_range_error>() - 16usize];
    ["Alignment of std_range_error"][::std::mem::align_of::<std_range_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_range_error_range_error(this: *mut std_range_error, __arg: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorC1EPKc"]
    pub fn std_range_error_range_error1(
        this: *mut std_range_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_range_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_range_error_range_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_range_error_range_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt11range_errorD1Ev"]
    pub fn std_range_error_range_error_destructor(this: *mut std_range_error);
}
#[repr(C)]
pub struct std_overflow_error {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_overflow_error"][::std::mem::size_of::<std_overflow_error>() - 16usize];
    ["Alignment of std_overflow_error"][::std::mem::align_of::<std_overflow_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_overflow_error_overflow_error(
        this: *mut std_overflow_error,
        __arg: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorC1EPKc"]
    pub fn std_overflow_error_overflow_error1(
        this: *mut std_overflow_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_overflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_overflow_error_overflow_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_overflow_error_overflow_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt14overflow_errorD1Ev"]
    pub fn std_overflow_error_overflow_error_destructor(this: *mut std_overflow_error);
}
#[repr(C)]
pub struct std_underflow_error {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_underflow_error"][::std::mem::size_of::<std_underflow_error>() - 16usize];
    ["Alignment of std_underflow_error"][::std::mem::align_of::<std_underflow_error>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_underflow_error_underflow_error(
        this: *mut std_underflow_error,
        __arg: *const std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorC1EPKc"]
    pub fn std_underflow_error_underflow_error1(
        this: *mut std_underflow_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
impl std_underflow_error {
    #[inline]
    pub unsafe fn new(__arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_underflow_error_underflow_error(__bindgen_tmp.as_mut_ptr(), __arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_underflow_error_underflow_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt15underflow_errorD1Ev"]
    pub fn std_underflow_error_underflow_error_destructor(this: *mut std_underflow_error);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_code_enum {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_condition_enum {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::size_of::<std_is_error_condition_enum>() - 1usize];
    ["Align of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::align_of::<std_is_error_condition_enum>() - 1usize];
};
#[repr(C)]
pub struct std_error_category__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_error_category {
    pub vtable_: *const std_error_category__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_category"][::std::mem::size_of::<std_error_category>() - 8usize];
    ["Alignment of std_error_category"][::std::mem::align_of::<std_error_category>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3_V214error_categoryD1Ev"]
    pub fn std_error_category_error_category_destructor(this: *mut std_error_category);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt3_V214error_category23default_error_conditionEi"]
    pub fn std_error_category_default_error_condition(
        this: *mut ::std::os::raw::c_void,
        __i: ::std::os::raw::c_int,
    ) -> std_error_condition;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition"]
    pub fn std_error_category_equivalent(
        this: *mut ::std::os::raw::c_void,
        __i: ::std::os::raw::c_int,
        __cond: *const std_error_condition,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt3_V214error_category10equivalentERKSt10error_codei"]
    pub fn std_error_category_equivalent1(
        this: *mut ::std::os::raw::c_void,
        __code: *const std_error_code,
        __i: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3_V216generic_categoryEv"]
    pub fn std_generic_category() -> *const std_error_category;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt3_V215system_categoryEv"]
    pub fn std_system_category() -> *const std_error_category;
}
#[repr(C)]
pub struct std_condition_variable_any {
    pub _M_cond: std_condition_variable,
    pub _M_mutex: std_shared_ptr,
}
pub type std_condition_variable_any___clock_t = std_chrono_steady_clock;
#[repr(C)]
#[derive(Debug)]
pub struct std_condition_variable_any__Unlock<_Lock> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Lock>>,
    pub _M_lock: *mut _Lock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_condition_variable_any"]
        [::std::mem::size_of::<std_condition_variable_any>() - 64usize];
    ["Alignment of std_condition_variable_any"]
        [::std::mem::align_of::<std_condition_variable_any>() - 8usize];
    ["Offset of field: std_condition_variable_any::_M_cond"]
        [::std::mem::offset_of!(std_condition_variable_any, _M_cond) - 0usize];
    ["Offset of field: std_condition_variable_any::_M_mutex"]
        [::std::mem::offset_of!(std_condition_variable_any, _M_mutex) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_code {
    pub _M_value: ::std::os::raw::c_int,
    pub _M_cat: *const std_error_category,
}
pub type std_error_code__Check = std___enable_if_t;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_code"][::std::mem::size_of::<std_error_code>() - 16usize];
    ["Alignment of std_error_code"][::std::mem::align_of::<std_error_code>() - 8usize];
    ["Offset of field: std_error_code::_M_value"]
        [::std::mem::offset_of!(std_error_code, _M_value) - 0usize];
    ["Offset of field: std_error_code::_M_cat"]
        [::std::mem::offset_of!(std_error_code, _M_cat) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10error_code23default_error_conditionEv"]
    pub fn std_error_code_default_error_condition(
        this: *const std_error_code,
    ) -> std_error_condition;
}
impl std_error_code {
    #[inline]
    pub unsafe fn default_error_condition(&self) -> std_error_condition {
        std_error_code_default_error_condition(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_condition {
    pub _M_value: ::std::os::raw::c_int,
    pub _M_cat: *const std_error_category,
}
pub type std_error_condition__Check = std___enable_if_t;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_error_condition"][::std::mem::size_of::<std_error_condition>() - 16usize];
    ["Alignment of std_error_condition"][::std::mem::align_of::<std_error_condition>() - 8usize];
    ["Offset of field: std_error_condition::_M_value"]
        [::std::mem::offset_of!(std_error_condition, _M_value) - 0usize];
    ["Offset of field: std_error_condition::_M_cat"]
        [::std::mem::offset_of!(std_error_condition, _M_cat) - 8usize];
};
#[repr(C)]
pub struct std_system_error {
    pub _base: std_runtime_error,
    pub _M_code: std_error_code,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_system_error"][::std::mem::size_of::<std_system_error>() - 32usize];
    ["Alignment of std_system_error"][::std::mem::align_of::<std_system_error>() - 8usize];
    ["Offset of field: std_system_error::_M_code"]
        [::std::mem::offset_of!(std_system_error, _M_code) - 16usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12system_errorD1Ev"]
    pub fn std_system_error_system_error_destructor(this: *mut std_system_error);
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
pub const std__Ios_Fmtflags__S_boolalpha: std__Ios_Fmtflags = 1;
pub const std__Ios_Fmtflags__S_dec: std__Ios_Fmtflags = 2;
pub const std__Ios_Fmtflags__S_fixed: std__Ios_Fmtflags = 4;
pub const std__Ios_Fmtflags__S_hex: std__Ios_Fmtflags = 8;
pub const std__Ios_Fmtflags__S_internal: std__Ios_Fmtflags = 16;
pub const std__Ios_Fmtflags__S_left: std__Ios_Fmtflags = 32;
pub const std__Ios_Fmtflags__S_oct: std__Ios_Fmtflags = 64;
pub const std__Ios_Fmtflags__S_right: std__Ios_Fmtflags = 128;
pub const std__Ios_Fmtflags__S_scientific: std__Ios_Fmtflags = 256;
pub const std__Ios_Fmtflags__S_showbase: std__Ios_Fmtflags = 512;
pub const std__Ios_Fmtflags__S_showpoint: std__Ios_Fmtflags = 1024;
pub const std__Ios_Fmtflags__S_showpos: std__Ios_Fmtflags = 2048;
pub const std__Ios_Fmtflags__S_skipws: std__Ios_Fmtflags = 4096;
pub const std__Ios_Fmtflags__S_unitbuf: std__Ios_Fmtflags = 8192;
pub const std__Ios_Fmtflags__S_uppercase: std__Ios_Fmtflags = 16384;
pub const std__Ios_Fmtflags__S_adjustfield: std__Ios_Fmtflags = 176;
pub const std__Ios_Fmtflags__S_basefield: std__Ios_Fmtflags = 74;
pub const std__Ios_Fmtflags__S_floatfield: std__Ios_Fmtflags = 260;
pub const std__Ios_Fmtflags__S_ios_fmtflags_end: std__Ios_Fmtflags = 65536;
pub const std__Ios_Fmtflags__S_ios_fmtflags_max: std__Ios_Fmtflags = 2147483647;
pub const std__Ios_Fmtflags__S_ios_fmtflags_min: std__Ios_Fmtflags = -2147483648;
pub type std__Ios_Fmtflags = ::std::os::raw::c_int;
pub const std__Ios_Openmode__S_app: std__Ios_Openmode = 1;
pub const std__Ios_Openmode__S_ate: std__Ios_Openmode = 2;
pub const std__Ios_Openmode__S_bin: std__Ios_Openmode = 4;
pub const std__Ios_Openmode__S_in: std__Ios_Openmode = 8;
pub const std__Ios_Openmode__S_out: std__Ios_Openmode = 16;
pub const std__Ios_Openmode__S_trunc: std__Ios_Openmode = 32;
pub const std__Ios_Openmode__S_noreplace: std__Ios_Openmode = 64;
pub const std__Ios_Openmode__S_ios_openmode_end: std__Ios_Openmode = 65536;
pub const std__Ios_Openmode__S_ios_openmode_max: std__Ios_Openmode = 2147483647;
pub const std__Ios_Openmode__S_ios_openmode_min: std__Ios_Openmode = -2147483648;
pub type std__Ios_Openmode = ::std::os::raw::c_int;
pub const std__Ios_Iostate__S_goodbit: std__Ios_Iostate = 0;
pub const std__Ios_Iostate__S_badbit: std__Ios_Iostate = 1;
pub const std__Ios_Iostate__S_eofbit: std__Ios_Iostate = 2;
pub const std__Ios_Iostate__S_failbit: std__Ios_Iostate = 4;
pub const std__Ios_Iostate__S_ios_iostate_end: std__Ios_Iostate = 65536;
pub const std__Ios_Iostate__S_ios_iostate_max: std__Ios_Iostate = 2147483647;
pub const std__Ios_Iostate__S_ios_iostate_min: std__Ios_Iostate = -2147483648;
pub type std__Ios_Iostate = ::std::os::raw::c_int;
pub const std__Ios_Seekdir__S_beg: std__Ios_Seekdir = 0;
pub const std__Ios_Seekdir__S_cur: std__Ios_Seekdir = 1;
pub const std__Ios_Seekdir__S_end: std__Ios_Seekdir = 2;
pub const std__Ios_Seekdir__S_ios_seekdir_end: std__Ios_Seekdir = 65536;
pub type std__Ios_Seekdir = ::std::os::raw::c_uint;
pub const std_io_errc_stream: std_io_errc = 1;
pub type std_io_errc = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::size_of::<std_is_error_code_enum>() - 1usize];
    ["Align of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::align_of::<std_is_error_code_enum>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17iostream_categoryv"]
    pub fn std_iostream_category() -> *const std_error_category;
}
#[repr(C)]
pub struct std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base {
    pub vtable_: *const std_ios_base__bindgen_vtable,
    pub _M_precision: std_streamsize,
    pub _M_width: std_streamsize,
    pub _M_flags: std_ios_base_fmtflags,
    pub _M_exception: std_ios_base_iostate,
    pub _M_streambuf_state: std_ios_base_iostate,
    pub _M_callbacks: *mut std_ios_base__Callback_list,
    pub _M_word_zero: std_ios_base__Words,
    pub _M_local_word: [std_ios_base__Words; 8usize],
    pub _M_word_size: ::std::os::raw::c_int,
    pub _M_word: *mut std_ios_base__Words,
    pub _M_ios_locale: std_locale,
}
#[repr(C)]
pub struct std_ios_base_failure {
    pub _base: std_system_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base_failure"][::std::mem::size_of::<std_ios_base_failure>() - 32usize];
    ["Alignment of std_ios_base_failure"][::std::mem::align_of::<std_ios_base_failure>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std_ios_base_failure_failure(this: *mut std_ios_base_failure, __str: *const std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10error_code"]
    pub fn std_ios_base_failure_failure1(
        this: *mut std_ios_base_failure,
        arg1: *const std_string,
        arg2: *const std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11C1EPKcRKSt10error_code"]
    pub fn std_ios_base_failure_failure2(
        this: *mut std_ios_base_failure,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const std_error_code,
    );
}
impl std_ios_base_failure {
    #[inline]
    pub unsafe fn new(__str: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure(__bindgen_tmp.as_mut_ptr(), __str);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_string, arg2: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure1(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char, arg2: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure2(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
}
pub use self::std__Ios_Fmtflags as std_ios_base_fmtflags;
pub use self::std__Ios_Iostate as std_ios_base_iostate;
pub use self::std__Ios_Openmode as std_ios_base_openmode;
pub use self::std__Ios_Seekdir as std_ios_base_seekdir;
pub const std_ios_base_event_erase_event: std_ios_base_event = 0;
pub const std_ios_base_event_imbue_event: std_ios_base_event = 1;
pub const std_ios_base_event_copyfmt_event: std_ios_base_event = 2;
pub type std_ios_base_event = ::std::os::raw::c_uint;
pub type std_ios_base_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        __e: std_ios_base_event,
        __b: *mut std_ios_base,
        __i: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base__Callback_list {
    pub _M_next: *mut std_ios_base__Callback_list,
    pub _M_fn: std_ios_base_event_callback,
    pub _M_index: ::std::os::raw::c_int,
    pub _M_refcount: _Atomic_word,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base__Callback_list"]
        [::std::mem::size_of::<std_ios_base__Callback_list>() - 24usize];
    ["Alignment of std_ios_base__Callback_list"]
        [::std::mem::align_of::<std_ios_base__Callback_list>() - 8usize];
    ["Offset of field: std_ios_base__Callback_list::_M_next"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_next) - 0usize];
    ["Offset of field: std_ios_base__Callback_list::_M_fn"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_fn) - 8usize];
    ["Offset of field: std_ios_base__Callback_list::_M_index"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_index) - 16usize];
    ["Offset of field: std_ios_base__Callback_list::_M_refcount"]
        [::std::mem::offset_of!(std_ios_base__Callback_list, _M_refcount) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ios_base__Words {
    pub _M_pword: *mut ::std::os::raw::c_void,
    pub _M_iword: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base__Words"][::std::mem::size_of::<std_ios_base__Words>() - 16usize];
    ["Alignment of std_ios_base__Words"][::std::mem::align_of::<std_ios_base__Words>() - 8usize];
    ["Offset of field: std_ios_base__Words::_M_pword"]
        [::std::mem::offset_of!(std_ios_base__Words, _M_pword) - 0usize];
    ["Offset of field: std_ios_base__Words::_M_iword"]
        [::std::mem::offset_of!(std_ios_base__Words, _M_iword) - 8usize];
};
pub const std_ios_base__S_local_word_size: std_ios_base__bindgen_ty_1 = 8;
pub type std_ios_base__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_Init {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4Init11_S_refcountE"]
    pub static mut std_ios_base_Init__S_refcount: _Atomic_word;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4Init20_S_synced_with_stdioE"]
    pub static mut std_ios_base_Init__S_synced_with_stdio: bool;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base_Init"][::std::mem::size_of::<std_ios_base_Init>() - 1usize];
    ["Alignment of std_ios_base_Init"][::std::mem::align_of::<std_ios_base_Init>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4InitC1Ev"]
    pub fn std_ios_base_Init_Init(this: *mut std_ios_base_Init);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4InitD1Ev"]
    pub fn std_ios_base_Init_Init_destructor(this: *mut std_ios_base_Init);
}
impl std_ios_base_Init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_Init_Init(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_ios_base_Init_Init_destructor(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9boolalphaE"]
    pub static std_ios_base_boolalpha: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3decE"]
    pub static std_ios_base_dec: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5fixedE"]
    pub static std_ios_base_fixed: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3hexE"]
    pub static std_ios_base_hex: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base8internalE"]
    pub static std_ios_base_internal: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base4leftE"]
    pub static std_ios_base_left: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3octE"]
    pub static std_ios_base_oct: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5rightE"]
    pub static std_ios_base_right: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base10scientificE"]
    pub static std_ios_base_scientific: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base8showbaseE"]
    pub static std_ios_base_showbase: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9showpointE"]
    pub static std_ios_base_showpoint: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7showposE"]
    pub static std_ios_base_showpos: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6skipwsE"]
    pub static std_ios_base_skipws: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7unitbufE"]
    pub static std_ios_base_unitbuf: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9uppercaseE"]
    pub static std_ios_base_uppercase: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base11adjustfieldE"]
    pub static std_ios_base_adjustfield: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base9basefieldE"]
    pub static std_ios_base_basefield: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base10floatfieldE"]
    pub static std_ios_base_floatfield: std_ios_base_fmtflags;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6badbitE"]
    pub static std_ios_base_badbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6eofbitE"]
    pub static std_ios_base_eofbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failbitE"]
    pub static std_ios_base_failbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7goodbitE"]
    pub static std_ios_base_goodbit: std_ios_base_iostate;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3appE"]
    pub static std_ios_base_app: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3ateE"]
    pub static std_ios_base_ate: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6binaryE"]
    pub static std_ios_base_binary: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base2inE"]
    pub static std_ios_base_in: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3outE"]
    pub static std_ios_base_out: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5truncE"]
    pub static std_ios_base_trunc: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base11__noreplaceE"]
    pub static std_ios_base___noreplace: std_ios_base_openmode;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3begE"]
    pub static std_ios_base_beg: std_ios_base_seekdir;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3curE"]
    pub static std_ios_base_cur: std_ios_base_seekdir;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base3endE"]
    pub static std_ios_base_end: std_ios_base_seekdir;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ios_base"][::std::mem::size_of::<std_ios_base>() - 216usize];
    ["Alignment of std_ios_base"][::std::mem::align_of::<std_ios_base>() - 8usize];
    ["Offset of field: std_ios_base::_M_precision"]
        [::std::mem::offset_of!(std_ios_base, _M_precision) - 8usize];
    ["Offset of field: std_ios_base::_M_width"]
        [::std::mem::offset_of!(std_ios_base, _M_width) - 16usize];
    ["Offset of field: std_ios_base::_M_flags"]
        [::std::mem::offset_of!(std_ios_base, _M_flags) - 24usize];
    ["Offset of field: std_ios_base::_M_exception"]
        [::std::mem::offset_of!(std_ios_base, _M_exception) - 28usize];
    ["Offset of field: std_ios_base::_M_streambuf_state"]
        [::std::mem::offset_of!(std_ios_base, _M_streambuf_state) - 32usize];
    ["Offset of field: std_ios_base::_M_callbacks"]
        [::std::mem::offset_of!(std_ios_base, _M_callbacks) - 40usize];
    ["Offset of field: std_ios_base::_M_word_zero"]
        [::std::mem::offset_of!(std_ios_base, _M_word_zero) - 48usize];
    ["Offset of field: std_ios_base::_M_local_word"]
        [::std::mem::offset_of!(std_ios_base, _M_local_word) - 64usize];
    ["Offset of field: std_ios_base::_M_word_size"]
        [::std::mem::offset_of!(std_ios_base, _M_word_size) - 192usize];
    ["Offset of field: std_ios_base::_M_word"]
        [::std::mem::offset_of!(std_ios_base, _M_word) - 200usize];
    ["Offset of field: std_ios_base::_M_ios_locale"]
        [::std::mem::offset_of!(std_ios_base, _M_ios_locale) - 208usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi"]
    pub fn std_ios_base_register_callback(
        this: *mut std_ios_base,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base17_M_call_callbacksENS_5eventE"]
    pub fn std_ios_base__M_call_callbacks(this: *mut std_ios_base, __ev: std_ios_base_event);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base20_M_dispose_callbacksEv"]
    pub fn std_ios_base__M_dispose_callbacks(this: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base13_M_grow_wordsEib"]
    pub fn std_ios_base__M_grow_words(
        this: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
        __iword: bool,
    ) -> *mut std_ios_base__Words;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7_M_initEv"]
    pub fn std_ios_base__M_init(this: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base15sync_with_stdioEb"]
    pub fn std_ios_base_sync_with_stdio(__sync: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base5imbueERKSt6locale"]
    pub fn std_ios_base_imbue(this: *mut std_ios_base, __loc: *const std_locale) -> std_locale;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base6xallocEv"]
    pub fn std_ios_base_xalloc() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7_M_moveERS_"]
    pub fn std_ios_base__M_move(this: *mut std_ios_base, arg1: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7_M_swapERS_"]
    pub fn std_ios_base__M_swap(this: *mut std_ios_base, __rhs: *mut std_ios_base);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_baseC1Ev"]
    pub fn std_ios_base_ios_base(this: *mut std_ios_base);
}
impl std_ios_base {
    #[inline]
    pub unsafe fn register_callback(
        &mut self,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    ) {
        std_ios_base_register_callback(self, __fn, __index)
    }
    #[inline]
    pub unsafe fn _M_call_callbacks(&mut self, __ev: std_ios_base_event) {
        std_ios_base__M_call_callbacks(self, __ev)
    }
    #[inline]
    pub unsafe fn _M_dispose_callbacks(&mut self) {
        std_ios_base__M_dispose_callbacks(self)
    }
    #[inline]
    pub unsafe fn _M_grow_words(
        &mut self,
        __index: ::std::os::raw::c_int,
        __iword: bool,
    ) -> *mut std_ios_base__Words {
        std_ios_base__M_grow_words(self, __index, __iword)
    }
    #[inline]
    pub unsafe fn _M_init(&mut self) {
        std_ios_base__M_init(self)
    }
    #[inline]
    pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
        std_ios_base_sync_with_stdio(__sync)
    }
    #[inline]
    pub unsafe fn imbue(&mut self, __loc: *const std_locale) -> std_locale {
        std_ios_base_imbue(self, __loc)
    }
    #[inline]
    pub unsafe fn xalloc() -> ::std::os::raw::c_int {
        std_ios_base_xalloc()
    }
    #[inline]
    pub unsafe fn _M_move(&mut self, arg1: *mut std_ios_base) {
        std_ios_base__M_move(self, arg1)
    }
    #[inline]
    pub unsafe fn _M_swap(&mut self, __rhs: *mut std_ios_base) {
        std_ios_base__M_swap(self, __rhs)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_ios_base(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_base7failureB5cxx11D1Ev"]
    pub fn std_ios_base_failure_failure_destructor(this: *mut std_ios_base_failure);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt8ios_base7failureB5cxx114whatEv"]
    pub fn std_ios_base_failure_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt8ios_baseD1Ev"]
    pub fn std_ios_base_ios_base_destructor(this: *mut std_ios_base);
}
#[repr(C)]
pub struct std_basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_streambuf<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub vtable_: *const std_basic_streambuf__bindgen_vtable,
    pub _M_in_beg: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_in_cur: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_in_end: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_beg: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_cur: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_out_end: *mut std_basic_streambuf_char_type<_CharT>,
    pub _M_buf_locale: std_locale,
}
pub type std_basic_streambuf_char_type<_CharT> = _CharT;
pub type std_basic_streambuf_traits_type<_Traits> = _Traits;
pub type std_basic_streambuf_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_streambuf_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_streambuf_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_streambuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_streambuf_char_type<_CharT>>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIcSt11char_traitsIcEElPSt15basic_streambufIT_T0_ES6_Rb"]
    pub fn std___copy_streambufs_eof(
        __sbin: *mut std_basic_streambuf<::std::os::raw::c_char>,
        __sbout: *mut std_basic_streambuf<::std::os::raw::c_char>,
        __ineof: *mut bool,
    ) -> std_streamsize;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt21__copy_streambufs_eofIwSt11char_traitsIwEElPSt15basic_streambufIT_T0_ES6_Rb"]
    pub fn std___copy_streambufs_eof1(
        __sbin: *mut std_basic_streambuf<u32>,
        __sbout: *mut std_basic_streambuf<u32>,
        __ineof: *mut bool,
    ) -> std_streamsize;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<u32>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<u32>>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_base {
    pub _address: u8,
}
pub type std_ctype_base___to_type = *const ::std::os::raw::c_int;
pub type std_ctype_base_mask = ::std::os::raw::c_ushort;
pub const std_ctype_base_upper: std_ctype_base_mask = 256;
pub const std_ctype_base_lower: std_ctype_base_mask = 512;
pub const std_ctype_base_alpha: std_ctype_base_mask = 1024;
pub const std_ctype_base_digit: std_ctype_base_mask = 2048;
pub const std_ctype_base_xdigit: std_ctype_base_mask = 4096;
pub const std_ctype_base_space: std_ctype_base_mask = 8192;
pub const std_ctype_base_print: std_ctype_base_mask = 16384;
pub const std_ctype_base_graph: std_ctype_base_mask = 3076;
pub const std_ctype_base_cntrl: std_ctype_base_mask = 2;
pub const std_ctype_base_punct: std_ctype_base_mask = 4;
pub const std_ctype_base_alnum: std_ctype_base_mask = 3072;
pub const std_ctype_base_blank: std_ctype_base_mask = 1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_ctype_base"][::std::mem::size_of::<std_ctype_base>() - 1usize];
    ["Alignment of std_ctype_base"][::std::mem::align_of::<std_ctype_base>() - 1usize];
};
#[repr(C)]
pub struct std_istreambuf_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_sbuf: *mut std_istreambuf_iterator_streambuf_type<_CharT>,
    pub _M_c: std_istreambuf_iterator_int_type,
}
pub type std_istreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_istreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_istreambuf_iterator_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_istreambuf_iterator_streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_istreambuf_iterator_istream_type<_CharT> = std_basic_istream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_sbuf: *mut std_ostreambuf_iterator_streambuf_type<_CharT>,
    pub _M_failed: bool,
}
pub type std_ostreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_ostreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_ostreambuf_iterator_streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_ostreambuf_iterator_ostream_type<_CharT> = std_basic_ostream<_CharT>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14__convert_to_vIfEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f32,
        arg3: *mut std_ios_base_iostate,
        arg4: *const std___c_locale,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14__convert_to_vIdEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v1(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut f64,
        arg3: *mut std_ios_base_iostate,
        arg4: *const std___c_locale,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt14__convert_to_vIeEvPKcRT_RSt12_Ios_IostateRKP15__locale_struct"]
    pub fn std___convert_to_v2(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut u128,
        arg3: *mut std_ios_base_iostate,
        arg4: *const std___c_locale,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___pad {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___ctype_abstract_base {
    pub _base: std_locale_facet,
}
pub type std___ctype_abstract_base_char_type<_CharT> = _CharT;
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype {
    pub _base: std___ctype_abstract_base,
}
pub type std_ctype_char_type<_CharT> = _CharT;
pub type std_ctype_mask = std___ctype_abstract_base;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 576usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 1344usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_ctype_byname {
    pub _base: std_ctype,
}
pub type std_ctype_byname_mask = std_ctype;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 576usize];
    ["Align of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 1344usize];
    ["Align of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___num_base {
    pub _address: u8,
}
pub const std___num_base__S_ominus: std___num_base__bindgen_ty_1 = 0;
pub const std___num_base__S_oplus: std___num_base__bindgen_ty_1 = 1;
pub const std___num_base__S_ox: std___num_base__bindgen_ty_1 = 2;
pub const std___num_base__S_oX: std___num_base__bindgen_ty_1 = 3;
pub const std___num_base__S_odigits: std___num_base__bindgen_ty_1 = 4;
pub const std___num_base__S_odigits_end: std___num_base__bindgen_ty_1 = 20;
pub const std___num_base__S_oudigits: std___num_base__bindgen_ty_1 = 20;
pub const std___num_base__S_oudigits_end: std___num_base__bindgen_ty_1 = 36;
pub const std___num_base__S_oe: std___num_base__bindgen_ty_1 = 18;
pub const std___num_base__S_oE: std___num_base__bindgen_ty_1 = 34;
pub const std___num_base__S_oend: std___num_base__bindgen_ty_1 = 36;
pub type std___num_base__bindgen_ty_1 = ::std::os::raw::c_uint;
pub const std___num_base__S_iminus: std___num_base__bindgen_ty_2 = 0;
pub const std___num_base__S_iplus: std___num_base__bindgen_ty_2 = 1;
pub const std___num_base__S_ix: std___num_base__bindgen_ty_2 = 2;
pub const std___num_base__S_iX: std___num_base__bindgen_ty_2 = 3;
pub const std___num_base__S_izero: std___num_base__bindgen_ty_2 = 4;
pub const std___num_base__S_ie: std___num_base__bindgen_ty_2 = 18;
pub const std___num_base__S_iE: std___num_base__bindgen_ty_2 = 24;
pub const std___num_base__S_iend: std___num_base__bindgen_ty_2 = 26;
pub type std___num_base__bindgen_ty_2 = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10__num_base12_S_atoms_outE"]
    pub static mut std___num_base__S_atoms_out: *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10__num_base11_S_atoms_inE"]
    pub static mut std___num_base__S_atoms_in: *const ::std::os::raw::c_char;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___num_base"][::std::mem::size_of::<std___num_base>() - 1usize];
    ["Alignment of std___num_base"][::std::mem::align_of::<std___num_base>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10__num_base15_S_format_floatERKSt8ios_basePcc"]
    pub fn std___num_base__S_format_float(
        __io: *const std_ios_base,
        __fptr: *mut ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    );
}
impl std___num_base {
    #[inline]
    pub unsafe fn _S_format_float(
        __io: *const std_ios_base,
        __fptr: *mut ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    ) {
        std___num_base__S_format_float(__io, __fptr, __mod)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std___numpunct_cache<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_locale_facet,
    pub _M_grouping: *const ::std::os::raw::c_char,
    pub _M_grouping_size: usize,
    pub _M_use_grouping: bool,
    pub _M_truename: *const _CharT,
    pub _M_truename_size: usize,
    pub _M_falsename: *const _CharT,
    pub _M_falsename_size: usize,
    pub _M_decimal_point: _CharT,
    pub _M_thousands_sep: _CharT,
    pub _M_atoms_out: [_CharT; 36usize],
    pub _M_atoms_in: [_CharT; 26usize],
    pub _M_allocated: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_num_get {
    pub _base: std_locale_facet,
}
pub type std_num_get_char_type<_CharT> = _CharT;
pub type std_num_get_iter_type<_InIter> = _InIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_num_put {
    pub _base: std_locale_facet,
}
pub type std_num_put_char_type<_CharT> = _CharT;
pub type std_num_put_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___use_cache {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17__verify_groupingPKcmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn std___verify_grouping(
        __grouping: *const ::std::os::raw::c_char,
        __grouping_size: usize,
        __grouping_tmp: *const std_string,
    ) -> bool;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_open0_char_close0"]
        [::std::mem::size_of::<std_numpunct<::std::os::raw::c_char>>() - 24usize];
    ["Align of template specialization: std_numpunct_open0_char_close0"]
        [::std::mem::align_of::<std_numpunct<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_byname_open0_char_close0"]
        [::std::mem::size_of::<std_numpunct_byname<::std::os::raw::c_char>>() - 24usize];
    ["Align of template specialization: std_numpunct_byname_open0_char_close0"]
        [::std::mem::align_of::<std_numpunct_byname<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_num_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_num_get>() - 16usize];
    [
        "Align of template specialization: std_num_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_num_get>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_num_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_num_put>() - 16usize];
    [
        "Align of template specialization: std_num_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_num_put>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numpunct<u32>>() - 24usize];
    ["Align of template specialization: std_numpunct_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numpunct<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numpunct_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numpunct_byname<u32>>() - 24usize];
    ["Align of template specialization: std_numpunct_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numpunct_byname<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_num_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_num_get>() - 16usize];
    [
        "Align of template specialization: std_num_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_num_get>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_num_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_num_put>() - 16usize];
    [
        "Align of template specialization: std_num_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_num_put>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ios<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_ios_base,
    pub _M_tie: *mut std_basic_ostream<_CharT>,
    pub _M_fill: std_basic_ios_char_type<_CharT>,
    pub _M_fill_init: bool,
    pub _M_streambuf: *mut std_basic_streambuf<_CharT>,
    pub _M_ctype: *const std_basic_ios___ctype_type,
    pub _M_num_put: *const std_basic_ios___num_put_type,
    pub _M_num_get: *const std_basic_ios___num_get_type,
}
pub type std_basic_ios_char_type<_CharT> = _CharT;
pub type std_basic_ios_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ios_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ios_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ios_traits_type<_Traits> = _Traits;
pub type std_basic_ios___ctype_type = std_ctype;
pub type std_basic_ios___num_put_type = std_num_put;
pub type std_basic_ios___num_get_type = std_num_get;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ios<::std::os::raw::c_char>>() - 264usize];
    [
        "Align of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ios<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ios<u32>>() - 264usize];
    [
        "Align of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ios<u32>>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
}
pub type std_basic_ostream_char_type<_CharT> = _CharT;
pub type std_basic_ostream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ostream_traits_type<_Traits> = _Traits;
pub type std_basic_ostream___streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_basic_ostream___ios_type<_CharT> = std_basic_ios<_CharT>;
pub type std_basic_ostream___ostream_type<_CharT> = std_basic_ostream<_CharT>;
pub type std_basic_ostream___num_put_type = std_num_put;
pub type std_basic_ostream___ctype_type = std_ctype;
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_ostream_sentry {
    pub _M_ok: bool,
    pub _M_os: *mut std_basic_ostream<_CharT>,
}
pub type std__Require_derived_from_ios_base = std__Require;
pub type std___rvalue_stream_insertion_t<_Os> = *mut _Os;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ostream<::std::os::raw::c_char>>() - 272usize];
    [
        "Align of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ostream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ostream<u32>>() - 272usize];
    [
        "Align of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ostream<u32>>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_istream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_gcount: std_streamsize,
}
pub type std_basic_istream_char_type<_CharT> = _CharT;
pub type std_basic_istream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_istream_traits_type<_Traits> = _Traits;
pub type std_basic_istream___streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_basic_istream___ios_type<_CharT> = std_basic_ios<_CharT>;
pub type std_basic_istream___istream_type<_CharT> = std_basic_istream<_CharT>;
pub type std_basic_istream___num_get_type = std_num_get;
pub type std_basic_istream___ctype_type = std_ctype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream_sentry {
    pub _M_ok: bool,
}
pub type std_basic_istream_sentry_traits_type = _Traits;
pub type std_basic_istream_sentry___streambuf_type = std_basic_streambuf<_CharT>;
pub type std_basic_istream_sentry___istream_type = std_basic_istream<_CharT>;
pub type std_basic_istream_sentry___ctype_type = std_basic_istream___ctype_type;
pub type std_basic_istream_sentry___int_type = __BindgenOpaqueArray<u8, 0usize>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt17__istream_extractRSiPcl"]
    pub fn std___istream_extract(
        arg1: *mut std_istream,
        arg2: *mut ::std::os::raw::c_char,
        arg3: std_streamsize,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_iostream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_istream<_CharT>,
    pub _base_1: std_basic_ostream<_CharT>,
}
pub type std_basic_iostream_char_type<_CharT> = _CharT;
pub type std_basic_iostream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_iostream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_iostream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_iostream_traits_type<_Traits> = _Traits;
pub type std_basic_iostream___istream_type<_CharT> = std_basic_istream<_CharT>;
pub type std_basic_iostream___ostream_type<_CharT> = std_basic_ostream<_CharT>;
pub type std___rvalue_stream_extraction_t<_Is> = *mut _Is;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<::std::os::raw::c_char>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_iostream<::std::os::raw::c_char>>() - 288usize];
    [
        "Align of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_iostream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<u32>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_iostream<u32>>() - 288usize];
    [
        "Align of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_iostream<u32>>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt3cin"]
    pub static mut std_cin: std_istream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt4cout"]
    pub static mut std_cout: std_ostream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt4cerr"]
    pub static mut std_cerr: std_ostream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt4clog"]
    pub static mut std_clog: std_ostream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt4wcin"]
    pub static mut std_wcin: std_wistream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt5wcout"]
    pub static mut std_wcout: std_wostream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt5wcerr"]
    pub static mut std_wcerr: std_wostream;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt5wclog"]
    pub static mut std_wclog: std_wostream;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Enable_default_constructor_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Enable_default_constructor_tag"]
        [::std::mem::size_of::<std__Enable_default_constructor_tag>() - 1usize];
    ["Alignment of std__Enable_default_constructor_tag"]
        [::std::mem::align_of::<std__Enable_default_constructor_tag>() - 1usize];
};
#[repr(C)]
pub struct std__Node_handle_common<_NodeAlloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
    pub _M_ptr: std__Node_handle_common__AllocTraits,
    pub _M_alloc: std__Node_handle_common__Optional_alloc<_NodeAlloc>,
}
pub type std__Node_handle_common__AllocTraits = std_allocator_traits;
pub type std__Node_handle_common_allocator_type = std___alloc_rebind;
#[repr(C)]
#[repr(align(1))]
pub struct std__Node_handle_common__Optional_alloc<_NodeAlloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
    pub _M_alloc: __BindgenUnionField<_NodeAlloc>,
    pub bindgen_union_field: [u8; 0usize],
}
#[repr(C)]
pub struct std__Node_handle<_NodeAlloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeAlloc>>,
    pub _base: std__Node_handle_common<_NodeAlloc>,
    pub _M_pkey: std__Node_handle___pointer,
    pub _M_pmapped: std__Node_handle___pointer,
}
pub type std__Node_handle_key_type<_Key> = _Key;
pub type std__Node_handle_mapped_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Node_handle__AllocTraits = std_allocator_traits;
pub type std__Node_handle___pointer = std___ptr_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Node_insert_return<_Iterator, _NodeHandle> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_NodeHandle>>,
    pub position: _Iterator,
    pub inserted: bool,
    pub node: _NodeHandle,
}
pub type std___cache_default = std___not_;
pub type std__Hashtable_enable_default_ctor = u8;
#[repr(C)]
#[derive(Debug)]
pub struct std__Hashtable<_RehashPolicy> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_RehashPolicy>>,
    pub _M_buckets: std__Hashtable___buckets_ptr,
    pub _M_bucket_count: std__Hashtable_size_type,
    pub _M_before_begin: std__Hashtable___node_base,
    pub _M_element_count: std__Hashtable_size_type,
    pub _M_rehash_policy: _RehashPolicy,
    pub _M_single_bucket: std__Hashtable___node_base_ptr,
}
pub type std__Hashtable___traits_type<_Traits> = _Traits;
pub type std__Hashtable___hash_cached = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Hashtable___constant_iterators = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Hashtable___node_type = u8;
pub type std__Hashtable___node_alloc_type = std___alloc_rebind;
pub type std__Hashtable___hashtable_alloc = std___detail__Hashtable_alloc;
pub type std__Hashtable___node_value_type = u8;
pub type std__Hashtable___node_ptr = std__Hashtable___hashtable_alloc;
pub type std__Hashtable___value_alloc_traits = std__Hashtable___hashtable_alloc;
pub type std__Hashtable___node_alloc_traits = std__Hashtable___hashtable_alloc;
pub type std__Hashtable___node_base = std__Hashtable___hashtable_alloc;
pub type std__Hashtable___node_base_ptr = std__Hashtable___hashtable_alloc;
pub type std__Hashtable___buckets_ptr = std__Hashtable___hashtable_alloc;
pub type std__Hashtable___insert_base = u8;
pub type std__Hashtable___enable_default_ctor = std__Hashtable_enable_default_ctor;
pub type std__Hashtable_key_type<_Key> = _Key;
pub type std__Hashtable_value_type<_Value> = _Value;
pub type std__Hashtable_allocator_type<_Alloc> = _Alloc;
pub type std__Hashtable_key_equal<_Equal> = _Equal;
pub type std__Hashtable_pointer = std__Hashtable___value_alloc_traits;
pub type std__Hashtable_const_pointer = std__Hashtable___value_alloc_traits;
pub type std__Hashtable_reference<_Value> = *mut std__Hashtable_value_type<_Value>;
pub type std__Hashtable_const_reference<_Value> = *const std__Hashtable_value_type<_Value>;
pub type std__Hashtable_iterator = std__Hashtable___insert_base;
pub type std__Hashtable_const_iterator = std__Hashtable___insert_base;
pub type std__Hashtable_local_iterator = u8;
pub type std__Hashtable_const_local_iterator = u8;
pub type std__Hashtable___rehash_type<_RehashPolicy> = _RehashPolicy;
pub type std__Hashtable___rehash_state = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Hashtable___unique_keys = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Hashtable___hashtable_base = std___detail__Hashtable_base;
pub type std__Hashtable___hash_code_base = std__Hashtable___hashtable_base;
pub type std__Hashtable___hash_code = std__Hashtable___hashtable_base;
pub type std__Hashtable___ireturn_type = std__Hashtable___insert_base;
pub type std__Hashtable___map_base = u8;
pub type std__Hashtable___rehash_base = std___detail__Rehash_base;
pub type std__Hashtable___eq_base = u8;
pub type std__Hashtable___reuse_or_alloc_node_gen_t = std___detail__ReuseOrAllocNode;
pub type std__Hashtable___alloc_node_gen_t = std___detail__AllocNode;
pub type std__Hashtable___node_builder_t = std___detail__NodeBuilder;
#[repr(C)]
#[derive(Debug)]
pub struct std__Hashtable__Scoped_node {
    pub _M_h: *mut std__Hashtable___hashtable_alloc,
    pub _M_node: std__Hashtable___node_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Hashtable___hash_code_base_access {
    pub _address: u8,
}
pub type std__Hashtable_size_type = std__Hashtable___hashtable_base;
pub type std__Hashtable_difference_type = std__Hashtable___hashtable_base;
pub type std__Hashtable_node_type = std__Node_handle<std__Hashtable___node_alloc_type>;
pub type std__Hashtable_insert_return_type =
    std__Node_insert_return<std__Hashtable_iterator, std__Hashtable_node_type>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Hash_merge_helper {
    pub _address: u8,
}
pub type std__RequireNotAllocatorOrIntegral = std___enable_if_t;
pub type std___umap_traits = u8;
pub type std___umap_hashtable = std__Hashtable<_RehashPolicy>;
pub type std___ummap_traits = u8;
pub type std___ummap_hashtable = std__Hashtable<_RehashPolicy>;
#[repr(C)]
#[derive(Debug)]
pub struct std_unordered_map {
    pub _M_h: std_unordered_map__Hashtable,
}
pub type std_unordered_map__Hashtable = std___umap_hashtable;
pub type std_unordered_map_key_type = std_unordered_map__Hashtable;
pub type std_unordered_map_value_type = std_unordered_map__Hashtable;
pub type std_unordered_map_mapped_type = std_unordered_map__Hashtable;
pub type std_unordered_map_hasher = std_unordered_map__Hashtable;
pub type std_unordered_map_key_equal = std_unordered_map__Hashtable;
pub type std_unordered_map_allocator_type = std_unordered_map__Hashtable;
pub type std_unordered_map_pointer = std_unordered_map__Hashtable;
pub type std_unordered_map_const_pointer = std_unordered_map__Hashtable;
pub type std_unordered_map_reference = std_unordered_map__Hashtable;
pub type std_unordered_map_const_reference = std_unordered_map__Hashtable;
pub type std_unordered_map_iterator = std_unordered_map__Hashtable;
pub type std_unordered_map_const_iterator = std_unordered_map__Hashtable;
pub type std_unordered_map_local_iterator = std_unordered_map__Hashtable;
pub type std_unordered_map_const_local_iterator = std_unordered_map__Hashtable;
pub type std_unordered_map_size_type = std_unordered_map__Hashtable;
pub type std_unordered_map_difference_type = std_unordered_map__Hashtable;
pub type std_unordered_map_node_type = std_unordered_map__Hashtable;
pub type std_unordered_map_insert_return_type = std_unordered_map__Hashtable;
#[repr(C)]
#[derive(Debug)]
pub struct std_unordered_multimap {
    pub _M_h: std_unordered_multimap__Hashtable,
}
pub type std_unordered_multimap__Hashtable = std___ummap_hashtable;
pub type std_unordered_multimap_key_type = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_value_type = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_mapped_type = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_hasher = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_key_equal = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_allocator_type = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_pointer = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_const_pointer = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_reference = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_const_reference = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_iterator = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_const_iterator = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_local_iterator = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_const_local_iterator = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_size_type = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_difference_type = std_unordered_multimap__Hashtable;
pub type std_unordered_multimap_node_type = std_unordered_multimap__Hashtable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_bitwise_relocatable {
    pub _address: u8,
}
#[repr(C)]
pub struct std__Vector_base {
    pub _M_impl: std__Vector_base__Vector_impl,
}
pub type std__Vector_base__Tp_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Vector_base_pointer = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std__Vector_base__Vector_impl_data {
    pub _M_start: std__Vector_base_pointer,
    pub _M_finish: std__Vector_base_pointer,
    pub _M_end_of_storage: std__Vector_base_pointer,
}
#[repr(C)]
pub struct std__Vector_base__Vector_impl {
    pub _base_1: std__Vector_base__Vector_impl_data,
}
pub type std__Vector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector {
    pub _base: std__Vector_base,
}
pub type std_vector__Base = std__Vector_base;
pub type std_vector__Tp_alloc_type = std_vector__Base;
pub type std_vector__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_pointer = std_vector__Base;
pub type std_vector_const_pointer = std_vector__Alloc_traits;
pub type std_vector_reference = std_vector__Alloc_traits;
pub type std_vector_const_reference = std_vector__Alloc_traits;
pub type std_vector_iterator = __gnu_cxx___normal_iterator<std_vector_pointer>;
pub type std_vector_const_iterator = __gnu_cxx___normal_iterator<std_vector_const_pointer>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_size_type = usize;
pub type std_vector_difference_type = isize;
pub type std_vector_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
pub struct std_vector__Temporary_value<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_this: *mut std_vector,
    pub _M_storage: std_vector__Temporary_value__Storage<_Tp>,
}
#[repr(C)]
pub union std_vector__Temporary_value__Storage<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_byte: ::std::os::raw::c_uchar,
    pub _M_val: _Tp,
}
pub type std__Bit_type = ::std::os::raw::c_ulong;
pub const _S_word_bit: std__bindgen_ty_1 = 64;
pub type std__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_reference {
    pub _M_p: *mut std__Bit_type,
    pub _M_mask: std__Bit_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_reference"][::std::mem::size_of::<std__Bit_reference>() - 16usize];
    ["Alignment of std__Bit_reference"][::std::mem::align_of::<std__Bit_reference>() - 8usize];
    ["Offset of field: std__Bit_reference::_M_p"]
        [::std::mem::offset_of!(std__Bit_reference, _M_p) - 0usize];
    ["Offset of field: std__Bit_reference::_M_mask"]
        [::std::mem::offset_of!(std__Bit_reference, _M_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator_base {
    pub _M_p: *mut std__Bit_type,
    pub _M_offset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_iterator_base"][::std::mem::size_of::<std__Bit_iterator_base>() - 16usize];
    ["Alignment of std__Bit_iterator_base"]
        [::std::mem::align_of::<std__Bit_iterator_base>() - 8usize];
    ["Offset of field: std__Bit_iterator_base::_M_p"]
        [::std::mem::offset_of!(std__Bit_iterator_base, _M_p) - 0usize];
    ["Offset of field: std__Bit_iterator_base::_M_offset"]
        [::std::mem::offset_of!(std__Bit_iterator_base, _M_offset) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_iterator_reference = std__Bit_reference;
pub type std__Bit_iterator_pointer = *mut std__Bit_reference;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_iterator"][::std::mem::size_of::<std__Bit_iterator>() - 16usize];
    ["Alignment of std__Bit_iterator"][::std::mem::align_of::<std__Bit_iterator>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bit_const_iterator {
    pub _base: std__Bit_iterator_base,
}
pub type std__Bit_const_iterator_reference = bool;
pub type std__Bit_const_iterator_const_reference = bool;
pub type std__Bit_const_iterator_pointer = *const bool;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Bit_const_iterator"][::std::mem::size_of::<std__Bit_const_iterator>() - 16usize];
    ["Alignment of std__Bit_const_iterator"]
        [::std::mem::align_of::<std__Bit_const_iterator>() - 8usize];
};
#[repr(C)]
pub struct std__Bvector_base {
    pub _M_impl: std__Bvector_base__Bvector_impl,
}
pub type std__Bvector_base__Bit_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Bvector_base__Bit_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Bvector_base__Bit_pointer = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std__Bvector_base__Bvector_impl_data {
    pub _M_start: std__Bit_iterator,
    pub _M_finish: std__Bit_iterator,
    pub _M_end_of_storage: std__Bvector_base__Bit_pointer,
}
#[repr(C)]
pub struct std__Bvector_base__Bvector_impl {
    pub _base_1: std__Bvector_base__Bvector_impl_data,
}
pub type std__Bvector_base_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uniform_int_distribution<_IntType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_IntType>>,
    pub _M_param: std_uniform_int_distribution_param_type<_IntType>,
}
pub type std_uniform_int_distribution_result_type<_IntType> = _IntType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uniform_int_distribution_param_type<_IntType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_IntType>>,
    pub _M_a: _IntType,
    pub _M_b: _IntType,
}
pub type std_uniform_int_distribution_param_type_distribution_type<_IntType> =
    std_uniform_int_distribution<_IntType>;
#[repr(C)]
#[derive(Debug)]
pub struct std__Temporary_buffer<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_original_len: std__Temporary_buffer_size_type,
    pub _M_len: std__Temporary_buffer_size_type,
    pub _M_buffer: std__Temporary_buffer_pointer<_Tp>,
}
pub type std__Temporary_buffer_value_type<_Tp> = _Tp;
pub type std__Temporary_buffer_pointer<_Tp> = *mut std__Temporary_buffer_value_type<_Tp>;
pub type std__Temporary_buffer_iterator<_Tp> = std__Temporary_buffer_pointer<_Tp>;
pub type std__Temporary_buffer_size_type = isize;
pub const _S_threshold: std__bindgen_ty_2 = 16;
pub type std__bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _S_chunk_size: std__bindgen_ty_3 = 7;
pub type std__bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_function_call {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_function_call"][::std::mem::size_of::<std_bad_function_call>() - 8usize];
    ["Alignment of std_bad_function_call"]
        [::std::mem::align_of::<std_bad_function_call>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt17bad_function_callD1Ev"]
    pub fn std_bad_function_call_bad_function_call_destructor(this: *mut std_bad_function_call);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt17bad_function_call4whatEv"]
    pub fn std_bad_function_call_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_location_invariant {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Undefined_class {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std__Nocopy_types {
    pub _M_object: *mut ::std::os::raw::c_void,
    pub _M_const_object: *const ::std::os::raw::c_void,
    pub _M_function_pointer: ::std::option::Option<unsafe extern "C" fn()>,
    pub _M_member_pointer: __BindgenOpaqueArray<u64, 2usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Nocopy_types"][::std::mem::size_of::<std__Nocopy_types>() - 16usize];
    ["Alignment of std__Nocopy_types"][::std::mem::align_of::<std__Nocopy_types>() - 8usize];
    ["Offset of field: std__Nocopy_types::_M_object"]
        [::std::mem::offset_of!(std__Nocopy_types, _M_object) - 0usize];
    ["Offset of field: std__Nocopy_types::_M_const_object"]
        [::std::mem::offset_of!(std__Nocopy_types, _M_const_object) - 0usize];
    ["Offset of field: std__Nocopy_types::_M_function_pointer"]
        [::std::mem::offset_of!(std__Nocopy_types, _M_function_pointer) - 0usize];
    ["Offset of field: std__Nocopy_types::_M_member_pointer"]
        [::std::mem::offset_of!(std__Nocopy_types, _M_member_pointer) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union std__Any_data {
    pub _M_unused: std__Nocopy_types,
    pub _M_pod_data: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Any_data"][::std::mem::size_of::<std__Any_data>() - 16usize];
    ["Alignment of std__Any_data"][::std::mem::align_of::<std__Any_data>() - 8usize];
    ["Offset of field: std__Any_data::_M_unused"]
        [::std::mem::offset_of!(std__Any_data, _M_unused) - 0usize];
    ["Offset of field: std__Any_data::_M_pod_data"]
        [::std::mem::offset_of!(std__Any_data, _M_pod_data) - 0usize];
};
pub const std__Manager_operation___get_type_info: std__Manager_operation = 0;
pub const std__Manager_operation___get_functor_ptr: std__Manager_operation = 1;
pub const std__Manager_operation___clone_functor: std__Manager_operation = 2;
pub const std__Manager_operation___destroy_functor: std__Manager_operation = 3;
pub type std__Manager_operation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_function {
    pub _address: u8,
}
#[repr(C)]
pub struct std__Function_base {
    pub _M_functor: std__Any_data,
    pub _M_manager: std__Function_base__Manager_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Function_base__Base_manager {
    pub _address: u8,
}
pub type std__Function_base__Base_manager__Local_storage = u8;
pub type std__Function_base__Manager_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut std__Any_data,
        arg2: *const std__Any_data,
        arg3: std__Manager_operation,
    ) -> bool,
>;
pub const std__Function_base__M_max_size: usize = 16;
pub const std__Function_base__M_max_align: usize = 8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Function_base"][::std::mem::size_of::<std__Function_base>() - 24usize];
    ["Alignment of std__Function_base"][::std::mem::align_of::<std__Function_base>() - 8usize];
    ["Offset of field: std__Function_base::_M_functor"]
        [::std::mem::offset_of!(std__Function_base, _M_functor) - 0usize];
    ["Offset of field: std__Function_base::_M_manager"]
        [::std::mem::offset_of!(std__Function_base, _M_manager) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Function_handler {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Function_handler_open0_void_void_close0"]
        [::std::mem::size_of::<std__Function_handler>() - 1usize];
    ["Align of template specialization: std__Function_handler_open0_void_void_close0"]
        [::std::mem::align_of::<std__Function_handler>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function_guide_helper {
    pub _address: u8,
}
pub type std___function_guide_t = std___function_guide_helper;
pub type std___array_traits__Type<_Tp> = *mut _Tp;
pub type std___array_traits__Is_swappable = std___is_swappable;
pub type std___array_traits__Is_nothrow_swappable = std___is_nothrow_swappable;
pub type std_array_value_type<_Tp> = _Tp;
pub type std_array_pointer<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_pointer<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_reference<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_reference<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_iterator<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_iterator<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_size_type = usize;
pub type std_array_difference_type = isize;
pub type std_array_reverse_iterator<_Tp> = std_reverse_iterator<std_array_iterator<_Tp>>;
pub type std_array_const_reverse_iterator<_Tp> =
    std_reverse_iterator<std_array_const_iterator<_Tp>>;
pub type std__Mem_fn_base__Traits = std__Mem_fn_traits;
pub type std__Mem_fn_base__Arity = std__Mem_fn_base__Traits;
pub type std__Mem_fn_base__Varargs = std__Mem_fn_base__Traits;
pub type std__Mem_fn_base_result_type = std__Mem_fn_base__Traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Mem_fn {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_bind_expression {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_placeholder {
    pub _base: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_1E"]
    pub static std_placeholders__1: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_2E"]
    pub static std_placeholders__2: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_3E"]
    pub static std_placeholders__3: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_4E"]
    pub static std_placeholders__4: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_5E"]
    pub static std_placeholders__5: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_6E"]
    pub static std_placeholders__6: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_7E"]
    pub static std_placeholders__7: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_8E"]
    pub static std_placeholders__8: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders2_9E"]
    pub static std_placeholders__9: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_10E"]
    pub static std_placeholders__10: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_11E"]
    pub static std_placeholders__11: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_12E"]
    pub static std_placeholders__12: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_13E"]
    pub static std_placeholders__13: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_14E"]
    pub static std_placeholders__14: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_15E"]
    pub static std_placeholders__15: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_16E"]
    pub static std_placeholders__16: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_17E"]
    pub static std_placeholders__17: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_18E"]
    pub static std_placeholders__18: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_19E"]
    pub static std_placeholders__19: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_20E"]
    pub static std_placeholders__20: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_21E"]
    pub static std_placeholders__21: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_22E"]
    pub static std_placeholders__22: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_23E"]
    pub static std_placeholders__23: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_24E"]
    pub static std_placeholders__24: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_25E"]
    pub static std_placeholders__25: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_26E"]
    pub static std_placeholders__26: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_27E"]
    pub static std_placeholders__27: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_28E"]
    pub static std_placeholders__28: u8;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12placeholders3_29E"]
    pub static std_placeholders__29: u8;
}
pub type std__Safe_tuple_element_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind_result {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bind_check_arity {
    pub _address: u8,
}
pub type std___is_socketlike = std___or_;
pub type std__Bind_helper___func_type = std_decay;
pub type std__Bind_helper_type = std__Bind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Bindres_helper {
    pub _address: u8,
}
pub type std__Bindres_helper___functor_type = std_decay;
pub type std__Bindres_helper_type = std__Bind_result;
#[repr(C)]
#[derive(Debug)]
pub struct std__Not_fn<_Fn> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fn>>,
    pub _M_fn: _Fn,
}
pub type std__Not_fn___inv_res_t = std___invoke_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_byte_like {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_byte_like_open0_std_byte_std_equal_to_open1_std_byte_close1_close0",
    ][::std::mem::size_of::<std___is_byte_like>() - 1usize];
    [
        "Align of template specialization: std___is_byte_like_open0_std_byte_std_equal_to_open1_std_byte_close1_close0",
    ][::std::mem::align_of::<std___is_byte_like>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___is_byte_like_open0_std_byte_std_equal_to_open1_void_close1_close0",
    ][::std::mem::size_of::<std___is_byte_like>() - 1usize];
    [
        "Align of template specialization: std___is_byte_like_open0_std_byte_std_equal_to_open1_void_close1_close0",
    ][::std::mem::align_of::<std___is_byte_like>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_searcher {
    pub _M_m: std_tuple,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___boyer_moore_map_base {
    pub _M_bad_char: std_unordered_map,
}
pub type std___boyer_moore_map_base___diff_type<_Tp> = _Tp;
pub type std___boyer_moore_array_base___diff_type<_Tp> = _Tp;
pub type std___boyer_moore_base_t = std___conditional_t;
#[repr(C)]
pub struct std_boyer_moore_searcher<_RAIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_RAIter>>,
    pub _M_pat: _RAIter,
    pub _M_pat_end: _RAIter,
    pub _M_good_suffix: std_vector,
}
pub type std_boyer_moore_searcher__Base = std___boyer_moore_base_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_boyer_moore_horspool_searcher<_RAIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_RAIter>>,
    pub _M_pat: _RAIter,
    pub _M_pat_end: _RAIter,
}
pub type std_boyer_moore_horspool_searcher__Base = std___boyer_moore_base_t;
#[repr(C)]
#[derive(Debug)]
pub struct std_istream_iterator<_Tp, _CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_stream: *mut std_istream_iterator_istream_type<_CharT>,
    pub _M_value: _Tp,
    pub _M_ok: bool,
}
pub type std_istream_iterator_char_type<_CharT> = _CharT;
pub type std_istream_iterator_traits_type<_Traits> = _Traits;
pub type std_istream_iterator_istream_type<_CharT> = std_basic_istream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostream_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_stream: *mut std_ostream_iterator_ostream_type<_CharT>,
    pub _M_string: *const _CharT,
}
pub type std_ostream_iterator_char_type<_CharT> = _CharT;
pub type std_ostream_iterator_traits_type<_Traits> = _Traits;
pub type std_ostream_iterator_ostream_type<_CharT> = std_basic_ostream<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_raw_storage_iterator<_OutputIterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutputIterator>>,
    pub _M_iter: _OutputIterator,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl {
    pub _M_t: std_tuple,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uniq_ptr_impl__Ptr {
    pub _address: u8,
}
pub type std___uniq_ptr_impl__Ptr_type<_Up> = *mut _Up;
pub type std___uniq_ptr_impl__DeleterConstraint = u8;
pub type std___uniq_ptr_impl_pointer = std___uniq_ptr_impl__Ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub _M_t: u8,
}
pub type std_unique_ptr__DeleterConstraint = std___uniq_ptr_impl;
pub type std_unique_ptr_pointer = std___uniq_ptr_impl;
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr___safe_conversion_up = std___and_;
#[repr(C)]
#[derive(Debug)]
pub struct std___allocated_ptr<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_alloc: *mut _Alloc,
    pub _M_ptr: std___allocated_ptr_pointer,
}
pub type std___allocated_ptr_pointer = std_allocator_traits;
pub type std___allocated_ptr_value_type = std_allocator_traits;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_weak_ptr {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_weak_ptr"][::std::mem::size_of::<std_bad_weak_ptr>() - 8usize];
    ["Alignment of std_bad_weak_ptr"][::std::mem::align_of::<std_bad_weak_ptr>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt12bad_weak_ptr4whatEv"]
    pub fn std_bad_weak_ptr_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt12bad_weak_ptrD1Ev"]
    pub fn std_bad_weak_ptr_bad_weak_ptr_destructor(this: *mut std_bad_weak_ptr);
}
pub const std__Mutex_base__S_need_barriers: std__Mutex_base__bindgen_ty_1 = 0;
pub type std__Mutex_base__bindgen_ty_1 = i32;
unsafe extern "C" {
    #[link_name = "\u{1}_M_add_ref_lock_nothrow"]
    pub fn std__Sp_counted_base__M_add_ref_lock_nothrow(this: *mut u8) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_M_release"]
    pub fn std__Sp_counted_base__M_release(this: *mut u8);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_owner_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_deleter__Impl<_Ptr> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ptr>>,
    pub _M_ptr: _Ptr,
}
pub type std__Sp_counted_deleter__Impl__Del_base = u8;
pub type std__Sp_counted_deleter__Impl__Alloc_base = u8;
pub type std__Sp_counted_deleter___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_make_shared_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sp_make_shared_tag"][::std::mem::size_of::<std__Sp_make_shared_tag>() - 1usize];
    ["Alignment of std__Sp_make_shared_tag"]
        [::std::mem::align_of::<std__Sp_make_shared_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_alloc_shared_tag<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _M_a: *const _Alloc,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_counted_ptr_inplace__Impl {
    pub _M_storage: __gnu_cxx___aligned_buffer,
}
pub type std__Sp_counted_ptr_inplace__Impl__A_base = u8;
pub type std__Sp_counted_ptr_inplace___allocator_type = std___alloc_rebind;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_array_delete {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___sp_array_delete"][::std::mem::size_of::<std___sp_array_delete>() - 1usize];
    ["Alignment of std___sp_array_delete"]
        [::std::mem::align_of::<std___sp_array_delete>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_count___not_alloc_shared_tag {
    pub _address: u8,
}
pub type std___shared_count___not_alloc_shared_tag_type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_compatible_with {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_is_constructible_arr {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_is_constructible {
    pub _address: u8,
}
pub type std___shared_ptr_access_element_type<_Tp> = _Tp;
pub type std___shared_ptr_element_type = std_remove_extent;
pub type std___shared_ptr__SafeConv = u8;
pub type std___shared_ptr__Compatible = u8;
pub type std___shared_ptr__Assignable = std___shared_ptr__Compatible;
pub type std___shared_ptr__UniqCompatible = std___enable_if_t;
pub type std___shared_ptr__UniqAssignable = std___shared_ptr__UniqCompatible;
pub type std___shared_ptr_weak_type = u8;
pub type std___shared_ptr___esft_base_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_ptr___has_esft_base {
    pub _base: std_false_type,
}
pub type std___weak_ptr__Compatible = u8;
pub type std___weak_ptr__Assignable = std___weak_ptr__Compatible;
pub type std___weak_ptr_element_type = std_remove_extent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sp_owner_less {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Sp_owner_less_open0_void_void_close0"]
        [::std::mem::size_of::<std__Sp_owner_less>() - 1usize];
    ["Align of template specialization: std__Sp_owner_less_open0_void_void_close0"]
        [::std::mem::align_of::<std__Sp_owner_less>() - 1usize];
};
pub type std__NonArray = std___enable_if_t;
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr {
    pub _address: u8,
}
pub type std_shared_ptr__Constructible = u8;
pub type std_shared_ptr__Assignable = u8;
pub type std_shared_ptr_element_type = u8;
pub type std_shared_ptr_weak_type = std_weak_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr {
    pub _address: u8,
}
pub type std_weak_ptr__Constructible = u8;
pub type std_weak_ptr__Assignable = u8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_owner_less_open0_void_close0"]
        [::std::mem::size_of::<std_owner_less>() - 1usize];
    ["Align of template specialization: std_owner_less_open0_void_close0"]
        [::std::mem::align_of::<std_owner_less>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_enable_shared_from_this {
    pub _M_weak_this: std_weak_ptr,
}
pub const std_memory_order_memory_order_relaxed: std_memory_order = 0;
pub const std_memory_order_memory_order_consume: std_memory_order = 1;
pub const std_memory_order_memory_order_acquire: std_memory_order = 2;
pub const std_memory_order_memory_order_release: std_memory_order = 3;
pub const std_memory_order_memory_order_acq_rel: std_memory_order = 4;
pub const std_memory_order_memory_order_seq_cst: std_memory_order = 5;
pub type std_memory_order = ::std::os::raw::c_uint;
pub const std___memory_order_modifier___memory_order_mask: std___memory_order_modifier = 65535;
pub const std___memory_order_modifier___memory_order_modifier_mask: std___memory_order_modifier =
    4294901760;
pub const std___memory_order_modifier___memory_order_hle_acquire: std___memory_order_modifier =
    65536;
pub const std___memory_order_modifier___memory_order_hle_release: std___memory_order_modifier =
    131072;
pub type std___memory_order_modifier = ::std::os::raw::c_uint;
pub type std___atomic_flag_data_type = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___atomic_flag_base {
    pub _M_i: std___atomic_flag_data_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___atomic_flag_base"][::std::mem::size_of::<std___atomic_flag_base>() - 1usize];
    ["Alignment of std___atomic_flag_base"]
        [::std::mem::align_of::<std___atomic_flag_base>() - 1usize];
    ["Offset of field: std___atomic_flag_base::_M_i"]
        [::std::mem::offset_of!(std___atomic_flag_base, _M_i) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_atomic_flag {
    pub _base: std___atomic_flag_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_atomic_flag"][::std::mem::size_of::<std_atomic_flag>() - 1usize];
    ["Alignment of std_atomic_flag"][::std::mem::align_of::<std_atomic_flag>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___atomic_base<_ITp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_ITp>>,
    pub _M_i: std___atomic_base___int_type<_ITp>,
}
pub type std___atomic_base_value_type<_ITp> = _ITp;
pub type std___atomic_base_difference_type<_ITp> = std___atomic_base_value_type<_ITp>;
pub type std___atomic_base___int_type<_ITp> = _ITp;
pub type std___atomic_impl__Val = std_remove_volatile;
#[repr(C)]
#[derive(Debug)]
pub struct std__Sp_locker {
    pub _M_key1: ::std::os::raw::c_uchar,
    pub _M_key2: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sp_locker"][::std::mem::size_of::<std__Sp_locker>() - 2usize];
    ["Alignment of std__Sp_locker"][::std::mem::align_of::<std__Sp_locker>() - 1usize];
    ["Offset of field: std__Sp_locker::_M_key1"]
        [::std::mem::offset_of!(std__Sp_locker, _M_key1) - 0usize];
    ["Offset of field: std__Sp_locker::_M_key2"]
        [::std::mem::offset_of!(std__Sp_locker, _M_key2) - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKv"]
    pub fn std__Sp_locker__Sp_locker(
        this: *mut std__Sp_locker,
        arg1: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerC1EPKvS1_"]
    pub fn std__Sp_locker__Sp_locker1(
        this: *mut std__Sp_locker,
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10_Sp_lockerD1Ev"]
    pub fn std__Sp_locker__Sp_locker_destructor(this: *mut std__Sp_locker);
}
impl std__Sp_locker {
    #[inline]
    pub unsafe fn new(arg1: *const ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Sp_locker__Sp_locker(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std__Sp_locker__Sp_locker1(__bindgen_tmp.as_mut_ptr(), arg1, arg2);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Sp_locker__Sp_locker_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_auto_ptr_ref<_Tp1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp1>>,
    pub _M_ptr: *mut _Tp1,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_auto_ptr<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_ptr: *mut _Tp,
}
pub type std_auto_ptr_element_type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_auto_ptr_open0_void_close0"]
        [::std::mem::size_of::<std_auto_ptr<::std::os::raw::c_void>>() - 1usize];
    ["Align of template specialization: std_auto_ptr_open0_void_close0"]
        [::std::mem::align_of::<std_auto_ptr<::std::os::raw::c_void>>() - 1usize];
};
pub const std_pointer_safety_relaxed: std_pointer_safety = 0;
pub const std_pointer_safety_preferred: std_pointer_safety = 1;
pub const std_pointer_safety_strict: std_pointer_safety = 2;
pub type std_pointer_safety = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fwd_list_node_base {
    pub _M_next: *mut std__Fwd_list_node_base,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Fwd_list_node_base"][::std::mem::size_of::<std__Fwd_list_node_base>() - 8usize];
    ["Alignment of std__Fwd_list_node_base"]
        [::std::mem::align_of::<std__Fwd_list_node_base>() - 8usize];
    ["Offset of field: std__Fwd_list_node_base::_M_next"]
        [::std::mem::offset_of!(std__Fwd_list_node_base, _M_next) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fwd_list_node {
    pub _base: std__Fwd_list_node_base,
    pub _M_storage: __gnu_cxx___aligned_buffer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fwd_list_iterator {
    pub _M_node: *mut std__Fwd_list_node_base,
}
pub type std__Fwd_list_iterator__Self = std__Fwd_list_iterator;
pub type std__Fwd_list_iterator__Node = std__Fwd_list_node;
pub type std__Fwd_list_iterator_value_type<_Tp> = _Tp;
pub type std__Fwd_list_iterator_pointer<_Tp> = *mut _Tp;
pub type std__Fwd_list_iterator_reference<_Tp> = *mut _Tp;
pub type std__Fwd_list_iterator_difference_type = isize;
pub type std__Fwd_list_iterator_iterator_category = std_forward_iterator_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fwd_list_const_iterator {
    pub _M_node: *const std__Fwd_list_node_base,
}
pub type std__Fwd_list_const_iterator__Self = std__Fwd_list_const_iterator;
pub type std__Fwd_list_const_iterator__Node = std__Fwd_list_node;
pub type std__Fwd_list_const_iterator_iterator = std__Fwd_list_iterator;
pub type std__Fwd_list_const_iterator_value_type<_Tp> = _Tp;
pub type std__Fwd_list_const_iterator_pointer<_Tp> = *const _Tp;
pub type std__Fwd_list_const_iterator_reference<_Tp> = *const _Tp;
pub type std__Fwd_list_const_iterator_difference_type = isize;
pub type std__Fwd_list_const_iterator_iterator_category = std_forward_iterator_tag;
#[repr(C)]
#[derive(Debug)]
pub struct std__Fwd_list_base {
    pub _M_impl: std__Fwd_list_base__Fwd_list_impl,
}
pub type std__Fwd_list_base__Node_alloc_type = std___alloc_rebind;
pub type std__Fwd_list_base__Node_alloc_traits = __gnu_cxx___alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Fwd_list_base__Fwd_list_impl {
    pub _M_head: std__Fwd_list_node_base,
}
pub type std__Fwd_list_base_iterator = std__Fwd_list_iterator;
pub type std__Fwd_list_base_const_iterator = std__Fwd_list_const_iterator;
pub type std__Fwd_list_base__Node = std__Fwd_list_node;
#[repr(C)]
#[derive(Debug)]
pub struct std_forward_list {
    pub _base: std__Fwd_list_base,
}
pub type std_forward_list__Base = std__Fwd_list_base;
pub type std_forward_list__Node_base = std__Fwd_list_node_base;
pub type std_forward_list__Node = std_forward_list__Base;
pub type std_forward_list__Node_alloc_type = std_forward_list__Base;
pub type std_forward_list__Node_alloc_traits = std_forward_list__Base;
pub type std_forward_list__Alloc_traits = std_allocator_traits;
pub type std_forward_list_value_type<_Tp> = _Tp;
pub type std_forward_list_pointer = std_forward_list__Alloc_traits;
pub type std_forward_list_const_pointer = std_forward_list__Alloc_traits;
pub type std_forward_list_reference<_Tp> = *mut std_forward_list_value_type<_Tp>;
pub type std_forward_list_const_reference<_Tp> = *const std_forward_list_value_type<_Tp>;
pub type std_forward_list_iterator = std_forward_list__Base;
pub type std_forward_list_const_iterator = std_forward_list__Base;
pub type std_forward_list_size_type = usize;
pub type std_forward_list_difference_type = isize;
pub type std_forward_list_allocator_type<_Alloc> = _Alloc;
pub type std_forward_list___remove_return_type = ::std::os::raw::c_void;
pub const std__Rb_tree_color__S_red: std__Rb_tree_color = 0;
pub const std__Rb_tree_color__S_black: std__Rb_tree_color = 1;
pub type std__Rb_tree_color = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_node_base {
    pub _M_color: std__Rb_tree_color,
    pub _M_parent: std__Rb_tree_node_base__Base_ptr,
    pub _M_left: std__Rb_tree_node_base__Base_ptr,
    pub _M_right: std__Rb_tree_node_base__Base_ptr,
}
pub type std__Rb_tree_node_base__Base_ptr = *mut std__Rb_tree_node_base;
pub type std__Rb_tree_node_base__Const_Base_ptr = *const std__Rb_tree_node_base;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Rb_tree_node_base"][::std::mem::size_of::<std__Rb_tree_node_base>() - 32usize];
    ["Alignment of std__Rb_tree_node_base"]
        [::std::mem::align_of::<std__Rb_tree_node_base>() - 8usize];
    ["Offset of field: std__Rb_tree_node_base::_M_color"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_color) - 0usize];
    ["Offset of field: std__Rb_tree_node_base::_M_parent"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_parent) - 8usize];
    ["Offset of field: std__Rb_tree_node_base::_M_left"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_left) - 16usize];
    ["Offset of field: std__Rb_tree_node_base::_M_right"]
        [::std::mem::offset_of!(std__Rb_tree_node_base, _M_right) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_key_compare<_Key_compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key_compare>>,
    pub _M_key_compare: _Key_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_header {
    pub _M_header: std__Rb_tree_node_base,
    pub _M_node_count: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Rb_tree_header"][::std::mem::size_of::<std__Rb_tree_header>() - 40usize];
    ["Alignment of std__Rb_tree_header"][::std::mem::align_of::<std__Rb_tree_header>() - 8usize];
    ["Offset of field: std__Rb_tree_header::_M_header"]
        [::std::mem::offset_of!(std__Rb_tree_header, _M_header) - 0usize];
    ["Offset of field: std__Rb_tree_header::_M_node_count"]
        [::std::mem::offset_of!(std__Rb_tree_header, _M_node_count) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_node {
    pub _base: std__Rb_tree_node_base,
    pub _M_storage: __gnu_cxx___aligned_membuf,
}
pub type std__Rb_tree_node__Link_type = *mut std__Rb_tree_node;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_increment(__x: *mut std__Rb_tree_node_base) -> *mut std__Rb_tree_node_base;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_increment1(
        __x: *const std__Rb_tree_node_base,
    ) -> *const std__Rb_tree_node_base;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_decrement(__x: *mut std__Rb_tree_node_base) -> *mut std__Rb_tree_node_base;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base"]
    pub fn std__Rb_tree_decrement1(
        __x: *const std__Rb_tree_node_base,
    ) -> *const std__Rb_tree_node_base;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_iterator {
    pub _M_node: std__Rb_tree_iterator__Base_ptr,
}
pub type std__Rb_tree_iterator_value_type<_Tp> = _Tp;
pub type std__Rb_tree_iterator_reference<_Tp> = *mut _Tp;
pub type std__Rb_tree_iterator_pointer<_Tp> = *mut _Tp;
pub type std__Rb_tree_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Rb_tree_iterator_difference_type = isize;
pub type std__Rb_tree_iterator__Self = std__Rb_tree_iterator;
pub type std__Rb_tree_iterator__Base_ptr = std__Rb_tree_node_base__Base_ptr;
pub type std__Rb_tree_iterator__Link_type = *mut std__Rb_tree_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_const_iterator {
    pub _M_node: std__Rb_tree_const_iterator__Base_ptr,
}
pub type std__Rb_tree_const_iterator_value_type<_Tp> = _Tp;
pub type std__Rb_tree_const_iterator_reference<_Tp> = *const _Tp;
pub type std__Rb_tree_const_iterator_pointer<_Tp> = *const _Tp;
pub type std__Rb_tree_const_iterator_iterator = std__Rb_tree_iterator;
pub type std__Rb_tree_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__Rb_tree_const_iterator_difference_type = isize;
pub type std__Rb_tree_const_iterator__Self = std__Rb_tree_const_iterator;
pub type std__Rb_tree_const_iterator__Base_ptr = std__Rb_tree_node_base__Const_Base_ptr;
pub type std__Rb_tree_const_iterator__Link_type = *const std__Rb_tree_node;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_"]
    pub fn std__Rb_tree_insert_and_rebalance(
        __insert_left: bool,
        __x: *mut std__Rb_tree_node_base,
        __p: *mut std__Rb_tree_node_base,
        __header: *mut std__Rb_tree_node_base,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_"]
    pub fn std__Rb_tree_rebalance_for_erase(
        __z: *mut std__Rb_tree_node_base,
        __header: *mut std__Rb_tree_node_base,
    ) -> *mut std__Rb_tree_node_base;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree_merge_helper {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree {
    pub _M_impl: u8,
}
pub type std__Rb_tree__Node_allocator = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Rb_tree__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Rb_tree__Base_ptr = *mut std__Rb_tree_node_base;
pub type std__Rb_tree__Const_Base_ptr = *const std__Rb_tree_node_base;
pub type std__Rb_tree__Link_type = *mut std__Rb_tree_node;
pub type std__Rb_tree__Const_Link_type = *const std__Rb_tree_node;
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree__Reuse_or_alloc_node {
    pub _M_root: std__Rb_tree__Base_ptr,
    pub _M_nodes: std__Rb_tree__Base_ptr,
    pub _M_t: *mut std__Rb_tree,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Rb_tree__Alloc_node {
    pub _M_t: *mut std__Rb_tree,
}
pub type std__Rb_tree_key_type<_Key> = _Key;
pub type std__Rb_tree_value_type<_Val> = _Val;
pub type std__Rb_tree_pointer<_Val> = *mut std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_const_pointer<_Val> = *const std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_reference<_Val> = *mut std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_const_reference<_Val> = *const std__Rb_tree_value_type<_Val>;
pub type std__Rb_tree_size_type = usize;
pub type std__Rb_tree_difference_type = isize;
pub type std__Rb_tree_allocator_type<_Alloc> = _Alloc;
pub type std__Rb_tree_reverse_iterator = std_reverse_iterator<std__Rb_tree_iterator>;
pub type std__Rb_tree_const_reverse_iterator = std_reverse_iterator<std__Rb_tree_const_iterator>;
pub type std__Rb_tree_node_type = std__Node_handle<std__Rb_tree__Node_allocator>;
pub type std__Rb_tree_insert_return_type = std__Node_insert_return<_Iterator, _NodeHandle>;
pub const std__Rb_tree___as_lvalue: std__Rb_tree__bindgen_ty_1 = 0;
pub const std__Rb_tree___as_rvalue: std__Rb_tree__bindgen_ty_1 = 0;
pub type std__Rb_tree__bindgen_ty_1 = i32;
pub type std__Rb_tree___same_value_type = std_is_same;
pub type std__Rb_tree__Compatible_tree = std__Rb_tree;
#[repr(C)]
#[derive(Debug)]
pub struct std__Rb_tree__Auto_node {
    pub _M_t: *mut std__Rb_tree,
    pub _M_node: std__Rb_tree__Link_type,
}
pub type std__Rb_tree__Rb_tree_impl__Base_key_compare<_Key_compare> =
    std__Rb_tree_key_compare<_Key_compare>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt20_Rb_tree_black_countPKSt18_Rb_tree_node_baseS1_"]
    pub fn std__Rb_tree_black_count(
        __node: *const std__Rb_tree_node_base,
        __root: *const std__Rb_tree_node_base,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
pub struct std_map {
    pub _M_t: std_map__Rep_type,
}
pub type std_map_key_type<_Key> = _Key;
pub type std_map_mapped_type<_Tp> = _Tp;
pub type std_map_value_type<_Key, _Tp> = std_pair<_Key, _Tp>;
pub type std_map_key_compare<_Compare> = _Compare;
pub type std_map_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_map_value_compare<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub comp: _Compare,
}
pub type std_map__Pair_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map__Rep_type = std__Rb_tree;
pub type std_map__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_map_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_const_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_const_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_node_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_map_insert_return_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std_multimap {
    pub _M_t: std_multimap__Rep_type,
}
pub type std_multimap_key_type<_Key> = _Key;
pub type std_multimap_mapped_type<_Tp> = _Tp;
pub type std_multimap_value_type<_Key, _Tp> = std_pair<_Key, _Tp>;
pub type std_multimap_key_compare<_Compare> = _Compare;
pub type std_multimap_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multimap_value_compare<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub comp: _Compare,
}
pub type std_multimap__Pair_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap__Rep_type = std__Rb_tree;
pub type std_multimap__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_multimap_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_const_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_const_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multimap_node_type = __BindgenOpaqueArray<u8, 0usize>;
pub const std_float_round_style_round_indeterminate: std_float_round_style = -1;
pub const std_float_round_style_round_toward_zero: std_float_round_style = 0;
pub const std_float_round_style_round_to_nearest: std_float_round_style = 1;
pub const std_float_round_style_round_toward_infinity: std_float_round_style = 2;
pub const std_float_round_style_round_toward_neg_infinity: std_float_round_style = 3;
pub type std_float_round_style = ::std::os::raw::c_int;
pub const std_float_denorm_style_denorm_indeterminate: std_float_denorm_style = -1;
pub const std_float_denorm_style_denorm_absent: std_float_denorm_style = 0;
pub const std_float_denorm_style_denorm_present: std_float_denorm_style = 1;
pub type std_float_denorm_style = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___numeric_limits_base {
    pub _address: u8,
}
pub const std___numeric_limits_base_is_specialized: bool = false;
pub const std___numeric_limits_base_digits: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_digits10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_digits10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_is_signed: bool = false;
pub const std___numeric_limits_base_is_integer: bool = false;
pub const std___numeric_limits_base_is_exact: bool = false;
pub const std___numeric_limits_base_radix: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_min_exponent: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_min_exponent10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_exponent: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_max_exponent10: ::std::os::raw::c_int = 0;
pub const std___numeric_limits_base_has_infinity: bool = false;
pub const std___numeric_limits_base_has_quiet_NaN: bool = false;
pub const std___numeric_limits_base_has_signaling_NaN: bool = false;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt21__numeric_limits_base10has_denormE"]
    pub static std___numeric_limits_base_has_denorm: std_float_denorm_style;
}
pub const std___numeric_limits_base_has_denorm_loss: bool = false;
pub const std___numeric_limits_base_is_iec559: bool = false;
pub const std___numeric_limits_base_is_bounded: bool = false;
pub const std___numeric_limits_base_is_modulo: bool = false;
pub const std___numeric_limits_base_traps: bool = false;
pub const std___numeric_limits_base_tinyness_before: bool = false;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt21__numeric_limits_base11round_styleE"]
    pub static std___numeric_limits_base_round_style: std_float_round_style;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___numeric_limits_base"]
        [::std::mem::size_of::<std___numeric_limits_base>() - 1usize];
    ["Alignment of std___numeric_limits_base"]
        [::std::mem::align_of::<std___numeric_limits_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numeric_limits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_bool__close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_bool__close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_char_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_char_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_signed_char_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_signed_char_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_short_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_short_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_int_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_int_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_long_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_long_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0___int128_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0___int128_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_float_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_float_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_double_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_double_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_numeric_limits_open0_long_double_close0"]
        [::std::mem::size_of::<std_numeric_limits>() - 1usize];
    ["Align of template specialization: std_numeric_limits_open0_long_double_close0"]
        [::std::mem::align_of::<std_numeric_limits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__ValArray {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Array<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_data: *mut _Tp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_slice {
    pub _M_off: usize,
    pub _M_sz: usize,
    pub _M_st: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_slice"][::std::mem::size_of::<std_slice>() - 24usize];
    ["Alignment of std_slice"][::std::mem::align_of::<std_slice>() - 8usize];
    ["Offset of field: std_slice::_M_off"][::std::mem::offset_of!(std_slice, _M_off) - 0usize];
    ["Offset of field: std_slice::_M_sz"][::std::mem::offset_of!(std_slice, _M_sz) - 8usize];
    ["Offset of field: std_slice::_M_st"][::std::mem::offset_of!(std_slice, _M_st) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_slice_array<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_sz: usize,
    pub _M_stride: usize,
    pub _M_array: std__Array<_Tp>,
}
pub type std_slice_array_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Constant {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Abs {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Abs"][::std::mem::size_of::<std__Abs>() - 1usize];
    ["Alignment of std__Abs"][::std::mem::align_of::<std__Abs>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Cos {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Cos"][::std::mem::size_of::<std__Cos>() - 1usize];
    ["Alignment of std__Cos"][::std::mem::align_of::<std__Cos>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Acos {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Acos"][::std::mem::size_of::<std__Acos>() - 1usize];
    ["Alignment of std__Acos"][::std::mem::align_of::<std__Acos>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Cosh {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Cosh"][::std::mem::size_of::<std__Cosh>() - 1usize];
    ["Alignment of std__Cosh"][::std::mem::align_of::<std__Cosh>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sin {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sin"][::std::mem::size_of::<std__Sin>() - 1usize];
    ["Alignment of std__Sin"][::std::mem::align_of::<std__Sin>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Asin {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Asin"][::std::mem::size_of::<std__Asin>() - 1usize];
    ["Alignment of std__Asin"][::std::mem::align_of::<std__Asin>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sinh {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sinh"][::std::mem::size_of::<std__Sinh>() - 1usize];
    ["Alignment of std__Sinh"][::std::mem::align_of::<std__Sinh>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tan {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Tan"][::std::mem::size_of::<std__Tan>() - 1usize];
    ["Alignment of std__Tan"][::std::mem::align_of::<std__Tan>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Atan {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Atan"][::std::mem::size_of::<std__Atan>() - 1usize];
    ["Alignment of std__Atan"][::std::mem::align_of::<std__Atan>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Tanh {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Tanh"][::std::mem::size_of::<std__Tanh>() - 1usize];
    ["Alignment of std__Tanh"][::std::mem::align_of::<std__Tanh>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Exp {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Exp"][::std::mem::size_of::<std__Exp>() - 1usize];
    ["Alignment of std__Exp"][::std::mem::align_of::<std__Exp>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Log {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Log"][::std::mem::size_of::<std__Log>() - 1usize];
    ["Alignment of std__Log"][::std::mem::align_of::<std__Log>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Log10 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Log10"][::std::mem::size_of::<std__Log10>() - 1usize];
    ["Alignment of std__Log10"][::std::mem::align_of::<std__Log10>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Sqrt {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Sqrt"][::std::mem::size_of::<std__Sqrt>() - 1usize];
    ["Alignment of std__Sqrt"][::std::mem::align_of::<std__Sqrt>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unary_plus {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___unary_plus"][::std::mem::size_of::<std___unary_plus>() - 1usize];
    ["Alignment of std___unary_plus"][::std::mem::align_of::<std___unary_plus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___negate {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___negate"][::std::mem::size_of::<std___negate>() - 1usize];
    ["Alignment of std___negate"][::std::mem::align_of::<std___negate>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bitwise_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___bitwise_not"][::std::mem::size_of::<std___bitwise_not>() - 1usize];
    ["Alignment of std___bitwise_not"][::std::mem::align_of::<std___bitwise_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___plus {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___plus"][::std::mem::size_of::<std___plus>() - 1usize];
    ["Alignment of std___plus"][::std::mem::align_of::<std___plus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___minus {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___minus"][::std::mem::size_of::<std___minus>() - 1usize];
    ["Alignment of std___minus"][::std::mem::align_of::<std___minus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___multiplies {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___multiplies"][::std::mem::size_of::<std___multiplies>() - 1usize];
    ["Alignment of std___multiplies"][::std::mem::align_of::<std___multiplies>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___divides {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___divides"][::std::mem::size_of::<std___divides>() - 1usize];
    ["Alignment of std___divides"][::std::mem::align_of::<std___divides>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___modulus {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___modulus"][::std::mem::size_of::<std___modulus>() - 1usize];
    ["Alignment of std___modulus"][::std::mem::align_of::<std___modulus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bitwise_xor {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___bitwise_xor"][::std::mem::size_of::<std___bitwise_xor>() - 1usize];
    ["Alignment of std___bitwise_xor"][::std::mem::align_of::<std___bitwise_xor>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bitwise_and {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___bitwise_and"][::std::mem::size_of::<std___bitwise_and>() - 1usize];
    ["Alignment of std___bitwise_and"][::std::mem::align_of::<std___bitwise_and>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bitwise_or {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___bitwise_or"][::std::mem::size_of::<std___bitwise_or>() - 1usize];
    ["Alignment of std___bitwise_or"][::std::mem::align_of::<std___bitwise_or>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shift_left {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___shift_left"][::std::mem::size_of::<std___shift_left>() - 1usize];
    ["Alignment of std___shift_left"][::std::mem::align_of::<std___shift_left>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shift_right {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___shift_right"][::std::mem::size_of::<std___shift_right>() - 1usize];
    ["Alignment of std___shift_right"][::std::mem::align_of::<std___shift_right>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___logical_and {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___logical_and"][::std::mem::size_of::<std___logical_and>() - 1usize];
    ["Alignment of std___logical_and"][::std::mem::align_of::<std___logical_and>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___logical_or {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___logical_or"][::std::mem::size_of::<std___logical_or>() - 1usize];
    ["Alignment of std___logical_or"][::std::mem::align_of::<std___logical_or>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___logical_not {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___logical_not"][::std::mem::size_of::<std___logical_not>() - 1usize];
    ["Alignment of std___logical_not"][::std::mem::align_of::<std___logical_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___equal_to {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___equal_to"][::std::mem::size_of::<std___equal_to>() - 1usize];
    ["Alignment of std___equal_to"][::std::mem::align_of::<std___equal_to>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___not_equal_to {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___not_equal_to"][::std::mem::size_of::<std___not_equal_to>() - 1usize];
    ["Alignment of std___not_equal_to"][::std::mem::align_of::<std___not_equal_to>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___less {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___less"][::std::mem::size_of::<std___less>() - 1usize];
    ["Alignment of std___less"][::std::mem::align_of::<std___less>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___greater {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___greater"][::std::mem::size_of::<std___greater>() - 1usize];
    ["Alignment of std___greater"][::std::mem::align_of::<std___greater>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___less_equal {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___less_equal"][::std::mem::size_of::<std___less_equal>() - 1usize];
    ["Alignment of std___less_equal"][::std::mem::align_of::<std___less_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___greater_equal {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___greater_equal"][::std::mem::size_of::<std___greater_equal>() - 1usize];
    ["Alignment of std___greater_equal"][::std::mem::align_of::<std___greater_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Atan2 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Atan2"][::std::mem::size_of::<std__Atan2>() - 1usize];
    ["Alignment of std__Atan2"][::std::mem::align_of::<std__Atan2>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Pow {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Pow"][::std::mem::size_of::<std__Pow>() - 1usize];
    ["Alignment of std__Pow"][::std::mem::align_of::<std__Pow>() - 1usize];
};
pub type std___fun_with_valarray_result_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___fun {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_valarray<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_size: usize,
    pub _M_data: *mut _Tp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_valarray__UnaryOp {
    pub _address: u8,
}
pub type std_valarray__UnaryOp___rt = std___fun;
pub type std_valarray__UnaryOp__Rt = std__Expr<_Clos>;
pub type std_valarray_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Expr<_Clos> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Clos>>,
    pub _M_closure: _Clos,
}
pub type std__Expr_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug)]
pub struct std_gslice {
    pub _M_index: *mut std_gslice__Indexer,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_gslice__Indexer {
    pub _M_count: usize,
    pub _M_start: usize,
    pub _M_size: std_valarray<usize>,
    pub _M_stride: std_valarray<usize>,
    pub _M_index: std_valarray<usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_gslice__Indexer"][::std::mem::size_of::<std_gslice__Indexer>() - 64usize];
    ["Alignment of std_gslice__Indexer"][::std::mem::align_of::<std_gslice__Indexer>() - 8usize];
    ["Offset of field: std_gslice__Indexer::_M_count"]
        [::std::mem::offset_of!(std_gslice__Indexer, _M_count) - 0usize];
    ["Offset of field: std_gslice__Indexer::_M_start"]
        [::std::mem::offset_of!(std_gslice__Indexer, _M_start) - 8usize];
    ["Offset of field: std_gslice__Indexer::_M_size"]
        [::std::mem::offset_of!(std_gslice__Indexer, _M_size) - 16usize];
    ["Offset of field: std_gslice__Indexer::_M_stride"]
        [::std::mem::offset_of!(std_gslice__Indexer, _M_stride) - 32usize];
    ["Offset of field: std_gslice__Indexer::_M_index"]
        [::std::mem::offset_of!(std_gslice__Indexer, _M_index) - 48usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6gslice8_IndexerC1EmRKSt8valarrayImES4_"]
    pub fn std_gslice__Indexer__Indexer(
        this: *mut std_gslice__Indexer,
        arg1: usize,
        arg2: *const std_valarray<usize>,
        arg3: *const std_valarray<usize>,
    );
}
impl std_gslice__Indexer {
    #[inline]
    pub unsafe fn new(
        arg1: usize,
        arg2: *const std_valarray<usize>,
        arg3: *const std_valarray<usize>,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_gslice__Indexer__Indexer(__bindgen_tmp.as_mut_ptr(), arg1, arg2, arg3);
        __bindgen_tmp.assume_init()
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_gslice"][::std::mem::size_of::<std_gslice>() - 8usize];
    ["Alignment of std_gslice"][::std::mem::align_of::<std_gslice>() - 8usize];
    ["Offset of field: std_gslice::_M_index"]
        [::std::mem::offset_of!(std_gslice, _M_index) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_gslice_array<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_array: std__Array<_Tp>,
    pub _M_index: *const std_valarray<usize>,
}
pub type std_gslice_array_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mask_array<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_sz: usize,
    pub _M_mask: std__Array<bool>,
    pub _M_array: std__Array<_Tp>,
}
pub type std_mask_array_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_indirect_array<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_sz: usize,
    pub _M_index: std__Array<usize>,
    pub _M_array: std__Array<_Tp>,
}
pub type std_indirect_array_value_type<_Tp> = _Tp;
pub const std___safe_multiply___c: ::std::os::raw::c_ulong = 4294967296;
unsafe extern "C" {
    #[link_name = "\u{1}__a0"]
    pub static std___safe_multiply___a0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__a1"]
    pub static std___safe_multiply___a1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__b0"]
    pub static std___safe_multiply___b0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__b1"]
    pub static std___safe_multiply___b1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___safe_multiply_value: ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__lo"]
    pub static std___big_add___lo: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__hi"]
    pub static std___big_add___hi: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__lo"]
    pub static std___big_sub___lo: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__hi"]
    pub static std___big_sub___hi: ::std::os::raw::c_ulong;
}
pub const std___big_mul___c: ::std::os::raw::c_ulong = 4294967296;
unsafe extern "C" {
    #[link_name = "\u{1}__x0"]
    pub static std___big_mul___x0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__x1"]
    pub static std___big_mul___x1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__y0"]
    pub static std___big_mul___y0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__y1"]
    pub static std___big_mul___y1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__x0y0"]
    pub static std___big_mul___x0y0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__x0y1"]
    pub static std___big_mul___x0y1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__x1y0"]
    pub static std___big_mul___x1y0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__x1y1"]
    pub static std___big_mul___x1y1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__mix"]
    pub static std___big_mul___mix: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__mix_lo"]
    pub static std___big_mul___mix_lo: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__mix_hi"]
    pub static std___big_mul___mix_hi: ::std::os::raw::c_ulong;
}
pub type std___big_mul__Res = u8;
unsafe extern "C" {
    #[link_name = "\u{1}__hi"]
    pub static std___big_mul___hi: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__lo"]
    pub static std___big_mul___lo: ::std::os::raw::c_ulong;
}
pub const std___big_div_impl___c: ::std::os::raw::c_ulong = 4294967296;
unsafe extern "C" {
    #[link_name = "\u{1}__d1"]
    pub static std___big_div_impl___d1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__d0"]
    pub static std___big_div_impl___d0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__q1x"]
    pub static std___big_div_impl___q1x: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r1x"]
    pub static std___big_div_impl___r1x: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__m"]
    pub static std___big_div_impl___m: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r1y"]
    pub static std___big_div_impl___r1y: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r1z"]
    pub static std___big_div_impl___r1z: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r1"]
    pub static std___big_div_impl___r1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__q1"]
    pub static std___big_div_impl___q1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__q0x"]
    pub static std___big_div_impl___q0x: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r0x"]
    pub static std___big_div_impl___r0x: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__n"]
    pub static std___big_div_impl___n: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r0y"]
    pub static std___big_div_impl___r0y: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r0z"]
    pub static std___big_div_impl___r0z: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__r0"]
    pub static std___big_div_impl___r0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__q0"]
    pub static std___big_div_impl___q0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__quot"]
    pub static std___big_div_impl___quot: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__rem"]
    pub static std___big_div_impl___rem: ::std::os::raw::c_ulong;
}
pub type std___big_div_impl__Prod = u8;
pub type std___big_div_impl__Sum = u8;
unsafe extern "C" {
    #[link_name = "\u{1}__shift"]
    pub static std___big_div___shift: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__coshift_"]
    pub static std___big_div___coshift_: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__coshift"]
    pub static std___big_div___coshift: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__c1"]
    pub static std___big_div___c1: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__c2"]
    pub static std___big_div___c2: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__new_d"]
    pub static std___big_div___new_d: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__new_n0"]
    pub static std___big_div___new_n0: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__n1_shifted"]
    pub static std___big_div___n1_shifted: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__n0_top"]
    pub static std___big_div___n0_top: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__new_n1"]
    pub static std___big_div___new_n1: ::std::os::raw::c_ulong;
}
pub type std___big_div__Res = u8;
unsafe extern "C" {
    #[link_name = "\u{1}__quot_hi"]
    pub static std___big_div___quot_hi: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__quot_lo"]
    pub static std___big_div___quot_lo: ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__rem"]
    pub static std___big_div___rem: ::std::os::raw::c_ulong;
}
pub type std___big_div__P0 = u8;
pub type std___big_div__P1 = u8;
pub type std___big_div__Sum = u8;
unsafe extern "C" {
    #[link_name = "\u{1}num"]
    pub static std_ratio_num: ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}den"]
    pub static std_ratio_den: ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_ratio {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_multiply {
    pub _address: u8,
}
pub type std___ratio_multiply_type = u8;
pub type std_ratio_multiply = std___ratio_multiply;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_divide {
    pub _address: u8,
}
pub type std___ratio_divide_type = std___ratio_multiply;
pub type std_ratio_divide = std___ratio_divide;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_not_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_less_impl_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_less_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_greater_equal {
    pub _address: u8,
}
pub type std___ratio_add_impl___t = u8;
pub type std___ratio_add_impl_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_add {
    pub _address: u8,
}
pub type std___ratio_add_type = u8;
pub type std_ratio_add = std___ratio_add;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_subtract {
    pub _address: u8,
}
pub type std___ratio_subtract_type = std___ratio_add;
pub type std_ratio_subtract = std___ratio_subtract;
pub type std_atto = u8;
pub type std_femto = u8;
pub type std_pico = u8;
pub type std_nano = u8;
pub type std_micro = u8;
pub type std_milli = u8;
pub type std_centi = u8;
pub type std_deci = u8;
pub type std_deca = u8;
pub type std_hecto = u8;
pub type std_kilo = u8;
pub type std_mega = u8;
pub type std_giga = u8;
pub type std_tera = u8;
pub type std_peta = u8;
pub type std_exa = u8;
pub type std___parse_int__Digit_impl___valid = std_true_type;
pub type std___parse_int___ull_constant = u8;
pub type std___parse_int__Power_help___next = u8;
pub type std___parse_int__Power_help___valid_digit = u8;
pub type std___parse_int__Power_help_type = std___parse_int___ull_constant;
pub type std___parse_int__Number_help___digit = u8;
pub type std___parse_int__Number_help___valid_digit = std___parse_int__Number_help___digit;
pub type std___parse_int__Number_help_type = std___parse_int___ull_constant;
pub type std___select_int__Select_int = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem___file_clock {
    pub _address: u8,
}
pub type std_filesystem___file_clock_duration = std_chrono_nanoseconds;
pub type std_filesystem___file_clock_rep = rep;
pub type std_filesystem___file_clock_period = u8;
pub type std_filesystem___file_clock_time_point =
    std_chrono_time_point<std_chrono_duration<::std::os::raw::c_long>>;
pub type std_filesystem___file_clock___sys_clock = std_chrono_system_clock;
pub const std_filesystem___file_clock_is_steady: bool = false;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12__file_clock13_S_epoch_diffE"]
    pub static std_filesystem___file_clock__S_epoch_diff: std_chrono_seconds;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem___file_clock"]
        [::std::mem::size_of::<std_filesystem___file_clock>() - 1usize];
    ["Alignment of std_filesystem___file_clock"]
        [::std::mem::align_of::<std_filesystem___file_clock>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem___detail___safe_iterator_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_void_close0",
    ][::std::mem::size_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
    [
        "Align of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_void_close0",
    ][::std::mem::align_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_const_void_close0",
    ][::std::mem::size_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
    [
        "Align of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_const_void_close0",
    ][::std::mem::align_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_volatile_void_close0",
    ][::std::mem::size_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
    [
        "Align of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_volatile_void_close0",
    ][::std::mem::align_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_const_volatile_void_close0",
    ][::std::mem::size_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
    [
        "Align of template specialization: std_filesystem___detail___safe_iterator_traits_open0_ptr_const_volatile_void_close0",
    ][::std::mem::align_of::<std_filesystem___detail___safe_iterator_traits>() - 1usize];
};
pub type std_filesystem___detail__Path = std_enable_if_t;
pub type std_filesystem___detail__Path2 = std_enable_if_t;
pub type std_filesystem___detail___unified_u8_t<_EcharT> = _EcharT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem___detail___source_value_type_impl {
    pub _address: u8,
}
pub type std_filesystem___detail___source_value_type_impl_type =
    std_filesystem___detail___safe_iterator_traits;
pub type std_filesystem___detail___source_value_t =
    std_filesystem___detail___source_value_type_impl;
pub type std_filesystem___detail___value_type_is_char = std_enable_if_t;
pub type std_filesystem___detail___value_type_is_char_or_char8_t = std_enable_if_t;
#[repr(C)]
pub struct std_filesystem_path {
    pub _M_pathname: std_filesystem_path_string_type,
    pub _M_cmpts: std_filesystem_path__List,
}
pub type std_filesystem_path_value_type = ::std::os::raw::c_char;
pub type std_filesystem_path_string_type = std_basic_string<std_filesystem_path_value_type>;
pub const std_filesystem_path_format_native_format: std_filesystem_path_format = 0;
pub const std_filesystem_path_format_generic_format: std_filesystem_path_format = 1;
pub const std_filesystem_path_format_auto_format: std_filesystem_path_format = 2;
pub type std_filesystem_path_format = ::std::os::raw::c_uchar;
pub type std_filesystem_path_const_iterator = std_filesystem_path_iterator;
pub const std_filesystem_path__Type__Multi: std_filesystem_path__Type = 0;
pub const std_filesystem_path__Type__Root_name: std_filesystem_path__Type = 1;
pub const std_filesystem_path__Type__Root_dir: std_filesystem_path__Type = 2;
pub const std_filesystem_path__Type__Filename: std_filesystem_path__Type = 3;
pub type std_filesystem_path__Type = ::std::os::raw::c_uchar;
pub const std_filesystem_path__Split__Stem: std_filesystem_path__Split = 0;
pub const std_filesystem_path__Split__Extension: std_filesystem_path__Split = 1;
pub type std_filesystem_path__Split = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct std_filesystem_path__List {
    pub _M_impl: std_unique_ptr,
}
pub type std_filesystem_path__List_value_type = std_filesystem_path__Cmpt;
pub type std_filesystem_path__List_iterator = *mut std_filesystem_path__List_value_type;
pub type std_filesystem_path__List_const_iterator = *const std_filesystem_path__List_value_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_path__List__Impl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_path__List__Impl_deleter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_path__List__Impl_deleter"]
        [::std::mem::size_of::<std_filesystem_path__List__Impl_deleter>() - 1usize];
    ["Alignment of std_filesystem_path__List__Impl_deleter"]
        [::std::mem::align_of::<std_filesystem_path__List__Impl_deleter>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_path__List"]
        [::std::mem::size_of::<std_filesystem_path__List>() - 8usize];
    ["Alignment of std_filesystem_path__List"]
        [::std::mem::align_of::<std_filesystem_path__List>() - 8usize];
    ["Offset of field: std_filesystem_path__List::_M_impl"]
        [::std::mem::offset_of!(std_filesystem_path__List, _M_impl) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List4typeENS1_5_TypeE"]
    pub fn std_filesystem_path__List_type(
        this: *mut std_filesystem_path__List,
        arg1: std_filesystem_path__Type,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List4sizeEv"]
    pub fn std_filesystem_path__List_size(
        this: *const std_filesystem_path__List,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List5emptyEv"]
    pub fn std_filesystem_path__List_empty(this: *const std_filesystem_path__List) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List5clearEv"]
    pub fn std_filesystem_path__List_clear(this: *mut std_filesystem_path__List);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List8capacityEv"]
    pub fn std_filesystem_path__List_capacity(
        this: *const std_filesystem_path__List,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List7reserveEib"]
    pub fn std_filesystem_path__List_reserve(
        this: *mut std_filesystem_path__List,
        arg1: ::std::os::raw::c_int,
        arg2: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List5beginEv"]
    pub fn std_filesystem_path__List_begin(
        this: *mut std_filesystem_path__List,
    ) -> std_filesystem_path__List_iterator;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List3endEv"]
    pub fn std_filesystem_path__List_end(
        this: *mut std_filesystem_path__List,
    ) -> std_filesystem_path__List_iterator;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List5beginEv"]
    pub fn std_filesystem_path__List_begin1(
        this: *const std_filesystem_path__List,
    ) -> std_filesystem_path__List_const_iterator;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List3endEv"]
    pub fn std_filesystem_path__List_end1(
        this: *const std_filesystem_path__List,
    ) -> std_filesystem_path__List_const_iterator;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List5frontEv"]
    pub fn std_filesystem_path__List_front(
        this: *mut std_filesystem_path__List,
    ) -> *mut std_filesystem_path__List_value_type;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List4backEv"]
    pub fn std_filesystem_path__List_back(
        this: *mut std_filesystem_path__List,
    ) -> *mut std_filesystem_path__List_value_type;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List5frontEv"]
    pub fn std_filesystem_path__List_front1(
        this: *const std_filesystem_path__List,
    ) -> *const std_filesystem_path__List_value_type;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path5_List4backEv"]
    pub fn std_filesystem_path__List_back1(
        this: *const std_filesystem_path__List,
    ) -> *const std_filesystem_path__List_value_type;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List8pop_backEv"]
    pub fn std_filesystem_path__List_pop_back(this: *mut std_filesystem_path__List);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_List13_M_erase_fromEPKNS1_5_CmptE"]
    pub fn std_filesystem_path__List__M_erase_from(
        this: *mut std_filesystem_path__List,
        __pos: std_filesystem_path__List_const_iterator,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_ListC1Ev"]
    pub fn std_filesystem_path__List__List(this: *mut std_filesystem_path__List);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_ListC1ERKS2_"]
    pub fn std_filesystem_path__List__List1(
        this: *mut std_filesystem_path__List,
        arg1: *const std_filesystem_path__List,
    );
}
impl std_filesystem_path__List {
    #[inline]
    pub unsafe fn type_(&mut self, arg1: std_filesystem_path__Type) {
        std_filesystem_path__List_type(self, arg1)
    }
    #[inline]
    pub unsafe fn size(&self) -> ::std::os::raw::c_int {
        std_filesystem_path__List_size(self)
    }
    #[inline]
    pub unsafe fn empty(&self) -> bool {
        std_filesystem_path__List_empty(self)
    }
    #[inline]
    pub unsafe fn clear(&mut self) {
        std_filesystem_path__List_clear(self)
    }
    #[inline]
    pub unsafe fn capacity(&self) -> ::std::os::raw::c_int {
        std_filesystem_path__List_capacity(self)
    }
    #[inline]
    pub unsafe fn reserve(&mut self, arg1: ::std::os::raw::c_int, arg2: bool) {
        std_filesystem_path__List_reserve(self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn begin(&mut self) -> std_filesystem_path__List_iterator {
        std_filesystem_path__List_begin(self)
    }
    #[inline]
    pub unsafe fn end(&mut self) -> std_filesystem_path__List_iterator {
        std_filesystem_path__List_end(self)
    }
    #[inline]
    pub unsafe fn begin1(&self) -> std_filesystem_path__List_const_iterator {
        std_filesystem_path__List_begin1(self)
    }
    #[inline]
    pub unsafe fn end1(&self) -> std_filesystem_path__List_const_iterator {
        std_filesystem_path__List_end1(self)
    }
    #[inline]
    pub unsafe fn front(&mut self) -> *mut std_filesystem_path__List_value_type {
        std_filesystem_path__List_front(self)
    }
    #[inline]
    pub unsafe fn back(&mut self) -> *mut std_filesystem_path__List_value_type {
        std_filesystem_path__List_back(self)
    }
    #[inline]
    pub unsafe fn front1(&self) -> *const std_filesystem_path__List_value_type {
        std_filesystem_path__List_front1(self)
    }
    #[inline]
    pub unsafe fn back1(&self) -> *const std_filesystem_path__List_value_type {
        std_filesystem_path__List_back1(self)
    }
    #[inline]
    pub unsafe fn pop_back(&mut self) {
        std_filesystem_path__List_pop_back(self)
    }
    #[inline]
    pub unsafe fn _M_erase_from(&mut self, __pos: std_filesystem_path__List_const_iterator) {
        std_filesystem_path__List__M_erase_from(self, __pos)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_filesystem_path__List__List(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_filesystem_path__List) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_filesystem_path__List__List1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_path__Parser {
    _unused: [u8; 0],
}
pub const std_filesystem_path_preferred_separator: std_filesystem_path_value_type = 47;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_path"][::std::mem::size_of::<std_filesystem_path>() - 40usize];
    ["Alignment of std_filesystem_path"][::std::mem::align_of::<std_filesystem_path>() - 8usize];
    ["Offset of field: std_filesystem_path::_M_pathname"]
        [::std::mem::offset_of!(std_filesystem_path, _M_pathname) - 0usize];
    ["Offset of field: std_filesystem_path::_M_cmpts"]
        [::std::mem::offset_of!(std_filesystem_path, _M_cmpts) - 32usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path15remove_filenameEv"]
    pub fn std_filesystem_path_remove_filename(
        this: *mut std_filesystem_path,
    ) -> *mut std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path16replace_filenameERKS1_"]
    pub fn std_filesystem_path_replace_filename(
        this: *mut std_filesystem_path,
        __replacement: *const std_filesystem_path,
    ) -> *mut std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path17replace_extensionERKS1_"]
    pub fn std_filesystem_path_replace_extension(
        this: *mut std_filesystem_path,
        __replacement: *const std_filesystem_path,
    ) -> *mut std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path7compareERKS1_"]
    pub fn std_filesystem_path_compare(
        this: *const std_filesystem_path,
        __p: *const std_filesystem_path,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path7compareESt17basic_string_viewIcSt11char_traitsIcEE"]
    pub fn std_filesystem_path_compare1(
        this: *const std_filesystem_path,
        __s: std_basic_string_view<std_filesystem_path_value_type>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path9root_nameEv"]
    pub fn std_filesystem_path_root_name(this: *const std_filesystem_path) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path14root_directoryEv"]
    pub fn std_filesystem_path_root_directory(
        this: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path9root_pathEv"]
    pub fn std_filesystem_path_root_path(this: *const std_filesystem_path) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path13relative_pathEv"]
    pub fn std_filesystem_path_relative_path(
        this: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path11parent_pathEv"]
    pub fn std_filesystem_path_parent_path(this: *const std_filesystem_path)
    -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path13has_root_nameEv"]
    pub fn std_filesystem_path_has_root_name(this: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path18has_root_directoryEv"]
    pub fn std_filesystem_path_has_root_directory(this: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path13has_root_pathEv"]
    pub fn std_filesystem_path_has_root_path(this: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path17has_relative_pathEv"]
    pub fn std_filesystem_path_has_relative_path(this: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path15has_parent_pathEv"]
    pub fn std_filesystem_path_has_parent_path(this: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path12has_filenameEv"]
    pub fn std_filesystem_path_has_filename(this: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path16lexically_normalEv"]
    pub fn std_filesystem_path_lexically_normal(
        this: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path18lexically_relativeERKS1_"]
    pub fn std_filesystem_path_lexically_relative(
        this: *const std_filesystem_path,
        base: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx114path19lexically_proximateERKS1_"]
    pub fn std_filesystem_path_lexically_proximate(
        this: *const std_filesystem_path,
        base: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
impl std_filesystem_path {
    #[inline]
    pub unsafe fn remove_filename(&mut self) -> *mut std_filesystem_path {
        std_filesystem_path_remove_filename(self)
    }
    #[inline]
    pub unsafe fn replace_filename(
        &mut self,
        __replacement: *const std_filesystem_path,
    ) -> *mut std_filesystem_path {
        std_filesystem_path_replace_filename(self, __replacement)
    }
    #[inline]
    pub unsafe fn replace_extension(
        &mut self,
        __replacement: *const std_filesystem_path,
    ) -> *mut std_filesystem_path {
        std_filesystem_path_replace_extension(self, __replacement)
    }
    #[inline]
    pub unsafe fn compare(&self, __p: *const std_filesystem_path) -> ::std::os::raw::c_int {
        std_filesystem_path_compare(self, __p)
    }
    #[inline]
    pub unsafe fn compare1(
        &self,
        __s: std_basic_string_view<std_filesystem_path_value_type>,
    ) -> ::std::os::raw::c_int {
        std_filesystem_path_compare1(self, __s)
    }
    #[inline]
    pub unsafe fn root_name(&self) -> std_filesystem_path {
        std_filesystem_path_root_name(self)
    }
    #[inline]
    pub unsafe fn root_directory(&self) -> std_filesystem_path {
        std_filesystem_path_root_directory(self)
    }
    #[inline]
    pub unsafe fn root_path(&self) -> std_filesystem_path {
        std_filesystem_path_root_path(self)
    }
    #[inline]
    pub unsafe fn relative_path(&self) -> std_filesystem_path {
        std_filesystem_path_relative_path(self)
    }
    #[inline]
    pub unsafe fn parent_path(&self) -> std_filesystem_path {
        std_filesystem_path_parent_path(self)
    }
    #[inline]
    pub unsafe fn has_root_name(&self) -> bool {
        std_filesystem_path_has_root_name(self)
    }
    #[inline]
    pub unsafe fn has_root_directory(&self) -> bool {
        std_filesystem_path_has_root_directory(self)
    }
    #[inline]
    pub unsafe fn has_root_path(&self) -> bool {
        std_filesystem_path_has_root_path(self)
    }
    #[inline]
    pub unsafe fn has_relative_path(&self) -> bool {
        std_filesystem_path_has_relative_path(self)
    }
    #[inline]
    pub unsafe fn has_parent_path(&self) -> bool {
        std_filesystem_path_has_parent_path(self)
    }
    #[inline]
    pub unsafe fn has_filename(&self) -> bool {
        std_filesystem_path_has_filename(self)
    }
    #[inline]
    pub unsafe fn lexically_normal(&self) -> std_filesystem_path {
        std_filesystem_path_lexically_normal(self)
    }
    #[inline]
    pub unsafe fn lexically_relative(
        &self,
        base: *const std_filesystem_path,
    ) -> std_filesystem_path {
        std_filesystem_path_lexically_relative(self, base)
    }
    #[inline]
    pub unsafe fn lexically_proximate(
        &self,
        base: *const std_filesystem_path,
    ) -> std_filesystem_path {
        std_filesystem_path_lexically_proximate(self, base)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1110hash_valueERKNS0_4pathE"]
    pub fn std_filesystem_hash_value(__p: *const std_filesystem_path) -> usize;
}
#[repr(C)]
pub struct std_filesystem_filesystem_error {
    pub _base: std_system_error,
    pub _M_impl: __BindgenOpaqueArray<u64, 2usize>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_filesystem_error__Impl {
    _unused: [u8; 0],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_filesystem_error"]
        [::std::mem::size_of::<std_filesystem_filesystem_error>() - 48usize];
    ["Alignment of std_filesystem_filesystem_error"]
        [::std::mem::align_of::<std_filesystem_filesystem_error>() - 8usize];
    ["Offset of field: std_filesystem_filesystem_error::_M_impl"]
        [::std::mem::offset_of!(std_filesystem_filesystem_error, _M_impl) - 32usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx1116filesystem_error5path1Ev"]
    pub fn std_filesystem_filesystem_error_path1(
        this: *const std_filesystem_filesystem_error,
    ) -> *const std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx1116filesystem_error5path2Ev"]
    pub fn std_filesystem_filesystem_error_path2(
        this: *const std_filesystem_filesystem_error,
    ) -> *const std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1116filesystem_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10error_code"]
    pub fn std_filesystem_filesystem_error_filesystem_error(
        this: *mut std_filesystem_filesystem_error,
        __what_arg: *const std_string,
        __ec: std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1116filesystem_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4pathESt10error_code"]
    pub fn std_filesystem_filesystem_error_filesystem_error1(
        this: *mut std_filesystem_filesystem_error,
        __what_arg: *const std_string,
        __p1: *const std_filesystem_path,
        __ec: std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1116filesystem_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS0_4pathESC_St10error_code"]
    pub fn std_filesystem_filesystem_error_filesystem_error2(
        this: *mut std_filesystem_filesystem_error,
        __what_arg: *const std_string,
        __p1: *const std_filesystem_path,
        __p2: *const std_filesystem_path,
        __ec: std_error_code,
    );
}
impl std_filesystem_filesystem_error {
    #[inline]
    pub unsafe fn path1(&self) -> *const std_filesystem_path {
        std_filesystem_filesystem_error_path1(self)
    }
    #[inline]
    pub unsafe fn path2(&self) -> *const std_filesystem_path {
        std_filesystem_filesystem_error_path2(self)
    }
    #[inline]
    pub unsafe fn new(__what_arg: *const std_string, __ec: std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_filesystem_filesystem_error_filesystem_error(
            __bindgen_tmp.as_mut_ptr(),
            __what_arg,
            __ec,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        __what_arg: *const std_string,
        __p1: *const std_filesystem_path,
        __ec: std_error_code,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_filesystem_filesystem_error_filesystem_error1(
            __bindgen_tmp.as_mut_ptr(),
            __what_arg,
            __p1,
            __ec,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        __what_arg: *const std_string,
        __p1: *const std_filesystem_path,
        __p2: *const std_filesystem_path,
        __ec: std_error_code,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_filesystem_filesystem_error_filesystem_error2(
            __bindgen_tmp.as_mut_ptr(),
            __what_arg,
            __p1,
            __p2,
            __ec,
        );
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1116filesystem_errorD1Ev"]
    pub fn std_filesystem_filesystem_error_filesystem_error_destructor(
        this: *mut std_filesystem_filesystem_error,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx1116filesystem_error4whatEv"]
    pub fn std_filesystem_filesystem_error_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std_filesystem_path__Cmpt {
    pub _base: std_filesystem_path,
    pub _M_pos: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_path__Cmpt"]
        [::std::mem::size_of::<std_filesystem_path__Cmpt>() - 48usize];
    ["Alignment of std_filesystem_path__Cmpt"]
        [::std::mem::align_of::<std_filesystem_path__Cmpt>() - 8usize];
    ["Offset of field: std_filesystem_path__Cmpt::_M_pos"]
        [::std::mem::offset_of!(std_filesystem_path__Cmpt, _M_pos) - 40usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx114path5_CmptC1ESt17basic_string_viewIcSt11char_traitsIcEENS1_5_TypeEm"]
    pub fn std_filesystem_path__Cmpt__Cmpt(
        this: *mut std_filesystem_path__Cmpt,
        __s: std_basic_string_view<std_filesystem_path_value_type>,
        __t: std_filesystem_path__Type,
        __pos: usize,
    );
}
impl std_filesystem_path__Cmpt {
    #[inline]
    pub unsafe fn new(
        __s: std_basic_string_view<std_filesystem_path_value_type>,
        __t: std_filesystem_path__Type,
        __pos: usize,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_filesystem_path__Cmpt__Cmpt(__bindgen_tmp.as_mut_ptr(), __s, __t, __pos);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_filesystem_path__Codecvt {
    pub _base: std_codecvt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_filesystem_path__Codecvt_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_filesystem_path__Codecvt>() - 40usize];
    ["Align of template specialization: std_filesystem_path__Codecvt_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_filesystem_path__Codecvt>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_path_iterator {
    pub _M_path: *const std_filesystem_path,
    pub _M_cur: std_filesystem_path__List_const_iterator,
    pub _M_at_end: bool,
}
pub type std_filesystem_path_iterator_difference_type = isize;
pub type std_filesystem_path_iterator_value_type = std_filesystem_path;
pub type std_filesystem_path_iterator_reference = *const std_filesystem_path;
pub type std_filesystem_path_iterator_pointer = *const std_filesystem_path;
pub type std_filesystem_path_iterator_iterator_category = std_bidirectional_iterator_tag;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_path_iterator"]
        [::std::mem::size_of::<std_filesystem_path_iterator>() - 24usize];
    ["Alignment of std_filesystem_path_iterator"]
        [::std::mem::align_of::<std_filesystem_path_iterator>() - 8usize];
    ["Offset of field: std_filesystem_path_iterator::_M_path"]
        [::std::mem::offset_of!(std_filesystem_path_iterator, _M_path) - 0usize];
    ["Offset of field: std_filesystem_path_iterator::_M_cur"]
        [::std::mem::offset_of!(std_filesystem_path_iterator, _M_cur) - 8usize];
    ["Offset of field: std_filesystem_path_iterator::_M_at_end"]
        [::std::mem::offset_of!(std_filesystem_path_iterator, _M_at_end) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem__Dir {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct std_filesystem_directory_entry {
    pub _M_path: std_filesystem_path,
    pub _M_type: std_filesystem_file_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_directory_entry"]
        [::std::mem::size_of::<std_filesystem_directory_entry>() - 48usize];
    ["Alignment of std_filesystem_directory_entry"]
        [::std::mem::align_of::<std_filesystem_directory_entry>() - 8usize];
    ["Offset of field: std_filesystem_directory_entry::_M_path"]
        [::std::mem::offset_of!(std_filesystem_directory_entry, _M_path) - 0usize];
    ["Offset of field: std_filesystem_directory_entry::_M_type"]
        [::std::mem::offset_of!(std_filesystem_directory_entry, _M_type) - 40usize];
};
#[repr(C)]
pub struct std_filesystem___directory_iterator_proxy {
    pub _M_entry: std_filesystem_directory_entry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem___directory_iterator_proxy"]
        [::std::mem::size_of::<std_filesystem___directory_iterator_proxy>() - 48usize];
    ["Alignment of std_filesystem___directory_iterator_proxy"]
        [::std::mem::align_of::<std_filesystem___directory_iterator_proxy>() - 8usize];
    ["Offset of field: std_filesystem___directory_iterator_proxy::_M_entry"]
        [::std::mem::offset_of!(std_filesystem___directory_iterator_proxy, _M_entry) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_filesystem_directory_iterator {
    pub _M_dir: __BindgenOpaqueArray<u64, 2usize>,
}
pub type std_filesystem_directory_iterator_value_type = std_filesystem_directory_entry;
pub type std_filesystem_directory_iterator_difference_type = isize;
pub type std_filesystem_directory_iterator_pointer = *const std_filesystem_directory_entry;
pub type std_filesystem_directory_iterator_reference = *const std_filesystem_directory_entry;
pub type std_filesystem_directory_iterator_iterator_category = std_input_iterator_tag;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_directory_iterator"]
        [::std::mem::size_of::<std_filesystem_directory_iterator>() - 16usize];
    ["Alignment of std_filesystem_directory_iterator"]
        [::std::mem::align_of::<std_filesystem_directory_iterator>() - 8usize];
    ["Offset of field: std_filesystem_directory_iterator::_M_dir"]
        [::std::mem::offset_of!(std_filesystem_directory_iterator, _M_dir) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1118directory_iterator9incrementERSt10error_code"]
    pub fn std_filesystem_directory_iterator_increment(
        this: *mut std_filesystem_directory_iterator,
        __ec: *mut std_error_code,
    ) -> *mut std_filesystem_directory_iterator;
}
impl std_filesystem_directory_iterator {
    #[inline]
    pub unsafe fn increment(
        &mut self,
        __ec: *mut std_error_code,
    ) -> *mut std_filesystem_directory_iterator {
        std_filesystem_directory_iterator_increment(self, __ec)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_filesystem_recursive_directory_iterator {
    pub _M_dirs: __BindgenOpaqueArray<u64, 2usize>,
}
pub type std_filesystem_recursive_directory_iterator_value_type = std_filesystem_directory_entry;
pub type std_filesystem_recursive_directory_iterator_difference_type = isize;
pub type std_filesystem_recursive_directory_iterator_pointer =
    *const std_filesystem_directory_entry;
pub type std_filesystem_recursive_directory_iterator_reference =
    *const std_filesystem_directory_entry;
pub type std_filesystem_recursive_directory_iterator_iterator_category = std_input_iterator_tag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_recursive_directory_iterator__Dir_stack {
    _unused: [u8; 0],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_recursive_directory_iterator"]
        [::std::mem::size_of::<std_filesystem_recursive_directory_iterator>() - 16usize];
    ["Alignment of std_filesystem_recursive_directory_iterator"]
        [::std::mem::align_of::<std_filesystem_recursive_directory_iterator>() - 8usize];
    ["Offset of field: std_filesystem_recursive_directory_iterator::_M_dirs"]
        [::std::mem::offset_of!(std_filesystem_recursive_directory_iterator, _M_dirs) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx1128recursive_directory_iterator7optionsEv"]
    pub fn std_filesystem_recursive_directory_iterator_options(
        this: *const std_filesystem_recursive_directory_iterator,
    ) -> std_filesystem_directory_options;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx1128recursive_directory_iterator5depthEv"]
    pub fn std_filesystem_recursive_directory_iterator_depth(
        this: *const std_filesystem_recursive_directory_iterator,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNKSt10filesystem7__cxx1128recursive_directory_iterator17recursion_pendingEv"]
    pub fn std_filesystem_recursive_directory_iterator_recursion_pending(
        this: *const std_filesystem_recursive_directory_iterator,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1128recursive_directory_iterator9incrementERSt10error_code"]
    pub fn std_filesystem_recursive_directory_iterator_increment(
        this: *mut std_filesystem_recursive_directory_iterator,
        __ec: *mut std_error_code,
    ) -> *mut std_filesystem_recursive_directory_iterator;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1128recursive_directory_iterator3popEv"]
    pub fn std_filesystem_recursive_directory_iterator_pop(
        this: *mut std_filesystem_recursive_directory_iterator,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1128recursive_directory_iterator3popERSt10error_code"]
    pub fn std_filesystem_recursive_directory_iterator_pop1(
        this: *mut std_filesystem_recursive_directory_iterator,
        arg1: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1128recursive_directory_iterator25disable_recursion_pendingEv"]
    pub fn std_filesystem_recursive_directory_iterator_disable_recursion_pending(
        this: *mut std_filesystem_recursive_directory_iterator,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem7__cxx1128recursive_directory_iteratorD1Ev"]
    pub fn std_filesystem_recursive_directory_iterator_recursive_directory_iterator_destructor(
        this: *mut std_filesystem_recursive_directory_iterator,
    );
}
impl std_filesystem_recursive_directory_iterator {
    #[inline]
    pub unsafe fn options(&self) -> std_filesystem_directory_options {
        std_filesystem_recursive_directory_iterator_options(self)
    }
    #[inline]
    pub unsafe fn depth(&self) -> ::std::os::raw::c_int {
        std_filesystem_recursive_directory_iterator_depth(self)
    }
    #[inline]
    pub unsafe fn recursion_pending(&self) -> bool {
        std_filesystem_recursive_directory_iterator_recursion_pending(self)
    }
    #[inline]
    pub unsafe fn increment(
        &mut self,
        __ec: *mut std_error_code,
    ) -> *mut std_filesystem_recursive_directory_iterator {
        std_filesystem_recursive_directory_iterator_increment(self, __ec)
    }
    #[inline]
    pub unsafe fn pop(&mut self) {
        std_filesystem_recursive_directory_iterator_pop(self)
    }
    #[inline]
    pub unsafe fn pop1(&mut self, arg1: *mut std_error_code) {
        std_filesystem_recursive_directory_iterator_pop1(self, arg1)
    }
    #[inline]
    pub unsafe fn disable_recursion_pending(&mut self) {
        std_filesystem_recursive_directory_iterator_disable_recursion_pending(self)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_filesystem_recursive_directory_iterator_recursive_directory_iterator_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_filesystem_space_info {
    pub capacity: ::std::os::raw::c_ulong,
    pub free: ::std::os::raw::c_ulong,
    pub available: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_space_info"]
        [::std::mem::size_of::<std_filesystem_space_info>() - 24usize];
    ["Alignment of std_filesystem_space_info"]
        [::std::mem::align_of::<std_filesystem_space_info>() - 8usize];
    ["Offset of field: std_filesystem_space_info::capacity"]
        [::std::mem::offset_of!(std_filesystem_space_info, capacity) - 0usize];
    ["Offset of field: std_filesystem_space_info::free"]
        [::std::mem::offset_of!(std_filesystem_space_info, free) - 8usize];
    ["Offset of field: std_filesystem_space_info::available"]
        [::std::mem::offset_of!(std_filesystem_space_info, available) - 16usize];
};
pub const std_filesystem_file_type_none: std_filesystem_file_type = 0;
pub const std_filesystem_file_type_not_found: std_filesystem_file_type = -1;
pub const std_filesystem_file_type_regular: std_filesystem_file_type = 1;
pub const std_filesystem_file_type_directory: std_filesystem_file_type = 2;
pub const std_filesystem_file_type_symlink: std_filesystem_file_type = 3;
pub const std_filesystem_file_type_block: std_filesystem_file_type = 4;
pub const std_filesystem_file_type_character: std_filesystem_file_type = 5;
pub const std_filesystem_file_type_fifo: std_filesystem_file_type = 6;
pub const std_filesystem_file_type_socket: std_filesystem_file_type = 7;
pub const std_filesystem_file_type_unknown: std_filesystem_file_type = 8;
pub type std_filesystem_file_type = ::std::os::raw::c_schar;
pub const std_filesystem_copy_options_none: std_filesystem_copy_options = 0;
pub const std_filesystem_copy_options_skip_existing: std_filesystem_copy_options = 1;
pub const std_filesystem_copy_options_overwrite_existing: std_filesystem_copy_options = 2;
pub const std_filesystem_copy_options_update_existing: std_filesystem_copy_options = 4;
pub const std_filesystem_copy_options_recursive: std_filesystem_copy_options = 8;
pub const std_filesystem_copy_options_copy_symlinks: std_filesystem_copy_options = 16;
pub const std_filesystem_copy_options_skip_symlinks: std_filesystem_copy_options = 32;
pub const std_filesystem_copy_options_directories_only: std_filesystem_copy_options = 64;
pub const std_filesystem_copy_options_create_symlinks: std_filesystem_copy_options = 128;
pub const std_filesystem_copy_options_create_hard_links: std_filesystem_copy_options = 256;
pub type std_filesystem_copy_options = ::std::os::raw::c_ushort;
pub const std_filesystem_perms_none: std_filesystem_perms = 0;
pub const std_filesystem_perms_owner_read: std_filesystem_perms = 256;
pub const std_filesystem_perms_owner_write: std_filesystem_perms = 128;
pub const std_filesystem_perms_owner_exec: std_filesystem_perms = 64;
pub const std_filesystem_perms_owner_all: std_filesystem_perms = 448;
pub const std_filesystem_perms_group_read: std_filesystem_perms = 32;
pub const std_filesystem_perms_group_write: std_filesystem_perms = 16;
pub const std_filesystem_perms_group_exec: std_filesystem_perms = 8;
pub const std_filesystem_perms_group_all: std_filesystem_perms = 56;
pub const std_filesystem_perms_others_read: std_filesystem_perms = 4;
pub const std_filesystem_perms_others_write: std_filesystem_perms = 2;
pub const std_filesystem_perms_others_exec: std_filesystem_perms = 1;
pub const std_filesystem_perms_others_all: std_filesystem_perms = 7;
pub const std_filesystem_perms_all: std_filesystem_perms = 511;
pub const std_filesystem_perms_set_uid: std_filesystem_perms = 2048;
pub const std_filesystem_perms_set_gid: std_filesystem_perms = 1024;
pub const std_filesystem_perms_sticky_bit: std_filesystem_perms = 512;
pub const std_filesystem_perms_mask: std_filesystem_perms = 4095;
pub const std_filesystem_perms_unknown: std_filesystem_perms = 65535;
pub type std_filesystem_perms = ::std::os::raw::c_uint;
pub const std_filesystem_perm_options_replace: std_filesystem_perm_options = 1;
pub const std_filesystem_perm_options_add: std_filesystem_perm_options = 2;
pub const std_filesystem_perm_options_remove: std_filesystem_perm_options = 4;
pub const std_filesystem_perm_options_nofollow: std_filesystem_perm_options = 8;
pub type std_filesystem_perm_options = ::std::os::raw::c_uint;
pub const std_filesystem_directory_options_none: std_filesystem_directory_options = 0;
pub const std_filesystem_directory_options_follow_directory_symlink:
    std_filesystem_directory_options = 1;
pub const std_filesystem_directory_options_skip_permission_denied:
    std_filesystem_directory_options = 2;
pub type std_filesystem_directory_options = ::std::os::raw::c_uchar;
pub type std_filesystem_file_time_type = std_filesystem___file_clock_time_point;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem4copyERKNS_7__cxx114pathES3_NS_12copy_optionsE"]
    pub fn std_filesystem_copy(
        __from: *const std_filesystem_path,
        __to: *const std_filesystem_path,
        __options: std_filesystem_copy_options,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem4copyERKNS_7__cxx114pathES3_NS_12copy_optionsERSt10error_code"]
    pub fn std_filesystem_copy1(
        __from: *const std_filesystem_path,
        __to: *const std_filesystem_path,
        __options: std_filesystem_copy_options,
        arg1: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9copy_fileERKNS_7__cxx114pathES3_NS_12copy_optionsE"]
    pub fn std_filesystem_copy_file(
        __from: *const std_filesystem_path,
        __to: *const std_filesystem_path,
        __option: std_filesystem_copy_options,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9copy_fileERKNS_7__cxx114pathES3_NS_12copy_optionsERSt10error_code"]
    pub fn std_filesystem_copy_file1(
        __from: *const std_filesystem_path,
        __to: *const std_filesystem_path,
        __option: std_filesystem_copy_options,
        arg1: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12current_pathB5cxx11Ev"]
    pub fn std_filesystem_current_path() -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9file_sizeERKNS_7__cxx114pathE"]
    pub fn std_filesystem_file_size(arg1: *const std_filesystem_path) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9file_sizeERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_file_size1(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem15hard_link_countERKNS_7__cxx114pathE"]
    pub fn std_filesystem_hard_link_count(
        arg1: *const std_filesystem_path,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem15hard_link_countERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_hard_link_count1(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem15last_write_timeERKNS_7__cxx114pathE"]
    pub fn std_filesystem_last_write_time(
        arg1: *const std_filesystem_path,
    ) -> std_filesystem_file_time_type;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem15last_write_timeERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_last_write_time1(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> std_filesystem_file_time_type;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem11permissionsERKNS_7__cxx114pathENS_5permsENS_12perm_optionsERSt10error_code"]
    pub fn std_filesystem_permissions(
        arg1: *const std_filesystem_path,
        arg2: std_filesystem_perms,
        arg3: std_filesystem_perm_options,
        arg4: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9proximateERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_proximate(
        __p: *const std_filesystem_path,
        __base: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem8relativeERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_relative(
        __p: *const std_filesystem_path,
        __base: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem6statusERKNS_7__cxx114pathE"]
    pub fn std_filesystem_status(arg1: *const std_filesystem_path) -> std_filesystem_file_status;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem6statusERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_status1(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> std_filesystem_file_status;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem14symlink_statusERKNS_7__cxx114pathE"]
    pub fn std_filesystem_symlink_status(
        arg1: *const std_filesystem_path,
    ) -> std_filesystem_file_status;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem14symlink_statusERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_symlink_status1(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> std_filesystem_file_status;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem6removeERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_remove(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem10remove_allERKNS_7__cxx114pathE"]
    pub fn std_filesystem_remove_all(arg1: *const std_filesystem_path) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem10remove_allERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_remove_all1(
        arg1: *const std_filesystem_path,
        arg2: *mut std_error_code,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_filesystem_file_status {
    pub _M_type: std_filesystem_file_type,
    pub _M_perms: std_filesystem_perms,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_filesystem_file_status"]
        [::std::mem::size_of::<std_filesystem_file_status>() - 8usize];
    ["Alignment of std_filesystem_file_status"]
        [::std::mem::align_of::<std_filesystem_file_status>() - 4usize];
    ["Offset of field: std_filesystem_file_status::_M_type"]
        [::std::mem::offset_of!(std_filesystem_file_status, _M_type) - 0usize];
    ["Offset of field: std_filesystem_file_status::_M_perms"]
        [::std::mem::offset_of!(std_filesystem_file_status, _M_perms) - 4usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem8absoluteERKNS_7__cxx114pathE"]
    pub fn std_filesystem_absolute(__p: *const std_filesystem_path) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem8absoluteERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_absolute1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9canonicalERKNS_7__cxx114pathE"]
    pub fn std_filesystem_canonical(__p: *const std_filesystem_path) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9canonicalERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_canonical1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12copy_symlinkERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_copy_symlink(
        __existing_symlink: *const std_filesystem_path,
        __new_symlink: *const std_filesystem_path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12copy_symlinkERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_copy_symlink1(
        __existing_symlink: *const std_filesystem_path,
        __new_symlink: *const std_filesystem_path,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem18create_directoriesERKNS_7__cxx114pathE"]
    pub fn std_filesystem_create_directories(__p: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem18create_directoriesERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_create_directories1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16create_directoryERKNS_7__cxx114pathE"]
    pub fn std_filesystem_create_directory(__p: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16create_directoryERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_create_directory1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16create_directoryERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_create_directory2(
        __p: *const std_filesystem_path,
        __attributes: *const std_filesystem_path,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16create_directoryERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_create_directory3(
        __p: *const std_filesystem_path,
        __attributes: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem24create_directory_symlinkERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_create_directory_symlink(
        __to: *const std_filesystem_path,
        __new_symlink: *const std_filesystem_path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem24create_directory_symlinkERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_create_directory_symlink1(
        __to: *const std_filesystem_path,
        __new_symlink: *const std_filesystem_path,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16create_hard_linkERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_create_hard_link(
        __to: *const std_filesystem_path,
        __new_hard_link: *const std_filesystem_path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16create_hard_linkERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_create_hard_link1(
        __to: *const std_filesystem_path,
        __new_hard_link: *const std_filesystem_path,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem14create_symlinkERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_create_symlink(
        __to: *const std_filesystem_path,
        __new_symlink: *const std_filesystem_path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem14create_symlinkERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_create_symlink1(
        __to: *const std_filesystem_path,
        __new_symlink: *const std_filesystem_path,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12current_pathB5cxx11ERSt10error_code"]
    pub fn std_filesystem_current_path1(__ec: *mut std_error_code) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12current_pathERKNS_7__cxx114pathE"]
    pub fn std_filesystem_current_path2(__p: *const std_filesystem_path);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12current_pathERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_current_path3(__p: *const std_filesystem_path, __ec: *mut std_error_code);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem10equivalentERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_equivalent(
        __p1: *const std_filesystem_path,
        __p2: *const std_filesystem_path,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem10equivalentERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_equivalent1(
        __p1: *const std_filesystem_path,
        __p2: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem8is_emptyERKNS_7__cxx114pathE"]
    pub fn std_filesystem_is_empty(__p: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem8is_emptyERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_is_empty1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem15last_write_timeERKNS_7__cxx114pathENSt6chrono10time_pointINS_12__file_clockENS4_8durationIlSt5ratioILl1ELl1000000000EEEEEE"]
    pub fn std_filesystem_last_write_time2(
        __p: *const std_filesystem_path,
        __new_time: std_filesystem_file_time_type,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem15last_write_timeERKNS_7__cxx114pathENSt6chrono10time_pointINS_12__file_clockENS4_8durationIlSt5ratioILl1ELl1000000000EEEEEERSt10error_code"]
    pub fn std_filesystem_last_write_time3(
        __p: *const std_filesystem_path,
        __new_time: std_filesystem_file_time_type,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem11permissionsERKNS_7__cxx114pathENS_5permsENS_12perm_optionsE"]
    pub fn std_filesystem_permissions1(
        __p: *const std_filesystem_path,
        __prms: std_filesystem_perms,
        __opts: std_filesystem_perm_options,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem9proximateERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_proximate1(
        __p: *const std_filesystem_path,
        __base: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12read_symlinkERKNS_7__cxx114pathE"]
    pub fn std_filesystem_read_symlink(__p: *const std_filesystem_path) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem12read_symlinkERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_read_symlink1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem8relativeERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_relative1(
        __p: *const std_filesystem_path,
        __base: *const std_filesystem_path,
    ) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem6removeERKNS_7__cxx114pathE"]
    pub fn std_filesystem_remove1(__p: *const std_filesystem_path) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem6renameERKNS_7__cxx114pathES3_"]
    pub fn std_filesystem_rename(
        __from: *const std_filesystem_path,
        __to: *const std_filesystem_path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem6renameERKNS_7__cxx114pathES3_RSt10error_code"]
    pub fn std_filesystem_rename1(
        __from: *const std_filesystem_path,
        __to: *const std_filesystem_path,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem11resize_fileERKNS_7__cxx114pathEm"]
    pub fn std_filesystem_resize_file(
        __p: *const std_filesystem_path,
        __size: ::std::os::raw::c_ulong,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem11resize_fileERKNS_7__cxx114pathEmRSt10error_code"]
    pub fn std_filesystem_resize_file1(
        __p: *const std_filesystem_path,
        __size: ::std::os::raw::c_ulong,
        __ec: *mut std_error_code,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem5spaceERKNS_7__cxx114pathE"]
    pub fn std_filesystem_space(__p: *const std_filesystem_path) -> std_filesystem_space_info;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem5spaceERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_space1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_space_info;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem19temp_directory_pathB5cxx11Ev"]
    pub fn std_filesystem_temp_directory_path() -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem19temp_directory_pathB5cxx11ERSt10error_code"]
    pub fn std_filesystem_temp_directory_path1(__ec: *mut std_error_code) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16weakly_canonicalERKNS_7__cxx114pathE"]
    pub fn std_filesystem_weakly_canonical(__p: *const std_filesystem_path) -> std_filesystem_path;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10filesystem16weakly_canonicalERKNS_7__cxx114pathERSt10error_code"]
    pub fn std_filesystem_weakly_canonical1(
        __p: *const std_filesystem_path,
        __ec: *mut std_error_code,
    ) -> std_filesystem_path;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono___is_duration {
    pub _base: std_false_type,
}
pub type std_chrono___enable_if_is_duration = u8;
pub type std_chrono___disable_if_is_duration = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_treat_as_floating_point {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_duration_values {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_chrono_duration<_Rep> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Rep>>,
    pub __r: std_chrono_duration_rep<_Rep>,
}
pub type std_chrono_duration___is_float = std_chrono_treat_as_floating_point;
pub type std_chrono_duration___divide = u8;
pub type std_chrono_duration___is_harmonic = std___bool_constant;
pub type std_chrono_duration_rep<_Rep> = _Rep;
pub type std_chrono_duration_period = __BindgenOpaqueArray<u8, 0usize>;
pub type std_chrono___common_rep_t = u8;
pub type std_chrono_nanoseconds = std_chrono_duration<::std::os::raw::c_long>;
pub type std_chrono_microseconds = std_chrono_duration<::std::os::raw::c_long>;
pub type std_chrono_milliseconds = std_chrono_duration<::std::os::raw::c_long>;
pub type std_chrono_seconds = std_chrono_duration<::std::os::raw::c_long>;
pub type std_chrono_minutes = std_chrono_duration<::std::os::raw::c_long>;
pub type std_chrono_hours = std_chrono_duration<::std::os::raw::c_long>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_time_point<_Dur> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Dur>>,
    pub __d: std_chrono_time_point_duration<_Dur>,
}
pub type std_chrono_time_point_clock<_Clock> = _Clock;
pub type std_chrono_time_point_duration<_Dur> = _Dur;
pub type std_chrono_time_point_rep = __BindgenOpaqueArray<u8, 0usize>;
pub type std_chrono_time_point_period = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_system_clock {
    pub _address: u8,
}
pub type std_chrono_system_clock_duration = std_chrono_nanoseconds;
pub type std_chrono_system_clock_rep = rep;
pub type std_chrono_system_clock_period = u8;
pub type std_chrono_system_clock_time_point =
    std_chrono_time_point<std_chrono_system_clock_duration>;
pub const std_chrono_system_clock_is_steady: bool = false;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_chrono_system_clock"][::std::mem::size_of::<std_chrono_system_clock>() - 1usize];
    ["Alignment of std_chrono_system_clock"]
        [::std::mem::align_of::<std_chrono_system_clock>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6chrono3_V212system_clock3nowEv"]
    pub fn std_chrono_system_clock_now() -> std_chrono_system_clock_time_point;
}
impl std_chrono_system_clock {
    #[inline]
    pub unsafe fn now() -> std_chrono_system_clock_time_point {
        std_chrono_system_clock_now()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_steady_clock {
    pub _address: u8,
}
pub type std_chrono_steady_clock_duration = std_chrono_nanoseconds;
pub type std_chrono_steady_clock_rep = rep;
pub type std_chrono_steady_clock_period = u8;
pub type std_chrono_steady_clock_time_point =
    std_chrono_time_point<std_chrono_steady_clock_duration>;
pub const std_chrono_steady_clock_is_steady: bool = true;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_chrono_steady_clock"][::std::mem::size_of::<std_chrono_steady_clock>() - 1usize];
    ["Alignment of std_chrono_steady_clock"]
        [::std::mem::align_of::<std_chrono_steady_clock>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6chrono3_V212steady_clock3nowEv"]
    pub fn std_chrono_steady_clock_now() -> std_chrono_steady_clock_time_point;
}
impl std_chrono_steady_clock {
    #[inline]
    pub unsafe fn now() -> std_chrono_steady_clock_time_point {
        std_chrono_steady_clock_now()
    }
}
pub type std_chrono_high_resolution_clock = std_chrono_system_clock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___duration_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___timepoint_common_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_base {
    pub _address: u8,
}
pub const std_time_base_dateorder_no_order: std_time_base_dateorder = 0;
pub const std_time_base_dateorder_dmy: std_time_base_dateorder = 1;
pub const std_time_base_dateorder_mdy: std_time_base_dateorder = 2;
pub const std_time_base_dateorder_ymd: std_time_base_dateorder = 3;
pub const std_time_base_dateorder_ydm: std_time_base_dateorder = 4;
pub type std_time_base_dateorder = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_time_base"][::std::mem::size_of::<std_time_base>() - 1usize];
    ["Alignment of std_time_base"][::std::mem::align_of::<std_time_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___timepunct_cache<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_locale_facet,
    pub _M_date_format: *const _CharT,
    pub _M_date_era_format: *const _CharT,
    pub _M_time_format: *const _CharT,
    pub _M_time_era_format: *const _CharT,
    pub _M_date_time_format: *const _CharT,
    pub _M_date_time_era_format: *const _CharT,
    pub _M_am: *const _CharT,
    pub _M_pm: *const _CharT,
    pub _M_am_pm_format: *const _CharT,
    pub _M_day1: *const _CharT,
    pub _M_day2: *const _CharT,
    pub _M_day3: *const _CharT,
    pub _M_day4: *const _CharT,
    pub _M_day5: *const _CharT,
    pub _M_day6: *const _CharT,
    pub _M_day7: *const _CharT,
    pub _M_aday1: *const _CharT,
    pub _M_aday2: *const _CharT,
    pub _M_aday3: *const _CharT,
    pub _M_aday4: *const _CharT,
    pub _M_aday5: *const _CharT,
    pub _M_aday6: *const _CharT,
    pub _M_aday7: *const _CharT,
    pub _M_month01: *const _CharT,
    pub _M_month02: *const _CharT,
    pub _M_month03: *const _CharT,
    pub _M_month04: *const _CharT,
    pub _M_month05: *const _CharT,
    pub _M_month06: *const _CharT,
    pub _M_month07: *const _CharT,
    pub _M_month08: *const _CharT,
    pub _M_month09: *const _CharT,
    pub _M_month10: *const _CharT,
    pub _M_month11: *const _CharT,
    pub _M_month12: *const _CharT,
    pub _M_amonth01: *const _CharT,
    pub _M_amonth02: *const _CharT,
    pub _M_amonth03: *const _CharT,
    pub _M_amonth04: *const _CharT,
    pub _M_amonth05: *const _CharT,
    pub _M_amonth06: *const _CharT,
    pub _M_amonth07: *const _CharT,
    pub _M_amonth08: *const _CharT,
    pub _M_amonth09: *const _CharT,
    pub _M_amonth10: *const _CharT,
    pub _M_amonth11: *const _CharT,
    pub _M_amonth12: *const _CharT,
    pub _M_allocated: bool,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt17__timepunct_cacheIcE12_S_timezonesE"]
    pub static mut std__S_timezones: [*const ::std::os::raw::c_char; 14usize];
}
#[repr(C)]
#[derive(Debug)]
pub struct std___timepunct<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_locale_facet,
    pub _M_data: *mut std___timepunct___cache_type<_CharT>,
    pub _M_c_locale_timepunct: std___c_locale,
    pub _M_name_timepunct: *const ::std::os::raw::c_char,
}
pub type std___timepunct___char_type<_CharT> = _CharT;
pub type std___timepunct___cache_type<_CharT> = std___timepunct_cache<_CharT>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___time_get_state {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub _M_century: ::std::os::raw::c_int,
    pub _M_pad3: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___time_get_state"][::std::mem::size_of::<std___time_get_state>() - 12usize];
    ["Alignment of std___time_get_state"][::std::mem::align_of::<std___time_get_state>() - 4usize];
    ["Offset of field: std___time_get_state::_M_century"]
        [::std::mem::offset_of!(std___time_get_state, _M_century) - 4usize];
    ["Offset of field: std___time_get_state::_M_pad3"]
        [::std::mem::offset_of!(std___time_get_state, _M_pad3) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt16__time_get_state17_M_finalize_stateEP2tm"]
    pub fn std___time_get_state__M_finalize_state(this: *mut std___time_get_state, __tm: *mut tm);
}
impl std___time_get_state {
    #[inline]
    pub fn _M_have_I(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_I(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_I_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_I_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_wday(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_wday(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_wday_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_wday_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_yday(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_yday(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_yday_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_yday_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_mon(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_mon(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_mon_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_mon_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_mday(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_mday(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_mday_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_mday_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_uweek(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_uweek(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_uweek_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_uweek_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_wweek(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_wweek(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_wweek_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_wweek_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_have_century(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_have_century(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_have_century_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_have_century_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_is_pm(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_is_pm(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_is_pm_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_is_pm_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_want_century(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_want_century(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_want_century_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_want_century_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_want_xday(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__M_want_xday(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_want_xday_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_want_xday_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set__M_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_pad1_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_pad1_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_week_no(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set__M_week_no(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_week_no_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_week_no_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn _M_pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set__M_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _M_pad2_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__M_pad2_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _M_have_I: ::std::os::raw::c_uint,
        _M_have_wday: ::std::os::raw::c_uint,
        _M_have_yday: ::std::os::raw::c_uint,
        _M_have_mon: ::std::os::raw::c_uint,
        _M_have_mday: ::std::os::raw::c_uint,
        _M_have_uweek: ::std::os::raw::c_uint,
        _M_have_wweek: ::std::os::raw::c_uint,
        _M_have_century: ::std::os::raw::c_uint,
        _M_is_pm: ::std::os::raw::c_uint,
        _M_want_century: ::std::os::raw::c_uint,
        _M_want_xday: ::std::os::raw::c_uint,
        _M_pad1: ::std::os::raw::c_uint,
        _M_week_no: ::std::os::raw::c_uint,
        _M_pad2: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let _M_have_I: u32 = unsafe { ::std::mem::transmute(_M_have_I) };
            _M_have_I as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let _M_have_wday: u32 = unsafe { ::std::mem::transmute(_M_have_wday) };
            _M_have_wday as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let _M_have_yday: u32 = unsafe { ::std::mem::transmute(_M_have_yday) };
            _M_have_yday as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let _M_have_mon: u32 = unsafe { ::std::mem::transmute(_M_have_mon) };
            _M_have_mon as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let _M_have_mday: u32 = unsafe { ::std::mem::transmute(_M_have_mday) };
            _M_have_mday as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let _M_have_uweek: u32 = unsafe { ::std::mem::transmute(_M_have_uweek) };
            _M_have_uweek as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let _M_have_wweek: u32 = unsafe { ::std::mem::transmute(_M_have_wweek) };
            _M_have_wweek as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let _M_have_century: u32 = unsafe { ::std::mem::transmute(_M_have_century) };
            _M_have_century as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let _M_is_pm: u32 = unsafe { ::std::mem::transmute(_M_is_pm) };
            _M_is_pm as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let _M_want_century: u32 = unsafe { ::std::mem::transmute(_M_want_century) };
            _M_want_century as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let _M_want_xday: u32 = unsafe { ::std::mem::transmute(_M_want_xday) };
            _M_want_xday as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let _M_pad1: u32 = unsafe { ::std::mem::transmute(_M_pad1) };
            _M_pad1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let _M_week_no: u32 = unsafe { ::std::mem::transmute(_M_week_no) };
            _M_week_no as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let _M_pad2: u32 = unsafe { ::std::mem::transmute(_M_pad2) };
            _M_pad2 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub unsafe fn _M_finalize_state(&mut self, __tm: *mut tm) {
        std___time_get_state__M_finalize_state(self, __tm)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_time_put {
    pub _base: std_locale_facet,
}
pub type std_time_put_char_type<_CharT> = _CharT;
pub type std_time_put_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_put_byname {
    pub _base: std_time_put,
}
pub type std_time_put_byname_char_type<_CharT> = _CharT;
pub type std_time_put_byname_iter_type<_OutIter> = _OutIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base {
    pub _address: u8,
}
pub const std_money_base_part_none: std_money_base_part = 0;
pub const std_money_base_part_space: std_money_base_part = 1;
pub const std_money_base_part_symbol: std_money_base_part = 2;
pub const std_money_base_part_sign: std_money_base_part = 3;
pub const std_money_base_part_value: std_money_base_part = 4;
pub type std_money_base_part = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base_pattern {
    pub field: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_money_base_pattern"][::std::mem::size_of::<std_money_base_pattern>() - 4usize];
    ["Alignment of std_money_base_pattern"]
        [::std::mem::align_of::<std_money_base_pattern>() - 1usize];
    ["Offset of field: std_money_base_pattern::field"]
        [::std::mem::offset_of!(std_money_base_pattern, field) - 0usize];
};
pub const std_money_base__S_minus: std_money_base__bindgen_ty_1 = 0;
pub const std_money_base__S_zero: std_money_base__bindgen_ty_1 = 1;
pub const std_money_base__S_end: std_money_base__bindgen_ty_1 = 11;
pub type std_money_base__bindgen_ty_1 = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10money_base18_S_default_patternE"]
    pub static std_money_base__S_default_pattern: std_money_base_pattern;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10money_base8_S_atomsE"]
    pub static mut std_money_base__S_atoms: *const ::std::os::raw::c_char;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_money_base"][::std::mem::size_of::<std_money_base>() - 1usize];
    ["Alignment of std_money_base"][::std::mem::align_of::<std_money_base>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt10money_base20_S_construct_patternEccc"]
    pub fn std_money_base__S_construct_pattern(
        __precedes: ::std::os::raw::c_char,
        __space: ::std::os::raw::c_char,
        __posn: ::std::os::raw::c_char,
    ) -> std_money_base_pattern;
}
impl std_money_base {
    #[inline]
    pub unsafe fn _S_construct_pattern(
        __precedes: ::std::os::raw::c_char,
        __space: ::std::os::raw::c_char,
        __posn: ::std::os::raw::c_char,
    ) -> std_money_base_pattern {
        std_money_base__S_construct_pattern(__precedes, __space, __posn)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_base {
    pub _address: u8,
}
pub type std_messages_base_catalog = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_messages_base"][::std::mem::size_of::<std_messages_base>() - 1usize];
    ["Alignment of std_messages_base"][::std::mem::align_of::<std_messages_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_base {
    pub _address: u8,
}
pub const std_codecvt_base_result_ok: std_codecvt_base_result = 0;
pub const std_codecvt_base_result_partial: std_codecvt_base_result = 1;
pub const std_codecvt_base_result_error: std_codecvt_base_result = 2;
pub const std_codecvt_base_result_noconv: std_codecvt_base_result = 3;
pub type std_codecvt_base_result = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_codecvt_base"][::std::mem::size_of::<std_codecvt_base>() - 1usize];
    ["Alignment of std_codecvt_base"][::std::mem::align_of::<std_codecvt_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___codecvt_abstract_base {
    pub _base: std_locale_facet,
}
pub use self::std_codecvt_base_result as std___codecvt_abstract_base_result;
pub type std___codecvt_abstract_base_intern_type<_InternT> = _InternT;
pub type std___codecvt_abstract_base_extern_type<_ExternT> = _ExternT;
pub type std___codecvt_abstract_base_state_type<_StateT> = _StateT;
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt {
    pub _base: std___codecvt_abstract_base,
    pub _M_c_locale_codecvt: std___c_locale,
}
pub use self::std_codecvt_base_result as std_codecvt_result;
pub type std_codecvt_intern_type<_InternT> = _InternT;
pub type std_codecvt_extern_type<_ExternT> = _ExternT;
pub type std_codecvt_state_type<_StateT> = _StateT;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_char_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt_byname {
    pub _base: std_codecvt,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 16usize];
    ["Align of template specialization: std_codecvt_byname_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 16usize];
    ["Align of template specialization: std_codecvt_byname_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 24usize];
    ["Align of template specialization: std_codecvt_byname_open0_char_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 24usize];
    ["Align of template specialization: std_codecvt_byname_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_money_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_money_get>() - 16usize];
    [
        "Align of template specialization: std_money_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_money_get>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_money_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_money_put>() - 16usize];
    [
        "Align of template specialization: std_money_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_money_put>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___timepunct_open0_char_close0"]
        [::std::mem::size_of::<std___timepunct<::std::os::raw::c_char>>() - 40usize];
    ["Align of template specialization: std___timepunct_open0_char_close0"]
        [::std::mem::align_of::<std___timepunct<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_time_put>() - 16usize];
    [
        "Align of template specialization: std_time_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_time_put>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_put_byname_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_time_put_byname>() - 16usize];
    [
        "Align of template specialization: std_time_put_byname_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_time_put_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_time_get>() - 16usize];
    [
        "Align of template specialization: std_time_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_time_get>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_get_byname_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_time_get_byname>() - 16usize];
    [
        "Align of template specialization: std_time_get_byname_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_time_get_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_messages_open0_char_close0"]
        [::std::mem::size_of::<std_messages>() - 32usize];
    ["Align of template specialization: std_messages_open0_char_close0"]
        [::std::mem::align_of::<std_messages>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_messages_byname_open0_char_close0"]
        [::std::mem::size_of::<std_messages_byname>() - 32usize];
    ["Align of template specialization: std_messages_byname_open0_char_close0"]
        [::std::mem::align_of::<std_messages_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_money_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_money_get>() - 16usize];
    [
        "Align of template specialization: std_money_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_money_get>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_money_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_money_put>() - 16usize];
    [
        "Align of template specialization: std_money_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_money_put>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___timepunct_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___timepunct<u32>>() - 40usize];
    ["Align of template specialization: std___timepunct_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___timepunct<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_time_put>() - 16usize];
    [
        "Align of template specialization: std_time_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_time_put>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_put_byname_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_time_put_byname>() - 16usize];
    [
        "Align of template specialization: std_time_put_byname_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_time_put_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_time_get>() - 16usize];
    [
        "Align of template specialization: std_time_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_time_get>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_time_get_byname_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_time_get_byname>() - 16usize];
    [
        "Align of template specialization: std_time_get_byname_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_time_get_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_messages_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_messages>() - 32usize];
    ["Align of template specialization: std_messages_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_messages>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_messages_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_messages_byname>() - 32usize];
    ["Align of template specialization: std_messages_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_messages_byname>() - 8usize];
};
#[repr(C)]
pub struct std_wbuffer_convert<_Codecvt, _Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Codecvt>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_basic_streambuf<_Elem>,
    pub _M_buf: *mut std_streambuf,
    pub _M_cvt: std___detail__Scoped_ptr<_Codecvt>,
    pub _M_state: std_wbuffer_convert_state_type,
    pub _M_put_area: [_Elem; 32usize],
    pub _M_get_area: [_Elem; 32usize],
    pub _M_unconv: std_streamsize,
    pub _M_get_buf: [::std::os::raw::c_char; 29usize],
    pub _M_always_noconv: bool,
}
pub type std_wbuffer_convert__Wide_streambuf<_Elem> = std_basic_streambuf<_Elem>;
pub type std_wbuffer_convert_state_type = __BindgenOpaqueArray<u8, 0usize>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_stringbuf<::std::os::raw::c_char>>() - 104usize];
    [
        "Align of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_stringbuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_istringstream<::std::os::raw::c_char>>() - 384usize];
    [
        "Align of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_istringstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ostringstream<::std::os::raw::c_char>>() - 376usize];
    [
        "Align of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ostringstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_stringstream<::std::os::raw::c_char>>() - 392usize];
    [
        "Align of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_stringstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_stringbuf<u32>>() - 104usize];
    [
        "Align of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_stringbuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_istringstream<u32>>() - 384usize];
    [
        "Align of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_istringstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ostringstream<u32>>() - 376usize];
    [
        "Align of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ostringstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_stringstream<u32>>() - 392usize];
    [
        "Align of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_stringstream<u32>>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Resetiosflags {
    pub _M_mask: std_ios_base_fmtflags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Resetiosflags"][::std::mem::size_of::<std__Resetiosflags>() - 4usize];
    ["Alignment of std__Resetiosflags"][::std::mem::align_of::<std__Resetiosflags>() - 4usize];
    ["Offset of field: std__Resetiosflags::_M_mask"]
        [::std::mem::offset_of!(std__Resetiosflags, _M_mask) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Setiosflags {
    pub _M_mask: std_ios_base_fmtflags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Setiosflags"][::std::mem::size_of::<std__Setiosflags>() - 4usize];
    ["Alignment of std__Setiosflags"][::std::mem::align_of::<std__Setiosflags>() - 4usize];
    ["Offset of field: std__Setiosflags::_M_mask"]
        [::std::mem::offset_of!(std__Setiosflags, _M_mask) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Setbase {
    pub _M_base: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Setbase"][::std::mem::size_of::<std__Setbase>() - 4usize];
    ["Alignment of std__Setbase"][::std::mem::align_of::<std__Setbase>() - 4usize];
    ["Offset of field: std__Setbase::_M_base"]
        [::std::mem::offset_of!(std__Setbase, _M_base) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Setfill<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_c: _CharT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Setprecision {
    pub _M_n: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Setprecision"][::std::mem::size_of::<std__Setprecision>() - 4usize];
    ["Alignment of std__Setprecision"][::std::mem::align_of::<std__Setprecision>() - 4usize];
    ["Offset of field: std__Setprecision::_M_n"]
        [::std::mem::offset_of!(std__Setprecision, _M_n) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Setw {
    pub _M_n: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std__Setw"][::std::mem::size_of::<std__Setw>() - 4usize];
    ["Alignment of std__Setw"][::std::mem::align_of::<std__Setw>() - 4usize];
    ["Offset of field: std__Setw::_M_n"][::std::mem::offset_of!(std__Setw, _M_n) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_money<_MoneyT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_MoneyT>>,
    pub _M_mon: *mut _MoneyT,
    pub _M_intl: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Put_money<_MoneyT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_MoneyT>>,
    pub _M_mon: *const _MoneyT,
    pub _M_intl: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Put_time<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_tmb: *mut tm,
    pub _M_fmt: *const _CharT,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Get_time<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _M_tmb: *mut tm,
    pub _M_fmt: *const _CharT,
}
pub const std_codecvt_mode_consume_header: std_codecvt_mode = 4;
pub const std_codecvt_mode_generate_header: std_codecvt_mode = 2;
pub const std_codecvt_mode_little_endian: std_codecvt_mode = 1;
pub type std_codecvt_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___codecvt_utf8_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___codecvt_utf16_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___codecvt_utf8_utf16_base {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf8_base_open0_char16_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf8_base>() - 32usize];
    ["Align of template specialization: std___codecvt_utf8_base_open0_char16_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf8_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf16_base_open0_char16_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf16_base>() - 32usize];
    ["Align of template specialization: std___codecvt_utf16_base_open0_char16_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf16_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf8_utf16_base_open0_char16_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf8_utf16_base>() - 32usize];
    ["Align of template specialization: std___codecvt_utf8_utf16_base_open0_char16_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf8_utf16_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf8_base_open0_char32_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf8_base>() - 32usize];
    ["Align of template specialization: std___codecvt_utf8_base_open0_char32_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf8_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf16_base_open0_char32_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf16_base>() - 32usize];
    ["Align of template specialization: std___codecvt_utf16_base_open0_char32_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf16_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf8_utf16_base_open0_char32_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf8_utf16_base>() - 32usize];
    ["Align of template specialization: std___codecvt_utf8_utf16_base_open0_char32_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf8_utf16_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf8_base_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf8_base>() - 40usize];
    ["Align of template specialization: std___codecvt_utf8_base_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf8_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf16_base_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf16_base>() - 40usize];
    ["Align of template specialization: std___codecvt_utf16_base_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf16_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___codecvt_utf8_utf16_base_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___codecvt_utf8_utf16_base>() - 40usize];
    ["Align of template specialization: std___codecvt_utf8_utf16_base_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___codecvt_utf8_utf16_base>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_filesystem_path_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_filesystem_path_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nullopt_t {
    pub _address: u8,
}
pub const std_nullopt_t__Construct__Token: std_nullopt_t__Construct = 0;
pub type std_nullopt_t__Construct = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_nullopt_t"][::std::mem::size_of::<std_nullopt_t>() - 1usize];
    ["Alignment of std_nullopt_t"][::std::mem::align_of::<std_nullopt_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt7nullopt"]
    pub static std_nullopt: std_nullopt_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Optional_func<_Fn> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fn>>,
    pub _M_f: *mut _Fn,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_optional_access {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_optional_access"][::std::mem::size_of::<std_bad_optional_access>() - 8usize];
    ["Alignment of std_bad_optional_access"]
        [::std::mem::align_of::<std_bad_optional_access>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std__Optional_payload_base {
    pub _M_payload: u8,
    pub _M_engaged: bool,
}
pub type std__Optional_payload_base__Stored_type = std_remove_const_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Optional_payload_base__Empty_byte {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Optional_base_impl {
    pub _address: u8,
}
pub type std__Optional_base_impl__Stored_type = std_remove_const_t;
pub type std___converts_from_optional = std___or_;
pub type std___assigns_from_optional = std___or_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_optional {
    pub _address: u8,
}
pub type std_optional__Base = u8;
pub type std_optional___not_self = std___not_;
pub type std_optional___not_tag = std___not_;
pub type std_optional__Requires = std_enable_if_t;
pub type std_optional_value_type<_Tp> = _Tp;
pub type std___optional_relop_t = std_enable_if_t;
pub type std___optional_eq_t = std___optional_relop_t;
pub type std___optional_ne_t = std___optional_relop_t;
pub type std___optional_lt_t = std___optional_relop_t;
pub type std___optional_gt_t = std___optional_relop_t;
pub type std___optional_le_t = std___optional_relop_t;
pub type std___optional_ge_t = std___optional_relop_t;
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_any_cast {
    pub _base: std_bad_cast,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_any_cast"][::std::mem::size_of::<std_bad_any_cast>() - 8usize];
    ["Alignment of std_bad_any_cast"][::std::mem::align_of::<std_bad_any_cast>() - 8usize];
};
#[repr(C)]
pub struct std_any {
    pub _M_manager: ::std::option::Option<
        unsafe extern "C" fn(arg1: std_any__Op, arg2: *const std_any, arg3: *mut std_any__Arg),
    >,
    pub _M_storage: std_any__Storage,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_any__Storage {
    pub _M_ptr: *mut ::std::os::raw::c_void,
    pub _M_buffer: std_any__Storage_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_any__Storage"][::std::mem::size_of::<std_any__Storage>() - 8usize];
    ["Alignment of std_any__Storage"][::std::mem::align_of::<std_any__Storage>() - 8usize];
    ["Offset of field: std_any__Storage::_M_ptr"]
        [::std::mem::offset_of!(std_any__Storage, _M_ptr) - 0usize];
    ["Offset of field: std_any__Storage::_M_buffer"]
        [::std::mem::offset_of!(std_any__Storage, _M_buffer) - 0usize];
};
pub type std_any__Internal = u8;
pub type std_any__Manager = std___conditional_t;
pub type std_any__Decay_if_not_any = std_enable_if_t;
pub type std_any___any_constructible = u8;
pub type std_any___any_constructible_t = std_any___any_constructible;
pub type std_any___emplace_t = std_any___any_constructible;
pub const std_any__Op__Op_access: std_any__Op = 0;
pub const std_any__Op__Op_get_type_info: std_any__Op = 1;
pub const std_any__Op__Op_clone: std_any__Op = 2;
pub const std_any__Op__Op_destroy: std_any__Op = 3;
pub const std_any__Op__Op_xfer: std_any__Op = 4;
pub type std_any__Op = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_any__Arg {
    pub _M_obj: *mut ::std::os::raw::c_void,
    pub _M_typeinfo: *const std_type_info,
    pub _M_any: *mut std_any,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_any__Arg"][::std::mem::size_of::<std_any__Arg>() - 8usize];
    ["Alignment of std_any__Arg"][::std::mem::align_of::<std_any__Arg>() - 8usize];
    ["Offset of field: std_any__Arg::_M_obj"]
        [::std::mem::offset_of!(std_any__Arg, _M_obj) - 0usize];
    ["Offset of field: std_any__Arg::_M_typeinfo"]
        [::std::mem::offset_of!(std_any__Arg, _M_typeinfo) - 0usize];
    ["Offset of field: std_any__Arg::_M_any"]
        [::std::mem::offset_of!(std_any__Arg, _M_any) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_any__Manager_internal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_any__Manager_external {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_any"][::std::mem::size_of::<std_any>() - 16usize];
    ["Alignment of std_any"][::std::mem::align_of::<std_any>() - 8usize];
    ["Offset of field: std_any::_M_manager"][::std::mem::offset_of!(std_any, _M_manager) - 0usize];
    ["Offset of field: std_any::_M_storage"][::std::mem::offset_of!(std_any, _M_storage) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_nlohmann_detail_value_t_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_nlohmann_detail_value_t_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std___mutex_base {
    pub _M_mutex: std___mutex_base___native_type,
}
pub type std___mutex_base___native_type = __gthread_mutex_t;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___mutex_base"][::std::mem::size_of::<std___mutex_base>() - 40usize];
    ["Alignment of std___mutex_base"][::std::mem::align_of::<std___mutex_base>() - 8usize];
    ["Offset of field: std___mutex_base::_M_mutex"]
        [::std::mem::offset_of!(std___mutex_base, _M_mutex) - 0usize];
};
#[repr(C)]
pub struct std_mutex {
    pub _base: std___mutex_base,
}
pub type std_mutex_native_handle_type = *mut std___mutex_base___native_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_mutex"][::std::mem::size_of::<std_mutex>() - 40usize];
    ["Alignment of std_mutex"][::std::mem::align_of::<std_mutex>() - 8usize];
};
#[repr(C)]
pub struct std___condvar {
    pub _M_cond: __gthread_cond_t,
}
pub type std___condvar_timespec = __gthread_time_t;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___condvar"][::std::mem::size_of::<std___condvar>() - 48usize];
    ["Alignment of std___condvar"][::std::mem::align_of::<std___condvar>() - 8usize];
    ["Offset of field: std___condvar::_M_cond"]
        [::std::mem::offset_of!(std___condvar, _M_cond) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_defer_lock_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_defer_lock_t"][::std::mem::size_of::<std_defer_lock_t>() - 1usize];
    ["Alignment of std_defer_lock_t"][::std::mem::align_of::<std_defer_lock_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_try_to_lock_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_try_to_lock_t"][::std::mem::size_of::<std_try_to_lock_t>() - 1usize];
    ["Alignment of std_try_to_lock_t"][::std::mem::align_of::<std_try_to_lock_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_adopt_lock_t {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_adopt_lock_t"][::std::mem::size_of::<std_adopt_lock_t>() - 1usize];
    ["Alignment of std_adopt_lock_t"][::std::mem::align_of::<std_adopt_lock_t>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt10defer_lock"]
    pub static std_defer_lock: std_defer_lock_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt11try_to_lock"]
    pub static std_try_to_lock: std_try_to_lock_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt10adopt_lock"]
    pub static std_adopt_lock: std_adopt_lock_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_lock_guard<_Mutex> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Mutex>>,
    pub _M_device: *mut std_lock_guard_mutex_type<_Mutex>,
}
pub type std_lock_guard_mutex_type<_Mutex> = _Mutex;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_lock<_Mutex> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Mutex>>,
    pub _M_device: *mut std_unique_lock_mutex_type<_Mutex>,
    pub _M_owns: bool,
}
pub type std_unique_lock_mutex_type<_Mutex> = _Mutex;
pub const std_cv_status_no_timeout: std_cv_status = 0;
pub const std_cv_status_timeout: std_cv_status = 1;
pub type std_cv_status = ::std::os::raw::c_int;
#[repr(C)]
pub struct std_condition_variable {
    pub _M_cond: std___condvar,
}
pub type std_condition_variable_steady_clock = std_chrono_steady_clock;
pub type std_condition_variable_system_clock = std_chrono_system_clock;
pub type std_condition_variable___clock_t = std_condition_variable_steady_clock;
pub type std_condition_variable_native_handle_type = *mut __gthread_cond_t;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_condition_variable"][::std::mem::size_of::<std_condition_variable>() - 48usize];
    ["Alignment of std_condition_variable"]
        [::std::mem::align_of::<std_condition_variable>() - 8usize];
    ["Offset of field: std_condition_variable::_M_cond"]
        [::std::mem::offset_of!(std_condition_variable, _M_cond) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt18condition_variable10notify_oneEv"]
    pub fn std_condition_variable_notify_one(this: *mut std_condition_variable);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt18condition_variable10notify_allEv"]
    pub fn std_condition_variable_notify_all(this: *mut std_condition_variable);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE"]
    pub fn std_condition_variable_wait(
        this: *mut std_condition_variable,
        __lock: *mut std_unique_lock<std_mutex>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt18condition_variableC1Ev"]
    pub fn std_condition_variable_condition_variable(this: *mut std_condition_variable);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt18condition_variableD1Ev"]
    pub fn std_condition_variable_condition_variable_destructor(this: *mut std_condition_variable);
}
impl std_condition_variable {
    #[inline]
    pub unsafe fn notify_one(&mut self) {
        std_condition_variable_notify_one(self)
    }
    #[inline]
    pub unsafe fn notify_all(&mut self) {
        std_condition_variable_notify_all(self)
    }
    #[inline]
    pub unsafe fn wait(&mut self, __lock: *mut std_unique_lock<std_mutex>) {
        std_condition_variable_wait(self, __lock)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_condition_variable_condition_variable(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_condition_variable_condition_variable_destructor(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt25notify_all_at_thread_exitRSt18condition_variableSt11unique_lockISt5mutexE"]
    pub fn std_notify_all_at_thread_exit(
        arg1: *mut std_condition_variable,
        arg2: std_unique_lock<std_mutex>,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___at_thread_exit_elt {
    pub _M_next: *mut std___at_thread_exit_elt,
    pub _M_cb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___at_thread_exit_elt"]
        [::std::mem::size_of::<std___at_thread_exit_elt>() - 16usize];
    ["Alignment of std___at_thread_exit_elt"]
        [::std::mem::align_of::<std___at_thread_exit_elt>() - 8usize];
    ["Offset of field: std___at_thread_exit_elt::_M_next"]
        [::std::mem::offset_of!(std___at_thread_exit_elt, _M_next) - 0usize];
    ["Offset of field: std___at_thread_exit_elt::_M_cb"]
        [::std::mem::offset_of!(std___at_thread_exit_elt, _M_cb) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Deque_iterator {
    pub _M_cur: std__Deque_iterator__Elt_pointer,
    pub _M_first: std__Deque_iterator__Elt_pointer,
    pub _M_last: std__Deque_iterator__Elt_pointer,
    pub _M_node: std__Deque_iterator__Map_pointer,
}
pub type std__Deque_iterator___iter = std__Deque_iterator;
pub type std__Deque_iterator_iterator = std__Deque_iterator___iter;
pub type std__Deque_iterator_const_iterator = std__Deque_iterator___iter;
pub type std__Deque_iterator__Elt_pointer = std___ptr_rebind;
pub type std__Deque_iterator__Map_pointer = std___ptr_rebind;
pub type std__Deque_iterator_iterator_category = std_random_access_iterator_tag;
pub type std__Deque_iterator_value_type<_Tp> = _Tp;
pub type std__Deque_iterator_pointer<_Ptr> = _Ptr;
pub type std__Deque_iterator_reference<_Ref> = _Ref;
pub type std__Deque_iterator_size_type = usize;
pub type std__Deque_iterator_difference_type = isize;
pub type std__Deque_iterator__Self = std__Deque_iterator;
#[repr(C)]
pub struct std__Deque_base {
    pub _M_impl: std__Deque_base__Deque_impl,
}
pub type std__Deque_base__Tp_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Deque_base__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Deque_base__Ptr = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Deque_base__Ptr_const = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Deque_base__Map_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std__Deque_base__Map_alloc_traits = __gnu_cxx___alloc_traits;
pub type std__Deque_base_allocator_type<_Alloc> = _Alloc;
pub type std__Deque_base_iterator = std__Deque_iterator;
pub type std__Deque_base_const_iterator = std__Deque_iterator;
pub type std__Deque_base__Map_pointer = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std__Deque_base__Deque_impl_data {
    pub _M_map: std__Deque_base__Map_pointer,
    pub _M_map_size: usize,
    pub _M_start: std__Deque_base_iterator,
    pub _M_finish: std__Deque_base_iterator,
}
#[repr(C)]
pub struct std__Deque_base__Deque_impl {
    pub _base_1: std__Deque_base__Deque_impl_data,
}
pub const std__Deque_base__S_initial_map_size: std__Deque_base__bindgen_ty_1 = 0;
pub type std__Deque_base__bindgen_ty_1 = i32;
#[repr(C)]
pub struct std_deque {
    pub _base: std__Deque_base,
}
pub type std_deque__Base = std__Deque_base;
pub type std_deque__Tp_alloc_type = std_deque__Base;
pub type std_deque__Alloc_traits = std_deque__Base;
pub type std_deque__Map_pointer = std_deque__Base;
pub type std_deque_value_type<_Tp> = _Tp;
pub type std_deque_pointer = std_deque__Alloc_traits;
pub type std_deque_const_pointer = std_deque__Alloc_traits;
pub type std_deque_reference = std_deque__Alloc_traits;
pub type std_deque_const_reference = std_deque__Alloc_traits;
pub type std_deque_iterator = std_deque__Base;
pub type std_deque_const_iterator = std_deque__Base;
pub type std_deque_const_reverse_iterator = std_reverse_iterator<std_deque_const_iterator>;
pub type std_deque_reverse_iterator = std_reverse_iterator<std_deque_iterator>;
pub type std_deque_size_type = usize;
pub type std_deque_difference_type = isize;
pub type std_deque_allocator_type<_Alloc> = _Alloc;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct std___recursive_mutex_base {
    pub _M_mutex: std___recursive_mutex_base___native_type,
}
pub type std___recursive_mutex_base___native_type = __gthread_recursive_mutex_t;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std___recursive_mutex_base"]
        [::std::mem::size_of::<std___recursive_mutex_base>() - 40usize];
    ["Alignment of std___recursive_mutex_base"]
        [::std::mem::align_of::<std___recursive_mutex_base>() - 8usize];
    ["Offset of field: std___recursive_mutex_base::_M_mutex"]
        [::std::mem::offset_of!(std___recursive_mutex_base, _M_mutex) - 0usize];
};
#[repr(C)]
pub struct std_recursive_mutex {
    pub _base: std___recursive_mutex_base,
}
pub type std_recursive_mutex_native_handle_type = *mut std___recursive_mutex_base___native_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_recursive_mutex"][::std::mem::size_of::<std_recursive_mutex>() - 40usize];
    ["Alignment of std_recursive_mutex"][::std::mem::align_of::<std_recursive_mutex>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___timed_mutex_impl {
    pub _address: u8,
}
#[repr(C)]
pub struct std_timed_mutex {
    pub _base: std___mutex_base,
}
pub type std_timed_mutex_native_handle_type = *mut std___mutex_base___native_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_timed_mutex"][::std::mem::size_of::<std_timed_mutex>() - 40usize];
    ["Alignment of std_timed_mutex"][::std::mem::align_of::<std_timed_mutex>() - 8usize];
};
#[repr(C)]
pub struct std_recursive_timed_mutex {
    pub _base: std___recursive_mutex_base,
}
pub type std_recursive_timed_mutex_native_handle_type =
    *mut std___recursive_mutex_base___native_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_recursive_timed_mutex"]
        [::std::mem::size_of::<std_recursive_timed_mutex>() - 40usize];
    ["Alignment of std_recursive_timed_mutex"]
        [::std::mem::align_of::<std_recursive_timed_mutex>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_scoped_lock {
    pub _M_devices: std_tuple,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_scoped_lock_open0_close0"]
        [::std::mem::size_of::<std_scoped_lock>() - 1usize];
    ["Align of template specialization: std_scoped_lock_open0_close0"]
        [::std::mem::align_of::<std_scoped_lock>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_once_flag {
    pub _M_once: __gthread_once_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_once_flag"][::std::mem::size_of::<std_once_flag>() - 4usize];
    ["Alignment of std_once_flag"][::std::mem::align_of::<std_once_flag>() - 4usize];
    ["Offset of field: std_once_flag::_M_once"]
        [::std::mem::offset_of!(std_once_flag, _M_once) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt15__once_callable"]
    pub static mut std___once_callable: *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZSt11__once_call"]
    pub static mut std___once_call: ::std::option::Option<unsafe extern "C" fn()>;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_once_flag__Prepare_execution {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_once_flag__Prepare_execution"]
        [::std::mem::size_of::<std_once_flag__Prepare_execution>() - 1usize];
    ["Alignment of std_once_flag__Prepare_execution"]
        [::std::mem::align_of::<std_once_flag__Prepare_execution>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}__once_proxy"]
    pub fn std___once_proxy();
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_atomic<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_i: _Tp,
}
pub type std_atomic_value_type<_Tp> = _Tp;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_char>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_char>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_longlong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_longlong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulonglong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulonglong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_atomic<u32>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_atomic<u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_char16_t_close0"]
        [::std::mem::size_of::<std_atomic<u16>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_char16_t_close0"]
        [::std::mem::align_of::<std_atomic<u16>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_char32_t_close0"]
        [::std::mem::size_of::<std_atomic<u32>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_char32_t_close0"]
        [::std::mem::align_of::<std_atomic<u32>>() - 4usize];
};
pub type std_atomic_bool = std_atomic<bool>;
pub type std_atomic_char = std_atomic<::std::os::raw::c_char>;
pub type std_atomic_schar = std_atomic<::std::os::raw::c_schar>;
pub type std_atomic_uchar = std_atomic<::std::os::raw::c_uchar>;
pub type std_atomic_short = std_atomic<::std::os::raw::c_short>;
pub type std_atomic_ushort = std_atomic<::std::os::raw::c_ushort>;
pub type std_atomic_int = std_atomic<::std::os::raw::c_int>;
pub type std_atomic_uint = std_atomic<::std::os::raw::c_uint>;
pub type std_atomic_long = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_ulong = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_llong = std_atomic<::std::os::raw::c_longlong>;
pub type std_atomic_ullong = std_atomic<::std::os::raw::c_ulonglong>;
pub type std_atomic_wchar_t = std_atomic<u32>;
pub type std_atomic_char16_t = std_atomic<u16>;
pub type std_atomic_char32_t = std_atomic<u32>;
pub type std_atomic_int8_t = std_atomic<::std::os::raw::c_schar>;
pub type std_atomic_uint8_t = std_atomic<::std::os::raw::c_uchar>;
pub type std_atomic_int16_t = std_atomic<::std::os::raw::c_short>;
pub type std_atomic_uint16_t = std_atomic<::std::os::raw::c_ushort>;
pub type std_atomic_int32_t = std_atomic<::std::os::raw::c_int>;
pub type std_atomic_uint32_t = std_atomic<::std::os::raw::c_uint>;
pub type std_atomic_int64_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uint64_t = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_int_least8_t = std_atomic<::std::os::raw::c_schar>;
pub type std_atomic_uint_least8_t = std_atomic<::std::os::raw::c_uchar>;
pub type std_atomic_int_least16_t = std_atomic<::std::os::raw::c_short>;
pub type std_atomic_uint_least16_t = std_atomic<::std::os::raw::c_ushort>;
pub type std_atomic_int_least32_t = std_atomic<::std::os::raw::c_int>;
pub type std_atomic_uint_least32_t = std_atomic<::std::os::raw::c_uint>;
pub type std_atomic_int_least64_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uint_least64_t = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_int_fast8_t = std_atomic<::std::os::raw::c_schar>;
pub type std_atomic_uint_fast8_t = std_atomic<::std::os::raw::c_uchar>;
pub type std_atomic_int_fast16_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uint_fast16_t = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_int_fast32_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uint_fast32_t = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_int_fast64_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uint_fast64_t = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_intptr_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uintptr_t = std_atomic<::std::os::raw::c_ulong>;
pub type std_atomic_size_t = std_atomic<usize>;
pub type std_atomic_ptrdiff_t = std_atomic<isize>;
pub type std_atomic_intmax_t = std_atomic<::std::os::raw::c_long>;
pub type std_atomic_uintmax_t = std_atomic<::std::os::raw::c_ulong>;
pub type std___atomic_val_t = std___type_identity_t;
pub type std___atomic_diff_t = std_atomic<_Tp>;
#[repr(C)]
#[derive(Debug)]
pub struct std_thread {
    pub _M_id: std_thread_id,
}
pub type std_thread_native_handle_type = __gthread_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_thread_id {
    pub _M_thread: std_thread_native_handle_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_thread_id"][::std::mem::size_of::<std_thread_id>() - 8usize];
    ["Alignment of std_thread_id"][::std::mem::align_of::<std_thread_id>() - 8usize];
    ["Offset of field: std_thread_id::_M_thread"]
        [::std::mem::offset_of!(std_thread_id, _M_thread) - 0usize];
};
pub type std_thread___not_same = std___not_;
#[repr(C)]
pub struct std_thread__State__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_thread__State {
    pub vtable_: *const std_thread__State__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_thread__State"][::std::mem::size_of::<std_thread__State>() - 8usize];
    ["Alignment of std_thread__State"][::std::mem::align_of::<std_thread__State>() - 8usize];
};
pub type std_thread__State_ptr = std_unique_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std_thread__State_impl<_Callable> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Callable>>,
    pub _base: std_thread__State,
    pub _M_func: _Callable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_thread__Invoker<_Tuple> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tuple>>,
    pub _M_t: _Tuple,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_thread__Invoker___result {
    pub _address: u8,
}
pub type std_thread__Call_wrapper = std_thread__Invoker<std_tuple>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_thread"][::std::mem::size_of::<std_thread>() - 8usize];
    ["Alignment of std_thread"][::std::mem::align_of::<std_thread>() - 8usize];
    ["Offset of field: std_thread::_M_id"][::std::mem::offset_of!(std_thread, _M_id) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6thread4joinEv"]
    pub fn std_thread_join(this: *mut std_thread);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6thread6detachEv"]
    pub fn std_thread_detach(this: *mut std_thread);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6thread20hardware_concurrencyEv"]
    pub fn std_thread_hardware_concurrency() -> ::std::os::raw::c_uint;
}
impl std_thread {
    #[inline]
    pub unsafe fn join(&mut self) {
        std_thread_join(self)
    }
    #[inline]
    pub unsafe fn detach(&mut self) {
        std_thread_detach(self)
    }
    #[inline]
    pub unsafe fn hardware_concurrency() -> ::std::os::raw::c_uint {
        std_thread_hardware_concurrency()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNSt6thread6_StateD1Ev"]
    pub fn std_thread__State__State_destructor(this: *mut std_thread__State);
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_thread_id_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_thread_id_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_node {
    pub _base: std___detail__List_node_base,
    pub _M_storage: __gnu_cxx___aligned_membuf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_iterator {
    pub _M_node: *mut std___detail__List_node_base,
}
pub type std__List_iterator__Self = std__List_iterator;
pub type std__List_iterator__Node = std__List_node;
pub type std__List_iterator_difference_type = isize;
pub type std__List_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__List_iterator_value_type<_Tp> = _Tp;
pub type std__List_iterator_pointer<_Tp> = *mut _Tp;
pub type std__List_iterator_reference<_Tp> = *mut _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__List_const_iterator {
    pub _M_node: *const std___detail__List_node_base,
}
pub type std__List_const_iterator__Self = std__List_const_iterator;
pub type std__List_const_iterator__Node = std__List_node;
pub type std__List_const_iterator_iterator = std__List_iterator;
pub type std__List_const_iterator_difference_type = isize;
pub type std__List_const_iterator_iterator_category = std_bidirectional_iterator_tag;
pub type std__List_const_iterator_value_type<_Tp> = _Tp;
pub type std__List_const_iterator_pointer<_Tp> = *const _Tp;
pub type std__List_const_iterator_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_variant_size {
    pub _address: u8,
}
pub type std_variant_alternative_t = u8;
pub const std_variant_npos: usize = 18446744073709551615;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_monostate {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_monostate"][::std::mem::size_of::<std_monostate>() - 1usize];
    ["Alignment of std_monostate"][::std::mem::align_of::<std_monostate>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_variant_access {
    pub _base: std_exception,
    pub _M_reason: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_bad_variant_access"][::std::mem::size_of::<std_bad_variant_access>() - 16usize];
    ["Alignment of std_bad_variant_access"]
        [::std::mem::align_of::<std_bad_variant_access>() - 8usize];
    ["Offset of field: std_bad_variant_access::_M_reason"]
        [::std::mem::offset_of!(std_bad_variant_access, _M_reason) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_variant {
    pub _address: u8,
}
pub type std_variant__Base = std___detail___variant__Variant_base;
pub type std_variant__Default_ctor_enabler = u8;
pub type std_variant___to_type = u8;
pub type std_variant___accepted_type = std_variant___to_type;
pub type std_variant__Traits = std___detail___variant__Traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_variant___is_in_place_tag {
    pub _base: std_false_type,
}
pub type std___variant_hash_call_base = u8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_std_monostate_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_monostate_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
pub type std___uset_traits = u8;
pub type std___uset_hashtable = std__Hashtable<_RehashPolicy>;
pub type std___umset_traits = u8;
pub type std___umset_hashtable = std__Hashtable<_RehashPolicy>;
#[repr(C)]
#[derive(Debug)]
pub struct std_unordered_set {
    pub _M_h: std_unordered_set__Hashtable,
}
pub type std_unordered_set__Hashtable = std___uset_hashtable;
pub type std_unordered_set_key_type = std_unordered_set__Hashtable;
pub type std_unordered_set_value_type = std_unordered_set__Hashtable;
pub type std_unordered_set_hasher = std_unordered_set__Hashtable;
pub type std_unordered_set_key_equal = std_unordered_set__Hashtable;
pub type std_unordered_set_allocator_type = std_unordered_set__Hashtable;
pub type std_unordered_set_pointer = std_unordered_set__Hashtable;
pub type std_unordered_set_const_pointer = std_unordered_set__Hashtable;
pub type std_unordered_set_reference = std_unordered_set__Hashtable;
pub type std_unordered_set_const_reference = std_unordered_set__Hashtable;
pub type std_unordered_set_iterator = std_unordered_set__Hashtable;
pub type std_unordered_set_const_iterator = std_unordered_set__Hashtable;
pub type std_unordered_set_local_iterator = std_unordered_set__Hashtable;
pub type std_unordered_set_const_local_iterator = std_unordered_set__Hashtable;
pub type std_unordered_set_size_type = std_unordered_set__Hashtable;
pub type std_unordered_set_difference_type = std_unordered_set__Hashtable;
pub type std_unordered_set_node_type = std_unordered_set__Hashtable;
pub type std_unordered_set_insert_return_type = std_unordered_set__Hashtable;
#[repr(C)]
#[derive(Debug)]
pub struct std_unordered_multiset {
    pub _M_h: std_unordered_multiset__Hashtable,
}
pub type std_unordered_multiset__Hashtable = std___umset_hashtable;
pub type std_unordered_multiset_key_type = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_value_type = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_hasher = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_key_equal = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_allocator_type = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_pointer = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_const_pointer = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_reference = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_const_reference = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_iterator = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_const_iterator = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_local_iterator = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_const_local_iterator = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_size_type = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_difference_type = std_unordered_multiset__Hashtable;
pub type std_unordered_multiset_node_type = std_unordered_multiset__Hashtable;
#[repr(C)]
pub struct std_set {
    pub _M_t: std_set__Rep_type,
}
pub type std_set_key_type<_Key> = _Key;
pub type std_set_value_type<_Key> = _Key;
pub type std_set_key_compare<_Compare> = _Compare;
pub type std_set_value_compare<_Compare> = _Compare;
pub type std_set_allocator_type<_Alloc> = _Alloc;
pub type std_set__Key_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set__Rep_type = std__Rb_tree;
pub type std_set__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_set_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_const_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_node_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_set_insert_return_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct std_multiset {
    pub _M_t: std_multiset__Rep_type,
}
pub type std_multiset_key_type<_Key> = _Key;
pub type std_multiset_value_type<_Key> = _Key;
pub type std_multiset_key_compare<_Compare> = _Compare;
pub type std_multiset_value_compare<_Compare> = _Compare;
pub type std_multiset_allocator_type<_Alloc> = _Alloc;
pub type std_multiset__Key_alloc_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset__Rep_type = std__Rb_tree;
pub type std_multiset__Alloc_traits = __gnu_cxx___alloc_traits;
pub type std_multiset_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_pointer = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_const_reverse_iterator = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_difference_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_multiset_node_type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_queue<_Sequence> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
    pub c: _Sequence,
}
pub type std_queue__Uses = u8;
pub type std_queue_value_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_queue_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_queue_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_queue_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_queue_container_type<_Sequence> = _Sequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_priority_queue<_Sequence, _Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sequence>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub c: _Sequence,
    pub comp: _Compare,
}
pub type std_priority_queue__Uses = u8;
pub type std_priority_queue_value_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_priority_queue_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_priority_queue_const_reference = __BindgenOpaqueArray<u8, 0usize>;
pub type std_priority_queue_size_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_priority_queue_container_type<_Sequence> = _Sequence;
pub type std_priority_queue_value_compare<_Compare> = _Compare;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_dai_Node_Connection_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_dai_Node_Connection_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
pub type std___c_lock = __gthread_mutex_t;
pub type std___c_file = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___basic_file {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___basic_file_open0_char_close0"]
        [::std::mem::size_of::<std___basic_file>() - 16usize];
    ["Align of template specialization: std___basic_file_open0_char_close0"]
        [::std::mem::align_of::<std___basic_file>() - 8usize];
};
pub type std__If_fs_path = std_enable_if_t;
#[repr(C)]
pub struct std_basic_filebuf<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_streambuf<_CharT>,
    pub _M_lock: std___c_lock,
    pub _M_file: std_basic_filebuf___file_type,
    pub _M_mode: std_ios_base_openmode,
    pub _M_state_beg: std_basic_filebuf___state_type,
    pub _M_state_cur: std_basic_filebuf___state_type,
    pub _M_state_last: std_basic_filebuf___state_type,
    pub _M_buf: *mut std_basic_filebuf_char_type<_CharT>,
    pub _M_buf_size: usize,
    pub _M_buf_allocated: bool,
    pub _M_reading: bool,
    pub _M_writing: bool,
    pub _M_pback: std_basic_filebuf_char_type<_CharT>,
    pub _M_pback_cur_save: *mut std_basic_filebuf_char_type<_CharT>,
    pub _M_pback_end_save: *mut std_basic_filebuf_char_type<_CharT>,
    pub _M_pback_init: bool,
    pub _M_codecvt: *const std_basic_filebuf___codecvt_type,
    pub _M_ext_buf: *mut ::std::os::raw::c_char,
    pub _M_ext_buf_size: std_streamsize,
    pub _M_ext_next: *const ::std::os::raw::c_char,
    pub _M_ext_end: *mut ::std::os::raw::c_char,
}
pub type std_basic_filebuf___chk_state = std___and_;
pub type std_basic_filebuf_char_type<_CharT> = _CharT;
pub type std_basic_filebuf_traits_type<_Traits> = _Traits;
pub type std_basic_filebuf_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_filebuf_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_filebuf_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_filebuf___streambuf_type<_CharT> =
    std_basic_streambuf<std_basic_filebuf_char_type<_CharT>>;
pub type std_basic_filebuf___filebuf_type<_CharT> =
    std_basic_filebuf<std_basic_filebuf_char_type<_CharT>>;
pub type std_basic_filebuf___file_type = std___basic_file;
pub type std_basic_filebuf___state_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_filebuf___codecvt_type = std_codecvt;
#[repr(C)]
pub struct std_basic_ifstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_istream<_CharT>,
    pub _M_filebuf: std_basic_ifstream___filebuf_type<_CharT>,
}
pub type std_basic_ifstream_char_type<_CharT> = _CharT;
pub type std_basic_ifstream_traits_type<_Traits> = _Traits;
pub type std_basic_ifstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ifstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ifstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ifstream___filebuf_type<_CharT> =
    std_basic_filebuf<std_basic_ifstream_char_type<_CharT>>;
pub type std_basic_ifstream___istream_type<_CharT> =
    std_basic_istream<std_basic_ifstream_char_type<_CharT>>;
#[repr(C)]
pub struct std_basic_ofstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_ostream<_CharT>,
    pub _M_filebuf: std_basic_ofstream___filebuf_type<_CharT>,
}
pub type std_basic_ofstream_char_type<_CharT> = _CharT;
pub type std_basic_ofstream_traits_type<_Traits> = _Traits;
pub type std_basic_ofstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ofstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ofstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_ofstream___filebuf_type<_CharT> =
    std_basic_filebuf<std_basic_ofstream_char_type<_CharT>>;
pub type std_basic_ofstream___ostream_type<_CharT> =
    std_basic_ostream<std_basic_ofstream_char_type<_CharT>>;
#[repr(C)]
pub struct std_basic_fstream<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub _base: std_basic_iostream<_CharT>,
    pub _M_filebuf: std_basic_fstream___filebuf_type<_CharT>,
}
pub type std_basic_fstream_char_type<_CharT> = _CharT;
pub type std_basic_fstream_traits_type<_Traits> = _Traits;
pub type std_basic_fstream_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_fstream_pos_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_fstream_off_type = __BindgenOpaqueArray<u8, 0usize>;
pub type std_basic_fstream___filebuf_type<_CharT> =
    std_basic_filebuf<std_basic_fstream_char_type<_CharT>>;
pub type std_basic_fstream___ios_type<_CharT> = std_basic_ios<std_basic_fstream_char_type<_CharT>>;
pub type std_basic_fstream___iostream_type<_CharT> =
    std_basic_iostream<std_basic_fstream_char_type<_CharT>>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_filebuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_filebuf<::std::os::raw::c_char>>() - 240usize];
    [
        "Align of template specialization: std_basic_filebuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_filebuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ifstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ifstream<::std::os::raw::c_char>>() - 520usize];
    [
        "Align of template specialization: std_basic_ifstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ifstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ofstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ofstream<::std::os::raw::c_char>>() - 512usize];
    [
        "Align of template specialization: std_basic_ofstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ofstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_fstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_fstream<::std::os::raw::c_char>>() - 528usize];
    [
        "Align of template specialization: std_basic_fstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_fstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_filebuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_filebuf<u32>>() - 240usize];
    [
        "Align of template specialization: std_basic_filebuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_filebuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ifstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ifstream<u32>>() - 520usize];
    [
        "Align of template specialization: std_basic_ifstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ifstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ofstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ofstream<u32>>() - 512usize];
    [
        "Align of template specialization: std_basic_ofstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ofstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_fstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_fstream<u32>>() - 528usize];
    [
        "Align of template specialization: std_basic_fstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_fstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 576usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 1344usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_char_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 576usize];
    ["Align of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 1344usize];
    ["Align of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 16usize];
    ["Align of template specialization: std_codecvt_byname_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 16usize];
    ["Align of template specialization: std_codecvt_byname_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx__Char_types {
    pub _address: u8,
}
pub type __gnu_cxx__Char_types_int_type = ::std::os::raw::c_ulong;
pub type __gnu_cxx__Char_types_pos_type = std_streampos;
pub type __gnu_cxx__Char_types_off_type = std_streamoff;
pub type __gnu_cxx__Char_types_state_type = __mbstate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx_char_traits {
    pub _address: u8,
}
pub type __gnu_cxx_char_traits_char_type<_CharT> = _CharT;
pub type __gnu_cxx_char_traits_int_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_pos_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_off_type = __gnu_cxx__Char_types;
pub type __gnu_cxx_char_traits_state_type = __gnu_cxx__Char_types;
unsafe extern "C" {
    #[link_name = "\u{1}__uselocale"]
    pub fn __gnu_cxx___uselocale(arg1: locale_t) -> locale_t;
}
pub type __gnu_cxx___conditional_type___type<_Iftrue> = _Iftrue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___add_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___add_unsigned___if_type = u8;
pub type __gnu_cxx___add_unsigned___type = __gnu_cxx___add_unsigned___if_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_signed_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_signed_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_short_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_short_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_int_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_int_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___add_unsigned_open0_long_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___add_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___add_unsigned_open0_long_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___add_unsigned>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___remove_unsigned {
    pub _address: u8,
}
pub type __gnu_cxx___remove_unsigned___if_type = u8;
pub type __gnu_cxx___remove_unsigned___type = __gnu_cxx___remove_unsigned___if_type;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_char_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_char_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_short_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_short_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_int_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_int_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_close0"]
        [::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    ["Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_close0"]
        [::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0",
    ][::std::mem::size_of::<__gnu_cxx___remove_unsigned>() - 1usize];
    [
        "Align of template specialization: __gnu_cxx___remove_unsigned_open0_unsigned_long_long_close0",
    ][::std::mem::align_of::<__gnu_cxx___remove_unsigned>() - 1usize];
};
pub type __gnu_cxx___promote___type = f64;
pub type __gnu_cxx___promoted_t = u8;
pub type __gnu_cxx___promote_2 = u8;
pub type __gnu_cxx___promote_3 = u8;
pub type __gnu_cxx___promote_4 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___normal_iterator<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub _M_current: _Iterator,
}
pub type __gnu_cxx___normal_iterator___traits_type = std_iterator_traits;
pub type __gnu_cxx___normal_iterator___convertible_from = std___enable_if_t;
pub type __gnu_cxx___normal_iterator_iterator_type<_Iterator> = _Iterator;
pub type __gnu_cxx___normal_iterator_iterator_category = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_value_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_difference_type = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_reference = __gnu_cxx___normal_iterator___traits_type;
pub type __gnu_cxx___normal_iterator_pointer = __gnu_cxx___normal_iterator___traits_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___is_integer_nonstrict {
    pub _address: u8,
}
pub const __gnu_cxx___is_integer_nonstrict___width: __gnu_cxx___is_integer_nonstrict__bindgen_ty_1 =
    0;
pub type __gnu_cxx___is_integer_nonstrict__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_integer {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}__min"]
    pub static __gnu_cxx___min: _Value;
}
unsafe extern "C" {
    #[link_name = "\u{1}__max"]
    pub static __gnu_cxx___max: _Value;
}
unsafe extern "C" {
    #[link_name = "\u{1}__is_signed"]
    pub static __gnu_cxx___is_signed: bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}__digits"]
    pub static __gnu_cxx___digits: ::std::os::raw::c_int;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___is_integer_nonstrict_open0___int128_close0"]
        [::std::mem::size_of::<__gnu_cxx___is_integer_nonstrict>() - 1usize];
    ["Align of template specialization: __gnu_cxx___is_integer_nonstrict_open0___int128_close0"]
        [::std::mem::align_of::<__gnu_cxx___is_integer_nonstrict>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: __gnu_cxx___is_integer_nonstrict_open0_unsigned___int128_close0",
    ][::std::mem::size_of::<__gnu_cxx___is_integer_nonstrict>() - 1usize];
    [
        "Align of template specialization: __gnu_cxx___is_integer_nonstrict_open0_unsigned___int128_close0",
    ][::std::mem::align_of::<__gnu_cxx___is_integer_nonstrict>() - 1usize];
};
pub type __gnu_cxx___int_traits = __gnu_cxx___numeric_traits_integer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits_floating {
    pub _address: u8,
}
unsafe extern "C" {
    #[link_name = "\u{1}__max_digits10"]
    pub static __gnu_cxx___max_digits10: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__digits10"]
    pub static __gnu_cxx___digits10: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__max_exponent10"]
    pub static __gnu_cxx___max_exponent10: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___numeric_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_float_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_float_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_double_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_double_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __gnu_cxx___numeric_traits_open0_long_double_close0"]
        [::std::mem::size_of::<__gnu_cxx___numeric_traits>() - 1usize];
    ["Align of template specialization: __gnu_cxx___numeric_traits_open0_long_double_close0"]
        [::std::mem::align_of::<__gnu_cxx___numeric_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_less_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_less_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_less_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_less_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_less_val {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_less_val"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_less_val>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_less_val"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_less_val>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_less_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Val_less_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Val_less_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Val_less_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Val_less_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_iter {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_equal_to_iter"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_iter>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_equal_to_iter"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_iter>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equal_to_val {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___ops__Iter_equal_to_val"]
        [::std::mem::size_of::<__gnu_cxx___ops__Iter_equal_to_val>() - 1usize];
    ["Alignment of __gnu_cxx___ops__Iter_equal_to_val"]
        [::std::mem::align_of::<__gnu_cxx___ops__Iter_equal_to_val>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_iter<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_val<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Val_comp_iter<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _M_comp: _Compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_val<_Value> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _M_value: *mut _Value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_equals_iter<_Iterator1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
    pub _M_it1: _Iterator1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_pred<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_val<_Compare, _Value> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Value>>,
    pub _M_comp: _Compare,
    pub _M_value: *mut _Value,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_comp_to_iter<_Compare, _Iterator1> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator1>>,
    pub _M_comp: _Compare,
    pub _M_it1: _Iterator1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___ops__Iter_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub _M_pred: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_allocator_type<_Alloc> = _Alloc;
pub type __gnu_cxx___alloc_traits__Base_type = std_allocator_traits;
pub type __gnu_cxx___alloc_traits_value_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_const_pointer = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_size_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_difference_type = __gnu_cxx___alloc_traits__Base_type;
pub type __gnu_cxx___alloc_traits_reference = *mut __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits_const_reference = *const __gnu_cxx___alloc_traits_value_type;
pub type __gnu_cxx___alloc_traits___is_custom_pointer = std___and_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___alloc_traits_rebind {
    pub _address: u8,
}
pub type __gnu_cxx___alloc_traits_rebind_other = __gnu_cxx___alloc_traits__Base_type;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxx27__verbose_terminate_handlerEv"]
    pub fn __gnu_cxx___verbose_terminate_handler();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf {
    pub _M_storage: *mut ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_membuf__Tp2<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _M_t: _Tp,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_cxx___aligned_buffer {
    pub _M_storage: u8,
}
pub const __gnu_cxx__Lock_policy__S_single: __gnu_cxx__Lock_policy = 0;
pub const __gnu_cxx__Lock_policy__S_mutex: __gnu_cxx__Lock_policy = 1;
pub const __gnu_cxx__Lock_policy__S_atomic: __gnu_cxx__Lock_policy = 2;
pub type __gnu_cxx__Lock_policy = ::std::os::raw::c_uint;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN9__gnu_cxx21__default_lock_policyE"]
    pub static __gnu_cxx___default_lock_policy: __gnu_cxx__Lock_policy;
}
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_lock_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_lock_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_lock_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_lock_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_lock_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_unlock_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_unlock_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_unlock_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_unlock_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_unlock_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_broadcast_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_broadcast_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_broadcast_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_broadcast_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_broadcast_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___concurrence_wait_error {
    pub _base: std_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___concurrence_wait_error"]
        [::std::mem::size_of::<__gnu_cxx___concurrence_wait_error>() - 8usize];
    ["Alignment of __gnu_cxx___concurrence_wait_error"]
        [::std::mem::align_of::<__gnu_cxx___concurrence_wait_error>() - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___mutex {
    pub _M_mutex: __gthread_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___mutex"][::std::mem::size_of::<__gnu_cxx___mutex>() - 40usize];
    ["Alignment of __gnu_cxx___mutex"][::std::mem::align_of::<__gnu_cxx___mutex>() - 8usize];
    ["Offset of field: __gnu_cxx___mutex::_M_mutex"]
        [::std::mem::offset_of!(__gnu_cxx___mutex, _M_mutex) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___recursive_mutex {
    pub _M_mutex: __gthread_recursive_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___recursive_mutex"]
        [::std::mem::size_of::<__gnu_cxx___recursive_mutex>() - 40usize];
    ["Alignment of __gnu_cxx___recursive_mutex"]
        [::std::mem::align_of::<__gnu_cxx___recursive_mutex>() - 8usize];
    ["Offset of field: __gnu_cxx___recursive_mutex::_M_mutex"]
        [::std::mem::offset_of!(__gnu_cxx___recursive_mutex, _M_mutex) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __gnu_cxx___scoped_lock {
    pub _M_device: *mut __gnu_cxx___scoped_lock___mutex_type,
}
pub type __gnu_cxx___scoped_lock___mutex_type = __gnu_cxx___mutex;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___scoped_lock"][::std::mem::size_of::<__gnu_cxx___scoped_lock>() - 8usize];
    ["Alignment of __gnu_cxx___scoped_lock"]
        [::std::mem::align_of::<__gnu_cxx___scoped_lock>() - 8usize];
    ["Offset of field: __gnu_cxx___scoped_lock::_M_device"]
        [::std::mem::offset_of!(__gnu_cxx___scoped_lock, _M_device) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __gnu_cxx___cond {
    pub _M_cond: __gthread_cond_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __gnu_cxx___cond"][::std::mem::size_of::<__gnu_cxx___cond>() - 48usize];
    ["Alignment of __gnu_cxx___cond"][::std::mem::align_of::<__gnu_cxx___cond>() - 8usize];
    ["Offset of field: __gnu_cxx___cond::_M_cond"]
        [::std::mem::offset_of!(__gnu_cxx___cond, _M_cond) - 0usize];
};
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __gnuc_va_list;
pub type wint_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
pub type mbstate_t = __mbstate_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn wcscpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcslcpy(__dest: *mut u32, __src: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcslcat(__dest: *mut u32, __src: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcscat(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsncat(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcscmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscasecmp(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncasecmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const u32,
        __s2: *const u32,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscoll(__s1: *const u32, __s2: *const u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsxfrm(__s1: *mut u32, __s2: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcscoll_l(__s1: *const u32, __s2: *const u32, __loc: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsxfrm_l(__s1: *mut u32, __s2: *const u32, __n: usize, __loc: locale_t) -> usize;
}
unsafe extern "C" {
    pub fn wcsdup(__s: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcschr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsrchr(__wcs: *const u32, __wc: u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcschrnul(__s: *const u32, __wc: u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcscspn(__wcs: *const u32, __reject: *const u32) -> usize;
}
unsafe extern "C" {
    pub fn wcsspn(__wcs: *const u32, __accept: *const u32) -> usize;
}
unsafe extern "C" {
    pub fn wcspbrk(__wcs: *const u32, __accept: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsstr(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcstok(__s: *mut u32, __delim: *const u32, __ptr: *mut *mut u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcslen(__s: *const u32) -> usize;
}
unsafe extern "C" {
    pub fn wcswcs(__haystack: *const u32, __needle: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcsnlen(__s: *const u32, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn wmemchr(__s: *const u32, __c: u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmemcmp(__s1: *const u32, __s2: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wmemcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmemmove(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmemset(__s: *mut u32, __c: u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn wmempcpy(__s1: *mut u32, __s2: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
unsafe extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbrtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: u32, __ps: *mut mbstate_t) -> usize;
}
unsafe extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
unsafe extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
unsafe extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut u32,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const u32,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcwidth(__c: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcswidth(__s: *const u32, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcstod(__nptr: *const u32, __endptr: *mut *mut u32) -> f64;
}
unsafe extern "C" {
    pub fn wcstof(__nptr: *const u32, __endptr: *mut *mut u32) -> f32;
}
unsafe extern "C" {
    pub fn wcstold(__nptr: *const u32, __endptr: *mut *mut u32) -> u128;
}
unsafe extern "C" {
    pub fn wcstof32(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32;
}
unsafe extern "C" {
    pub fn wcstof64(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64;
}
unsafe extern "C" {
    pub fn wcstof32x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float32x;
}
unsafe extern "C" {
    pub fn wcstof64x(__nptr: *const u32, __endptr: *mut *mut u32) -> _Float64x;
}
unsafe extern "C" {
    pub fn wcstol(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoul(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoll(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoull(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstoq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstouq(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstol"]
    pub fn wcstol1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstoul"]
    pub fn wcstoul1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstoll"]
    pub fn wcstoll1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstoull"]
    pub fn wcstoull1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstol_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn wcstoul_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn wcstoll_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn wcstoull_l(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstol_l"]
    pub fn wcstol_l1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstoul_l"]
    pub fn wcstoul_l1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstoll_l"]
    pub fn wcstoll_l1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wcstoull_l"]
    pub fn wcstoull_l1(
        __nptr: *const u32,
        __endptr: *mut *mut u32,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcstod_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f64;
}
unsafe extern "C" {
    pub fn wcstof_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> f32;
}
unsafe extern "C" {
    pub fn wcstold_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> u128;
}
unsafe extern "C" {
    pub fn wcstof32_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32;
}
unsafe extern "C" {
    pub fn wcstof64_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64;
}
unsafe extern "C" {
    pub fn wcstof32x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float32x;
}
unsafe extern "C" {
    pub fn wcstof64x_l(__nptr: *const u32, __endptr: *mut *mut u32, __loc: locale_t) -> _Float64x;
}
unsafe extern "C" {
    pub fn wcpcpy(__dest: *mut u32, __src: *const u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn wcpncpy(__dest: *mut u32, __src: *const u32, __n: usize) -> *mut u32;
}
unsafe extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut u32, __sizeloc: *mut usize) -> *mut __FILE;
}
unsafe extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wprintf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn swprintf(__s: *mut u32, __n: usize, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vwprintf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vswprintf(
        __s: *mut u32,
        __n: usize,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wscanf(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn swscanf(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_wscanf"]
    pub fn wscanf1(__format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_swscanf"]
    pub fn swscanf1(__s: *const u32, __format: *const u32, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vwscanf(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vswscanf(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_vwscanf"]
    pub fn vwscanf1(__format: *const u32, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_vswscanf"]
    pub fn vswscanf1(
        __s: *const u32,
        __format: *const u32,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwc(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar(__wc: u32) -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws(__ws: *mut u32, __n: ::std::os::raw::c_int, __stream: *mut __FILE) -> *mut u32;
}
unsafe extern "C" {
    pub fn fputws(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar_unlocked() -> wint_t;
}
unsafe extern "C" {
    pub fn fgetwc_unlocked(__stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwc_unlocked(__wc: u32, __stream: *mut __FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar_unlocked(__wc: u32) -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws_unlocked(
        __ws: *mut u32,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut u32;
}
unsafe extern "C" {
    pub fn fputws_unlocked(__ws: *const u32, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsftime(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcsftime_l(
        __s: *mut u32,
        __maxsize: usize,
        __format: *const u32,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lconv"][::std::mem::size_of::<lconv>() - 96usize];
    ["Alignment of lconv"][::std::mem::align_of::<lconv>() - 8usize];
    ["Offset of field: lconv::decimal_point"]
        [::std::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::std::mem::offset_of!(lconv, thousands_sep) - 8usize];
    ["Offset of field: lconv::grouping"][::std::mem::offset_of!(lconv, grouping) - 16usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::std::mem::offset_of!(lconv, int_curr_symbol) - 24usize];
    ["Offset of field: lconv::currency_symbol"]
        [::std::mem::offset_of!(lconv, currency_symbol) - 32usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::std::mem::offset_of!(lconv, mon_decimal_point) - 40usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, mon_thousands_sep) - 48usize];
    ["Offset of field: lconv::mon_grouping"][::std::mem::offset_of!(lconv, mon_grouping) - 56usize];
    ["Offset of field: lconv::positive_sign"]
        [::std::mem::offset_of!(lconv, positive_sign) - 64usize];
    ["Offset of field: lconv::negative_sign"]
        [::std::mem::offset_of!(lconv, negative_sign) - 72usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::std::mem::offset_of!(lconv, int_frac_digits) - 80usize];
    ["Offset of field: lconv::frac_digits"][::std::mem::offset_of!(lconv, frac_digits) - 81usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::std::mem::offset_of!(lconv, p_cs_precedes) - 82usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::std::mem::offset_of!(lconv, p_sep_by_space) - 83usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::std::mem::offset_of!(lconv, n_cs_precedes) - 84usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::std::mem::offset_of!(lconv, n_sep_by_space) - 85usize];
    ["Offset of field: lconv::p_sign_posn"][::std::mem::offset_of!(lconv, p_sign_posn) - 86usize];
    ["Offset of field: lconv::n_sign_posn"][::std::mem::offset_of!(lconv, n_sign_posn) - 87usize];
    ["Offset of field: lconv::int_p_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_p_cs_precedes) - 88usize];
    ["Offset of field: lconv::int_p_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_p_sep_by_space) - 89usize];
    ["Offset of field: lconv::int_n_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_n_cs_precedes) - 90usize];
    ["Offset of field: lconv::int_n_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_n_sep_by_space) - 91usize];
    ["Offset of field: lconv::int_p_sign_posn"]
        [::std::mem::offset_of!(lconv, int_p_sign_posn) - 92usize];
    ["Offset of field: lconv::int_n_sign_posn"]
        [::std::mem::offset_of!(lconv, int_n_sign_posn) - 93usize];
};
unsafe extern "C" {
    pub fn setlocale(
        __category: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn localeconv() -> *mut lconv;
}
unsafe extern "C" {
    pub fn newlocale(
        __category_mask: ::std::os::raw::c_int,
        __locale: *const ::std::os::raw::c_char,
        __base: locale_t,
    ) -> locale_t;
}
unsafe extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
unsafe extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
unsafe extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub const _ISupper: _bindgen_ty_39 = 256;
pub const _ISlower: _bindgen_ty_39 = 512;
pub const _ISalpha: _bindgen_ty_39 = 1024;
pub const _ISdigit: _bindgen_ty_39 = 2048;
pub const _ISxdigit: _bindgen_ty_39 = 4096;
pub const _ISspace: _bindgen_ty_39 = 8192;
pub const _ISprint: _bindgen_ty_39 = 16384;
pub const _ISgraph: _bindgen_ty_39 = 32768;
pub const _ISblank: _bindgen_ty_39 = 1;
pub const _IScntrl: _bindgen_ty_39 = 2;
pub const _ISpunct: _bindgen_ty_39 = 4;
pub const _ISalnum: _bindgen_ty_39 = 8;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
unsafe extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
unsafe extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct __cxxabiv1___forced_unwind__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct __cxxabiv1___forced_unwind {
    pub vtable_: *const __cxxabiv1___forced_unwind__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cxxabiv1___forced_unwind"]
        [::std::mem::size_of::<__cxxabiv1___forced_unwind>() - 8usize];
    ["Alignment of __cxxabiv1___forced_unwind"]
        [::std::mem::align_of::<__cxxabiv1___forced_unwind>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___cxa_refcounted_exception {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[link_name = "\u{1}__cxa_allocate_exception"]
    pub fn __cxxabiv1___cxa_allocate_exception(arg1: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[link_name = "\u{1}__cxa_free_exception"]
    pub fn __cxxabiv1___cxa_free_exception(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}__cxa_init_primary_exception"]
    pub fn __cxxabiv1___cxa_init_primary_exception(
        __object: *mut ::std::os::raw::c_void,
        __tinfo: *mut std_type_info,
        __dest: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut __cxxabiv1___cxa_refcounted_exception;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cxxabiv1___class_type_info {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gnu_debug__Safe_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtof32(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32;
}
unsafe extern "C" {
    pub fn strtof64(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64;
}
unsafe extern "C" {
    pub fn strtof32x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn strtof64x(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtol"]
    pub fn strtol1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul"]
    pub fn strtoul1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll"]
    pub fn strtoq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull"]
    pub fn strtouq1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strfromd(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: f32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfroml(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: u128,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf32(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf64(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf32x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float32x,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfromf64x(
        __dest: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        __f: _Float64x,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtol_l"]
    pub fn strtol_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoul_l"]
    pub fn strtoul_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoll_l"]
    pub fn strtoll_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_strtoull_l"]
    pub fn strtoull_l1(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtof32_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32;
}
unsafe extern "C" {
    pub fn strtof64_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64;
}
unsafe extern "C" {
    pub fn strtof32x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn strtof64x_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> __uint32_t;
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut u32,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::std::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::std::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::std::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
    -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc23_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
unsafe extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10initializeEv"]
    pub fn dai_initialize() -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10initializeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbPv"]
    pub fn dai_initialize1(
        additionalInfo: std_string,
        installSignalHandler: bool,
        javavm: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10initializeEPKcbPv"]
    pub fn dai_initialize2(
        additionalInfo: *const ::std::os::raw::c_char,
        installSignalHandler: bool,
        javavm: *mut ::std::os::raw::c_void,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10initializeEPv"]
    pub fn dai_initialize3(javavm: *mut ::std::os::raw::c_void) -> bool;
}
pub const dai_CameraBoardSocket_AUTO: dai_CameraBoardSocket = -1;
pub const dai_CameraBoardSocket_CAM_A: dai_CameraBoardSocket = 0;
pub const dai_CameraBoardSocket_CAM_B: dai_CameraBoardSocket = 1;
pub const dai_CameraBoardSocket_CAM_C: dai_CameraBoardSocket = 2;
pub const dai_CameraBoardSocket_CAM_D: dai_CameraBoardSocket = 3;
pub const dai_CameraBoardSocket_VERTICAL: dai_CameraBoardSocket = 3;
pub const dai_CameraBoardSocket_CAM_E: dai_CameraBoardSocket = 4;
pub const dai_CameraBoardSocket_CAM_F: dai_CameraBoardSocket = 5;
pub const dai_CameraBoardSocket_CAM_G: dai_CameraBoardSocket = 6;
pub const dai_CameraBoardSocket_CAM_H: dai_CameraBoardSocket = 7;
pub const dai_CameraBoardSocket_CAM_I: dai_CameraBoardSocket = 8;
pub const dai_CameraBoardSocket_CAM_J: dai_CameraBoardSocket = 9;
pub const dai_CameraBoardSocket_RGB: dai_CameraBoardSocket = 0;
pub const dai_CameraBoardSocket_CENTER: dai_CameraBoardSocket = 0;
pub const dai_CameraBoardSocket_LEFT: dai_CameraBoardSocket = 1;
pub const dai_CameraBoardSocket_RIGHT: dai_CameraBoardSocket = 2;
#[doc = " Which Camera socket to use.\n\n AUTO denotes that the decision will be made by device"]
pub type dai_CameraBoardSocket = i32;
pub const dai_CameraModel_Perspective: dai_CameraModel = 0;
pub const dai_CameraModel_Fisheye: dai_CameraModel = 1;
pub const dai_CameraModel_Equirectangular: dai_CameraModel = 2;
pub const dai_CameraModel_RadialDivision: dai_CameraModel = 3;
#[doc = " Which CameraModel to initialize the calibration with."]
pub type dai_CameraModel = i8;
pub const dai_SerializationType_LIBNOP: dai_SerializationType = 0;
pub const dai_SerializationType_JSON: dai_SerializationType = 1;
pub const dai_SerializationType_JSON_MSGPACK: dai_SerializationType = 2;
pub type dai_SerializationType = ::std::os::raw::c_int;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3daiL26DEFAULT_SERIALIZATION_TYPEE"]
    pub static dai_DEFAULT_SERIALIZATION_TYPE: dai_SerializationType;
}
#[repr(C)]
pub struct dai_utility_VectorWriter {
    pub vector: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_utility_VectorWriter"]
        [::std::mem::size_of::<dai_utility_VectorWriter>() - 24usize];
    ["Alignment of dai_utility_VectorWriter"]
        [::std::mem::align_of::<dai_utility_VectorWriter>() - 8usize];
    ["Offset of field: dai_utility_VectorWriter::vector"]
        [::std::mem::offset_of!(dai_utility_VectorWriter, vector) - 0usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai7utility11jsonDisplayERKN8nlohmann16json_abi_v3_12_010basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES5_IhSaIhEEvEEii"]
    pub fn dai_utility_jsonDisplay(
        json: *const nlohmann_json,
        level: ::std::os::raw::c_int,
        indent: ::std::os::raw::c_int,
    ) -> std_string;
}
#[doc = " Point3f structure\n\n x,y,z coordinates that define a 3D point."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Point3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Point3f"][::std::mem::size_of::<dai_Point3f>() - 12usize];
    ["Alignment of dai_Point3f"][::std::mem::align_of::<dai_Point3f>() - 4usize];
    ["Offset of field: dai_Point3f::x"][::std::mem::offset_of!(dai_Point3f, x) - 0usize];
    ["Offset of field: dai_Point3f::y"][::std::mem::offset_of!(dai_Point3f, y) - 4usize];
    ["Offset of field: dai_Point3f::z"][::std::mem::offset_of!(dai_Point3f, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_NOP__MEMBER_TRAITS {
    pub _address: u8,
}
#[doc = " Extrinsics structure"]
#[repr(C)]
pub struct dai_Extrinsics {
    pub rotationMatrix: std_vector,
    #[doc = "  (x, y, z) pose of destCameraSocket w.r.t currentCameraSocket obtained through calibration"]
    pub translation: dai_Point3f,
    #[doc = "  (x, y, z) pose of destCameraSocket w.r.t currentCameraSocket measured through CAD design"]
    pub specTranslation: dai_Point3f,
    pub toCameraSocket: dai_CameraBoardSocket,
}
pub type dai_Extrinsics_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Extrinsics"][::std::mem::size_of::<dai_Extrinsics>() - 56usize];
    ["Alignment of dai_Extrinsics"][::std::mem::align_of::<dai_Extrinsics>() - 8usize];
    ["Offset of field: dai_Extrinsics::rotationMatrix"]
        [::std::mem::offset_of!(dai_Extrinsics, rotationMatrix) - 0usize];
    ["Offset of field: dai_Extrinsics::translation"]
        [::std::mem::offset_of!(dai_Extrinsics, translation) - 24usize];
    ["Offset of field: dai_Extrinsics::specTranslation"]
        [::std::mem::offset_of!(dai_Extrinsics, specTranslation) - 36usize];
    ["Offset of field: dai_Extrinsics::toCameraSocket"]
        [::std::mem::offset_of!(dai_Extrinsics, toCameraSocket) - 48usize];
};
#[doc = " CameraInfo structure"]
#[repr(C)]
pub struct dai_CameraInfo {
    pub width: u16,
    pub height: u16,
    pub lensPosition: u8,
    pub intrinsicMatrix: std_vector,
    pub distortionCoeff: std_vector,
    pub extrinsics: dai_Extrinsics,
    pub specHfovDeg: f32,
    pub cameraType: dai_CameraModel,
}
pub type dai_CameraInfo_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraInfo"][::std::mem::size_of::<dai_CameraInfo>() - 120usize];
    ["Alignment of dai_CameraInfo"][::std::mem::align_of::<dai_CameraInfo>() - 8usize];
    ["Offset of field: dai_CameraInfo::width"]
        [::std::mem::offset_of!(dai_CameraInfo, width) - 0usize];
    ["Offset of field: dai_CameraInfo::height"]
        [::std::mem::offset_of!(dai_CameraInfo, height) - 2usize];
    ["Offset of field: dai_CameraInfo::lensPosition"]
        [::std::mem::offset_of!(dai_CameraInfo, lensPosition) - 4usize];
    ["Offset of field: dai_CameraInfo::intrinsicMatrix"]
        [::std::mem::offset_of!(dai_CameraInfo, intrinsicMatrix) - 8usize];
    ["Offset of field: dai_CameraInfo::distortionCoeff"]
        [::std::mem::offset_of!(dai_CameraInfo, distortionCoeff) - 32usize];
    ["Offset of field: dai_CameraInfo::extrinsics"]
        [::std::mem::offset_of!(dai_CameraInfo, extrinsics) - 56usize];
    ["Offset of field: dai_CameraInfo::specHfovDeg"]
        [::std::mem::offset_of!(dai_CameraInfo, specHfovDeg) - 112usize];
    ["Offset of field: dai_CameraInfo::cameraType"]
        [::std::mem::offset_of!(dai_CameraInfo, cameraType) - 116usize];
};
#[doc = " StereoRectification structure"]
#[repr(C)]
pub struct dai_StereoRectification {
    pub rectifiedRotationLeft: std_vector,
    pub rectifiedRotationRight: std_vector,
    pub leftCameraSocket: dai_CameraBoardSocket,
    pub rightCameraSocket: dai_CameraBoardSocket,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoRectification"][::std::mem::size_of::<dai_StereoRectification>() - 56usize];
    ["Alignment of dai_StereoRectification"]
        [::std::mem::align_of::<dai_StereoRectification>() - 8usize];
    ["Offset of field: dai_StereoRectification::rectifiedRotationLeft"]
        [::std::mem::offset_of!(dai_StereoRectification, rectifiedRotationLeft) - 0usize];
    ["Offset of field: dai_StereoRectification::rectifiedRotationRight"]
        [::std::mem::offset_of!(dai_StereoRectification, rectifiedRotationRight) - 24usize];
    ["Offset of field: dai_StereoRectification::leftCameraSocket"]
        [::std::mem::offset_of!(dai_StereoRectification, leftCameraSocket) - 48usize];
    ["Offset of field: dai_StereoRectification::rightCameraSocket"]
        [::std::mem::offset_of!(dai_StereoRectification, rightCameraSocket) - 52usize];
};
#[doc = " EepromData structure\n\n Contains the Calibration and Board data stored on device"]
#[repr(C)]
pub struct dai_EepromData {
    pub version: u32,
    pub productName: std_string,
    pub boardCustom: std_string,
    pub boardName: std_string,
    pub boardRev: std_string,
    pub boardConf: std_string,
    pub hardwareConf: std_string,
    pub deviceName: std_string,
    pub batchName: std_string,
    #[doc = " Deprecated, not used or stored"]
    pub batchTime: u64,
    pub boardOptions: u32,
    pub cameraData: std_unordered_map,
    pub stereoRectificationData: dai_StereoRectification,
    pub imuExtrinsics: dai_Extrinsics,
    pub housingExtrinsics: dai_Extrinsics,
    pub miscellaneousData: std_vector,
    pub stereoUseSpecTranslation: bool,
    pub stereoEnableDistortionCorrection: bool,
    pub verticalCameraSocket: dai_CameraBoardSocket,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_EepromData"][::std::mem::size_of::<dai_EepromData>() - 536usize];
    ["Alignment of dai_EepromData"][::std::mem::align_of::<dai_EepromData>() - 8usize];
    ["Offset of field: dai_EepromData::version"]
        [::std::mem::offset_of!(dai_EepromData, version) - 0usize];
    ["Offset of field: dai_EepromData::productName"]
        [::std::mem::offset_of!(dai_EepromData, productName) - 8usize];
    ["Offset of field: dai_EepromData::boardCustom"]
        [::std::mem::offset_of!(dai_EepromData, boardCustom) - 40usize];
    ["Offset of field: dai_EepromData::boardName"]
        [::std::mem::offset_of!(dai_EepromData, boardName) - 72usize];
    ["Offset of field: dai_EepromData::boardRev"]
        [::std::mem::offset_of!(dai_EepromData, boardRev) - 104usize];
    ["Offset of field: dai_EepromData::boardConf"]
        [::std::mem::offset_of!(dai_EepromData, boardConf) - 136usize];
    ["Offset of field: dai_EepromData::hardwareConf"]
        [::std::mem::offset_of!(dai_EepromData, hardwareConf) - 168usize];
    ["Offset of field: dai_EepromData::deviceName"]
        [::std::mem::offset_of!(dai_EepromData, deviceName) - 200usize];
    ["Offset of field: dai_EepromData::batchName"]
        [::std::mem::offset_of!(dai_EepromData, batchName) - 232usize];
    ["Offset of field: dai_EepromData::batchTime"]
        [::std::mem::offset_of!(dai_EepromData, batchTime) - 264usize];
    ["Offset of field: dai_EepromData::boardOptions"]
        [::std::mem::offset_of!(dai_EepromData, boardOptions) - 272usize];
    ["Offset of field: dai_EepromData::cameraData"]
        [::std::mem::offset_of!(dai_EepromData, cameraData) - 280usize];
    ["Offset of field: dai_EepromData::stereoRectificationData"]
        [::std::mem::offset_of!(dai_EepromData, stereoRectificationData) - 336usize];
    ["Offset of field: dai_EepromData::imuExtrinsics"]
        [::std::mem::offset_of!(dai_EepromData, imuExtrinsics) - 392usize];
    ["Offset of field: dai_EepromData::housingExtrinsics"]
        [::std::mem::offset_of!(dai_EepromData, housingExtrinsics) - 448usize];
    ["Offset of field: dai_EepromData::miscellaneousData"]
        [::std::mem::offset_of!(dai_EepromData, miscellaneousData) - 504usize];
    ["Offset of field: dai_EepromData::stereoUseSpecTranslation"]
        [::std::mem::offset_of!(dai_EepromData, stereoUseSpecTranslation) - 528usize];
    ["Offset of field: dai_EepromData::stereoEnableDistortionCorrection"]
        [::std::mem::offset_of!(dai_EepromData, stereoEnableDistortionCorrection) - 529usize];
    ["Offset of field: dai_EepromData::verticalCameraSocket"]
        [::std::mem::offset_of!(dai_EepromData, verticalCameraSocket) - 532usize];
};
#[doc = " Point2f structure\n\n x and y coordinates that define a 2D point."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Point2f {
    pub x: f32,
    pub y: f32,
    pub normalized: bool,
    pub hasNormalized: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Point2f"][::std::mem::size_of::<dai_Point2f>() - 12usize];
    ["Alignment of dai_Point2f"][::std::mem::align_of::<dai_Point2f>() - 4usize];
    ["Offset of field: dai_Point2f::x"][::std::mem::offset_of!(dai_Point2f, x) - 0usize];
    ["Offset of field: dai_Point2f::y"][::std::mem::offset_of!(dai_Point2f, y) - 4usize];
    ["Offset of field: dai_Point2f::normalized"]
        [::std::mem::offset_of!(dai_Point2f, normalized) - 8usize];
    ["Offset of field: dai_Point2f::hasNormalized"]
        [::std::mem::offset_of!(dai_Point2f, hasNormalized) - 9usize];
};
#[doc = " Size2f structure\n\n width, height values define the size of the shape/frame"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Size2f {
    pub width: f32,
    pub height: f32,
    pub normalized: bool,
    pub hasNormalized: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Size2f"][::std::mem::size_of::<dai_Size2f>() - 12usize];
    ["Alignment of dai_Size2f"][::std::mem::align_of::<dai_Size2f>() - 4usize];
    ["Offset of field: dai_Size2f::width"][::std::mem::offset_of!(dai_Size2f, width) - 0usize];
    ["Offset of field: dai_Size2f::height"][::std::mem::offset_of!(dai_Size2f, height) - 4usize];
    ["Offset of field: dai_Size2f::normalized"]
        [::std::mem::offset_of!(dai_Size2f, normalized) - 8usize];
    ["Offset of field: dai_Size2f::hasNormalized"]
        [::std::mem::offset_of!(dai_Size2f, hasNormalized) - 9usize];
};
#[doc = " @brief Represents paths on a filesystem; accepts utf-8, Windows utf-16 wchar_t, or\n        std::filesystem::path.\n\n        It is suitable for direct use with OS APIs.\n        Features are limited to character-set conversion of paths. It is not\n        intended as a full replacement for std::filesystem::path\n"]
#[repr(C)]
pub struct dai_Path {
    pub _nativePath: dai_Path_string_type,
}
pub type dai_Path_value_type = ::std::os::raw::c_char;
pub type dai_Path_string_type = std_basic_string<dai_Path_value_type>;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Path"][::std::mem::size_of::<dai_Path>() - 32usize];
    ["Alignment of dai_Path"][::std::mem::align_of::<dai_Path>() - 8usize];
    ["Offset of field: dai_Path::_nativePath"]
        [::std::mem::offset_of!(dai_Path, _nativePath) - 0usize];
};
#[doc = " CalibrationHandler is an interface to read/load/write structured calibration and device data.\n The following fields are protected and aren't allowed to be overridden by default:\n  - boardName\n  - boardRev\n  - boardConf\n  - hardwareConf\n  - batchName\n  - batchTime\n  - boardOptions\n  - productName"]
#[repr(C)]
pub struct dai_CalibrationHandler {
    pub eepromData: dai_EepromData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CalibrationHandler_dependent_false {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CalibrationHandler"][::std::mem::size_of::<dai_CalibrationHandler>() - 536usize];
    ["Alignment of dai_CalibrationHandler"]
        [::std::mem::align_of::<dai_CalibrationHandler>() - 8usize];
    ["Offset of field: dai_CalibrationHandler::eepromData"]
        [::std::mem::offset_of!(dai_CalibrationHandler, eepromData) - 0usize];
};
unsafe extern "C" {
    #[doc = " Construct a new Calibration Handler object from JSON EepromData.\n\n @param eepromDataJson EepromData as JSON"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler8fromJsonEN8nlohmann16json_abi_v3_12_010basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES5_IhSaIhEEvEE"]
    pub fn dai_CalibrationHandler_fromJson(eepromDataJson: nlohmann_json)
    -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Get the Eeprom Data object\n\n @return EepromData object which contains the raw calibration data"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler13getEepromDataEv"]
    pub fn dai_CalibrationHandler_getEepromData(
        this: *const dai_CalibrationHandler,
    ) -> dai_EepromData;
}
unsafe extern "C" {
    #[doc = " Get the Camera Intrinsics object\n\n @param cameraId Uses the cameraId to identify which camera intrinsics to return\n @param resizewidth resized width of the image for which intrinsics is requested.  resizewidth = -1 represents width is same as default intrinsics\n @param resizeHeight resized height of the image for which intrinsics is requested.  resizeHeight = -1 represents height is same as default intrinsics\n @param topLeftPixelId (x, y) point represents the top left corner coordinates of the cropped image which is used to modify the intrinsics for the\n respective cropped image\n @param bottomRightPixelId (x, y) point represents the bottom right corner coordinates of the cropped image which is used to modify the intrinsics for\n the respective cropped image\n @param keepAspectRatio Enabling this will scale on width or height depending on which provides the max resolution and crops the remaining part of the\n other side\n @return Represents the 3x3 intrinsics matrix of the respective camera at the requested size and crop dimensions.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler19getCameraIntrinsicsENS_17CameraBoardSocketEiiNS_7Point2fES2_b"]
    pub fn dai_CalibrationHandler_getCameraIntrinsics(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        resizeWidth: ::std::os::raw::c_int,
        resizeHeight: ::std::os::raw::c_int,
        topLeftPixelId: dai_Point2f,
        bottomRightPixelId: dai_Point2f,
        keepAspectRatio: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Camera Intrinsics object\n\n @param cameraId Uses the cameraId to identify which camera intrinsics to return\n @param destShape resized width and height of the image for which intrinsics is requested.\n @param topLeftPixelId (x, y) point represents the top left corner coordinates of the cropped image which is used to modify the intrinsics for the\n respective cropped image\n @param bottomRightPixelId (x, y) point represents the bottom right corner coordinates of the cropped image which is used to modify the intrinsics for\n the respective cropped image\n @param keepAspectRatio Enabling this will scale on width or height depending on which provides the max resolution and crops the remaining part of the\n other side\n @return Represents the 3x3 intrinsics matrix of the respective camera at the requested size and crop dimensions.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler19getCameraIntrinsicsENS_17CameraBoardSocketENS_6Size2fENS_7Point2fES3_b"]
    pub fn dai_CalibrationHandler_getCameraIntrinsics1(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        destShape: dai_Size2f,
        topLeftPixelId: dai_Point2f,
        bottomRightPixelId: dai_Point2f,
        keepAspectRatio: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Camera Intrinsics object\n\n @param cameraId Uses the cameraId to identify which camera intrinsics to return\n @param destShape resized width and height of the image for which intrinsics is requested.\n @param topLeftPixelId (x, y) point represents the top left corner coordinates of the cropped image which is used to modify the intrinsics for the\n respective cropped image\n @param bottomRightPixelId (x, y) point represents the bottom right corner coordinates of the cropped image which is used to modify the intrinsics for\n the respective cropped image\n @param keepAspectRatio Enabling this will scale on width or height depending on which provides the max resolution and crops the remaining part of the\n other side\n @return Represents the 3x3 intrinsics matrix of the respective camera at the requested size and crop dimensions.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler19getCameraIntrinsicsENS_17CameraBoardSocketESt5tupleIJiiEENS_7Point2fES4_b"]
    pub fn dai_CalibrationHandler_getCameraIntrinsics2(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        destShape: std_tuple,
        topLeftPixelId: dai_Point2f,
        bottomRightPixelId: dai_Point2f,
        keepAspectRatio: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Default Intrinsics object\n\n @param cameraId Uses the cameraId to identify which camera intrinsics to return\n @return Represents the 3x3 intrinsics matrix of the respective camera along with width and height at which it was calibrated.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler20getDefaultIntrinsicsENS_17CameraBoardSocketE"]
    pub fn dai_CalibrationHandler_getDefaultIntrinsics(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get the Distortion Coefficients object\n\n @param cameraId Uses the cameraId to identify which distortion Coefficients to return.\n @return the distortion coefficients of the requested camera in this order: [k1,k2,p1,p2,k3,k4,k5,k6,s1,s2,s3,s4,τx,τy] for CameraModel::Perspective\n or [k1, k2, k3, k4] for CameraModel::Fisheye\n see https://docs.opencv.org/4.5.4/d9/d0c/group__calib3d.html for Perspective model (Rational Polynomial Model)\n see https://docs.opencv.org/4.5.4/db/d58/group__calib3d__fisheye.html for Fisheye model"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler25getDistortionCoefficientsENS_17CameraBoardSocketE"]
    pub fn dai_CalibrationHandler_getDistortionCoefficients(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = "  Get the Fov of the camera\n\n @param cameraId of the camera of which we are fetching fov.\n @param useSpec Disabling this bool will calculate the fov based on intrinsics (focal length, image width), instead of getting it from the camera specs\n @return field of view of the camera with given cameraId."]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler6getFovENS_17CameraBoardSocketEb"]
    pub fn dai_CalibrationHandler_getFov(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        useSpec: bool,
    ) -> f32;
}
unsafe extern "C" {
    #[doc = "  Get the lens position of the given camera\n\n @param cameraId of the camera with lens position is requested.\n @return lens position of the camera with given cameraId at which it was calibrated."]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler15getLensPositionENS_17CameraBoardSocketE"]
    pub fn dai_CalibrationHandler_getLensPosition(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
    ) -> u8;
}
unsafe extern "C" {
    #[doc = "  Get the distortion model of the given camera\n\n @param cameraId of the camera with lens position is requested.\n @return lens position of the camera with given cameraId at which it was calibrated."]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler18getDistortionModelENS_17CameraBoardSocketE"]
    pub fn dai_CalibrationHandler_getDistortionModel(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
    ) -> dai_CameraModel;
}
unsafe extern "C" {
    #[doc = " Get the Camera Extrinsics object between two cameras from the calibration data if there is a linked connection\n  between any two cameras then the relative rotation and translation (in centimeters) is returned by this function.\n\n @param srcCamera Camera Id of the camera which will be considered as origin.\n @param dstCamera  Camera Id of the destination camera to which we are fetching the rotation and translation from the SrcCamera\n @param useSpecTranslation Enabling this bool uses the translation information from the board design data\n @return a transformationMatrix which is 4x4 in homogeneous coordinate system\n\n Matrix representation of transformation matrix\n \\f[ \\text{Transformation Matrix} = \\left [ \\begin{matrix}\n                                             r_{00} & r_{01} & r_{02} & T_x \\\\\n                                             r_{10} & r_{11} & r_{12} & T_y \\\\\n                                             r_{20} & r_{21} & r_{22} & T_z \\\\\n                                               0    &   0    &   0    & 1\n                                            \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler19getCameraExtrinsicsENS_17CameraBoardSocketES1_b"]
    pub fn dai_CalibrationHandler_getCameraExtrinsics(
        this: *const dai_CalibrationHandler,
        srcCamera: dai_CameraBoardSocket,
        dstCamera: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Camera translation vector between two cameras from the calibration data.\n\n @param srcCamera Camera Id of the camera which will be considered as origin.\n @param dstCamera  Camera Id of the destination camera to which we are fetching the translation vector from the SrcCamera\n @param useSpecTranslation Disabling this bool uses the translation information from the calibration data (not the board design data)\n @return a translation vector like [x, y, z] in centimeters"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler26getCameraTranslationVectorENS_17CameraBoardSocketES1_b"]
    pub fn dai_CalibrationHandler_getCameraTranslationVector(
        this: *const dai_CalibrationHandler,
        srcCamera: dai_CameraBoardSocket,
        dstCamera: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Camera rotation matrix between two cameras from the calibration data.\n\n @param srcCamera Camera Id of the camera which will be considered as origin.\n @param dstCamera  Camera Id of the destination camera to which we are fetching the rotation vector from the SrcCamera\n @return a 3x3 rotation matrix\n Matrix representation of rotation matrix\n \\f[ \\text{Rotation Matrix} = \\left [ \\begin{matrix}\n                                             r_{00} & r_{01} & r_{02}\\\\\n                                             r_{10} & r_{11} & r_{12}\\\\\n                                             r_{20} & r_{21} & r_{22}\\\\\n                                            \\end{matrix} \\right ] \\f]"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler23getCameraRotationMatrixENS_17CameraBoardSocketES1_"]
    pub fn dai_CalibrationHandler_getCameraRotationMatrix(
        this: *const dai_CalibrationHandler,
        srcCamera: dai_CameraBoardSocket,
        dstCamera: dai_CameraBoardSocket,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the baseline distance between two specified cameras. By default it will get the baseline between CameraBoardSocket.RIGHT\n and CameraBoardSocket.LEFT.\n\n @param cam1 First camera\n @param cam2 Second camera\n @param useSpecTranslation Enabling this bool uses the translation information from the board design data (not the calibration data)\n @return baseline distance in centimeters"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler19getBaselineDistanceENS_17CameraBoardSocketES1_b"]
    pub fn dai_CalibrationHandler_getBaselineDistance(
        this: *const dai_CalibrationHandler,
        cam1: dai_CameraBoardSocket,
        cam2: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> f32;
}
unsafe extern "C" {
    #[doc = " Get the Camera To Imu Extrinsics object\n From the data loaded if there is a linked connection between IMU and the given camera then there relative rotation and translation from the camera to IMU\n is returned.\n\n @param cameraId Camera Id of the camera which will be considered as origin. from which Transformation matrix to the IMU will be found\n @param useSpecTranslation Enabling this bool uses the translation information from the board design data\n @return Returns a transformationMatrix which is 4x4 in homogeneous coordinate system\n\n Matrix representation of transformation matrix\n \\f[ \\text{Transformation Matrix} = \\left [ \\begin{matrix}\n                                             r_{00} & r_{01} & r_{02} & T_x \\\\\n                                             r_{10} & r_{11} & r_{12} & T_y \\\\\n                                             r_{20} & r_{21} & r_{22} & T_z \\\\\n                                               0    &   0    &   0    & 1\n                                            \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler24getCameraToImuExtrinsicsENS_17CameraBoardSocketEb"]
    pub fn dai_CalibrationHandler_getCameraToImuExtrinsics(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Imu To Camera Extrinsics object from the data loaded if there is a linked connection\n between IMU and the given camera then there relative rotation and translation from the IMU to Camera\n is returned.\n\n @param cameraId Camera Id of the camera which will be considered as destination. To which Transformation matrix from the IMU will be found.\n @param useSpecTranslation Enabling this bool uses the translation information from the board design data\n @return Returns a transformationMatrix which is 4x4 in homogeneous coordinate system\n\n Matrix representation of transformation matrix\n \\f[ \\text{Transformation Matrix} = \\left [ \\begin{matrix}\n                                             r_{00} & r_{01} & r_{02} & T_x \\\\\n                                             r_{10} & r_{11} & r_{12} & T_y \\\\\n                                             r_{20} & r_{21} & r_{22} & T_z \\\\\n                                               0    &   0    &   0    & 1\n                                            \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler24getImuToCameraExtrinsicsENS_17CameraBoardSocketEb"]
    pub fn dai_CalibrationHandler_getImuToCameraExtrinsics(
        this: *const dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Stereo Right Rectification Rotation object\n\n @return returns a 3x3 rectification rotation matrix"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler35getStereoRightRectificationRotationEv"]
    pub fn dai_CalibrationHandler_getStereoRightRectificationRotation(
        this: *const dai_CalibrationHandler,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the Stereo Left Rectification Rotation object\n\n @return returns a 3x3 rectification rotation matrix"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler34getStereoLeftRectificationRotationEv"]
    pub fn dai_CalibrationHandler_getStereoLeftRectificationRotation(
        this: *const dai_CalibrationHandler,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get the camera id of the camera which is used as left camera of the stereo setup\n\n @return cameraID of the camera used as left camera"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler21getStereoLeftCameraIdEv"]
    pub fn dai_CalibrationHandler_getStereoLeftCameraId(
        this: *const dai_CalibrationHandler,
    ) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[doc = " Get the camera id of the camera which is used as right camera of the stereo setup\n\n @return cameraID of the camera used as right camera"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler22getStereoRightCameraIdEv"]
    pub fn dai_CalibrationHandler_getStereoRightCameraId(
        this: *const dai_CalibrationHandler,
    ) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[doc = " Write raw calibration/board data to json file.\n\n @param destPath  Full path to the json file in which raw calibration data will be stored\n @return True on success, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler16eepromToJsonFileENS_4PathE"]
    pub fn dai_CalibrationHandler_eepromToJsonFile(
        this: *const dai_CalibrationHandler,
        destPath: dai_Path,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Get JSON representation of calibration data\n\n @return JSON structure"]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler12eepromToJsonB5cxx11Ev"]
    pub fn dai_CalibrationHandler_eepromToJson(
        this: *const dai_CalibrationHandler,
    ) -> nlohmann_json;
}
unsafe extern "C" {
    #[doc = " Set the Board Info object\n\n @param version Sets the version of the Calibration data(Current version is 6)\n @param boardName Sets your board name.\n @param boardRev set your board revision id."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler12setBoardInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
    pub fn dai_CalibrationHandler_setBoardInfo(
        this: *mut dai_CalibrationHandler,
        boardName: std_string,
        boardRev: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set the Board Info object. Creates version 7 EEPROM data\n\n @param productName Sets product name (alias).\n @param boardName Sets board name.\n @param boardRev Sets board revision id.\n @param boardConf Sets board configuration id.\n @param hardwareConf Sets hardware configuration id.\n @param batchName Sets batch name.\n @param batchTime Sets batch time (unix timestamp).\n @param boardCustom Sets a custom board (Default empty string)."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler12setBoardInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_S6_S6_mjS6_"]
    pub fn dai_CalibrationHandler_setBoardInfo1(
        this: *mut dai_CalibrationHandler,
        productName: std_string,
        boardName: std_string,
        boardRev: std_string,
        boardConf: std_string,
        hardwareConf: std_string,
        batchName: std_string,
        batchTime: u64,
        boardOptions: u32,
        boardCustom: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set the Board Info object. Creates version 7 EEPROM data\n\n @param deviceName Sets device name.\n @param productName Sets product name (alias).\n @param boardName Sets board name.\n @param boardRev Sets board revision id.\n @param boardConf Sets board configuration id.\n @param hardwareConf Sets hardware configuration id.\n @param batchName Sets batch name. Not supported anymore\n @param batchTime Sets batch time (unix timestamp).\n @param boardCustom Sets a custom board (Default empty string)."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler12setBoardInfoENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_S6_S6_S6_mjS6_"]
    pub fn dai_CalibrationHandler_setBoardInfo2(
        this: *mut dai_CalibrationHandler,
        deviceName: std_string,
        productName: std_string,
        boardName: std_string,
        boardRev: std_string,
        boardConf: std_string,
        hardwareConf: std_string,
        batchName: std_string,
        batchTime: u64,
        boardOptions: u32,
        boardCustom: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set the deviceName which responses to getDeviceName of Device\n\n @param deviceName Sets device name."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler13setDeviceNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_CalibrationHandler_setDeviceName(
        this: *mut dai_CalibrationHandler,
        deviceName: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set the productName which acts as alisas for users to identify the device\n\n @param productName Sets product name (alias)."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler14setProductNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_CalibrationHandler_setProductName(
        this: *mut dai_CalibrationHandler,
        productName: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set the Camera Intrinsics object\n\n @param cameraId CameraId of the camera for which Camera intrinsics are being loaded\n @param intrinsics 3x3 intrinsics matrix\n @param frameSize Represents the width and height of the image at which intrinsics are calculated.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler19setCameraIntrinsicsENS_17CameraBoardSocketESt6vectorIS2_IfSaIfEESaIS4_EENS_6Size2fE"]
    pub fn dai_CalibrationHandler_setCameraIntrinsics(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        intrinsics: std_vector,
        frameSize: dai_Size2f,
    );
}
unsafe extern "C" {
    #[doc = " Set the Camera Intrinsics object\n\n @param cameraId CameraId of the camera for which Camera intrinsics are being loaded\n @param intrinsics 3x3 intrinsics matrix\n @param width Represents the width of the image at which intrinsics are calculated.\n @param height Represents the height of the image at which intrinsics are calculated.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler19setCameraIntrinsicsENS_17CameraBoardSocketESt6vectorIS2_IfSaIfEESaIS4_EEii"]
    pub fn dai_CalibrationHandler_setCameraIntrinsics1(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        intrinsics: std_vector,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set the Camera Intrinsics object\n\n @param cameraId CameraId of the camera for which Camera intrinsics are being loaded\n @param intrinsics 3x3 intrinsics matrix\n @param frameSize Represents the width and height of the image at which intrinsics are calculated.\n\n Matrix representation of intrinsic matrix\n \\f[ \\text{Intrinsic Matrix} = \\left [ \\begin{matrix}\n                                        f_x & 0 & c_x \\\\\n                                        0 & f_y & c_y \\\\\n                                        0 &  0  & 1\n                                      \\end{matrix} \\right ] \\f]\n"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler19setCameraIntrinsicsENS_17CameraBoardSocketESt6vectorIS2_IfSaIfEESaIS4_EESt5tupleIJiiEE"]
    pub fn dai_CalibrationHandler_setCameraIntrinsics2(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        intrinsics: std_vector,
        frameSize: std_tuple,
    );
}
unsafe extern "C" {
    #[doc = " Sets the distortion Coefficients obtained from camera calibration\n\n @param cameraId Camera Id of the camera for which distortion coefficients are computed\n @param distortionCoefficients Distortion Coefficients of the respective Camera."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler25setDistortionCoefficientsENS_17CameraBoardSocketESt6vectorIfSaIfEE"]
    pub fn dai_CalibrationHandler_setDistortionCoefficients(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        distortionCoefficients: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set the Fov of the Camera\n\n @param cameraId Camera Id of the camera\n @param hfov Horizontal fov of the camera from Camera Datasheet"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler6setFovENS_17CameraBoardSocketEf"]
    pub fn dai_CalibrationHandler_setFov(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        hfov: f32,
    );
}
unsafe extern "C" {
    #[doc = " Sets the distortion Coefficients obtained from camera calibration\n\n @param cameraId Camera Id of the camera\n @param lensPosition lens posiotion value of the camera at the time of calibration"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler15setLensPositionENS_17CameraBoardSocketEh"]
    pub fn dai_CalibrationHandler_setLensPosition(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        lensPosition: u8,
    );
}
unsafe extern "C" {
    #[doc = " Set the Camera Type object\n\n @param cameraId CameraId of the camera for which cameraModel Type is being updated.\n @param cameraModel Type of the model the camera represents"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler13setCameraTypeENS_17CameraBoardSocketENS_11CameraModelE"]
    pub fn dai_CalibrationHandler_setCameraType(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        cameraModel: dai_CameraModel,
    );
}
unsafe extern "C" {
    #[doc = " Set the Camera Extrinsics object\n\n @param srcCameraId Camera Id of the camera which will be considered as relative origin.\n @param destCameraId Camera Id of the camera which will be considered as destination from srcCameraId.\n @param rotationMatrix Rotation between srcCameraId and destCameraId origins.\n @param translation Translation between srcCameraId and destCameraId origins.\n @param specTranslation Translation between srcCameraId and destCameraId origins from the design."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler19setCameraExtrinsicsENS_17CameraBoardSocketES1_St6vectorIS2_IfSaIfEESaIS4_EES4_S4_"]
    pub fn dai_CalibrationHandler_setCameraExtrinsics(
        this: *mut dai_CalibrationHandler,
        srcCameraId: dai_CameraBoardSocket,
        destCameraId: dai_CameraBoardSocket,
        rotationMatrix: std_vector,
        translation: std_vector,
        specTranslation: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set the Imu to Camera Extrinsics object\n\n @param destCameraId Camera Id of the camera which will be considered as destination from IMU.\n @param rotationMatrix Rotation between srcCameraId and destCameraId origins.\n @param translation Translation between IMU and destCameraId origins.\n @param specTranslation Translation between IMU and destCameraId origins from the design."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler16setImuExtrinsicsENS_17CameraBoardSocketESt6vectorIS2_IfSaIfEESaIS4_EES4_S4_"]
    pub fn dai_CalibrationHandler_setImuExtrinsics(
        this: *mut dai_CalibrationHandler,
        destCameraId: dai_CameraBoardSocket,
        rotationMatrix: std_vector,
        translation: std_vector,
        specTranslation: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set the Stereo Left Rectification object\n\n @param cameraId CameraId of the camera which will be used as left Camera of stereo Setup\n @param rectifiedRotation Rectification rotation of the left camera required for feature matching\n\n Homography of the Left Rectification = Intrinsics_right * rectifiedRotation * inv(Intrinsics_left)"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler13setStereoLeftENS_17CameraBoardSocketESt6vectorIS2_IfSaIfEESaIS4_EE"]
    pub fn dai_CalibrationHandler_setStereoLeft(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        rectifiedRotation: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set the Stereo Right Rectification object\n\n @param cameraId CameraId of the camera which will be used as left Camera of stereo Setup\n @param rectifiedRotation Rectification rotation of the left camera required for feature matching\n\n Homography of the Right Rectification = Intrinsics_right * rectifiedRotation * inv(Intrinsics_right)"]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandler14setStereoRightENS_17CameraBoardSocketESt6vectorIS2_IfSaIfEESaIS4_EE"]
    pub fn dai_CalibrationHandler_setStereoRight(
        this: *mut dai_CalibrationHandler,
        cameraId: dai_CameraBoardSocket,
        rectifiedRotation: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Using left camera as the head it iterates over the camera extrinsics connection\n to check if all the camera extrinsics are connected and no loop exists.\n\n @return true on proper connection with no loops."]
    #[link_name = "\u{1}_ZNK3dai18CalibrationHandler19validateCameraArrayEv"]
    pub fn dai_CalibrationHandler_validateCameraArray(this: *const dai_CalibrationHandler) -> bool;
}
unsafe extern "C" {
    #[doc = " Construct a new Calibration Handler object using the\n eeprom json file created from calibration procedure.\n\n @param eepromDataPath takes the full path to the json file containing the calibration and device info."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandlerC1ENS_4PathE"]
    pub fn dai_CalibrationHandler_CalibrationHandler(
        this: *mut dai_CalibrationHandler,
        eepromDataPath: dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Construct a new Calibration Handler object using the board\n config json file and .calib binary files created using gen1 calibration.\n\n @param calibrationDataPath Full Path to the .calib binary file from the gen1 calibration. (Supports only Version 5)\n @param boardConfigPath Full Path to the board config json file containing device information."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandlerC1ENS_4PathES1_"]
    pub fn dai_CalibrationHandler_CalibrationHandler1(
        this: *mut dai_CalibrationHandler,
        calibrationDataPath: dai_Path,
        boardConfigPath: dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Construct a new Calibration Handler object from EepromData object.\n\n @param eepromData EepromData data structure containing the calibration data."]
    #[link_name = "\u{1}_ZN3dai18CalibrationHandlerC1ENS_10EepromDataE"]
    pub fn dai_CalibrationHandler_CalibrationHandler2(
        this: *mut dai_CalibrationHandler,
        eepromData: dai_EepromData,
    );
}
impl dai_CalibrationHandler {
    #[inline]
    pub unsafe fn fromJson(eepromDataJson: nlohmann_json) -> dai_CalibrationHandler {
        dai_CalibrationHandler_fromJson(eepromDataJson)
    }
    #[inline]
    pub unsafe fn getEepromData(&self) -> dai_EepromData {
        dai_CalibrationHandler_getEepromData(self)
    }
    #[inline]
    pub unsafe fn getCameraIntrinsics(
        &self,
        cameraId: dai_CameraBoardSocket,
        resizeWidth: ::std::os::raw::c_int,
        resizeHeight: ::std::os::raw::c_int,
        topLeftPixelId: dai_Point2f,
        bottomRightPixelId: dai_Point2f,
        keepAspectRatio: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraIntrinsics(
            self,
            cameraId,
            resizeWidth,
            resizeHeight,
            topLeftPixelId,
            bottomRightPixelId,
            keepAspectRatio,
        )
    }
    #[inline]
    pub unsafe fn getCameraIntrinsics1(
        &self,
        cameraId: dai_CameraBoardSocket,
        destShape: dai_Size2f,
        topLeftPixelId: dai_Point2f,
        bottomRightPixelId: dai_Point2f,
        keepAspectRatio: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraIntrinsics1(
            self,
            cameraId,
            destShape,
            topLeftPixelId,
            bottomRightPixelId,
            keepAspectRatio,
        )
    }
    #[inline]
    pub unsafe fn getCameraIntrinsics2(
        &self,
        cameraId: dai_CameraBoardSocket,
        destShape: std_tuple,
        topLeftPixelId: dai_Point2f,
        bottomRightPixelId: dai_Point2f,
        keepAspectRatio: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraIntrinsics2(
            self,
            cameraId,
            destShape,
            topLeftPixelId,
            bottomRightPixelId,
            keepAspectRatio,
        )
    }
    #[inline]
    pub unsafe fn getDefaultIntrinsics(&self, cameraId: dai_CameraBoardSocket) -> std_tuple {
        dai_CalibrationHandler_getDefaultIntrinsics(self, cameraId)
    }
    #[inline]
    pub unsafe fn getDistortionCoefficients(&self, cameraId: dai_CameraBoardSocket) -> std_vector {
        dai_CalibrationHandler_getDistortionCoefficients(self, cameraId)
    }
    #[inline]
    pub unsafe fn getFov(&self, cameraId: dai_CameraBoardSocket, useSpec: bool) -> f32 {
        dai_CalibrationHandler_getFov(self, cameraId, useSpec)
    }
    #[inline]
    pub unsafe fn getLensPosition(&self, cameraId: dai_CameraBoardSocket) -> u8 {
        dai_CalibrationHandler_getLensPosition(self, cameraId)
    }
    #[inline]
    pub unsafe fn getDistortionModel(&self, cameraId: dai_CameraBoardSocket) -> dai_CameraModel {
        dai_CalibrationHandler_getDistortionModel(self, cameraId)
    }
    #[inline]
    pub unsafe fn getCameraExtrinsics(
        &self,
        srcCamera: dai_CameraBoardSocket,
        dstCamera: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraExtrinsics(self, srcCamera, dstCamera, useSpecTranslation)
    }
    #[inline]
    pub unsafe fn getCameraTranslationVector(
        &self,
        srcCamera: dai_CameraBoardSocket,
        dstCamera: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraTranslationVector(
            self,
            srcCamera,
            dstCamera,
            useSpecTranslation,
        )
    }
    #[inline]
    pub unsafe fn getCameraRotationMatrix(
        &self,
        srcCamera: dai_CameraBoardSocket,
        dstCamera: dai_CameraBoardSocket,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraRotationMatrix(self, srcCamera, dstCamera)
    }
    #[inline]
    pub unsafe fn getBaselineDistance(
        &self,
        cam1: dai_CameraBoardSocket,
        cam2: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> f32 {
        dai_CalibrationHandler_getBaselineDistance(self, cam1, cam2, useSpecTranslation)
    }
    #[inline]
    pub unsafe fn getCameraToImuExtrinsics(
        &self,
        cameraId: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getCameraToImuExtrinsics(self, cameraId, useSpecTranslation)
    }
    #[inline]
    pub unsafe fn getImuToCameraExtrinsics(
        &self,
        cameraId: dai_CameraBoardSocket,
        useSpecTranslation: bool,
    ) -> std_vector {
        dai_CalibrationHandler_getImuToCameraExtrinsics(self, cameraId, useSpecTranslation)
    }
    #[inline]
    pub unsafe fn getStereoRightRectificationRotation(&self) -> std_vector {
        dai_CalibrationHandler_getStereoRightRectificationRotation(self)
    }
    #[inline]
    pub unsafe fn getStereoLeftRectificationRotation(&self) -> std_vector {
        dai_CalibrationHandler_getStereoLeftRectificationRotation(self)
    }
    #[inline]
    pub unsafe fn getStereoLeftCameraId(&self) -> dai_CameraBoardSocket {
        dai_CalibrationHandler_getStereoLeftCameraId(self)
    }
    #[inline]
    pub unsafe fn getStereoRightCameraId(&self) -> dai_CameraBoardSocket {
        dai_CalibrationHandler_getStereoRightCameraId(self)
    }
    #[inline]
    pub unsafe fn eepromToJsonFile(&self, destPath: dai_Path) -> bool {
        dai_CalibrationHandler_eepromToJsonFile(self, destPath)
    }
    #[inline]
    pub unsafe fn eepromToJson(&self) -> nlohmann_json {
        dai_CalibrationHandler_eepromToJson(self)
    }
    #[inline]
    pub unsafe fn setBoardInfo(&mut self, boardName: std_string, boardRev: std_string) {
        dai_CalibrationHandler_setBoardInfo(self, boardName, boardRev)
    }
    #[inline]
    pub unsafe fn setBoardInfo1(
        &mut self,
        productName: std_string,
        boardName: std_string,
        boardRev: std_string,
        boardConf: std_string,
        hardwareConf: std_string,
        batchName: std_string,
        batchTime: u64,
        boardOptions: u32,
        boardCustom: std_string,
    ) {
        dai_CalibrationHandler_setBoardInfo1(
            self,
            productName,
            boardName,
            boardRev,
            boardConf,
            hardwareConf,
            batchName,
            batchTime,
            boardOptions,
            boardCustom,
        )
    }
    #[inline]
    pub unsafe fn setBoardInfo2(
        &mut self,
        deviceName: std_string,
        productName: std_string,
        boardName: std_string,
        boardRev: std_string,
        boardConf: std_string,
        hardwareConf: std_string,
        batchName: std_string,
        batchTime: u64,
        boardOptions: u32,
        boardCustom: std_string,
    ) {
        dai_CalibrationHandler_setBoardInfo2(
            self,
            deviceName,
            productName,
            boardName,
            boardRev,
            boardConf,
            hardwareConf,
            batchName,
            batchTime,
            boardOptions,
            boardCustom,
        )
    }
    #[inline]
    pub unsafe fn setDeviceName(&mut self, deviceName: std_string) {
        dai_CalibrationHandler_setDeviceName(self, deviceName)
    }
    #[inline]
    pub unsafe fn setProductName(&mut self, productName: std_string) {
        dai_CalibrationHandler_setProductName(self, productName)
    }
    #[inline]
    pub unsafe fn setCameraIntrinsics(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        intrinsics: std_vector,
        frameSize: dai_Size2f,
    ) {
        dai_CalibrationHandler_setCameraIntrinsics(self, cameraId, intrinsics, frameSize)
    }
    #[inline]
    pub unsafe fn setCameraIntrinsics1(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        intrinsics: std_vector,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_CalibrationHandler_setCameraIntrinsics1(self, cameraId, intrinsics, width, height)
    }
    #[inline]
    pub unsafe fn setCameraIntrinsics2(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        intrinsics: std_vector,
        frameSize: std_tuple,
    ) {
        dai_CalibrationHandler_setCameraIntrinsics2(self, cameraId, intrinsics, frameSize)
    }
    #[inline]
    pub unsafe fn setDistortionCoefficients(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        distortionCoefficients: std_vector,
    ) {
        dai_CalibrationHandler_setDistortionCoefficients(self, cameraId, distortionCoefficients)
    }
    #[inline]
    pub unsafe fn setFov(&mut self, cameraId: dai_CameraBoardSocket, hfov: f32) {
        dai_CalibrationHandler_setFov(self, cameraId, hfov)
    }
    #[inline]
    pub unsafe fn setLensPosition(&mut self, cameraId: dai_CameraBoardSocket, lensPosition: u8) {
        dai_CalibrationHandler_setLensPosition(self, cameraId, lensPosition)
    }
    #[inline]
    pub unsafe fn setCameraType(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        cameraModel: dai_CameraModel,
    ) {
        dai_CalibrationHandler_setCameraType(self, cameraId, cameraModel)
    }
    #[inline]
    pub unsafe fn setCameraExtrinsics(
        &mut self,
        srcCameraId: dai_CameraBoardSocket,
        destCameraId: dai_CameraBoardSocket,
        rotationMatrix: std_vector,
        translation: std_vector,
        specTranslation: std_vector,
    ) {
        dai_CalibrationHandler_setCameraExtrinsics(
            self,
            srcCameraId,
            destCameraId,
            rotationMatrix,
            translation,
            specTranslation,
        )
    }
    #[inline]
    pub unsafe fn setImuExtrinsics(
        &mut self,
        destCameraId: dai_CameraBoardSocket,
        rotationMatrix: std_vector,
        translation: std_vector,
        specTranslation: std_vector,
    ) {
        dai_CalibrationHandler_setImuExtrinsics(
            self,
            destCameraId,
            rotationMatrix,
            translation,
            specTranslation,
        )
    }
    #[inline]
    pub unsafe fn setStereoLeft(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        rectifiedRotation: std_vector,
    ) {
        dai_CalibrationHandler_setStereoLeft(self, cameraId, rectifiedRotation)
    }
    #[inline]
    pub unsafe fn setStereoRight(
        &mut self,
        cameraId: dai_CameraBoardSocket,
        rectifiedRotation: std_vector,
    ) {
        dai_CalibrationHandler_setStereoRight(self, cameraId, rectifiedRotation)
    }
    #[inline]
    pub unsafe fn validateCameraArray(&self) -> bool {
        dai_CalibrationHandler_validateCameraArray(self)
    }
    #[inline]
    pub unsafe fn new(eepromDataPath: dai_Path) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_CalibrationHandler_CalibrationHandler(__bindgen_tmp.as_mut_ptr(), eepromDataPath);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(calibrationDataPath: dai_Path, boardConfigPath: dai_Path) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_CalibrationHandler_CalibrationHandler1(
            __bindgen_tmp.as_mut_ptr(),
            calibrationDataPath,
            boardConfigPath,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(eepromData: dai_EepromData) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_CalibrationHandler_CalibrationHandler2(__bindgen_tmp.as_mut_ptr(), eepromData);
        __bindgen_tmp.assume_init()
    }
}
pub const dai_CameraImageOrientation_AUTO: dai_CameraImageOrientation = -1;
pub const dai_CameraImageOrientation_NORMAL: dai_CameraImageOrientation = 0;
pub const dai_CameraImageOrientation_HORIZONTAL_MIRROR: dai_CameraImageOrientation = 1;
pub const dai_CameraImageOrientation_VERTICAL_FLIP: dai_CameraImageOrientation = 2;
pub const dai_CameraImageOrientation_ROTATE_180_DEG: dai_CameraImageOrientation = 3;
#[doc = " Camera sensor image orientation / pixel readout.\n This exposes direct sensor settings. 90 or 270 degrees rotation is not available.\n\n AUTO denotes that the decision will be made by device (e.g. on OAK-1/megaAI: ROTATE_180_DEG)."]
pub type dai_CameraImageOrientation = i32;
pub const dai_CameraSensorType_AUTO: dai_CameraSensorType = -1;
pub const dai_CameraSensorType_COLOR: dai_CameraSensorType = 0;
pub const dai_CameraSensorType_MONO: dai_CameraSensorType = 1;
pub const dai_CameraSensorType_TOF: dai_CameraSensorType = 2;
pub const dai_CameraSensorType_THERMAL: dai_CameraSensorType = 3;
#[doc = " Camera sensor type"]
pub type dai_CameraSensorType = i32;
#[doc = " Rect structure\n\n x,y coordinates together with width and height that define a rectangle.\n Can be either normalized [0,1] or absolute representation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Rect {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    pub normalized: bool,
    pub hasNormalized: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Rect"][::std::mem::size_of::<dai_Rect>() - 20usize];
    ["Alignment of dai_Rect"][::std::mem::align_of::<dai_Rect>() - 4usize];
    ["Offset of field: dai_Rect::x"][::std::mem::offset_of!(dai_Rect, x) - 0usize];
    ["Offset of field: dai_Rect::y"][::std::mem::offset_of!(dai_Rect, y) - 4usize];
    ["Offset of field: dai_Rect::width"][::std::mem::offset_of!(dai_Rect, width) - 8usize];
    ["Offset of field: dai_Rect::height"][::std::mem::offset_of!(dai_Rect, height) - 12usize];
    ["Offset of field: dai_Rect::normalized"]
        [::std::mem::offset_of!(dai_Rect, normalized) - 16usize];
    ["Offset of field: dai_Rect::hasNormalized"]
        [::std::mem::offset_of!(dai_Rect, hasNormalized) - 17usize];
};
#[doc = " Sensor config"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CameraSensorConfig {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub minFps: f32,
    pub maxFps: f32,
    #[doc = " Sensor active view area in physical area [pixels]"]
    pub fov: dai_Rect,
    pub type_: dai_CameraSensorType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraSensorConfig"][::std::mem::size_of::<dai_CameraSensorConfig>() - 40usize];
    ["Alignment of dai_CameraSensorConfig"]
        [::std::mem::align_of::<dai_CameraSensorConfig>() - 4usize];
    ["Offset of field: dai_CameraSensorConfig::width"]
        [::std::mem::offset_of!(dai_CameraSensorConfig, width) - 0usize];
    ["Offset of field: dai_CameraSensorConfig::height"]
        [::std::mem::offset_of!(dai_CameraSensorConfig, height) - 4usize];
    ["Offset of field: dai_CameraSensorConfig::minFps"]
        [::std::mem::offset_of!(dai_CameraSensorConfig, minFps) - 8usize];
    ["Offset of field: dai_CameraSensorConfig::maxFps"]
        [::std::mem::offset_of!(dai_CameraSensorConfig, maxFps) - 12usize];
    ["Offset of field: dai_CameraSensorConfig::fov"]
        [::std::mem::offset_of!(dai_CameraSensorConfig, fov) - 16usize];
    ["Offset of field: dai_CameraSensorConfig::type_"]
        [::std::mem::offset_of!(dai_CameraSensorConfig, type_) - 36usize];
};
#[doc = " CameraFeatures structure\n\n Characterizes detected cameras on board"]
#[repr(C)]
pub struct dai_CameraFeatures {
    #[doc = " Board socket where the camera was detected"]
    pub socket: dai_CameraBoardSocket,
    #[doc = " Camera sensor name, e.g: \"IMX378\", \"OV9282\""]
    pub sensorName: std_string,
    #[doc = " Maximum sensor resolution"]
    pub width: ::std::os::raw::c_int,
    #[doc = " Maximum sensor resolution"]
    pub height: ::std::os::raw::c_int,
    #[doc = " Default camera orientation, board dependent"]
    pub orientation: dai_CameraImageOrientation,
    #[doc = " List of supported types of processing for the given camera.\n\n For some sensors it's not possible to determine if they are color or mono\n (e.g. OV9782 and OV9282), so this could return more than one entry"]
    pub supportedTypes: std_vector,
    #[doc = "  Whether an autofocus VCM IC was detected"]
    pub hasAutofocusIC: bool,
    #[doc = "  Whether camera has auto focus capabilities, or is a fixed focus lens"]
    pub hasAutofocus: bool,
    #[doc = " Camera name or alias"]
    pub name: std_string,
    #[doc = " Additional camera names or aliases"]
    pub additionalNames: std_vector,
    #[doc = " Available sensor configs"]
    pub configs: std_vector,
    pub calibrationResolution: std_optional,
}
pub type dai_CameraFeatures_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraFeatures"][::std::mem::size_of::<dai_CameraFeatures>() - 216usize];
    ["Alignment of dai_CameraFeatures"][::std::mem::align_of::<dai_CameraFeatures>() - 8usize];
    ["Offset of field: dai_CameraFeatures::socket"]
        [::std::mem::offset_of!(dai_CameraFeatures, socket) - 0usize];
    ["Offset of field: dai_CameraFeatures::sensorName"]
        [::std::mem::offset_of!(dai_CameraFeatures, sensorName) - 8usize];
    ["Offset of field: dai_CameraFeatures::width"]
        [::std::mem::offset_of!(dai_CameraFeatures, width) - 40usize];
    ["Offset of field: dai_CameraFeatures::height"]
        [::std::mem::offset_of!(dai_CameraFeatures, height) - 44usize];
    ["Offset of field: dai_CameraFeatures::orientation"]
        [::std::mem::offset_of!(dai_CameraFeatures, orientation) - 48usize];
    ["Offset of field: dai_CameraFeatures::supportedTypes"]
        [::std::mem::offset_of!(dai_CameraFeatures, supportedTypes) - 56usize];
    ["Offset of field: dai_CameraFeatures::hasAutofocusIC"]
        [::std::mem::offset_of!(dai_CameraFeatures, hasAutofocusIC) - 80usize];
    ["Offset of field: dai_CameraFeatures::hasAutofocus"]
        [::std::mem::offset_of!(dai_CameraFeatures, hasAutofocus) - 81usize];
    ["Offset of field: dai_CameraFeatures::name"]
        [::std::mem::offset_of!(dai_CameraFeatures, name) - 88usize];
    ["Offset of field: dai_CameraFeatures::additionalNames"]
        [::std::mem::offset_of!(dai_CameraFeatures, additionalNames) - 120usize];
    ["Offset of field: dai_CameraFeatures::configs"]
        [::std::mem::offset_of!(dai_CameraFeatures, configs) - 144usize];
    ["Offset of field: dai_CameraFeatures::calibrationResolution"]
        [::std::mem::offset_of!(dai_CameraFeatures, calibrationResolution) - 168usize];
};
pub const dai_UsbSpeed_UNKNOWN: dai_UsbSpeed = 0;
pub const dai_UsbSpeed_LOW: dai_UsbSpeed = 1;
pub const dai_UsbSpeed_FULL: dai_UsbSpeed = 2;
pub const dai_UsbSpeed_HIGH: dai_UsbSpeed = 3;
pub const dai_UsbSpeed_SUPER: dai_UsbSpeed = 4;
pub const dai_UsbSpeed_SUPER_PLUS: dai_UsbSpeed = 5;
#[doc = " Get USB Speed"]
pub type dai_UsbSpeed = i32;
#[doc = " Version structure"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_Version {
    pub pimpl: spimpl_impl_ptr,
}
pub const dai_Version_PreReleaseType_ALPHA: dai_Version_PreReleaseType = 0;
pub const dai_Version_PreReleaseType_BETA: dai_Version_PreReleaseType = 1;
pub const dai_Version_PreReleaseType_RC: dai_Version_PreReleaseType = 2;
pub const dai_Version_PreReleaseType_NONE: dai_Version_PreReleaseType = 3;
pub type dai_Version_PreReleaseType = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Version_Impl {
    _unused: [u8; 0],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Version"][::std::mem::size_of::<dai_Version>() - 24usize];
    ["Alignment of dai_Version"][::std::mem::align_of::<dai_Version>() - 8usize];
    ["Offset of field: dai_Version::pimpl"][::std::mem::offset_of!(dai_Version, pimpl) - 0usize];
};
unsafe extern "C" {
    #[doc = " Convert Version to string"]
    #[link_name = "\u{1}_ZNK3dai7Version8toStringB5cxx11Ev"]
    pub fn dai_Version_toString(this: *const dai_Version) -> std_string;
}
unsafe extern "C" {
    #[doc = " Convert Version to semver (no build information) string"]
    #[link_name = "\u{1}_ZNK3dai7Version14toStringSemverB5cxx11Ev"]
    pub fn dai_Version_toStringSemver(this: *const dai_Version) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get build info"]
    #[link_name = "\u{1}_ZNK3dai7Version12getBuildInfoB5cxx11Ev"]
    pub fn dai_Version_getBuildInfo(this: *const dai_Version) -> std_string;
}
unsafe extern "C" {
    #[doc = " Construct Version from string"]
    #[link_name = "\u{1}_ZN3dai7VersionC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Version_Version(this: *mut dai_Version, v: *const std_string);
}
unsafe extern "C" {
    #[doc = " Construct Version major, minor, patch, and pre-release information"]
    #[link_name = "\u{1}_ZN3dai7VersionC1EjjjRKNS0_14PreReleaseTypeERKSt8optionalItERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Version_Version1(
        this: *mut dai_Version,
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
        patch: ::std::os::raw::c_uint,
        type_: *const dai_Version_PreReleaseType,
        preReleaseVersion: *const std_optional,
        buildInfo: *const std_string,
    );
}
impl dai_Version {
    #[inline]
    pub unsafe fn toString(&self) -> std_string {
        dai_Version_toString(self)
    }
    #[inline]
    pub unsafe fn toStringSemver(&self) -> std_string {
        dai_Version_toStringSemver(self)
    }
    #[inline]
    pub unsafe fn getBuildInfo(&self) -> std_string {
        dai_Version_getBuildInfo(self)
    }
    #[inline]
    pub unsafe fn new(v: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Version_Version(__bindgen_tmp.as_mut_ptr(), v);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
        patch: ::std::os::raw::c_uint,
        type_: *const dai_Version_PreReleaseType,
        preReleaseVersion: *const std_optional,
        buildInfo: *const std_string,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Version_Version1(
            __bindgen_tmp.as_mut_ptr(),
            major,
            minor,
            patch,
            type_,
            preReleaseVersion,
            buildInfo,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct dai_Pimpl {
    pub m: std_unique_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ProfilingData {
    pub numBytesWritten: ::std::os::raw::c_longlong,
    pub numBytesRead: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ProfilingData"][::std::mem::size_of::<dai_ProfilingData>() - 16usize];
    ["Alignment of dai_ProfilingData"][::std::mem::align_of::<dai_ProfilingData>() - 8usize];
    ["Offset of field: dai_ProfilingData::numBytesWritten"]
        [::std::mem::offset_of!(dai_ProfilingData, numBytesWritten) - 0usize];
    ["Offset of field: dai_ProfilingData::numBytesRead"]
        [::std::mem::offset_of!(dai_ProfilingData, numBytesRead) - 8usize];
};
#[doc = " Describes a connected device"]
#[repr(C)]
pub struct dai_DeviceInfo {
    pub name: std_string,
    pub deviceId: std_string,
    pub state: XLinkDeviceState_t,
    pub protocol: XLinkProtocol_t,
    pub platform: XLinkPlatform_t,
    pub status: XLinkError_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceInfo"][::std::mem::size_of::<dai_DeviceInfo>() - 80usize];
    ["Alignment of dai_DeviceInfo"][::std::mem::align_of::<dai_DeviceInfo>() - 8usize];
    ["Offset of field: dai_DeviceInfo::name"]
        [::std::mem::offset_of!(dai_DeviceInfo, name) - 0usize];
    ["Offset of field: dai_DeviceInfo::deviceId"]
        [::std::mem::offset_of!(dai_DeviceInfo, deviceId) - 32usize];
    ["Offset of field: dai_DeviceInfo::state"]
        [::std::mem::offset_of!(dai_DeviceInfo, state) - 64usize];
    ["Offset of field: dai_DeviceInfo::protocol"]
        [::std::mem::offset_of!(dai_DeviceInfo, protocol) - 68usize];
    ["Offset of field: dai_DeviceInfo::platform"]
        [::std::mem::offset_of!(dai_DeviceInfo, platform) - 72usize];
    ["Offset of field: dai_DeviceInfo::status"]
        [::std::mem::offset_of!(dai_DeviceInfo, status) - 76usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10DeviceInfo18getXLinkDeviceDescEv"]
    pub fn dai_DeviceInfo_getXLinkDeviceDesc(this: *const dai_DeviceInfo) -> deviceDesc_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10DeviceInfo7getMxIdB5cxx11Ev"]
    pub fn dai_DeviceInfo_getMxId(this: *const dai_DeviceInfo) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10DeviceInfo11getDeviceIdB5cxx11Ev"]
    pub fn dai_DeviceInfo_getDeviceId(this: *const dai_DeviceInfo) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10DeviceInfo8toStringB5cxx11Ev"]
    pub fn dai_DeviceInfo_toString(this: *const dai_DeviceInfo) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceInfoC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_18XLinkDeviceState_t15XLinkProtocol_t15XLinkPlatform_t12XLinkError_t"]
    pub fn dai_DeviceInfo_DeviceInfo(
        this: *mut dai_DeviceInfo,
        name: std_string,
        deviceId: std_string,
        state: XLinkDeviceState_t,
        protocol: XLinkProtocol_t,
        platform: XLinkPlatform_t,
        status: XLinkError_t,
    );
}
unsafe extern "C" {
    #[doc = " Creates a DeviceInfo by checking whether supplied parameter is a DeviceID or IP/USB name\n @param deviceIdOrName Either DeviceId, IP Address or USB port name"]
    #[link_name = "\u{1}_ZN3dai10DeviceInfoC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_DeviceInfo_DeviceInfo1(this: *mut dai_DeviceInfo, deviceIdOrName: std_string);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceInfoC1ERK12deviceDesc_t"]
    pub fn dai_DeviceInfo_DeviceInfo2(this: *mut dai_DeviceInfo, desc: *const deviceDesc_t);
}
impl dai_DeviceInfo {
    #[inline]
    pub unsafe fn getXLinkDeviceDesc(&self) -> deviceDesc_t {
        dai_DeviceInfo_getXLinkDeviceDesc(self)
    }
    #[inline]
    pub unsafe fn getMxId(&self) -> std_string {
        dai_DeviceInfo_getMxId(self)
    }
    #[inline]
    pub unsafe fn getDeviceId(&self) -> std_string {
        dai_DeviceInfo_getDeviceId(self)
    }
    #[inline]
    pub unsafe fn toString(&self) -> std_string {
        dai_DeviceInfo_toString(self)
    }
    #[inline]
    pub unsafe fn new(
        name: std_string,
        deviceId: std_string,
        state: XLinkDeviceState_t,
        protocol: XLinkProtocol_t,
        platform: XLinkPlatform_t,
        status: XLinkError_t,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceInfo_DeviceInfo(
            __bindgen_tmp.as_mut_ptr(),
            name,
            deviceId,
            state,
            protocol,
            platform,
            status,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(deviceIdOrName: std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceInfo_DeviceInfo1(__bindgen_tmp.as_mut_ptr(), deviceIdOrName);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(desc: *const deviceDesc_t) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceInfo_DeviceInfo2(__bindgen_tmp.as_mut_ptr(), desc);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " Represents connection between host and device over XLink protocol"]
#[repr(C)]
pub struct dai_XLinkConnection {
    pub bootDevice: bool,
    pub bootWithPath: bool,
    pub pathToMvcmd: dai_Path,
    pub mvcmd: std_vector,
    pub rebootOnDestruction: bool,
    pub deviceLinkId: ::std::os::raw::c_int,
    pub deviceInfo: dai_DeviceInfo,
    pub closedMtx: std_mutex,
    pub closed: bool,
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnection23WAIT_FOR_BOOTUP_TIMEOUTE"]
    pub static dai_XLinkConnection_WAIT_FOR_BOOTUP_TIMEOUT: std_chrono_milliseconds;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnection24WAIT_FOR_CONNECT_TIMEOUTE"]
    pub static dai_XLinkConnection_WAIT_FOR_CONNECT_TIMEOUT: std_chrono_milliseconds;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnection18POLLING_DELAY_TIMEE"]
    pub static dai_XLinkConnection_POLLING_DELAY_TIME: std_chrono_milliseconds;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_XLinkConnection"][::std::mem::size_of::<dai_XLinkConnection>() - 200usize];
    ["Alignment of dai_XLinkConnection"][::std::mem::align_of::<dai_XLinkConnection>() - 8usize];
    ["Offset of field: dai_XLinkConnection::bootDevice"]
        [::std::mem::offset_of!(dai_XLinkConnection, bootDevice) - 0usize];
    ["Offset of field: dai_XLinkConnection::bootWithPath"]
        [::std::mem::offset_of!(dai_XLinkConnection, bootWithPath) - 1usize];
    ["Offset of field: dai_XLinkConnection::pathToMvcmd"]
        [::std::mem::offset_of!(dai_XLinkConnection, pathToMvcmd) - 8usize];
    ["Offset of field: dai_XLinkConnection::mvcmd"]
        [::std::mem::offset_of!(dai_XLinkConnection, mvcmd) - 40usize];
    ["Offset of field: dai_XLinkConnection::rebootOnDestruction"]
        [::std::mem::offset_of!(dai_XLinkConnection, rebootOnDestruction) - 64usize];
    ["Offset of field: dai_XLinkConnection::deviceLinkId"]
        [::std::mem::offset_of!(dai_XLinkConnection, deviceLinkId) - 68usize];
    ["Offset of field: dai_XLinkConnection::deviceInfo"]
        [::std::mem::offset_of!(dai_XLinkConnection, deviceInfo) - 72usize];
    ["Offset of field: dai_XLinkConnection::closedMtx"]
        [::std::mem::offset_of!(dai_XLinkConnection, closedMtx) - 152usize];
    ["Offset of field: dai_XLinkConnection::closed"]
        [::std::mem::offset_of!(dai_XLinkConnection, closed) - 192usize];
};
unsafe extern "C" {
    #[doc = " Returns information of all connected devices with given state\n\n @param state State which the devices should be in\n @param skipInvalidDevices whether or not to skip over devices that cannot be successfully communicated with\n @returns Vector of connected device information"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection22getAllConnectedDevicesE18XLinkDeviceState_tbi"]
    pub fn dai_XLinkConnection_getAllConnectedDevices(
        state: XLinkDeviceState_t,
        skipInvalidDevices: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Returns information of first device with given state\n @param state State which the device should be in\n @returns Device information"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection14getFirstDeviceE18XLinkDeviceState_tb"]
    pub fn dai_XLinkConnection_getFirstDevice(
        state: XLinkDeviceState_t,
        skipInvalidDevices: bool,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Finds a device by Device ID. Example: 14442C10D13EABCE00\n @param deviceId Device ID which uniquely specifies a device\n @param state Which state should the device be in\n @param skipInvalidDevices Whether or not to skip devices that cannot be fully detected\n @returns Tuple of bool and DeviceInfo. Bool specifies if device was found. DeviceInfo specifies the found device"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection13getDeviceByIdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE18XLinkDeviceState_tb"]
    pub fn dai_XLinkConnection_getDeviceById(
        deviceId: std_string,
        state: XLinkDeviceState_t,
        skipInvalidDevice: bool,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Tries booting the given device into bootloader state\n\n @param devInfo Information of device which it should boot into bootloader state\n @returns New device information if successful"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection14bootBootloaderERKNS_10DeviceInfoE"]
    pub fn dai_XLinkConnection_bootBootloader(devInfo: *const dai_DeviceInfo) -> dai_DeviceInfo;
}
unsafe extern "C" {
    #[doc = " Get current accumulated profiling data\n\n @returns ProfilingData from the specific connection"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection22getGlobalProfilingDataEv"]
    pub fn dai_XLinkConnection_getGlobalProfilingData() -> dai_ProfilingData;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnection22setRebootOnDestructionEb"]
    pub fn dai_XLinkConnection_setRebootOnDestruction(this: *mut dai_XLinkConnection, reboot: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai15XLinkConnection22getRebootOnDestructionEv"]
    pub fn dai_XLinkConnection_getRebootOnDestruction(this: *const dai_XLinkConnection) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai15XLinkConnection9getLinkIdEv"]
    pub fn dai_XLinkConnection_getLinkId(this: *const dai_XLinkConnection)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Explicitly closes xlink connection.\n @note This function does not need to be explicitly called\n as destructor closes the connection automatically"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection5closeEv"]
    pub fn dai_XLinkConnection_close(this: *mut dai_XLinkConnection);
}
unsafe extern "C" {
    #[doc = " Is the connection already closed (or disconnected)\n\n @warning This function is thread-unsafe and may return outdated incorrect values. It is\n only meant for use in simple single-threaded code. Well written code should handle\n exceptions when calling any DepthAI apis to handle hardware events and multithreaded use."]
    #[link_name = "\u{1}_ZNK3dai15XLinkConnection8isClosedEv"]
    pub fn dai_XLinkConnection_isClosed(this: *const dai_XLinkConnection) -> bool;
}
unsafe extern "C" {
    #[doc = " Get current accumulated profiling data\n\n @returns ProfilingData from the specific connection"]
    #[link_name = "\u{1}_ZN3dai15XLinkConnection16getProfilingDataEv"]
    pub fn dai_XLinkConnection_getProfilingData(
        this: *mut dai_XLinkConnection,
    ) -> dai_ProfilingData;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnectionC1ERKNS_10DeviceInfoESt6vectorIhSaIhEE18XLinkDeviceState_t"]
    pub fn dai_XLinkConnection_XLinkConnection(
        this: *mut dai_XLinkConnection,
        deviceDesc: *const dai_DeviceInfo,
        mvcmdBinary: std_vector,
        expectedState: XLinkDeviceState_t,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnectionC1ERKNS_10DeviceInfoENS_4PathE18XLinkDeviceState_t"]
    pub fn dai_XLinkConnection_XLinkConnection1(
        this: *mut dai_XLinkConnection,
        deviceDesc: *const dai_DeviceInfo,
        pathToMvcmd: dai_Path,
        expectedState: XLinkDeviceState_t,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnectionC1ERKNS_10DeviceInfoE18XLinkDeviceState_t"]
    pub fn dai_XLinkConnection_XLinkConnection2(
        this: *mut dai_XLinkConnection,
        deviceDesc: *const dai_DeviceInfo,
        expectedState: XLinkDeviceState_t,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkConnectionD1Ev"]
    pub fn dai_XLinkConnection_XLinkConnection_destructor(this: *mut dai_XLinkConnection);
}
impl dai_XLinkConnection {
    #[inline]
    pub unsafe fn getAllConnectedDevices(
        state: XLinkDeviceState_t,
        skipInvalidDevices: bool,
        timeoutMs: ::std::os::raw::c_int,
    ) -> std_vector {
        dai_XLinkConnection_getAllConnectedDevices(state, skipInvalidDevices, timeoutMs)
    }
    #[inline]
    pub unsafe fn getFirstDevice(state: XLinkDeviceState_t, skipInvalidDevices: bool) -> std_tuple {
        dai_XLinkConnection_getFirstDevice(state, skipInvalidDevices)
    }
    #[inline]
    pub unsafe fn getDeviceById(
        deviceId: std_string,
        state: XLinkDeviceState_t,
        skipInvalidDevice: bool,
    ) -> std_tuple {
        dai_XLinkConnection_getDeviceById(deviceId, state, skipInvalidDevice)
    }
    #[inline]
    pub unsafe fn bootBootloader(devInfo: *const dai_DeviceInfo) -> dai_DeviceInfo {
        dai_XLinkConnection_bootBootloader(devInfo)
    }
    #[inline]
    pub unsafe fn getGlobalProfilingData() -> dai_ProfilingData {
        dai_XLinkConnection_getGlobalProfilingData()
    }
    #[inline]
    pub unsafe fn setRebootOnDestruction(&mut self, reboot: bool) {
        dai_XLinkConnection_setRebootOnDestruction(self, reboot)
    }
    #[inline]
    pub unsafe fn getRebootOnDestruction(&self) -> bool {
        dai_XLinkConnection_getRebootOnDestruction(self)
    }
    #[inline]
    pub unsafe fn getLinkId(&self) -> ::std::os::raw::c_int {
        dai_XLinkConnection_getLinkId(self)
    }
    #[inline]
    pub unsafe fn close(&mut self) {
        dai_XLinkConnection_close(self)
    }
    #[inline]
    pub unsafe fn isClosed(&self) -> bool {
        dai_XLinkConnection_isClosed(self)
    }
    #[inline]
    pub unsafe fn getProfilingData(&mut self) -> dai_ProfilingData {
        dai_XLinkConnection_getProfilingData(self)
    }
    #[inline]
    pub unsafe fn new(
        deviceDesc: *const dai_DeviceInfo,
        mvcmdBinary: std_vector,
        expectedState: XLinkDeviceState_t,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkConnection_XLinkConnection(
            __bindgen_tmp.as_mut_ptr(),
            deviceDesc,
            mvcmdBinary,
            expectedState,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        deviceDesc: *const dai_DeviceInfo,
        pathToMvcmd: dai_Path,
        expectedState: XLinkDeviceState_t,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkConnection_XLinkConnection1(
            __bindgen_tmp.as_mut_ptr(),
            deviceDesc,
            pathToMvcmd,
            expectedState,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        deviceDesc: *const dai_DeviceInfo,
        expectedState: XLinkDeviceState_t,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkConnection_XLinkConnection2(__bindgen_tmp.as_mut_ptr(), deviceDesc, expectedState);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_XLinkConnection_XLinkConnection_destructor(self)
    }
}
#[doc = " Represents the DepthAI Gate with the methods to interact with it."]
#[repr(C)]
pub struct dai_DeviceGate {
    pub deviceInfo: dai_DeviceInfo,
    pub stateMonitoringThread: std_thread,
    pub sessionCreated: std_atomic_bool,
    pub platform: XLinkPlatform_t,
    pub version: std_string,
    pub pimpl: dai_Pimpl,
    pub sessionId: std_string,
}
pub const dai_DeviceGate_SessionState_NOT_CREATED: dai_DeviceGate_SessionState = 0;
pub const dai_DeviceGate_SessionState_CREATED: dai_DeviceGate_SessionState = 1;
pub const dai_DeviceGate_SessionState_RUNNING: dai_DeviceGate_SessionState = 2;
pub const dai_DeviceGate_SessionState_STOPPED: dai_DeviceGate_SessionState = 3;
pub const dai_DeviceGate_SessionState_STOPPING: dai_DeviceGate_SessionState = 4;
pub const dai_DeviceGate_SessionState_CRASHED: dai_DeviceGate_SessionState = 5;
pub const dai_DeviceGate_SessionState_DESTROYED: dai_DeviceGate_SessionState = 6;
pub const dai_DeviceGate_SessionState_ERROR_STATE: dai_DeviceGate_SessionState = 7;
pub type dai_DeviceGate_SessionState = ::std::os::raw::c_int;
#[repr(C)]
pub struct dai_DeviceGate_CrashDump {
    pub data: std_vector,
    pub filename: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceGate_CrashDump"]
        [::std::mem::size_of::<dai_DeviceGate_CrashDump>() - 56usize];
    ["Alignment of dai_DeviceGate_CrashDump"]
        [::std::mem::align_of::<dai_DeviceGate_CrashDump>() - 8usize];
    ["Offset of field: dai_DeviceGate_CrashDump::data"]
        [::std::mem::offset_of!(dai_DeviceGate_CrashDump, data) - 0usize];
    ["Offset of field: dai_DeviceGate_CrashDump::filename"]
        [::std::mem::offset_of!(dai_DeviceGate_CrashDump, filename) - 24usize];
};
#[repr(C)]
pub struct dai_DeviceGate_VersionInfo {
    pub gate: std_string,
    pub os: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceGate_VersionInfo"]
        [::std::mem::size_of::<dai_DeviceGate_VersionInfo>() - 64usize];
    ["Alignment of dai_DeviceGate_VersionInfo"]
        [::std::mem::align_of::<dai_DeviceGate_VersionInfo>() - 8usize];
    ["Offset of field: dai_DeviceGate_VersionInfo::gate"]
        [::std::mem::offset_of!(dai_DeviceGate_VersionInfo, gate) - 0usize];
    ["Offset of field: dai_DeviceGate_VersionInfo::os"]
        [::std::mem::offset_of!(dai_DeviceGate_VersionInfo, os) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_DeviceGate_Impl {
    _unused: [u8; 0],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceGate"][::std::mem::size_of::<dai_DeviceGate>() - 168usize];
    ["Alignment of dai_DeviceGate"][::std::mem::align_of::<dai_DeviceGate>() - 8usize];
    ["Offset of field: dai_DeviceGate::deviceInfo"]
        [::std::mem::offset_of!(dai_DeviceGate, deviceInfo) - 0usize];
    ["Offset of field: dai_DeviceGate::stateMonitoringThread"]
        [::std::mem::offset_of!(dai_DeviceGate, stateMonitoringThread) - 80usize];
    ["Offset of field: dai_DeviceGate::sessionCreated"]
        [::std::mem::offset_of!(dai_DeviceGate, sessionCreated) - 88usize];
    ["Offset of field: dai_DeviceGate::platform"]
        [::std::mem::offset_of!(dai_DeviceGate, platform) - 92usize];
    ["Offset of field: dai_DeviceGate::version"]
        [::std::mem::offset_of!(dai_DeviceGate, version) - 96usize];
    ["Offset of field: dai_DeviceGate::pimpl"]
        [::std::mem::offset_of!(dai_DeviceGate, pimpl) - 128usize];
    ["Offset of field: dai_DeviceGate::sessionId"]
        [::std::mem::offset_of!(dai_DeviceGate, sessionId) - 136usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate6isOkayEv"]
    pub fn dai_DeviceGate_isOkay(this: *mut dai_DeviceGate) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate13createSessionEb"]
    pub fn dai_DeviceGate_createSession(this: *mut dai_DeviceGate, exclusive: bool) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate12startSessionEv"]
    pub fn dai_DeviceGate_startSession(this: *mut dai_DeviceGate) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate11stopSessionEv"]
    pub fn dai_DeviceGate_stopSession(this: *mut dai_DeviceGate) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate13deleteSessionEv"]
    pub fn dai_DeviceGate_deleteSession(this: *mut dai_DeviceGate) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate14destroySessionEv"]
    pub fn dai_DeviceGate_destroySession(this: *mut dai_DeviceGate) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate8getStateEv"]
    pub fn dai_DeviceGate_getState(this: *mut dai_DeviceGate) -> dai_DeviceGate_SessionState;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate17waitForSessionEndEv"]
    pub fn dai_DeviceGate_waitForSessionEnd(this: *mut dai_DeviceGate) -> std_optional;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate12getCrashDumpEv"]
    pub fn dai_DeviceGate_getCrashDump(this: *mut dai_DeviceGate) -> std_optional;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate10getVersionEv"]
    pub fn dai_DeviceGate_getVersion(this: *mut dai_DeviceGate) -> dai_Version;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate13getAllVersionEv"]
    pub fn dai_DeviceGate_getAllVersion(this: *mut dai_DeviceGate) -> dai_DeviceGate_VersionInfo;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGate20isBootedNonExclusiveEv"]
    pub fn dai_DeviceGate_isBootedNonExclusive(this: *mut dai_DeviceGate) -> bool;
}
unsafe extern "C" {
    #[doc = " Connects to DepthAI Gate\n @param deviceInfo Device to connect to"]
    #[link_name = "\u{1}_ZN3dai10DeviceGateC1ERKNS_10DeviceInfoE"]
    pub fn dai_DeviceGate_DeviceGate(this: *mut dai_DeviceGate, deviceInfo: *const dai_DeviceInfo);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceGateD1Ev"]
    pub fn dai_DeviceGate_DeviceGate_destructor(this: *mut dai_DeviceGate);
}
impl dai_DeviceGate {
    #[inline]
    pub unsafe fn isOkay(&mut self) -> bool {
        dai_DeviceGate_isOkay(self)
    }
    #[inline]
    pub unsafe fn createSession(&mut self, exclusive: bool) -> bool {
        dai_DeviceGate_createSession(self, exclusive)
    }
    #[inline]
    pub unsafe fn startSession(&mut self) -> bool {
        dai_DeviceGate_startSession(self)
    }
    #[inline]
    pub unsafe fn stopSession(&mut self) -> bool {
        dai_DeviceGate_stopSession(self)
    }
    #[inline]
    pub unsafe fn deleteSession(&mut self) -> bool {
        dai_DeviceGate_deleteSession(self)
    }
    #[inline]
    pub unsafe fn destroySession(&mut self) -> bool {
        dai_DeviceGate_destroySession(self)
    }
    #[inline]
    pub unsafe fn getState(&mut self) -> dai_DeviceGate_SessionState {
        dai_DeviceGate_getState(self)
    }
    #[inline]
    pub unsafe fn waitForSessionEnd(&mut self) -> std_optional {
        dai_DeviceGate_waitForSessionEnd(self)
    }
    #[inline]
    pub unsafe fn getCrashDump(&mut self) -> std_optional {
        dai_DeviceGate_getCrashDump(self)
    }
    #[inline]
    pub unsafe fn getVersion(&mut self) -> dai_Version {
        dai_DeviceGate_getVersion(self)
    }
    #[inline]
    pub unsafe fn getAllVersion(&mut self) -> dai_DeviceGate_VersionInfo {
        dai_DeviceGate_getAllVersion(self)
    }
    #[inline]
    pub unsafe fn isBootedNonExclusive(&mut self) -> bool {
        dai_DeviceGate_isBootedNonExclusive(self)
    }
    #[inline]
    pub unsafe fn new(deviceInfo: *const dai_DeviceInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceGate_DeviceGate(__bindgen_tmp.as_mut_ptr(), deviceInfo);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_DeviceGate_DeviceGate_destructor(self)
    }
}
#[doc = " TensorInfo structure"]
#[repr(C)]
pub struct dai_TensorInfo {
    pub order: dai_TensorInfo_StorageOrder,
    pub dataType: dai_TensorInfo_DataType,
    pub numDimensions: ::std::os::raw::c_uint,
    pub dims: std_vector,
    pub strides: std_vector,
    pub name: std_string,
    pub offset: ::std::os::raw::c_uint,
    pub quantization: bool,
    pub qpScale: f32,
    pub qpZp: f32,
}
pub const dai_TensorInfo_StorageOrder_NHWC: dai_TensorInfo_StorageOrder = 16915;
pub const dai_TensorInfo_StorageOrder_NHCW: dai_TensorInfo_StorageOrder = 16945;
pub const dai_TensorInfo_StorageOrder_NCHW: dai_TensorInfo_StorageOrder = 17185;
pub const dai_TensorInfo_StorageOrder_HWC: dai_TensorInfo_StorageOrder = 531;
pub const dai_TensorInfo_StorageOrder_CHW: dai_TensorInfo_StorageOrder = 801;
pub const dai_TensorInfo_StorageOrder_WHC: dai_TensorInfo_StorageOrder = 291;
pub const dai_TensorInfo_StorageOrder_HCW: dai_TensorInfo_StorageOrder = 561;
pub const dai_TensorInfo_StorageOrder_WCH: dai_TensorInfo_StorageOrder = 306;
pub const dai_TensorInfo_StorageOrder_CWH: dai_TensorInfo_StorageOrder = 786;
pub const dai_TensorInfo_StorageOrder_NC: dai_TensorInfo_StorageOrder = 67;
pub const dai_TensorInfo_StorageOrder_CN: dai_TensorInfo_StorageOrder = 52;
pub const dai_TensorInfo_StorageOrder_C: dai_TensorInfo_StorageOrder = 3;
pub const dai_TensorInfo_StorageOrder_H: dai_TensorInfo_StorageOrder = 2;
pub const dai_TensorInfo_StorageOrder_W: dai_TensorInfo_StorageOrder = 1;
pub type dai_TensorInfo_StorageOrder = ::std::os::raw::c_int;
pub const dai_TensorInfo_DataType_FP16: dai_TensorInfo_DataType = 0;
pub const dai_TensorInfo_DataType_U8F: dai_TensorInfo_DataType = 1;
pub const dai_TensorInfo_DataType_INT: dai_TensorInfo_DataType = 2;
pub const dai_TensorInfo_DataType_FP32: dai_TensorInfo_DataType = 3;
pub const dai_TensorInfo_DataType_I8: dai_TensorInfo_DataType = 4;
pub const dai_TensorInfo_DataType_FP64: dai_TensorInfo_DataType = 5;
pub type dai_TensorInfo_DataType = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_TensorInfo"][::std::mem::size_of::<dai_TensorInfo>() - 112usize];
    ["Alignment of dai_TensorInfo"][::std::mem::align_of::<dai_TensorInfo>() - 8usize];
    ["Offset of field: dai_TensorInfo::order"]
        [::std::mem::offset_of!(dai_TensorInfo, order) - 0usize];
    ["Offset of field: dai_TensorInfo::dataType"]
        [::std::mem::offset_of!(dai_TensorInfo, dataType) - 4usize];
    ["Offset of field: dai_TensorInfo::numDimensions"]
        [::std::mem::offset_of!(dai_TensorInfo, numDimensions) - 8usize];
    ["Offset of field: dai_TensorInfo::dims"]
        [::std::mem::offset_of!(dai_TensorInfo, dims) - 16usize];
    ["Offset of field: dai_TensorInfo::strides"]
        [::std::mem::offset_of!(dai_TensorInfo, strides) - 40usize];
    ["Offset of field: dai_TensorInfo::name"]
        [::std::mem::offset_of!(dai_TensorInfo, name) - 64usize];
    ["Offset of field: dai_TensorInfo::offset"]
        [::std::mem::offset_of!(dai_TensorInfo, offset) - 96usize];
    ["Offset of field: dai_TensorInfo::quantization"]
        [::std::mem::offset_of!(dai_TensorInfo, quantization) - 100usize];
    ["Offset of field: dai_TensorInfo::qpScale"]
        [::std::mem::offset_of!(dai_TensorInfo, qpScale) - 104usize];
    ["Offset of field: dai_TensorInfo::qpZp"]
        [::std::mem::offset_of!(dai_TensorInfo, qpZp) - 108usize];
};
#[doc = " Support for basic OpenVINO related actions like version identification of neural network blobs,..."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_OpenVINO {
    pub _address: u8,
}
pub const dai_OpenVINO_Version_VERSION_2020_3: dai_OpenVINO_Version = 0;
pub const dai_OpenVINO_Version_VERSION_2020_4: dai_OpenVINO_Version = 1;
pub const dai_OpenVINO_Version_VERSION_2021_1: dai_OpenVINO_Version = 2;
pub const dai_OpenVINO_Version_VERSION_2021_2: dai_OpenVINO_Version = 3;
pub const dai_OpenVINO_Version_VERSION_2021_3: dai_OpenVINO_Version = 4;
pub const dai_OpenVINO_Version_VERSION_2021_4: dai_OpenVINO_Version = 5;
pub const dai_OpenVINO_Version_VERSION_2022_1: dai_OpenVINO_Version = 6;
pub const dai_OpenVINO_Version_VERSION_UNIVERSAL: dai_OpenVINO_Version = 7;
#[doc = " OpenVINO Version supported version information"]
pub type dai_OpenVINO_Version = ::std::os::raw::c_uint;
pub const dai_OpenVINO_Device_VPU: dai_OpenVINO_Device = 0;
pub const dai_OpenVINO_Device_VPUX: dai_OpenVINO_Device = 1;
pub type dai_OpenVINO_Device = ::std::os::raw::c_int;
#[doc = " OpenVINO Blob"]
#[repr(C)]
pub struct dai_OpenVINO_Blob {
    #[doc = " OpenVINO version"]
    pub version: dai_OpenVINO_Version,
    #[doc = " Device for which the blob is compiled for"]
    pub device: dai_OpenVINO_Device,
    #[doc = " Map of input names to additional information"]
    pub networkInputs: std_unordered_map,
    #[doc = " Map of output names to additional information"]
    pub networkOutputs: std_unordered_map,
    #[doc = " Number of network stages"]
    pub stageCount: u32,
    #[doc = " Number of shaves the blob was compiled for"]
    pub numShaves: u32,
    #[doc = " Number of CMX slices the blob was compiled for"]
    pub numSlices: u32,
    #[doc = " Blob data"]
    pub data: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_OpenVINO_Blob"][::std::mem::size_of::<dai_OpenVINO_Blob>() - 160usize];
    ["Alignment of dai_OpenVINO_Blob"][::std::mem::align_of::<dai_OpenVINO_Blob>() - 8usize];
    ["Offset of field: dai_OpenVINO_Blob::version"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, version) - 0usize];
    ["Offset of field: dai_OpenVINO_Blob::device"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, device) - 4usize];
    ["Offset of field: dai_OpenVINO_Blob::networkInputs"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, networkInputs) - 8usize];
    ["Offset of field: dai_OpenVINO_Blob::networkOutputs"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, networkOutputs) - 64usize];
    ["Offset of field: dai_OpenVINO_Blob::stageCount"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, stageCount) - 120usize];
    ["Offset of field: dai_OpenVINO_Blob::numShaves"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, numShaves) - 124usize];
    ["Offset of field: dai_OpenVINO_Blob::numSlices"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, numSlices) - 128usize];
    ["Offset of field: dai_OpenVINO_Blob::data"]
        [::std::mem::offset_of!(dai_OpenVINO_Blob, data) - 136usize];
};
unsafe extern "C" {
    #[doc = " @brief Construct a new Blob from data in memory\n\n @param data In memory blob"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO4BlobC1ESt6vectorIhSaIhEE"]
    pub fn dai_OpenVINO_Blob_Blob(this: *mut dai_OpenVINO_Blob, data: std_vector);
}
unsafe extern "C" {
    #[doc = " @brief Construct a new Blob by loading from a filesystem path\n\n @param path Filesystem path to the blob"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO4BlobC1ERKNS_4PathE"]
    pub fn dai_OpenVINO_Blob_Blob1(this: *mut dai_OpenVINO_Blob, path: *const dai_Path);
}
impl dai_OpenVINO_Blob {
    #[inline]
    pub unsafe fn new(data: std_vector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_OpenVINO_Blob_Blob(__bindgen_tmp.as_mut_ptr(), data);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(path: *const dai_Path) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_OpenVINO_Blob_Blob1(__bindgen_tmp.as_mut_ptr(), path);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " @brief A superblob is an efficient way of storing generated blobs for all different number of shaves."]
#[repr(C)]
pub struct dai_OpenVINO_SuperBlob {
    pub header: dai_OpenVINO_SuperBlob_SuperBlobHeader,
    pub data: std_vector,
}
#[repr(C)]
pub struct dai_OpenVINO_SuperBlob_SuperBlobHeader {
    pub blobSize: i64,
    pub patchSizes: std_vector,
}
pub const dai_OpenVINO_SuperBlob_SuperBlobHeader_HEADER_SIZE: usize = 136;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_OpenVINO_SuperBlob_SuperBlobHeader"]
        [::std::mem::size_of::<dai_OpenVINO_SuperBlob_SuperBlobHeader>() - 32usize];
    ["Alignment of dai_OpenVINO_SuperBlob_SuperBlobHeader"]
        [::std::mem::align_of::<dai_OpenVINO_SuperBlob_SuperBlobHeader>() - 8usize];
    ["Offset of field: dai_OpenVINO_SuperBlob_SuperBlobHeader::blobSize"]
        [::std::mem::offset_of!(dai_OpenVINO_SuperBlob_SuperBlobHeader, blobSize) - 0usize];
    ["Offset of field: dai_OpenVINO_SuperBlob_SuperBlobHeader::patchSizes"]
        [::std::mem::offset_of!(dai_OpenVINO_SuperBlob_SuperBlobHeader, patchSizes) - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8OpenVINO9SuperBlob15SuperBlobHeader8fromDataERKSt6vectorIhSaIhEE"]
    pub fn dai_OpenVINO_SuperBlob_SuperBlobHeader_fromData(
        data: *const std_vector,
    ) -> dai_OpenVINO_SuperBlob_SuperBlobHeader;
}
impl dai_OpenVINO_SuperBlob_SuperBlobHeader {
    #[inline]
    pub unsafe fn fromData(data: *const std_vector) -> dai_OpenVINO_SuperBlob_SuperBlobHeader {
        dai_OpenVINO_SuperBlob_SuperBlobHeader_fromData(data)
    }
}
#[doc = " Number of patches in a superblob"]
pub const dai_OpenVINO_SuperBlob_NUMBER_OF_PATCHES: usize = 16;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_OpenVINO_SuperBlob"][::std::mem::size_of::<dai_OpenVINO_SuperBlob>() - 56usize];
    ["Alignment of dai_OpenVINO_SuperBlob"]
        [::std::mem::align_of::<dai_OpenVINO_SuperBlob>() - 8usize];
    ["Offset of field: dai_OpenVINO_SuperBlob::header"]
        [::std::mem::offset_of!(dai_OpenVINO_SuperBlob, header) - 0usize];
    ["Offset of field: dai_OpenVINO_SuperBlob::data"]
        [::std::mem::offset_of!(dai_OpenVINO_SuperBlob, data) - 32usize];
};
unsafe extern "C" {
    #[doc = " @brief Generate a blob with a specific number of shaves\n\n @param numShaves: Number of shaves to generate the blob for. Must be between 1 and NUMBER_OF_PATCHES.\n @return dai::OpenVINO::Blob: Blob compiled for the specified number of shaves"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO9SuperBlob20getBlobWithNumShavesEi"]
    pub fn dai_OpenVINO_SuperBlob_getBlobWithNumShaves(
        this: *mut dai_OpenVINO_SuperBlob,
        numShaves: ::std::os::raw::c_int,
    ) -> dai_OpenVINO_Blob;
}
unsafe extern "C" {
    #[doc = " @brief Construct a new SuperBlob object\n\n @param data: In memory superblob data"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO9SuperBlobC1ESt6vectorIhSaIhEE"]
    pub fn dai_OpenVINO_SuperBlob_SuperBlob(this: *mut dai_OpenVINO_SuperBlob, data: std_vector);
}
unsafe extern "C" {
    #[doc = " @brief Construct a new SuperBlob object\n\n @param pathToSuperBlobFile: Path to the superblob file (.superblob suffix)"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO9SuperBlobC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_OpenVINO_SuperBlob_SuperBlob1(
        this: *mut dai_OpenVINO_SuperBlob,
        pathToSuperBlobFile: *const std_string,
    );
}
impl dai_OpenVINO_SuperBlob {
    #[inline]
    pub unsafe fn getBlobWithNumShaves(
        &mut self,
        numShaves: ::std::os::raw::c_int,
    ) -> dai_OpenVINO_Blob {
        dai_OpenVINO_SuperBlob_getBlobWithNumShaves(self, numShaves)
    }
    #[inline]
    pub unsafe fn new(data: std_vector) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_OpenVINO_SuperBlob_SuperBlob(__bindgen_tmp.as_mut_ptr(), data);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(pathToSuperBlobFile: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_OpenVINO_SuperBlob_SuperBlob1(__bindgen_tmp.as_mut_ptr(), pathToSuperBlobFile);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[doc = " Main OpenVINO version"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO15DEFAULT_VERSIONE"]
    pub static dai_OpenVINO_DEFAULT_VERSION: dai_OpenVINO_Version;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8OpenVINO33blobVersionToOpenvinoGuessMappingE"]
    pub static dai_OpenVINO_blobVersionToOpenvinoGuessMapping: std_map;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8OpenVINO28blobVersionToOpenvinoMappingE"]
    pub static dai_OpenVINO_blobVersionToOpenvinoMapping: std_map;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_OpenVINO"][::std::mem::size_of::<dai_OpenVINO>() - 1usize];
    ["Alignment of dai_OpenVINO"][::std::mem::align_of::<dai_OpenVINO>() - 1usize];
};
unsafe extern "C" {
    #[doc = " @returns Supported versions"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO11getVersionsEv"]
    pub fn dai_OpenVINO_getVersions() -> std_vector;
}
unsafe extern "C" {
    #[doc = " Returns string representation of a given version\n @param version OpenVINO version\n @returns Name of a given version"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO14getVersionNameB5cxx11ENS0_7VersionE"]
    pub fn dai_OpenVINO_getVersionName(version: dai_OpenVINO_Version) -> std_string;
}
unsafe extern "C" {
    #[doc = " Creates Version from string representation.\n Throws if not possible.\n @param versionString Version as string\n @returns Version object if successful"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO16parseVersionNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_OpenVINO_parseVersionName(versionString: *const std_string) -> dai_OpenVINO_Version;
}
unsafe extern "C" {
    #[doc = " Returns a list of potentially supported versions for a specified blob major and minor versions.\n @param majorVersion Major version from OpenVINO blob\n @param minorVersion Minor version from OpenVINO blob\n @returns Vector of potentially supported versions"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO24getBlobSupportedVersionsEjj"]
    pub fn dai_OpenVINO_getBlobSupportedVersions(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Returns latest potentially supported version by a given blob version.\n @param majorVersion Major version from OpenVINO blob\n @param minorVersion Minor version from OpenVINO blob\n @returns Latest potentially supported version"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO29getBlobLatestSupportedVersionEjj"]
    pub fn dai_OpenVINO_getBlobLatestSupportedVersion(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
    ) -> dai_OpenVINO_Version;
}
unsafe extern "C" {
    #[doc = " Returns OpenVINO version of a given blob minor/major revision.\n @param majorVersion Major version from OpenVINO blob\n @param minorVersion Minor version from OpenVINO blob\n @returns Latest potentially supported version"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO14getBlobVersionEjj"]
    pub fn dai_OpenVINO_getBlobVersion(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
    ) -> dai_OpenVINO_Version;
}
unsafe extern "C" {
    #[doc = " Checks whether two blob versions are compatible"]
    #[link_name = "\u{1}_ZN3dai8OpenVINO25areVersionsBlobCompatibleENS0_7VersionES1_"]
    pub fn dai_OpenVINO_areVersionsBlobCompatible(
        v1: dai_OpenVINO_Version,
        v2: dai_OpenVINO_Version,
    ) -> bool;
}
impl dai_OpenVINO {
    #[inline]
    pub unsafe fn getVersions() -> std_vector {
        dai_OpenVINO_getVersions()
    }
    #[inline]
    pub unsafe fn getVersionName(version: dai_OpenVINO_Version) -> std_string {
        dai_OpenVINO_getVersionName(version)
    }
    #[inline]
    pub unsafe fn parseVersionName(versionString: *const std_string) -> dai_OpenVINO_Version {
        dai_OpenVINO_parseVersionName(versionString)
    }
    #[inline]
    pub unsafe fn getBlobSupportedVersions(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
    ) -> std_vector {
        dai_OpenVINO_getBlobSupportedVersions(majorVersion, minorVersion)
    }
    #[inline]
    pub unsafe fn getBlobLatestSupportedVersion(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
    ) -> dai_OpenVINO_Version {
        dai_OpenVINO_getBlobLatestSupportedVersion(majorVersion, minorVersion)
    }
    #[inline]
    pub unsafe fn getBlobVersion(
        majorVersion: ::std::os::raw::c_uint,
        minorVersion: ::std::os::raw::c_uint,
    ) -> dai_OpenVINO_Version {
        dai_OpenVINO_getBlobVersion(majorVersion, minorVersion)
    }
    #[inline]
    pub unsafe fn areVersionsBlobCompatible(
        v1: dai_OpenVINO_Version,
        v2: dai_OpenVINO_Version,
    ) -> bool {
        dai_OpenVINO_areVersionsBlobCompatible(v1, v2)
    }
}
#[doc = " Specifies a connection between nodes IOs"]
#[repr(C)]
pub struct dai_NodeConnectionSchema {
    pub node1Id: i64,
    pub node1OutputGroup: std_string,
    pub node1Output: std_string,
    pub node2Id: i64,
    pub node2InputGroup: std_string,
    pub node2Input: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NodeConnectionSchema"]
        [::std::mem::size_of::<dai_NodeConnectionSchema>() - 144usize];
    ["Alignment of dai_NodeConnectionSchema"]
        [::std::mem::align_of::<dai_NodeConnectionSchema>() - 8usize];
    ["Offset of field: dai_NodeConnectionSchema::node1Id"]
        [::std::mem::offset_of!(dai_NodeConnectionSchema, node1Id) - 0usize];
    ["Offset of field: dai_NodeConnectionSchema::node1OutputGroup"]
        [::std::mem::offset_of!(dai_NodeConnectionSchema, node1OutputGroup) - 8usize];
    ["Offset of field: dai_NodeConnectionSchema::node1Output"]
        [::std::mem::offset_of!(dai_NodeConnectionSchema, node1Output) - 40usize];
    ["Offset of field: dai_NodeConnectionSchema::node2Id"]
        [::std::mem::offset_of!(dai_NodeConnectionSchema, node2Id) - 72usize];
    ["Offset of field: dai_NodeConnectionSchema::node2InputGroup"]
        [::std::mem::offset_of!(dai_NodeConnectionSchema, node2InputGroup) - 80usize];
    ["Offset of field: dai_NodeConnectionSchema::node2Input"]
        [::std::mem::offset_of!(dai_NodeConnectionSchema, node2Input) - 112usize];
};
#[doc = " NodeIo informations such as name, type, ..."]
#[repr(C)]
pub struct dai_NodeIoInfo {
    pub group: std_string,
    pub name: std_string,
    pub type_: dai_NodeIoInfo_Type,
    pub blocking: bool,
    pub queueSize: ::std::os::raw::c_int,
    pub waitForMessage: bool,
    pub id: u32,
}
pub const dai_NodeIoInfo_Type_MSender: dai_NodeIoInfo_Type = 0;
pub const dai_NodeIoInfo_Type_SSender: dai_NodeIoInfo_Type = 1;
pub const dai_NodeIoInfo_Type_MReceiver: dai_NodeIoInfo_Type = 2;
pub const dai_NodeIoInfo_Type_SReceiver: dai_NodeIoInfo_Type = 3;
pub type dai_NodeIoInfo_Type = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NodeIoInfo"][::std::mem::size_of::<dai_NodeIoInfo>() - 88usize];
    ["Alignment of dai_NodeIoInfo"][::std::mem::align_of::<dai_NodeIoInfo>() - 8usize];
    ["Offset of field: dai_NodeIoInfo::group"]
        [::std::mem::offset_of!(dai_NodeIoInfo, group) - 0usize];
    ["Offset of field: dai_NodeIoInfo::name"]
        [::std::mem::offset_of!(dai_NodeIoInfo, name) - 32usize];
    ["Offset of field: dai_NodeIoInfo::type_"]
        [::std::mem::offset_of!(dai_NodeIoInfo, type_) - 64usize];
    ["Offset of field: dai_NodeIoInfo::blocking"]
        [::std::mem::offset_of!(dai_NodeIoInfo, blocking) - 68usize];
    ["Offset of field: dai_NodeIoInfo::queueSize"]
        [::std::mem::offset_of!(dai_NodeIoInfo, queueSize) - 72usize];
    ["Offset of field: dai_NodeIoInfo::waitForMessage"]
        [::std::mem::offset_of!(dai_NodeIoInfo, waitForMessage) - 76usize];
    ["Offset of field: dai_NodeIoInfo::id"][::std::mem::offset_of!(dai_NodeIoInfo, id) - 80usize];
};
pub const dai_LogLevel_TRACE: dai_LogLevel = 0;
pub const dai_LogLevel_DEBUG: dai_LogLevel = 1;
pub const dai_LogLevel_INFO: dai_LogLevel = 2;
pub const dai_LogLevel_WARN: dai_LogLevel = 3;
pub const dai_LogLevel_ERR: dai_LogLevel = 4;
pub const dai_LogLevel_CRITICAL: dai_LogLevel = 5;
pub const dai_LogLevel_OFF: dai_LogLevel = 6;
pub type dai_LogLevel = ::std::os::raw::c_int;
#[doc = " NodeObj information structure"]
#[repr(C)]
pub struct dai_NodeObjInfo {
    pub id: i64,
    pub parentId: i64,
    pub name: std_string,
    pub alias: std_string,
    pub properties: std_vector,
    pub logLevel: dai_LogLevel,
    pub ioInfo: std_unordered_map,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_NodeObjInfo_IoInfoKey {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NodeObjInfo_IoInfoKey"]
        [::std::mem::size_of::<dai_NodeObjInfo_IoInfoKey>() - 1usize];
    ["Alignment of dai_NodeObjInfo_IoInfoKey"]
        [::std::mem::align_of::<dai_NodeObjInfo_IoInfoKey>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NodeObjInfo"][::std::mem::size_of::<dai_NodeObjInfo>() - 168usize];
    ["Alignment of dai_NodeObjInfo"][::std::mem::align_of::<dai_NodeObjInfo>() - 8usize];
    ["Offset of field: dai_NodeObjInfo::id"][::std::mem::offset_of!(dai_NodeObjInfo, id) - 0usize];
    ["Offset of field: dai_NodeObjInfo::parentId"]
        [::std::mem::offset_of!(dai_NodeObjInfo, parentId) - 8usize];
    ["Offset of field: dai_NodeObjInfo::name"]
        [::std::mem::offset_of!(dai_NodeObjInfo, name) - 16usize];
    ["Offset of field: dai_NodeObjInfo::alias"]
        [::std::mem::offset_of!(dai_NodeObjInfo, alias) - 48usize];
    ["Offset of field: dai_NodeObjInfo::properties"]
        [::std::mem::offset_of!(dai_NodeObjInfo, properties) - 80usize];
    ["Offset of field: dai_NodeObjInfo::logLevel"]
        [::std::mem::offset_of!(dai_NodeObjInfo, logLevel) - 104usize];
    ["Offset of field: dai_NodeObjInfo::ioInfo"]
        [::std::mem::offset_of!(dai_NodeObjInfo, ioInfo) - 112usize];
};
#[repr(C)]
pub struct dai_Properties__bindgen_vtable(::std::os::raw::c_void);
#[doc = " Base Properties structure"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_Properties {
    pub vtable_: *const dai_Properties__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Properties"][::std::mem::size_of::<dai_Properties>() - 8usize];
    ["Alignment of dai_Properties"][::std::mem::align_of::<dai_Properties>() - 8usize];
};
#[repr(C)]
pub struct dai_PropertiesSerializable__bindgen_vtable(::std::os::raw::c_void);
#[doc = " Serializable properties"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_PropertiesSerializable<Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Base>>,
    pub vtable_: *const dai_PropertiesSerializable__bindgen_vtable,
    pub _base: Base,
}
#[doc = " Specify properties which apply for whole pipeline"]
#[repr(C)]
pub struct dai_GlobalProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Set frequency of Leon OS - Increasing can improve performance, at the cost of higher power\n draw"]
    pub leonCssFrequencyHz: f64,
    #[doc = " Set frequency of Leon RT - Increasing can improve performance, at the cost of higher power\n draw"]
    pub leonMssFrequencyHz: f64,
    pub pipelineName: std_optional,
    pub pipelineVersion: std_optional,
    #[doc = " Calibration data sent through pipeline"]
    pub calibData: std_optional,
    #[doc = " Camera tuning blob size in bytes"]
    pub cameraTuningBlobSize: std_optional,
    #[doc = " Uri which points to camera tuning blob"]
    pub cameraTuningBlobUri: std_string,
    #[doc = " Chunk size for splitting device-sent XLink packets, in bytes. A larger value could\n increase performance, with 0 disabling chunking. A negative value won't modify the\n device defaults - configured per protocol, currently 64*1024 for both USB and Ethernet."]
    pub xlinkChunkSize: i32,
    #[doc = " SIPP (Signal Image Processing Pipeline) internal memory pool.\n SIPP is a framework used to schedule HW filters, e.g. ISP, Warp, Median filter etc.\n Changing the size of this pool is meant for advanced use cases, pushing the limits of the HW.\n By default memory is allocated in high speed CMX memory. Setting to 0 will allocate in DDR 256 kilobytes.\n Units are bytes."]
    pub sippBufferSize: u32,
    #[doc = " SIPP (Signal Image Processing Pipeline) internal DMA memory pool.\n SIPP is a framework used to schedule HW filters, e.g. ISP, Warp, Median filter etc.\n Changing the size of this pool is meant for advanced use cases, pushing the limits of the HW.\n Memory is allocated in high speed CMX memory\n Units are bytes."]
    pub sippDmaBufferSize: u32,
}
pub const dai_GlobalProperties_SIPP_BUFFER_DEFAULT_SIZE: u32 = 18432;
pub const dai_GlobalProperties_SIPP_DMA_BUFFER_DEFAULT_SIZE: u32 = 16384;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_GlobalProperties"][::std::mem::size_of::<dai_GlobalProperties>() - 704usize];
    ["Alignment of dai_GlobalProperties"][::std::mem::align_of::<dai_GlobalProperties>() - 8usize];
    ["Offset of field: dai_GlobalProperties::leonCssFrequencyHz"]
        [::std::mem::offset_of!(dai_GlobalProperties, leonCssFrequencyHz) - 8usize];
    ["Offset of field: dai_GlobalProperties::leonMssFrequencyHz"]
        [::std::mem::offset_of!(dai_GlobalProperties, leonMssFrequencyHz) - 16usize];
    ["Offset of field: dai_GlobalProperties::pipelineName"]
        [::std::mem::offset_of!(dai_GlobalProperties, pipelineName) - 24usize];
    ["Offset of field: dai_GlobalProperties::pipelineVersion"]
        [::std::mem::offset_of!(dai_GlobalProperties, pipelineVersion) - 64usize];
    ["Offset of field: dai_GlobalProperties::calibData"]
        [::std::mem::offset_of!(dai_GlobalProperties, calibData) - 104usize];
    ["Offset of field: dai_GlobalProperties::cameraTuningBlobSize"]
        [::std::mem::offset_of!(dai_GlobalProperties, cameraTuningBlobSize) - 648usize];
    ["Offset of field: dai_GlobalProperties::cameraTuningBlobUri"]
        [::std::mem::offset_of!(dai_GlobalProperties, cameraTuningBlobUri) - 656usize];
    ["Offset of field: dai_GlobalProperties::xlinkChunkSize"]
        [::std::mem::offset_of!(dai_GlobalProperties, xlinkChunkSize) - 688usize];
    ["Offset of field: dai_GlobalProperties::sippBufferSize"]
        [::std::mem::offset_of!(dai_GlobalProperties, sippBufferSize) - 692usize];
    ["Offset of field: dai_GlobalProperties::sippDmaBufferSize"]
        [::std::mem::offset_of!(dai_GlobalProperties, sippDmaBufferSize) - 696usize];
};
#[doc = " Specifies whole pipeline, nodes, properties and connections between nodes IOs"]
#[repr(C)]
pub struct dai_PipelineSchema {
    pub connections: std_vector,
    pub globalProperties: dai_GlobalProperties,
    pub nodes: std_unordered_map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_PipelineSchema"][::std::mem::size_of::<dai_PipelineSchema>() - 784usize];
    ["Alignment of dai_PipelineSchema"][::std::mem::align_of::<dai_PipelineSchema>() - 8usize];
    ["Offset of field: dai_PipelineSchema::connections"]
        [::std::mem::offset_of!(dai_PipelineSchema, connections) - 0usize];
    ["Offset of field: dai_PipelineSchema::globalProperties"]
        [::std::mem::offset_of!(dai_PipelineSchema, globalProperties) - 24usize];
    ["Offset of field: dai_PipelineSchema::nodes"]
        [::std::mem::offset_of!(dai_PipelineSchema, nodes) - 728usize];
};
pub use self::std_byte as dai_byte;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14dynamic_extentE"]
    pub static dai_dynamic_extent: usize;
}
pub type dai_detail_uncvref_t = std_remove_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_detail_is_span {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_detail_is_std_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_detail_has_size_and_data {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_detail_is_container {
    pub _address: u8,
}
pub type dai_detail_remove_pointer_t = std_remove_pointer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_detail_is_container_element_type_compatible {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_detail_is_complete {
    pub _base: std_false_type,
}
pub type dai_span_storage_type = u8;
pub type dai_span_element_type<ElementType> = ElementType;
pub type dai_span_value_type = std_remove_cv;
pub type dai_span_size_type = usize;
pub type dai_span_difference_type = isize;
pub type dai_span_pointer<ElementType> = *mut dai_span_element_type<ElementType>;
pub type dai_span_const_pointer<ElementType> = *const dai_span_element_type<ElementType>;
pub type dai_span_reference<ElementType> = *mut dai_span_element_type<ElementType>;
pub type dai_span_const_reference<ElementType> = *const dai_span_element_type<ElementType>;
pub type dai_span_iterator<ElementType> = dai_span_pointer<ElementType>;
pub type dai_span_reverse_iterator<ElementType> =
    std_reverse_iterator<dai_span_iterator<ElementType>>;
pub type dai_span_subspan_return_t = u8;
#[repr(C)]
pub struct dai_Memory__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_Memory {
    pub vtable_: *const dai_Memory__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Memory"][::std::mem::size_of::<dai_Memory>() - 8usize];
    ["Alignment of dai_Memory"][::std::mem::align_of::<dai_Memory>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_StreamPacketDesc {
    pub _base: streamPacketDesc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StreamPacketDesc"][::std::mem::size_of::<dai_StreamPacketDesc>() - 48usize];
    ["Alignment of dai_StreamPacketDesc"][::std::mem::align_of::<dai_StreamPacketDesc>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16StreamPacketDescC1EOS0_"]
    pub fn dai_StreamPacketDesc_StreamPacketDesc(
        this: *mut dai_StreamPacketDesc,
        other: *mut dai_StreamPacketDesc,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16StreamPacketDescD1Ev"]
    pub fn dai_StreamPacketDesc_StreamPacketDesc_destructor(this: *mut dai_StreamPacketDesc);
}
impl dai_StreamPacketDesc {
    #[inline]
    pub unsafe fn new(other: *mut dai_StreamPacketDesc) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_StreamPacketDesc_StreamPacketDesc(__bindgen_tmp.as_mut_ptr(), other);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_StreamPacketDesc_StreamPacketDesc_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct dai_StreamPacketMemory {
    pub _base: dai_StreamPacketDesc,
    pub _base_1: dai_Memory,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StreamPacketMemory"][::std::mem::size_of::<dai_StreamPacketMemory>() - 64usize];
    ["Alignment of dai_StreamPacketMemory"]
        [::std::mem::align_of::<dai_StreamPacketMemory>() - 8usize];
    ["Offset of field: dai_StreamPacketMemory::size"]
        [::std::mem::offset_of!(dai_StreamPacketMemory, size) - 56usize];
};
#[repr(C)]
pub struct dai_XLinkStream {
    pub connection: std_shared_ptr,
    pub streamName: std_string,
    pub streamId: streamId_t,
}
pub const dai_XLinkStream_STREAM_OPEN_RETRIES: ::std::os::raw::c_int = 5;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream21WAIT_FOR_STREAM_RETRYE"]
    pub static dai_XLinkStream_WAIT_FOR_STREAM_RETRY: std_chrono_milliseconds;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_XLinkStream"][::std::mem::size_of::<dai_XLinkStream>() - 56usize];
    ["Alignment of dai_XLinkStream"][::std::mem::align_of::<dai_XLinkStream>() - 8usize];
    ["Offset of field: dai_XLinkStream::connection"]
        [::std::mem::offset_of!(dai_XLinkStream, connection) - 0usize];
    ["Offset of field: dai_XLinkStream::streamName"]
        [::std::mem::offset_of!(dai_XLinkStream, streamName) - 16usize];
    ["Offset of field: dai_XLinkStream::streamId"]
        [::std::mem::offset_of!(dai_XLinkStream, streamId) - 48usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeENS_4spanIKhLm18446744073709551615EEES3_"]
    pub fn dai_XLinkStream_write(
        this: *mut dai_XLinkStream,
        data: __BindgenOpaqueArray<u64, 2usize>,
        data2: __BindgenOpaqueArray<u64, 2usize>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeENS_4spanIKhLm18446744073709551615EEE"]
    pub fn dai_XLinkStream_write1(
        this: *mut dai_XLinkStream,
        data: __BindgenOpaqueArray<u64, 2usize>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeEl"]
    pub fn dai_XLinkStream_write2(this: *mut dai_XLinkStream, fd: ::std::os::raw::c_long);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeElNS_4spanIKhLm18446744073709551615EEE"]
    pub fn dai_XLinkStream_write3(
        this: *mut dai_XLinkStream,
        fd: ::std::os::raw::c_long,
        data: __BindgenOpaqueArray<u64, 2usize>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeEPKvm"]
    pub fn dai_XLinkStream_write4(
        this: *mut dai_XLinkStream,
        data: *const ::std::os::raw::c_void,
        size: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readEv"]
    pub fn dai_XLinkStream_read(this: *mut dai_XLinkStream) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readER13XLinkTimespec"]
    pub fn dai_XLinkStream_read1(
        this: *mut dai_XLinkStream,
        timestampReceived: *mut XLinkTimespec,
    ) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readERSt6vectorIhSaIhEE"]
    pub fn dai_XLinkStream_read2(this: *mut dai_XLinkStream, data: *mut std_vector);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readERSt6vectorIhSaIhEERl"]
    pub fn dai_XLinkStream_read3(
        this: *mut dai_XLinkStream,
        data: *mut std_vector,
        fd: *mut ::std::os::raw::c_long,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readERSt6vectorIhSaIhEER13XLinkTimespec"]
    pub fn dai_XLinkStream_read4(
        this: *mut dai_XLinkStream,
        data: *mut std_vector,
        timestampReceived: *mut XLinkTimespec,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readERSt6vectorIhSaIhEERlR13XLinkTimespec"]
    pub fn dai_XLinkStream_read5(
        this: *mut dai_XLinkStream,
        data: *mut std_vector,
        fd: *mut ::std::os::raw::c_long,
        timestampReceived: *mut XLinkTimespec,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream10writeSplitEPKvmm"]
    pub fn dai_XLinkStream_writeSplit(
        this: *mut dai_XLinkStream,
        data: *const ::std::os::raw::c_void,
        size: usize,
        split: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream10writeSplitERKSt6vectorIhSaIhEEm"]
    pub fn dai_XLinkStream_writeSplit1(
        this: *mut dai_XLinkStream,
        data: *const std_vector,
        split: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream8readMoveEv"]
    pub fn dai_XLinkStream_readMove(this: *mut dai_XLinkStream) -> dai_StreamPacketDesc;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeEPKvmNSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_XLinkStream_write5(
        this: *mut dai_XLinkStream,
        data: *const ::std::os::raw::c_void,
        size: usize,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeEPKhmNSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_XLinkStream_write6(
        this: *mut dai_XLinkStream,
        data: *mut ::std::os::raw::c_uchar,
        size: usize,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream5writeERKSt6vectorIhSaIhEENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_XLinkStream_write7(
        this: *mut dai_XLinkStream,
        data: *const std_vector,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream4readERSt6vectorIhSaIhEENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_XLinkStream_read6(
        this: *mut dai_XLinkStream,
        data: *mut std_vector,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream8readMoveERNS_16StreamPacketDescENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_XLinkStream_readMove1(
        this: *mut dai_XLinkStream,
        packet: *mut dai_StreamPacketDesc,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream7readRawEv"]
    pub fn dai_XLinkStream_readRaw(this: *mut dai_XLinkStream) -> *mut streamPacketDesc_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream7readRawERP18streamPacketDesc_tNSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_XLinkStream_readRaw1(
        this: *mut dai_XLinkStream,
        pPacket: *mut *mut streamPacketDesc_t,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStream14readRawReleaseEv"]
    pub fn dai_XLinkStream_readRawRelease(this: *mut dai_XLinkStream);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai11XLinkStream11getStreamIdEv"]
    pub fn dai_XLinkStream_getStreamId(this: *const dai_XLinkStream) -> streamId_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai11XLinkStream13getStreamNameB5cxx11Ev"]
    pub fn dai_XLinkStream_getStreamName(this: *const dai_XLinkStream) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStreamC1ESt10shared_ptrINS_15XLinkConnectionEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm"]
    pub fn dai_XLinkStream_XLinkStream(
        this: *mut dai_XLinkStream,
        conn: std_shared_ptr,
        name: *const std_string,
        maxWriteSize: usize,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStreamC1EOS0_"]
    pub fn dai_XLinkStream_XLinkStream1(this: *mut dai_XLinkStream, stream: *mut dai_XLinkStream);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai11XLinkStreamD1Ev"]
    pub fn dai_XLinkStream_XLinkStream_destructor(this: *mut dai_XLinkStream);
}
impl dai_XLinkStream {
    #[inline]
    pub unsafe fn write(
        &mut self,
        data: __BindgenOpaqueArray<u64, 2usize>,
        data2: __BindgenOpaqueArray<u64, 2usize>,
    ) {
        dai_XLinkStream_write(self, data, data2)
    }
    #[inline]
    pub unsafe fn write1(&mut self, data: __BindgenOpaqueArray<u64, 2usize>) {
        dai_XLinkStream_write1(self, data)
    }
    #[inline]
    pub unsafe fn write2(&mut self, fd: ::std::os::raw::c_long) {
        dai_XLinkStream_write2(self, fd)
    }
    #[inline]
    pub unsafe fn write3(
        &mut self,
        fd: ::std::os::raw::c_long,
        data: __BindgenOpaqueArray<u64, 2usize>,
    ) {
        dai_XLinkStream_write3(self, fd, data)
    }
    #[inline]
    pub unsafe fn write4(&mut self, data: *const ::std::os::raw::c_void, size: usize) {
        dai_XLinkStream_write4(self, data, size)
    }
    #[inline]
    pub unsafe fn read(&mut self) -> std_vector {
        dai_XLinkStream_read(self)
    }
    #[inline]
    pub unsafe fn read1(&mut self, timestampReceived: *mut XLinkTimespec) -> std_vector {
        dai_XLinkStream_read1(self, timestampReceived)
    }
    #[inline]
    pub unsafe fn read2(&mut self, data: *mut std_vector) {
        dai_XLinkStream_read2(self, data)
    }
    #[inline]
    pub unsafe fn read3(&mut self, data: *mut std_vector, fd: *mut ::std::os::raw::c_long) {
        dai_XLinkStream_read3(self, data, fd)
    }
    #[inline]
    pub unsafe fn read4(&mut self, data: *mut std_vector, timestampReceived: *mut XLinkTimespec) {
        dai_XLinkStream_read4(self, data, timestampReceived)
    }
    #[inline]
    pub unsafe fn read5(
        &mut self,
        data: *mut std_vector,
        fd: *mut ::std::os::raw::c_long,
        timestampReceived: *mut XLinkTimespec,
    ) {
        dai_XLinkStream_read5(self, data, fd, timestampReceived)
    }
    #[inline]
    pub unsafe fn writeSplit(
        &mut self,
        data: *const ::std::os::raw::c_void,
        size: usize,
        split: usize,
    ) {
        dai_XLinkStream_writeSplit(self, data, size, split)
    }
    #[inline]
    pub unsafe fn writeSplit1(&mut self, data: *const std_vector, split: usize) {
        dai_XLinkStream_writeSplit1(self, data, split)
    }
    #[inline]
    pub unsafe fn readMove(&mut self) -> dai_StreamPacketDesc {
        dai_XLinkStream_readMove(self)
    }
    #[inline]
    pub unsafe fn write5(
        &mut self,
        data: *const ::std::os::raw::c_void,
        size: usize,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_XLinkStream_write5(self, data, size, timeout)
    }
    #[inline]
    pub unsafe fn write6(
        &mut self,
        data: *mut ::std::os::raw::c_uchar,
        size: usize,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_XLinkStream_write6(self, data, size, timeout)
    }
    #[inline]
    pub unsafe fn write7(
        &mut self,
        data: *const std_vector,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_XLinkStream_write7(self, data, timeout)
    }
    #[inline]
    pub unsafe fn read6(
        &mut self,
        data: *mut std_vector,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_XLinkStream_read6(self, data, timeout)
    }
    #[inline]
    pub unsafe fn readMove1(
        &mut self,
        packet: *mut dai_StreamPacketDesc,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_XLinkStream_readMove1(self, packet, timeout)
    }
    #[inline]
    pub unsafe fn readRaw(&mut self) -> *mut streamPacketDesc_t {
        dai_XLinkStream_readRaw(self)
    }
    #[inline]
    pub unsafe fn readRaw1(
        &mut self,
        pPacket: *mut *mut streamPacketDesc_t,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_XLinkStream_readRaw1(self, pPacket, timeout)
    }
    #[inline]
    pub unsafe fn readRawRelease(&mut self) {
        dai_XLinkStream_readRawRelease(self)
    }
    #[inline]
    pub unsafe fn getStreamId(&self) -> streamId_t {
        dai_XLinkStream_getStreamId(self)
    }
    #[inline]
    pub unsafe fn getStreamName(&self) -> std_string {
        dai_XLinkStream_getStreamName(self)
    }
    #[inline]
    pub unsafe fn new(conn: std_shared_ptr, name: *const std_string, maxWriteSize: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkStream_XLinkStream(__bindgen_tmp.as_mut_ptr(), conn, name, maxWriteSize);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(stream: *mut dai_XLinkStream) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkStream_XLinkStream1(__bindgen_tmp.as_mut_ptr(), stream);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_XLinkStream_XLinkStream_destructor(self)
    }
}
#[repr(C)]
pub struct dai_XLinkError {
    pub _base: std_runtime_error,
    pub status: XLinkError_t,
    pub streamName: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_XLinkError"][::std::mem::size_of::<dai_XLinkError>() - 56usize];
    ["Alignment of dai_XLinkError"][::std::mem::align_of::<dai_XLinkError>() - 8usize];
    ["Offset of field: dai_XLinkError::status"]
        [::std::mem::offset_of!(dai_XLinkError, status) - 16usize];
    ["Offset of field: dai_XLinkError::streamName"]
        [::std::mem::offset_of!(dai_XLinkError, streamName) - 24usize];
};
#[repr(C)]
pub struct dai_XLinkReadError {
    pub _base: dai_XLinkError,
}
pub type dai_XLinkReadError_XLinkError = dai_XLinkError;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_XLinkReadError"][::std::mem::size_of::<dai_XLinkReadError>() - 56usize];
    ["Alignment of dai_XLinkReadError"][::std::mem::align_of::<dai_XLinkReadError>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14XLinkReadErrorC1E12XLinkError_tRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_XLinkReadError_XLinkReadError(
        this: *mut dai_XLinkReadError,
        status: XLinkError_t,
        stream: *const std_string,
    );
}
impl dai_XLinkReadError {
    #[inline]
    pub unsafe fn new(status: XLinkError_t, stream: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkReadError_XLinkReadError(__bindgen_tmp.as_mut_ptr(), status, stream);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct dai_XLinkWriteError {
    pub _base: dai_XLinkError,
}
pub type dai_XLinkWriteError_XLinkError = dai_XLinkError;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_XLinkWriteError"][::std::mem::size_of::<dai_XLinkWriteError>() - 56usize];
    ["Alignment of dai_XLinkWriteError"][::std::mem::align_of::<dai_XLinkWriteError>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15XLinkWriteErrorC1E12XLinkError_tRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_XLinkWriteError_XLinkWriteError(
        this: *mut dai_XLinkWriteError,
        status: XLinkError_t,
        stream: *const std_string,
    );
}
impl dai_XLinkWriteError {
    #[inline]
    pub unsafe fn new(status: XLinkError_t, stream: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_XLinkWriteError_XLinkWriteError(__bindgen_tmp.as_mut_ptr(), status, stream);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " Chip temperature information.\n\n Multiple temperature measurement points and their average"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ChipTemperature {
    #[doc = "  CPU Subsystem"]
    pub css: f32,
    #[doc = "  Media Subsystem"]
    pub mss: f32,
    #[doc = "  Shave Array"]
    pub upa: f32,
    #[doc = "  DRAM Subsystem"]
    pub dss: f32,
    #[doc = "  Average of measurements"]
    pub average: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ChipTemperature"][::std::mem::size_of::<dai_ChipTemperature>() - 20usize];
    ["Alignment of dai_ChipTemperature"][::std::mem::align_of::<dai_ChipTemperature>() - 4usize];
    ["Offset of field: dai_ChipTemperature::css"]
        [::std::mem::offset_of!(dai_ChipTemperature, css) - 0usize];
    ["Offset of field: dai_ChipTemperature::mss"]
        [::std::mem::offset_of!(dai_ChipTemperature, mss) - 4usize];
    ["Offset of field: dai_ChipTemperature::upa"]
        [::std::mem::offset_of!(dai_ChipTemperature, upa) - 8usize];
    ["Offset of field: dai_ChipTemperature::dss"]
        [::std::mem::offset_of!(dai_ChipTemperature, dss) - 12usize];
    ["Offset of field: dai_ChipTemperature::average"]
        [::std::mem::offset_of!(dai_ChipTemperature, average) - 16usize];
};
pub const dai_ConnectionInterface_USB: dai_ConnectionInterface = 0;
pub const dai_ConnectionInterface_ETHERNET: dai_ConnectionInterface = 1;
pub const dai_ConnectionInterface_WIFI: dai_ConnectionInterface = 2;
pub type dai_ConnectionInterface = i32;
#[doc = " CpuUsage structure\n\n Average usage in percent and time span of the average (since last query)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CpuUsage {
    #[doc = "  Average CPU usage, expressed with a normalized value (0-1)"]
    pub average: f32,
    #[doc = "  Time span in which the average was calculated in milliseconds"]
    pub msTime: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CpuUsage"][::std::mem::size_of::<dai_CpuUsage>() - 8usize];
    ["Alignment of dai_CpuUsage"][::std::mem::align_of::<dai_CpuUsage>() - 4usize];
    ["Offset of field: dai_CpuUsage::average"]
        [::std::mem::offset_of!(dai_CpuUsage, average) - 0usize];
    ["Offset of field: dai_CpuUsage::msTime"]
        [::std::mem::offset_of!(dai_CpuUsage, msTime) - 4usize];
};
#[doc = " MemoryInfo structure\n\n Free, remaining and total memory stats"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_MemoryInfo {
    pub remaining: i64,
    pub used: i64,
    pub total: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_MemoryInfo"][::std::mem::size_of::<dai_MemoryInfo>() - 24usize];
    ["Alignment of dai_MemoryInfo"][::std::mem::align_of::<dai_MemoryInfo>() - 8usize];
    ["Offset of field: dai_MemoryInfo::remaining"]
        [::std::mem::offset_of!(dai_MemoryInfo, remaining) - 0usize];
    ["Offset of field: dai_MemoryInfo::used"]
        [::std::mem::offset_of!(dai_MemoryInfo, used) - 8usize];
    ["Offset of field: dai_MemoryInfo::total"]
        [::std::mem::offset_of!(dai_MemoryInfo, total) - 16usize];
};
#[doc = " Describes which camera sockets can be used for stereo and their baseline.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoPair {
    pub left: dai_CameraBoardSocket,
    pub right: dai_CameraBoardSocket,
    #[doc = " Baseline in centimeters."]
    pub baseline: f32,
    pub isVertical: bool,
}
pub type dai_StereoPair_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoPair"][::std::mem::size_of::<dai_StereoPair>() - 16usize];
    ["Alignment of dai_StereoPair"][::std::mem::align_of::<dai_StereoPair>() - 4usize];
    ["Offset of field: dai_StereoPair::left"]
        [::std::mem::offset_of!(dai_StereoPair, left) - 0usize];
    ["Offset of field: dai_StereoPair::right"]
        [::std::mem::offset_of!(dai_StereoPair, right) - 4usize];
    ["Offset of field: dai_StereoPair::baseline"]
        [::std::mem::offset_of!(dai_StereoPair, baseline) - 8usize];
    ["Offset of field: dai_StereoPair::isVertical"]
        [::std::mem::offset_of!(dai_StereoPair, isVertical) - 12usize];
};
pub const dai_CameraExposureOffset_START: dai_CameraExposureOffset = 0;
pub const dai_CameraExposureOffset_MIDDLE: dai_CameraExposureOffset = 1;
pub const dai_CameraExposureOffset_END: dai_CameraExposureOffset = 2;
#[doc = " Describe possible exposure offsets"]
pub type dai_CameraExposureOffset = i32;
pub const dai_build_HAVE_OPENCV_SUPPORT: bool = false;
pub const dai_build_HAVE_LIBUSB_SUPPORT: bool = false;
#[doc = " Timestamp structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Timestamp {
    pub sec: i64,
    pub nsec: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Timestamp"][::std::mem::size_of::<dai_Timestamp>() - 16usize];
    ["Alignment of dai_Timestamp"][::std::mem::align_of::<dai_Timestamp>() - 8usize];
    ["Offset of field: dai_Timestamp::sec"][::std::mem::offset_of!(dai_Timestamp, sec) - 0usize];
    ["Offset of field: dai_Timestamp::nsec"][::std::mem::offset_of!(dai_Timestamp, nsec) - 8usize];
};
pub const dai_DatatypeEnum_ADatatype: dai_DatatypeEnum = 0;
pub const dai_DatatypeEnum_Buffer: dai_DatatypeEnum = 1;
pub const dai_DatatypeEnum_ImgFrame: dai_DatatypeEnum = 2;
pub const dai_DatatypeEnum_EncodedFrame: dai_DatatypeEnum = 3;
pub const dai_DatatypeEnum_NNData: dai_DatatypeEnum = 4;
pub const dai_DatatypeEnum_ImageManipConfig: dai_DatatypeEnum = 5;
pub const dai_DatatypeEnum_CameraControl: dai_DatatypeEnum = 6;
pub const dai_DatatypeEnum_ImgDetections: dai_DatatypeEnum = 7;
pub const dai_DatatypeEnum_SpatialImgDetections: dai_DatatypeEnum = 8;
pub const dai_DatatypeEnum_SystemInformation: dai_DatatypeEnum = 9;
pub const dai_DatatypeEnum_SystemInformationS3: dai_DatatypeEnum = 10;
pub const dai_DatatypeEnum_SpatialLocationCalculatorConfig: dai_DatatypeEnum = 11;
pub const dai_DatatypeEnum_SpatialLocationCalculatorData: dai_DatatypeEnum = 12;
pub const dai_DatatypeEnum_EdgeDetectorConfig: dai_DatatypeEnum = 13;
pub const dai_DatatypeEnum_AprilTagConfig: dai_DatatypeEnum = 14;
pub const dai_DatatypeEnum_AprilTags: dai_DatatypeEnum = 15;
pub const dai_DatatypeEnum_Tracklets: dai_DatatypeEnum = 16;
pub const dai_DatatypeEnum_IMUData: dai_DatatypeEnum = 17;
pub const dai_DatatypeEnum_StereoDepthConfig: dai_DatatypeEnum = 18;
pub const dai_DatatypeEnum_FeatureTrackerConfig: dai_DatatypeEnum = 19;
pub const dai_DatatypeEnum_ThermalConfig: dai_DatatypeEnum = 20;
pub const dai_DatatypeEnum_ToFConfig: dai_DatatypeEnum = 21;
pub const dai_DatatypeEnum_TrackedFeatures: dai_DatatypeEnum = 22;
pub const dai_DatatypeEnum_BenchmarkReport: dai_DatatypeEnum = 23;
pub const dai_DatatypeEnum_MessageGroup: dai_DatatypeEnum = 24;
pub const dai_DatatypeEnum_TransformData: dai_DatatypeEnum = 25;
pub const dai_DatatypeEnum_PointCloudConfig: dai_DatatypeEnum = 26;
pub const dai_DatatypeEnum_PointCloudData: dai_DatatypeEnum = 27;
pub const dai_DatatypeEnum_RGBDData: dai_DatatypeEnum = 28;
pub const dai_DatatypeEnum_ImageAlignConfig: dai_DatatypeEnum = 29;
pub const dai_DatatypeEnum_ImgAnnotations: dai_DatatypeEnum = 30;
pub const dai_DatatypeEnum_ObjectTrackerConfig: dai_DatatypeEnum = 31;
pub type dai_DatatypeEnum = ::std::os::raw::c_int;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai20isDatatypeSubclassOfENS_12DatatypeEnumES0_"]
    pub fn dai_isDatatypeSubclassOf(parent: dai_DatatypeEnum, children: dai_DatatypeEnum) -> bool;
}
#[repr(C)]
pub struct dai_VectorMemory {
    pub _base: std_vector,
    pub _base_1: dai_Memory,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_VectorMemory"][::std::mem::size_of::<dai_VectorMemory>() - 32usize];
    ["Alignment of dai_VectorMemory"][::std::mem::align_of::<dai_VectorMemory>() - 8usize];
};
#[repr(C)]
pub struct dai_ADatatype__bindgen_vtable(::std::os::raw::c_void);
#[doc = " Abstract message"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_ADatatype {
    pub vtable_: *const dai_ADatatype__bindgen_vtable,
    pub data: std_shared_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ADatatype"][::std::mem::size_of::<dai_ADatatype>() - 24usize];
    ["Alignment of dai_ADatatype"][::std::mem::align_of::<dai_ADatatype>() - 8usize];
    ["Offset of field: dai_ADatatype::data"][::std::mem::offset_of!(dai_ADatatype, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImgAnnotations {
    _unused: [u8; 0],
}
pub type dai_VisualizeType = std_variant;
#[doc = " Base message - buffer of binary data"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_Buffer {
    pub _base: dai_ADatatype,
    pub sequenceNum: i64,
    pub ts: dai_Timestamp,
    pub tsDevice: dai_Timestamp,
}
pub type dai_Buffer_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Buffer"][::std::mem::size_of::<dai_Buffer>() - 64usize];
    ["Alignment of dai_Buffer"][::std::mem::align_of::<dai_Buffer>() - 8usize];
    ["Offset of field: dai_Buffer::sequenceNum"]
        [::std::mem::offset_of!(dai_Buffer, sequenceNum) - 24usize];
    ["Offset of field: dai_Buffer::ts"][::std::mem::offset_of!(dai_Buffer, ts) - 32usize];
    ["Offset of field: dai_Buffer::tsDevice"]
        [::std::mem::offset_of!(dai_Buffer, tsDevice) - 48usize];
};
unsafe extern "C" {
    #[doc = " @brief Get non-owning reference to internal buffer\n @returns Reference to internal buffer"]
    #[link_name = "\u{1}_ZN3dai6Buffer7getDataEv"]
    pub fn dai_Buffer_getData(this: *mut dai_Buffer) -> __BindgenOpaqueArray<u64, 2usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai6Buffer7getDataEv"]
    pub fn dai_Buffer_getData1(this: *const dai_Buffer) -> __BindgenOpaqueArray<u64, 2usize>;
}
unsafe extern "C" {
    #[doc = " @param data Copies data to internal buffer"]
    #[link_name = "\u{1}_ZN3dai6Buffer7setDataERKSt6vectorIhSaIhEE"]
    pub fn dai_Buffer_setData(this: *mut dai_Buffer, data: *const std_vector);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6Buffer7setDataEl"]
    pub fn dai_Buffer_setData1(this: *mut dai_Buffer, fd: ::std::os::raw::c_long);
}
unsafe extern "C" {
    #[doc = " @param data Moves data to internal buffer"]
    #[link_name = "\u{1}_ZN3dai6Buffer7setDataEOSt6vectorIhSaIhEE"]
    pub fn dai_Buffer_setData2(this: *mut dai_Buffer, data: *mut std_vector);
}
unsafe extern "C" {
    #[doc = " Retrieves timestamp related to dai::Clock::now()"]
    #[link_name = "\u{1}_ZNK3dai6Buffer12getTimestampEv"]
    pub fn dai_Buffer_getTimestamp(
        this: *const dai_Buffer,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration>;
}
unsafe extern "C" {
    #[doc = " Retrieves timestamp directly captured from device's monotonic clock,\n not synchronized to host time. Used mostly for debugging"]
    #[link_name = "\u{1}_ZNK3dai6Buffer18getTimestampDeviceEv"]
    pub fn dai_Buffer_getTimestampDevice(
        this: *const dai_Buffer,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration>;
}
unsafe extern "C" {
    #[doc = " Sets image timestamp related to dai::Clock::now()"]
    #[link_name = "\u{1}_ZN3dai6Buffer12setTimestampENSt6chrono10time_pointINS1_3_V212steady_clockENS1_8durationIlSt5ratioILl1ELl1000000000EEEEEE"]
    pub fn dai_Buffer_setTimestamp(
        this: *mut dai_Buffer,
        timestamp: std_chrono_time_point<std_chrono_steady_clock_duration>,
    );
}
unsafe extern "C" {
    #[doc = " Sets image timestamp related to dai::Clock::now()"]
    #[link_name = "\u{1}_ZN3dai6Buffer18setTimestampDeviceENSt6chrono10time_pointINS1_3_V212steady_clockENS1_8durationIlSt5ratioILl1ELl1000000000EEEEEE"]
    pub fn dai_Buffer_setTimestampDevice(
        this: *mut dai_Buffer,
        timestamp: std_chrono_time_point<std_chrono_steady_clock_duration>,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves image sequence number"]
    #[link_name = "\u{1}_ZNK3dai6Buffer14getSequenceNumEv"]
    pub fn dai_Buffer_getSequenceNum(this: *const dai_Buffer) -> i64;
}
unsafe extern "C" {
    #[doc = " Sets image sequence number"]
    #[link_name = "\u{1}_ZN3dai6Buffer14setSequenceNumEl"]
    pub fn dai_Buffer_setSequenceNum(this: *mut dai_Buffer, sequenceNum: i64);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6BufferC1Em"]
    pub fn dai_Buffer_Buffer(this: *mut dai_Buffer, size: usize);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6BufferC1El"]
    pub fn dai_Buffer_Buffer1(this: *mut dai_Buffer, fd: ::std::os::raw::c_long);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6BufferC1Elm"]
    pub fn dai_Buffer_Buffer2(this: *mut dai_Buffer, fd: ::std::os::raw::c_long, size: usize);
}
impl dai_Buffer {
    #[inline]
    pub unsafe fn getData(&mut self) -> __BindgenOpaqueArray<u64, 2usize> {
        dai_Buffer_getData(self)
    }
    #[inline]
    pub unsafe fn getData1(&self) -> __BindgenOpaqueArray<u64, 2usize> {
        dai_Buffer_getData1(self)
    }
    #[inline]
    pub unsafe fn setData(&mut self, data: *const std_vector) {
        dai_Buffer_setData(self, data)
    }
    #[inline]
    pub unsafe fn setData1(&mut self, fd: ::std::os::raw::c_long) {
        dai_Buffer_setData1(self, fd)
    }
    #[inline]
    pub unsafe fn setData2(&mut self, data: *mut std_vector) {
        dai_Buffer_setData2(self, data)
    }
    #[inline]
    pub unsafe fn getTimestamp(&self) -> std_chrono_time_point<std_chrono_steady_clock_duration> {
        dai_Buffer_getTimestamp(self)
    }
    #[inline]
    pub unsafe fn getTimestampDevice(
        &self,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration> {
        dai_Buffer_getTimestampDevice(self)
    }
    #[inline]
    pub unsafe fn setTimestamp(
        &mut self,
        timestamp: std_chrono_time_point<std_chrono_steady_clock_duration>,
    ) {
        dai_Buffer_setTimestamp(self, timestamp)
    }
    #[inline]
    pub unsafe fn setTimestampDevice(
        &mut self,
        timestamp: std_chrono_time_point<std_chrono_steady_clock_duration>,
    ) {
        dai_Buffer_setTimestampDevice(self, timestamp)
    }
    #[inline]
    pub unsafe fn getSequenceNum(&self) -> i64 {
        dai_Buffer_getSequenceNum(self)
    }
    #[inline]
    pub unsafe fn setSequenceNum(&mut self, sequenceNum: i64) {
        dai_Buffer_setSequenceNum(self, sequenceNum)
    }
    #[inline]
    pub unsafe fn new(size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Buffer_Buffer(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(fd: ::std::os::raw::c_long) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Buffer_Buffer1(__bindgen_tmp.as_mut_ptr(), fd);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(fd: ::std::os::raw::c_long, size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Buffer_Buffer2(__bindgen_tmp.as_mut_ptr(), fd, size);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai6Buffer13getRecordDataEv"]
    pub fn dai_Buffer_getRecordData(
        this: *mut ::std::os::raw::c_void,
    ) -> __BindgenOpaqueArray<u64, 2usize>;
}
unsafe extern "C" {
    #[doc = " Get visualizable message\n@return Visualizable message, either ImgFrame, ImgAnnotations or std::monostate (None)"]
    #[link_name = "\u{1}_ZNK3dai6Buffer23getVisualizationMessageEv"]
    pub fn dai_Buffer_getVisualizationMessage(
        this: *mut ::std::os::raw::c_void,
    ) -> dai_VisualizeType;
}
pub const dai_FrameEvent_NONE: dai_FrameEvent = 0;
pub const dai_FrameEvent_READOUT_START: dai_FrameEvent = 1;
pub const dai_FrameEvent_READOUT_END: dai_FrameEvent = 2;
pub type dai_FrameEvent = i32;
#[doc = " RotatedRect structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_RotatedRect {
    pub center: dai_Point2f,
    pub size: dai_Size2f,
    #[doc = " degrees, increasing clockwise"]
    pub angle: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_RotatedRect"][::std::mem::size_of::<dai_RotatedRect>() - 28usize];
    ["Alignment of dai_RotatedRect"][::std::mem::align_of::<dai_RotatedRect>() - 4usize];
    ["Offset of field: dai_RotatedRect::center"]
        [::std::mem::offset_of!(dai_RotatedRect, center) - 0usize];
    ["Offset of field: dai_RotatedRect::size"]
        [::std::mem::offset_of!(dai_RotatedRect, size) - 12usize];
    ["Offset of field: dai_RotatedRect::angle"]
        [::std::mem::offset_of!(dai_RotatedRect, angle) - 24usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16getMatrixInverseERKSt5arrayIS0_IfLm3EELm3EE"]
    pub fn dai_getMatrixInverse(
        matrix: *const __BindgenOpaqueArray<u32, 9usize>,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
#[doc = " ImgTransformation struct. Holds information of how a ImgFrame or related message was transformed from their source. Useful for remapping from one ImgFrame to\n another."]
#[repr(C)]
pub struct dai_ImgTransformation {
    pub transformationMatrix: __BindgenOpaqueArray<u32, 9usize>,
    pub transformationMatrixInv: __BindgenOpaqueArray<u32, 9usize>,
    pub sourceIntrinsicMatrix: __BindgenOpaqueArray<u32, 9usize>,
    pub sourceIntrinsicMatrixInv: __BindgenOpaqueArray<u32, 9usize>,
    pub distortionModel: dai_CameraModel,
    pub distortionCoefficients: std_vector,
    pub srcWidth: usize,
    pub srcHeight: usize,
    pub width: usize,
    pub height: usize,
    pub srcCrops: std_vector,
    pub srcCrop: dai_RotatedRect,
    pub dstCrop: dai_RotatedRect,
    pub cropsValid: bool,
}
pub type dai_ImgTransformation_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgTransformation"][::std::mem::size_of::<dai_ImgTransformation>() - 296usize];
    ["Alignment of dai_ImgTransformation"]
        [::std::mem::align_of::<dai_ImgTransformation>() - 8usize];
    ["Offset of field: dai_ImgTransformation::transformationMatrix"]
        [::std::mem::offset_of!(dai_ImgTransformation, transformationMatrix) - 0usize];
    ["Offset of field: dai_ImgTransformation::transformationMatrixInv"]
        [::std::mem::offset_of!(dai_ImgTransformation, transformationMatrixInv) - 36usize];
    ["Offset of field: dai_ImgTransformation::sourceIntrinsicMatrix"]
        [::std::mem::offset_of!(dai_ImgTransformation, sourceIntrinsicMatrix) - 72usize];
    ["Offset of field: dai_ImgTransformation::sourceIntrinsicMatrixInv"]
        [::std::mem::offset_of!(dai_ImgTransformation, sourceIntrinsicMatrixInv) - 108usize];
    ["Offset of field: dai_ImgTransformation::distortionModel"]
        [::std::mem::offset_of!(dai_ImgTransformation, distortionModel) - 144usize];
    ["Offset of field: dai_ImgTransformation::distortionCoefficients"]
        [::std::mem::offset_of!(dai_ImgTransformation, distortionCoefficients) - 152usize];
    ["Offset of field: dai_ImgTransformation::srcWidth"]
        [::std::mem::offset_of!(dai_ImgTransformation, srcWidth) - 176usize];
    ["Offset of field: dai_ImgTransformation::srcHeight"]
        [::std::mem::offset_of!(dai_ImgTransformation, srcHeight) - 184usize];
    ["Offset of field: dai_ImgTransformation::width"]
        [::std::mem::offset_of!(dai_ImgTransformation, width) - 192usize];
    ["Offset of field: dai_ImgTransformation::height"]
        [::std::mem::offset_of!(dai_ImgTransformation, height) - 200usize];
    ["Offset of field: dai_ImgTransformation::srcCrops"]
        [::std::mem::offset_of!(dai_ImgTransformation, srcCrops) - 208usize];
    ["Offset of field: dai_ImgTransformation::srcCrop"]
        [::std::mem::offset_of!(dai_ImgTransformation, srcCrop) - 232usize];
    ["Offset of field: dai_ImgTransformation::dstCrop"]
        [::std::mem::offset_of!(dai_ImgTransformation, dstCrop) - 260usize];
    ["Offset of field: dai_ImgTransformation::cropsValid"]
        [::std::mem::offset_of!(dai_ImgTransformation, cropsValid) - 288usize];
};
unsafe extern "C" {
    #[doc = " Transform a point from the source frame to the current frame.\n @param point Point to transform\n @return Transformed point"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation14transformPointENS_7Point2fE"]
    pub fn dai_ImgTransformation_transformPoint(
        this: *const dai_ImgTransformation,
        point: dai_Point2f,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Transform a rotated rect from the source frame to the current frame.\n @param rect Rectangle to transform\n @return Transformed rectangle"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation13transformRectENS_11RotatedRectE"]
    pub fn dai_ImgTransformation_transformRect(
        this: *const dai_ImgTransformation,
        rect: dai_RotatedRect,
    ) -> dai_RotatedRect;
}
unsafe extern "C" {
    #[doc = " Transform a point from the current frame to the source frame.\n @param point Point to transform\n @return Transformed point"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation17invTransformPointENS_7Point2fE"]
    pub fn dai_ImgTransformation_invTransformPoint(
        this: *const dai_ImgTransformation,
        point: dai_Point2f,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Transform a rotated rect from the current frame to the source frame.\n @param rect Rectangle to transform\n @return Transformed rectangle"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation16invTransformRectENS_11RotatedRectE"]
    pub fn dai_ImgTransformation_invTransformRect(
        this: *const dai_ImgTransformation,
        rect: dai_RotatedRect,
    ) -> dai_RotatedRect;
}
unsafe extern "C" {
    #[doc = " Retrieve the size of the frame. Should be equal to the size of the corresponding ImgFrame message.\n @return Size of the frame"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation7getSizeEv"]
    pub fn dai_ImgTransformation_getSize(
        this: *const dai_ImgTransformation,
    ) -> std_pair<usize, usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the size of the source frame from which this frame was derived.\n @return Size of the frame"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation13getSourceSizeEv"]
    pub fn dai_ImgTransformation_getSourceSize(
        this: *const dai_ImgTransformation,
    ) -> std_pair<usize, usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the transformation matrix from the source frame to the current frame.\n @return Transformation matrix"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation9getMatrixEv"]
    pub fn dai_ImgTransformation_getMatrix(
        this: *const dai_ImgTransformation,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the inverse transformation matrix from the current frame to the source frame.\n @return Inverse transformation matrix"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation12getMatrixInvEv"]
    pub fn dai_ImgTransformation_getMatrixInv(
        this: *const dai_ImgTransformation,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the intrinsic matrix of the source sensor.\n @return Intrinsic matrix"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation24getSourceIntrinsicMatrixEv"]
    pub fn dai_ImgTransformation_getSourceIntrinsicMatrix(
        this: *const dai_ImgTransformation,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the inverse intrinsic matrix of the source sensor.\n @return Inverse intrinsic matrix"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation27getSourceIntrinsicMatrixInvEv"]
    pub fn dai_ImgTransformation_getSourceIntrinsicMatrixInv(
        this: *const dai_ImgTransformation,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the distortion model of the source sensor\n @return Distortion model"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation18getDistortionModelEv"]
    pub fn dai_ImgTransformation_getDistortionModel(
        this: *const dai_ImgTransformation,
    ) -> dai_CameraModel;
}
unsafe extern "C" {
    #[doc = " Retrieve the distortion coefficients of the source sensor\n @return vector of distortion coefficients"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation25getDistortionCoefficientsEv"]
    pub fn dai_ImgTransformation_getDistortionCoefficients(
        this: *const dai_ImgTransformation,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieve the total intrinsic matrix calculated from intrinsic * transform.\n @return total intrinsic matrix"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation18getIntrinsicMatrixEv"]
    pub fn dai_ImgTransformation_getIntrinsicMatrix(
        this: *const dai_ImgTransformation,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the inverse of the total intrinsic matrix calculated from intrinsic * transform.\n @return inverse total intrinsic matrix"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation21getIntrinsicMatrixInvEv"]
    pub fn dai_ImgTransformation_getIntrinsicMatrixInv(
        this: *const dai_ImgTransformation,
    ) -> __BindgenOpaqueArray<u32, 9usize>;
}
unsafe extern "C" {
    #[doc = " Retrieve the diagonal field of view of the image.\n @param source If true, the source field of view will be returned. Otherwise, the current field of view will be returned.\n @return Diagonal field of view in degrees"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation7getDFovEb"]
    pub fn dai_ImgTransformation_getDFov(this: *const dai_ImgTransformation, source: bool) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieve the horizontal field of view of the image.\n @param source If true, the source field of view will be returned. Otherwise, the current field of view will be returned.\n @return Horizontal field of view in degrees"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation7getHFovEb"]
    pub fn dai_ImgTransformation_getHFov(this: *const dai_ImgTransformation, source: bool) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieve the vertical field of view of the image.\n @param source If true, the source field of view will be returned. Otherwise, the current field of view will be returned.\n @return Vertical field of view in degrees"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation7getVFovEb"]
    pub fn dai_ImgTransformation_getVFov(this: *const dai_ImgTransformation, source: bool) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation11getSrcCropsEv"]
    pub fn dai_ImgTransformation_getSrcCrops(this: *const dai_ImgTransformation) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Returns true if the point is inside the transformed region of interest (determined by crops used)."]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation12getSrcMaskPtEmm"]
    pub fn dai_ImgTransformation_getSrcMaskPt(
        this: *mut dai_ImgTransformation,
        x: usize,
        y: usize,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Returns true if the point is inside the image region (not in the background region)."]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation12getDstMaskPtEmm"]
    pub fn dai_ImgTransformation_getDstMaskPt(
        this: *mut dai_ImgTransformation,
        x: usize,
        y: usize,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Add a new transformation.\n @param matrix Transformation matrix"]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation17addTransformationESt5arrayIS1_IfLm3EELm3EE"]
    pub fn dai_ImgTransformation_addTransformation(
        this: *mut dai_ImgTransformation,
        matrix: __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Add a crop transformation.\n @param x X coordinate of the top-left corner of the crop\n @param y Y coordinate of the top-left corner of the crop\n @param width Width of the crop\n @param height Height of the crop"]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation7addCropEiiii"]
    pub fn dai_ImgTransformation_addCrop(
        this: *mut dai_ImgTransformation,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Add a pad transformation. Works like crop, but in reverse.\n @param top Padding on the top\n @param bottom Padding on the bottom\n @param left Padding on the left\n @param right Padding on the right"]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation10addPaddingEiiii"]
    pub fn dai_ImgTransformation_addPadding(
        this: *mut dai_ImgTransformation,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Add a vertical flip transformation."]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation15addFlipVerticalEv"]
    pub fn dai_ImgTransformation_addFlipVertical(
        this: *mut dai_ImgTransformation,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Add a horizontal flip transformation."]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation17addFlipHorizontalEv"]
    pub fn dai_ImgTransformation_addFlipHorizontal(
        this: *mut dai_ImgTransformation,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Add a rotation transformation.\n @param angle Angle in degrees\n @param rotationPoint Point around which to rotate"]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation11addRotationEfNS_7Point2fE"]
    pub fn dai_ImgTransformation_addRotation(
        this: *mut dai_ImgTransformation,
        angle: f32,
        rotationPoint: dai_Point2f,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Add a scale transformation.\n @param scaleX Scale factor in the horizontal direction\n @param scaleY Scale factor in the vertical direction"]
    #[link_name = "\u{1}_ZN3dai17ImgTransformation8addScaleEff"]
    pub fn dai_ImgTransformation_addScale(
        this: *mut dai_ImgTransformation,
        scaleX: f32,
        scaleY: f32,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai17ImgTransformation11addSrcCropsERKSt6vectorINS_11RotatedRectESaIS2_EE"]
    pub fn dai_ImgTransformation_addSrcCrops(
        this: *mut dai_ImgTransformation,
        crops: *const std_vector,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai17ImgTransformation7setSizeEmm"]
    pub fn dai_ImgTransformation_setSize(
        this: *mut dai_ImgTransformation,
        width: usize,
        height: usize,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai17ImgTransformation13setSourceSizeEmm"]
    pub fn dai_ImgTransformation_setSourceSize(
        this: *mut dai_ImgTransformation,
        width: usize,
        height: usize,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai17ImgTransformation18setIntrinsicMatrixESt5arrayIS1_IfLm3EELm3EE"]
    pub fn dai_ImgTransformation_setIntrinsicMatrix(
        this: *mut dai_ImgTransformation,
        intrinsicMatrix: __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai17ImgTransformation18setDistortionModelENS_11CameraModelE"]
    pub fn dai_ImgTransformation_setDistortionModel(
        this: *mut dai_ImgTransformation,
        model: dai_CameraModel,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai17ImgTransformation25setDistortionCoefficientsESt6vectorIfSaIfEE"]
    pub fn dai_ImgTransformation_setDistortionCoefficients(
        this: *mut dai_ImgTransformation,
        coefficients: std_vector,
    ) -> *mut dai_ImgTransformation;
}
unsafe extern "C" {
    #[doc = " Remap a point from this transformation to another. If the intrinsics are different (e.g. different camera), the function will also use the intrinsics to\n remap the point.\n @param to Transformation to remap to\n @param point Point to remap"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation12remapPointToERKS0_NS_7Point2fE"]
    pub fn dai_ImgTransformation_remapPointTo(
        this: *const dai_ImgTransformation,
        to: *const dai_ImgTransformation,
        point: dai_Point2f,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Remap a point to this transformation from another. If the intrinsics are different (e.g. different camera), the function will also use the intrinsics to\n remap the point.\n @param from Transformation to remap from\n @param point Point to remap"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation14remapPointFromERKS0_NS_7Point2fE"]
    pub fn dai_ImgTransformation_remapPointFrom(
        this: *const dai_ImgTransformation,
        from: *const dai_ImgTransformation,
        point: dai_Point2f,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Remap a rotated rect from this transformation to another. If the intrinsics are different (e.g. different camera), the function will also use the\n intrinsics to remap the rect.\n @param to Transformation to remap to\n @param rect RotatedRect to remap"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation11remapRectToERKS0_NS_11RotatedRectE"]
    pub fn dai_ImgTransformation_remapRectTo(
        this: *const dai_ImgTransformation,
        to: *const dai_ImgTransformation,
        rect: dai_RotatedRect,
    ) -> dai_RotatedRect;
}
unsafe extern "C" {
    #[doc = " Remap a rotated rect to this transformation from another. If the intrinsics are different (e.g. different camera), the function will also use the\n intrinsics to remap the rect.\n @param from Transformation to remap from\n @param point RotatedRect to remap"]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation13remapRectFromERKS0_NS_11RotatedRectE"]
    pub fn dai_ImgTransformation_remapRectFrom(
        this: *const dai_ImgTransformation,
        from: *const dai_ImgTransformation,
        rect: dai_RotatedRect,
    ) -> dai_RotatedRect;
}
unsafe extern "C" {
    #[doc = " Check if the transformations are valid. The transformations are valid if the source frame size and the current frame size are set."]
    #[link_name = "\u{1}_ZNK3dai17ImgTransformation7isValidEv"]
    pub fn dai_ImgTransformation_isValid(this: *const dai_ImgTransformation) -> bool;
}
impl dai_ImgTransformation {
    #[inline]
    pub unsafe fn transformPoint(&self, point: dai_Point2f) -> dai_Point2f {
        dai_ImgTransformation_transformPoint(self, point)
    }
    #[inline]
    pub unsafe fn transformRect(&self, rect: dai_RotatedRect) -> dai_RotatedRect {
        dai_ImgTransformation_transformRect(self, rect)
    }
    #[inline]
    pub unsafe fn invTransformPoint(&self, point: dai_Point2f) -> dai_Point2f {
        dai_ImgTransformation_invTransformPoint(self, point)
    }
    #[inline]
    pub unsafe fn invTransformRect(&self, rect: dai_RotatedRect) -> dai_RotatedRect {
        dai_ImgTransformation_invTransformRect(self, rect)
    }
    #[inline]
    pub unsafe fn getSize(&self) -> std_pair<usize, usize> {
        dai_ImgTransformation_getSize(self)
    }
    #[inline]
    pub unsafe fn getSourceSize(&self) -> std_pair<usize, usize> {
        dai_ImgTransformation_getSourceSize(self)
    }
    #[inline]
    pub unsafe fn getMatrix(&self) -> __BindgenOpaqueArray<u32, 9usize> {
        dai_ImgTransformation_getMatrix(self)
    }
    #[inline]
    pub unsafe fn getMatrixInv(&self) -> __BindgenOpaqueArray<u32, 9usize> {
        dai_ImgTransformation_getMatrixInv(self)
    }
    #[inline]
    pub unsafe fn getSourceIntrinsicMatrix(&self) -> __BindgenOpaqueArray<u32, 9usize> {
        dai_ImgTransformation_getSourceIntrinsicMatrix(self)
    }
    #[inline]
    pub unsafe fn getSourceIntrinsicMatrixInv(&self) -> __BindgenOpaqueArray<u32, 9usize> {
        dai_ImgTransformation_getSourceIntrinsicMatrixInv(self)
    }
    #[inline]
    pub unsafe fn getDistortionModel(&self) -> dai_CameraModel {
        dai_ImgTransformation_getDistortionModel(self)
    }
    #[inline]
    pub unsafe fn getDistortionCoefficients(&self) -> std_vector {
        dai_ImgTransformation_getDistortionCoefficients(self)
    }
    #[inline]
    pub unsafe fn getIntrinsicMatrix(&self) -> __BindgenOpaqueArray<u32, 9usize> {
        dai_ImgTransformation_getIntrinsicMatrix(self)
    }
    #[inline]
    pub unsafe fn getIntrinsicMatrixInv(&self) -> __BindgenOpaqueArray<u32, 9usize> {
        dai_ImgTransformation_getIntrinsicMatrixInv(self)
    }
    #[inline]
    pub unsafe fn getDFov(&self, source: bool) -> f32 {
        dai_ImgTransformation_getDFov(self, source)
    }
    #[inline]
    pub unsafe fn getHFov(&self, source: bool) -> f32 {
        dai_ImgTransformation_getHFov(self, source)
    }
    #[inline]
    pub unsafe fn getVFov(&self, source: bool) -> f32 {
        dai_ImgTransformation_getVFov(self, source)
    }
    #[inline]
    pub unsafe fn getSrcCrops(&self) -> std_vector {
        dai_ImgTransformation_getSrcCrops(self)
    }
    #[inline]
    pub unsafe fn getSrcMaskPt(&mut self, x: usize, y: usize) -> bool {
        dai_ImgTransformation_getSrcMaskPt(self, x, y)
    }
    #[inline]
    pub unsafe fn getDstMaskPt(&mut self, x: usize, y: usize) -> bool {
        dai_ImgTransformation_getDstMaskPt(self, x, y)
    }
    #[inline]
    pub unsafe fn addTransformation(
        &mut self,
        matrix: __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addTransformation(self, matrix)
    }
    #[inline]
    pub unsafe fn addCrop(
        &mut self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addCrop(self, x, y, width, height)
    }
    #[inline]
    pub unsafe fn addPadding(
        &mut self,
        top: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addPadding(self, top, bottom, left, right)
    }
    #[inline]
    pub unsafe fn addFlipVertical(&mut self) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addFlipVertical(self)
    }
    #[inline]
    pub unsafe fn addFlipHorizontal(&mut self) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addFlipHorizontal(self)
    }
    #[inline]
    pub unsafe fn addRotation(
        &mut self,
        angle: f32,
        rotationPoint: dai_Point2f,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addRotation(self, angle, rotationPoint)
    }
    #[inline]
    pub unsafe fn addScale(&mut self, scaleX: f32, scaleY: f32) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addScale(self, scaleX, scaleY)
    }
    #[inline]
    pub unsafe fn addSrcCrops(&mut self, crops: *const std_vector) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_addSrcCrops(self, crops)
    }
    #[inline]
    pub unsafe fn setSize(&mut self, width: usize, height: usize) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_setSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setSourceSize(
        &mut self,
        width: usize,
        height: usize,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_setSourceSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setIntrinsicMatrix(
        &mut self,
        intrinsicMatrix: __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_setIntrinsicMatrix(self, intrinsicMatrix)
    }
    #[inline]
    pub unsafe fn setDistortionModel(
        &mut self,
        model: dai_CameraModel,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_setDistortionModel(self, model)
    }
    #[inline]
    pub unsafe fn setDistortionCoefficients(
        &mut self,
        coefficients: std_vector,
    ) -> *mut dai_ImgTransformation {
        dai_ImgTransformation_setDistortionCoefficients(self, coefficients)
    }
    #[inline]
    pub unsafe fn remapPointTo(
        &self,
        to: *const dai_ImgTransformation,
        point: dai_Point2f,
    ) -> dai_Point2f {
        dai_ImgTransformation_remapPointTo(self, to, point)
    }
    #[inline]
    pub unsafe fn remapPointFrom(
        &self,
        from: *const dai_ImgTransformation,
        point: dai_Point2f,
    ) -> dai_Point2f {
        dai_ImgTransformation_remapPointFrom(self, from, point)
    }
    #[inline]
    pub unsafe fn remapRectTo(
        &self,
        to: *const dai_ImgTransformation,
        rect: dai_RotatedRect,
    ) -> dai_RotatedRect {
        dai_ImgTransformation_remapRectTo(self, to, rect)
    }
    #[inline]
    pub unsafe fn remapRectFrom(
        &self,
        from: *const dai_ImgTransformation,
        rect: dai_RotatedRect,
    ) -> dai_RotatedRect {
        dai_ImgTransformation_remapRectFrom(self, from, rect)
    }
    #[inline]
    pub unsafe fn isValid(&self) -> bool {
        dai_ImgTransformation_isValid(self)
    }
}
#[repr(C)]
pub struct dai_ProtoSerializable__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_ProtoSerializable {
    pub vtable_: *const dai_ProtoSerializable__bindgen_vtable,
}
#[repr(C)]
pub struct dai_ProtoSerializable_SchemaPair {
    pub schemaName: std_string,
    pub schema: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ProtoSerializable_SchemaPair"]
        [::std::mem::size_of::<dai_ProtoSerializable_SchemaPair>() - 64usize];
    ["Alignment of dai_ProtoSerializable_SchemaPair"]
        [::std::mem::align_of::<dai_ProtoSerializable_SchemaPair>() - 8usize];
    ["Offset of field: dai_ProtoSerializable_SchemaPair::schemaName"]
        [::std::mem::offset_of!(dai_ProtoSerializable_SchemaPair, schemaName) - 0usize];
    ["Offset of field: dai_ProtoSerializable_SchemaPair::schema"]
        [::std::mem::offset_of!(dai_ProtoSerializable_SchemaPair, schema) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ProtoSerializable_dependent_false {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ProtoSerializable"][::std::mem::size_of::<dai_ProtoSerializable>() - 8usize];
    ["Alignment of dai_ProtoSerializable"]
        [::std::mem::align_of::<dai_ProtoSerializable>() - 8usize];
};
#[doc = " ImgFrame message. Carries image data and metadata."]
#[repr(C)]
pub struct dai_ImgFrame {
    pub _base: dai_Buffer,
    pub _base_1: dai_ProtoSerializable,
    pub fb: dai_ImgFrame_Specs,
    pub sourceFb: dai_ImgFrame_Specs,
    pub cam: dai_ImgFrame_CameraSettings,
    pub category: u32,
    pub instanceNum: u32,
    pub event: dai_FrameEvent,
    pub transformation: dai_ImgTransformation,
}
pub const dai_ImgFrame_Type_YUV422i: dai_ImgFrame_Type = 0;
pub const dai_ImgFrame_Type_YUV444p: dai_ImgFrame_Type = 1;
pub const dai_ImgFrame_Type_YUV420p: dai_ImgFrame_Type = 2;
pub const dai_ImgFrame_Type_YUV422p: dai_ImgFrame_Type = 3;
pub const dai_ImgFrame_Type_YUV400p: dai_ImgFrame_Type = 4;
pub const dai_ImgFrame_Type_RGBA8888: dai_ImgFrame_Type = 5;
pub const dai_ImgFrame_Type_RGB161616: dai_ImgFrame_Type = 6;
pub const dai_ImgFrame_Type_RGB888p: dai_ImgFrame_Type = 7;
pub const dai_ImgFrame_Type_BGR888p: dai_ImgFrame_Type = 8;
pub const dai_ImgFrame_Type_RGB888i: dai_ImgFrame_Type = 9;
pub const dai_ImgFrame_Type_BGR888i: dai_ImgFrame_Type = 10;
pub const dai_ImgFrame_Type_LUT2: dai_ImgFrame_Type = 11;
pub const dai_ImgFrame_Type_LUT4: dai_ImgFrame_Type = 12;
pub const dai_ImgFrame_Type_LUT16: dai_ImgFrame_Type = 13;
pub const dai_ImgFrame_Type_RAW16: dai_ImgFrame_Type = 14;
pub const dai_ImgFrame_Type_RAW14: dai_ImgFrame_Type = 15;
pub const dai_ImgFrame_Type_RAW12: dai_ImgFrame_Type = 16;
pub const dai_ImgFrame_Type_RAW10: dai_ImgFrame_Type = 17;
pub const dai_ImgFrame_Type_RAW8: dai_ImgFrame_Type = 18;
pub const dai_ImgFrame_Type_PACK10: dai_ImgFrame_Type = 19;
pub const dai_ImgFrame_Type_PACK12: dai_ImgFrame_Type = 20;
pub const dai_ImgFrame_Type_YUV444i: dai_ImgFrame_Type = 21;
pub const dai_ImgFrame_Type_NV12: dai_ImgFrame_Type = 22;
pub const dai_ImgFrame_Type_NV21: dai_ImgFrame_Type = 23;
pub const dai_ImgFrame_Type_BITSTREAM: dai_ImgFrame_Type = 24;
pub const dai_ImgFrame_Type_HDR: dai_ImgFrame_Type = 25;
pub const dai_ImgFrame_Type_RGBF16F16F16p: dai_ImgFrame_Type = 26;
pub const dai_ImgFrame_Type_BGRF16F16F16p: dai_ImgFrame_Type = 27;
pub const dai_ImgFrame_Type_RGBF16F16F16i: dai_ImgFrame_Type = 28;
pub const dai_ImgFrame_Type_BGRF16F16F16i: dai_ImgFrame_Type = 29;
pub const dai_ImgFrame_Type_GRAY8: dai_ImgFrame_Type = 30;
pub const dai_ImgFrame_Type_GRAYF16: dai_ImgFrame_Type = 31;
pub const dai_ImgFrame_Type_RAW32: dai_ImgFrame_Type = 32;
pub const dai_ImgFrame_Type_NONE: dai_ImgFrame_Type = 33;
pub type dai_ImgFrame_Type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImgFrame_dependent_false {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImgFrame_Specs {
    pub type_: dai_ImgFrame_Type,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub stride: ::std::os::raw::c_uint,
    pub bytesPP: ::std::os::raw::c_uint,
    pub p1Offset: ::std::os::raw::c_uint,
    pub p2Offset: ::std::os::raw::c_uint,
    pub p3Offset: ::std::os::raw::c_uint,
}
pub type dai_ImgFrame_Specs_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgFrame_Specs"][::std::mem::size_of::<dai_ImgFrame_Specs>() - 32usize];
    ["Alignment of dai_ImgFrame_Specs"][::std::mem::align_of::<dai_ImgFrame_Specs>() - 4usize];
    ["Offset of field: dai_ImgFrame_Specs::type_"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, type_) - 0usize];
    ["Offset of field: dai_ImgFrame_Specs::width"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, width) - 4usize];
    ["Offset of field: dai_ImgFrame_Specs::height"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, height) - 8usize];
    ["Offset of field: dai_ImgFrame_Specs::stride"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, stride) - 12usize];
    ["Offset of field: dai_ImgFrame_Specs::bytesPP"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, bytesPP) - 16usize];
    ["Offset of field: dai_ImgFrame_Specs::p1Offset"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, p1Offset) - 20usize];
    ["Offset of field: dai_ImgFrame_Specs::p2Offset"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, p2Offset) - 24usize];
    ["Offset of field: dai_ImgFrame_Specs::p3Offset"]
        [::std::mem::offset_of!(dai_ImgFrame_Specs, p3Offset) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImgFrame_CameraSettings {
    pub exposureTimeUs: i32,
    pub sensitivityIso: i32,
    pub lensPosition: i32,
    pub wbColorTemp: i32,
    pub lensPositionRaw: f32,
}
pub type dai_ImgFrame_CameraSettings_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgFrame_CameraSettings"]
        [::std::mem::size_of::<dai_ImgFrame_CameraSettings>() - 20usize];
    ["Alignment of dai_ImgFrame_CameraSettings"]
        [::std::mem::align_of::<dai_ImgFrame_CameraSettings>() - 4usize];
    ["Offset of field: dai_ImgFrame_CameraSettings::exposureTimeUs"]
        [::std::mem::offset_of!(dai_ImgFrame_CameraSettings, exposureTimeUs) - 0usize];
    ["Offset of field: dai_ImgFrame_CameraSettings::sensitivityIso"]
        [::std::mem::offset_of!(dai_ImgFrame_CameraSettings, sensitivityIso) - 4usize];
    ["Offset of field: dai_ImgFrame_CameraSettings::lensPosition"]
        [::std::mem::offset_of!(dai_ImgFrame_CameraSettings, lensPosition) - 8usize];
    ["Offset of field: dai_ImgFrame_CameraSettings::wbColorTemp"]
        [::std::mem::offset_of!(dai_ImgFrame_CameraSettings, wbColorTemp) - 12usize];
    ["Offset of field: dai_ImgFrame_CameraSettings::lensPositionRaw"]
        [::std::mem::offset_of!(dai_ImgFrame_CameraSettings, lensPositionRaw) - 16usize];
};
pub type dai_ImgFrame_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgFrame"][::std::mem::size_of::<dai_ImgFrame>() - 464usize];
    ["Alignment of dai_ImgFrame"][::std::mem::align_of::<dai_ImgFrame>() - 8usize];
    ["Offset of field: dai_ImgFrame::fb"][::std::mem::offset_of!(dai_ImgFrame, fb) - 72usize];
    ["Offset of field: dai_ImgFrame::sourceFb"]
        [::std::mem::offset_of!(dai_ImgFrame, sourceFb) - 104usize];
    ["Offset of field: dai_ImgFrame::cam"][::std::mem::offset_of!(dai_ImgFrame, cam) - 136usize];
    ["Offset of field: dai_ImgFrame::category"]
        [::std::mem::offset_of!(dai_ImgFrame, category) - 156usize];
    ["Offset of field: dai_ImgFrame::instanceNum"]
        [::std::mem::offset_of!(dai_ImgFrame, instanceNum) - 160usize];
    ["Offset of field: dai_ImgFrame::event"]
        [::std::mem::offset_of!(dai_ImgFrame, event) - 164usize];
    ["Offset of field: dai_ImgFrame::transformation"]
        [::std::mem::offset_of!(dai_ImgFrame, transformation) - 168usize];
};
unsafe extern "C" {
    #[doc = " Retrieves image timestamp (at the specified offset of exposure) related to dai::Clock::now()"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame12getTimestampENS_20CameraExposureOffsetE"]
    pub fn dai_ImgFrame_getTimestamp(
        this: *const dai_ImgFrame,
        offset: dai_CameraExposureOffset,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration>;
}
unsafe extern "C" {
    #[doc = " Retrieves image timestamp (at the specified offset of exposure) directly captured from device's monotonic clock,\n not synchronized to host time. Used when monotonicity is required."]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame18getTimestampDeviceENS_20CameraExposureOffsetE"]
    pub fn dai_ImgFrame_getTimestampDevice(
        this: *const dai_ImgFrame,
        offset: dai_CameraExposureOffset,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration>;
}
unsafe extern "C" {
    #[doc = " Retrieves instance number"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame14getInstanceNumEv"]
    pub fn dai_ImgFrame_getInstanceNum(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image category"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame11getCategoryEv"]
    pub fn dai_ImgFrame_getCategory(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image width in pixels"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame8getWidthEv"]
    pub fn dai_ImgFrame_getWidth(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image line stride in bytes"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame9getStrideEv"]
    pub fn dai_ImgFrame_getStride(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image plane stride (offset to next plane) in bytes\n\n @param current plane index, 0 or 1"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame14getPlaneStrideEi"]
    pub fn dai_ImgFrame_getPlaneStride(
        this: *const dai_ImgFrame,
        planeIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image height in pixels"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame9getHeightEv"]
    pub fn dai_ImgFrame_getHeight(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image plane height in lines"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame14getPlaneHeightEv"]
    pub fn dai_ImgFrame_getPlaneHeight(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves source image width in pixels"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame14getSourceWidthEv"]
    pub fn dai_ImgFrame_getSourceWidth(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves source image height in pixels"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame15getSourceHeightEv"]
    pub fn dai_ImgFrame_getSourceHeight(this: *const dai_ImgFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image type"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame7getTypeEv"]
    pub fn dai_ImgFrame_getType(this: *const dai_ImgFrame) -> dai_ImgFrame_Type;
}
unsafe extern "C" {
    #[doc = " Retrieves image bytes per pixel"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame16getBytesPerPixelEv"]
    pub fn dai_ImgFrame_getBytesPerPixel(this: *const dai_ImgFrame) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves exposure time"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame15getExposureTimeEv"]
    pub fn dai_ImgFrame_getExposureTime(this: *const dai_ImgFrame) -> std_chrono_microseconds;
}
unsafe extern "C" {
    #[doc = " Retrieves sensitivity, as an ISO value"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame14getSensitivityEv"]
    pub fn dai_ImgFrame_getSensitivity(this: *const dai_ImgFrame) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves white-balance color temperature of the light source, in kelvins"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame19getColorTemperatureEv"]
    pub fn dai_ImgFrame_getColorTemperature(this: *const dai_ImgFrame) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves lens position, range 0..255. Returns -1 if not available"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame15getLensPositionEv"]
    pub fn dai_ImgFrame_getLensPosition(this: *const dai_ImgFrame) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves lens position, range 0.0f..1.0f. Returns -1 if not available"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame18getLensPositionRawEv"]
    pub fn dai_ImgFrame_getLensPositionRaw(this: *const dai_ImgFrame) -> f32;
}
unsafe extern "C" {
    #[doc = " Instance number relates to the origin of the frame (which camera)\n\n @param instance Instance number"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame14setInstanceNumEj"]
    pub fn dai_ImgFrame_setInstanceNum(
        this: *mut dai_ImgFrame,
        instance: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " @param category Image category"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame11setCategoryEj"]
    pub fn dai_ImgFrame_setCategory(
        this: *mut dai_ImgFrame,
        category: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame width\n\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame8setWidthEj"]
    pub fn dai_ImgFrame_setWidth(
        this: *mut dai_ImgFrame,
        width: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame stride\n\n @param stride frame stride"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame9setStrideEj"]
    pub fn dai_ImgFrame_setStride(
        this: *mut dai_ImgFrame,
        stride: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame height\n\n @param height frame height"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame9setHeightEj"]
    pub fn dai_ImgFrame_setHeight(
        this: *mut dai_ImgFrame,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame size\n\n @param height frame height\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame7setSizeEjj"]
    pub fn dai_ImgFrame_setSize(
        this: *mut dai_ImgFrame,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame size\n\n @param size frame size"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame7setSizeESt5tupleIJjjEE"]
    pub fn dai_ImgFrame_setSize1(this: *mut dai_ImgFrame, size: std_tuple) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies source frame size\n\n @param height frame height\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame13setSourceSizeEjj"]
    pub fn dai_ImgFrame_setSourceSize(
        this: *mut dai_ImgFrame,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies source frame size\n\n @param size frame size"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame13setSourceSizeESt5tupleIJjjEE"]
    pub fn dai_ImgFrame_setSourceSize1(
        this: *mut dai_ImgFrame,
        size: std_tuple,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame type, RGB, BGR, ...\n\n @param type Type of image"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame7setTypeENS0_4TypeE"]
    pub fn dai_ImgFrame_setType(
        this: *mut dai_ImgFrame,
        type_: dai_ImgFrame_Type,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Remap a point from the current frame to the source frame\n @param point point to remap\n @returns remapped point"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame20remapPointFromSourceERKNS_7Point2fE"]
    pub fn dai_ImgFrame_remapPointFromSource(
        this: *const dai_ImgFrame,
        point: *const dai_Point2f,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Remap a point from the source frame to the current frame\n @param point point to remap\n @returns remapped point"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame18remapPointToSourceERKNS_7Point2fE"]
    pub fn dai_ImgFrame_remapPointToSource(
        this: *const dai_ImgFrame,
        point: *const dai_Point2f,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Remap a rectangle from the source frame to the current frame\n\n @param rect rectangle to remap\n @returns remapped rectangle"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame19remapRectFromSourceERKNS_4RectE"]
    pub fn dai_ImgFrame_remapRectFromSource(
        this: *const dai_ImgFrame,
        rect: *const dai_Rect,
    ) -> dai_Rect;
}
unsafe extern "C" {
    #[doc = " Remap a rectangle from the current frame to the source frame\n\n @param rect rectangle to remap\n @returns remapped rectangle"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame17remapRectToSourceERKNS_4RectE"]
    pub fn dai_ImgFrame_remapRectToSource(
        this: *const dai_ImgFrame,
        rect: *const dai_Rect,
    ) -> dai_Rect;
}
unsafe extern "C" {
    #[doc = " Convience function to initialize meta data from another frame\n Copies over timestamps, transformations done on the image, etc.\n @param sourceFrame source frame from which the metadata is taken from"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame11setMetadataERKS0_"]
    pub fn dai_ImgFrame_setMetadata(
        this: *mut dai_ImgFrame,
        sourceFrame: *const dai_ImgFrame,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " Convience function to initialize meta data from another frame\n Copies over timestamps, transformations done on the image, etc.\n @param sourceFrame shared pointer to source frame from which the metadata is taken from"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame11setMetadataERKSt10shared_ptrIS0_E"]
    pub fn dai_ImgFrame_setMetadata1(
        this: *mut dai_ImgFrame,
        sourceFrame: *const std_shared_ptr,
    ) -> *mut dai_ImgFrame;
}
unsafe extern "C" {
    #[doc = " @note Fov API works correctly only on rectilinear frames\n Get the source diagonal field of view in degrees\n\n @returns field of view in degrees"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame13getSourceDFovEv"]
    pub fn dai_ImgFrame_getSourceDFov(this: *const dai_ImgFrame) -> f32;
}
unsafe extern "C" {
    #[doc = " @note Fov API works correctly only on rectilinear frames\n Get the source horizontal field of view\n\n @param degrees field of view in degrees"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame13getSourceHFovEv"]
    pub fn dai_ImgFrame_getSourceHFov(this: *const dai_ImgFrame) -> f32;
}
unsafe extern "C" {
    #[doc = " @note Fov API works correctly only on rectilinear frames\n Get the source vertical field of view\n\n @param degrees field of view in degrees"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame13getSourceVFovEv"]
    pub fn dai_ImgFrame_getSourceVFov(this: *const dai_ImgFrame) -> f32;
}
unsafe extern "C" {
    #[doc = " Check that the image transformation match the image size\n\n @returns true if the transformations are valid"]
    #[link_name = "\u{1}_ZNK3dai8ImgFrame23validateTransformationsEv"]
    pub fn dai_ImgFrame_validateTransformations(this: *const dai_ImgFrame) -> bool;
}
unsafe extern "C" {
    #[doc = " Remap point between two frames\n @param originPoint point to remap\n @param originFrame origin frame\n @param destFrame destination frame\n\n @returns remapped point"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame23remapPointBetweenFramesERKNS_7Point2fERKS0_S5_"]
    pub fn dai_ImgFrame_remapPointBetweenFrames(
        originPoint: *const dai_Point2f,
        originFrame: *const dai_ImgFrame,
        destFrame: *const dai_ImgFrame,
    ) -> dai_Point2f;
}
unsafe extern "C" {
    #[doc = " Remap rectangle between two frames\n @param originRect rectangle to remap\n @param originFrame origin frame\n @param destFrame destination frame\n\n @returns remapped rectangle"]
    #[link_name = "\u{1}_ZN3dai8ImgFrame22remapRectBetweenFramesERKNS_4RectERKS0_S5_"]
    pub fn dai_ImgFrame_remapRectBetweenFrames(
        originRect: *const dai_Rect,
        originFrame: *const dai_ImgFrame,
        destFrame: *const dai_ImgFrame,
    ) -> dai_Rect;
}
unsafe extern "C" {
    #[doc = " Construct ImgFrame message.\n Timestamp is set to now"]
    #[link_name = "\u{1}_ZN3dai8ImgFrameC1Ev"]
    pub fn dai_ImgFrame_ImgFrame(this: *mut dai_ImgFrame);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8ImgFrameC1El"]
    pub fn dai_ImgFrame_ImgFrame1(this: *mut dai_ImgFrame, fd: ::std::os::raw::c_long);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8ImgFrameC1Em"]
    pub fn dai_ImgFrame_ImgFrame2(this: *mut dai_ImgFrame, size: usize);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8ImgFrameC1Elm"]
    pub fn dai_ImgFrame_ImgFrame3(this: *mut dai_ImgFrame, fd: ::std::os::raw::c_long, size: usize);
}
impl dai_ImgFrame {
    #[inline]
    pub unsafe fn getTimestamp(
        &self,
        offset: dai_CameraExposureOffset,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration> {
        dai_ImgFrame_getTimestamp(self, offset)
    }
    #[inline]
    pub unsafe fn getTimestampDevice(
        &self,
        offset: dai_CameraExposureOffset,
    ) -> std_chrono_time_point<std_chrono_steady_clock_duration> {
        dai_ImgFrame_getTimestampDevice(self, offset)
    }
    #[inline]
    pub unsafe fn getInstanceNum(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getInstanceNum(self)
    }
    #[inline]
    pub unsafe fn getCategory(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getCategory(self)
    }
    #[inline]
    pub unsafe fn getWidth(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getWidth(self)
    }
    #[inline]
    pub unsafe fn getStride(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getStride(self)
    }
    #[inline]
    pub unsafe fn getPlaneStride(
        &self,
        planeIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getPlaneStride(self, planeIndex)
    }
    #[inline]
    pub unsafe fn getHeight(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getHeight(self)
    }
    #[inline]
    pub unsafe fn getPlaneHeight(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getPlaneHeight(self)
    }
    #[inline]
    pub unsafe fn getSourceWidth(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getSourceWidth(self)
    }
    #[inline]
    pub unsafe fn getSourceHeight(&self) -> ::std::os::raw::c_uint {
        dai_ImgFrame_getSourceHeight(self)
    }
    #[inline]
    pub unsafe fn getType(&self) -> dai_ImgFrame_Type {
        dai_ImgFrame_getType(self)
    }
    #[inline]
    pub unsafe fn getBytesPerPixel(&self) -> f32 {
        dai_ImgFrame_getBytesPerPixel(self)
    }
    #[inline]
    pub unsafe fn getExposureTime(&self) -> std_chrono_microseconds {
        dai_ImgFrame_getExposureTime(self)
    }
    #[inline]
    pub unsafe fn getSensitivity(&self) -> ::std::os::raw::c_int {
        dai_ImgFrame_getSensitivity(self)
    }
    #[inline]
    pub unsafe fn getColorTemperature(&self) -> ::std::os::raw::c_int {
        dai_ImgFrame_getColorTemperature(self)
    }
    #[inline]
    pub unsafe fn getLensPosition(&self) -> ::std::os::raw::c_int {
        dai_ImgFrame_getLensPosition(self)
    }
    #[inline]
    pub unsafe fn getLensPositionRaw(&self) -> f32 {
        dai_ImgFrame_getLensPositionRaw(self)
    }
    #[inline]
    pub unsafe fn setInstanceNum(&mut self, instance: ::std::os::raw::c_uint) -> *mut dai_ImgFrame {
        dai_ImgFrame_setInstanceNum(self, instance)
    }
    #[inline]
    pub unsafe fn setCategory(&mut self, category: ::std::os::raw::c_uint) -> *mut dai_ImgFrame {
        dai_ImgFrame_setCategory(self, category)
    }
    #[inline]
    pub unsafe fn setWidth(&mut self, width: ::std::os::raw::c_uint) -> *mut dai_ImgFrame {
        dai_ImgFrame_setWidth(self, width)
    }
    #[inline]
    pub unsafe fn setStride(&mut self, stride: ::std::os::raw::c_uint) -> *mut dai_ImgFrame {
        dai_ImgFrame_setStride(self, stride)
    }
    #[inline]
    pub unsafe fn setHeight(&mut self, height: ::std::os::raw::c_uint) -> *mut dai_ImgFrame {
        dai_ImgFrame_setHeight(self, height)
    }
    #[inline]
    pub unsafe fn setSize(
        &mut self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame {
        dai_ImgFrame_setSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setSize1(&mut self, size: std_tuple) -> *mut dai_ImgFrame {
        dai_ImgFrame_setSize1(self, size)
    }
    #[inline]
    pub unsafe fn setSourceSize(
        &mut self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_ImgFrame {
        dai_ImgFrame_setSourceSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setSourceSize1(&mut self, size: std_tuple) -> *mut dai_ImgFrame {
        dai_ImgFrame_setSourceSize1(self, size)
    }
    #[inline]
    pub unsafe fn setType(&mut self, type_: dai_ImgFrame_Type) -> *mut dai_ImgFrame {
        dai_ImgFrame_setType(self, type_)
    }
    #[inline]
    pub unsafe fn remapPointFromSource(&self, point: *const dai_Point2f) -> dai_Point2f {
        dai_ImgFrame_remapPointFromSource(self, point)
    }
    #[inline]
    pub unsafe fn remapPointToSource(&self, point: *const dai_Point2f) -> dai_Point2f {
        dai_ImgFrame_remapPointToSource(self, point)
    }
    #[inline]
    pub unsafe fn remapRectFromSource(&self, rect: *const dai_Rect) -> dai_Rect {
        dai_ImgFrame_remapRectFromSource(self, rect)
    }
    #[inline]
    pub unsafe fn remapRectToSource(&self, rect: *const dai_Rect) -> dai_Rect {
        dai_ImgFrame_remapRectToSource(self, rect)
    }
    #[inline]
    pub unsafe fn setMetadata(&mut self, sourceFrame: *const dai_ImgFrame) -> *mut dai_ImgFrame {
        dai_ImgFrame_setMetadata(self, sourceFrame)
    }
    #[inline]
    pub unsafe fn setMetadata1(&mut self, sourceFrame: *const std_shared_ptr) -> *mut dai_ImgFrame {
        dai_ImgFrame_setMetadata1(self, sourceFrame)
    }
    #[inline]
    pub unsafe fn getSourceDFov(&self) -> f32 {
        dai_ImgFrame_getSourceDFov(self)
    }
    #[inline]
    pub unsafe fn getSourceHFov(&self) -> f32 {
        dai_ImgFrame_getSourceHFov(self)
    }
    #[inline]
    pub unsafe fn getSourceVFov(&self) -> f32 {
        dai_ImgFrame_getSourceVFov(self)
    }
    #[inline]
    pub unsafe fn validateTransformations(&self) -> bool {
        dai_ImgFrame_validateTransformations(self)
    }
    #[inline]
    pub unsafe fn remapPointBetweenFrames(
        originPoint: *const dai_Point2f,
        originFrame: *const dai_ImgFrame,
        destFrame: *const dai_ImgFrame,
    ) -> dai_Point2f {
        dai_ImgFrame_remapPointBetweenFrames(originPoint, originFrame, destFrame)
    }
    #[inline]
    pub unsafe fn remapRectBetweenFrames(
        originRect: *const dai_Rect,
        originFrame: *const dai_ImgFrame,
        destFrame: *const dai_ImgFrame,
    ) -> dai_Rect {
        dai_ImgFrame_remapRectBetweenFrames(originRect, originFrame, destFrame)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_ImgFrame_ImgFrame(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(fd: ::std::os::raw::c_long) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_ImgFrame_ImgFrame1(__bindgen_tmp.as_mut_ptr(), fd);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_ImgFrame_ImgFrame2(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(fd: ::std::os::raw::c_long, size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_ImgFrame_ImgFrame3(__bindgen_tmp.as_mut_ptr(), fd, size);
        __bindgen_tmp.assume_init()
    }
}
pub const dai_device_XLINK_CHANNEL_PIPELINE_CONFIG: &[u8; 18] = b"__pipeline_config\0";
pub const dai_device_XLINK_CHANNEL_MAIN_RPC: &[u8; 11] = b"__rpc_main\0";
pub const dai_device_XLINK_CHANNEL_TIMESYNC: &[u8; 11] = b"__timesync\0";
pub const dai_device_XLINK_CHANNEL_LOG: &[u8; 6] = b"__log\0";
pub const dai_device_XLINK_CHANNEL_WATCHDOG: &[u8; 11] = b"__watchdog\0";
pub const dai_device_XLINK_USB_BUFFER_MAX_SIZE: ::std::os::raw::c_uint = 5242880;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6deviceL26XLINK_USB_WATCHDOG_TIMEOUTE"]
    pub static dai_device_XLINK_USB_WATCHDOG_TIMEOUT: std_chrono_milliseconds;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6deviceL26XLINK_TCP_WATCHDOG_TIMEOUTE"]
    pub static dai_device_XLINK_TCP_WATCHDOG_TIMEOUT: std_chrono_milliseconds;
}
pub const dai_device_XLINK_MESSAGE_METADATA_MAX_SIZE: ::std::os::raw::c_int = 51200;
pub const dai_BOARD_CONFIG_MAGIC1: u32 = 2013331456;
pub const dai_BOARD_CONFIG_MAGIC2: u32 = 568989670;
#[repr(C)]
pub struct dai_BoardConfig {
    pub usb: dai_BoardConfig_USB,
    pub network: dai_BoardConfig_Network,
    #[doc = " Optional list of FreeBSD sysctl parameters to be set (system, network, etc.).\n For example: \"net.inet.tcp.delayed_ack=0\" (this one is also set by default)"]
    pub sysctl: std_vector,
    #[doc = " Watchdog config"]
    pub watchdogTimeoutMs: std_optional,
    pub watchdogInitialDelayMs: std_optional,
    pub gpio: std_unordered_map,
    #[doc = " UART instance map"]
    pub uart: std_unordered_map,
    #[doc = " PCIe config"]
    pub pcieInternalClock: std_optional,
    #[doc = " USB3 phy config"]
    pub usb3PhyInternalClock: std_optional,
    #[doc = " MIPI 4Lane RGB config"]
    pub mipi4LaneRgb: std_optional,
    #[doc = " eMMC config"]
    pub emmc: std_optional,
    #[doc = " log path"]
    pub logPath: std_optional,
    #[doc = " Max log size"]
    pub logSizeMax: std_optional,
    #[doc = " log verbosity"]
    pub logVerbosity: std_optional,
    #[doc = " log device prints"]
    pub logDevicePrints: std_optional,
    pub nonExclusiveMode: bool,
    pub camera: std_unordered_map,
    pub imu: std_optional,
    pub uvc: std_optional,
    pub defaultImuExtr: std_unordered_map,
}
#[doc = " USB related config"]
#[repr(C)]
pub struct dai_BoardConfig_USB {
    pub vid: u16,
    pub pid: u16,
    pub flashBootedVid: u16,
    pub flashBootedPid: u16,
    pub maxSpeed: dai_UsbSpeed,
    pub productName: std_string,
    pub manufacturer: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_USB"][::std::mem::size_of::<dai_BoardConfig_USB>() - 80usize];
    ["Alignment of dai_BoardConfig_USB"][::std::mem::align_of::<dai_BoardConfig_USB>() - 8usize];
    ["Offset of field: dai_BoardConfig_USB::vid"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, vid) - 0usize];
    ["Offset of field: dai_BoardConfig_USB::pid"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, pid) - 2usize];
    ["Offset of field: dai_BoardConfig_USB::flashBootedVid"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, flashBootedVid) - 4usize];
    ["Offset of field: dai_BoardConfig_USB::flashBootedPid"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, flashBootedPid) - 6usize];
    ["Offset of field: dai_BoardConfig_USB::maxSpeed"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, maxSpeed) - 8usize];
    ["Offset of field: dai_BoardConfig_USB::productName"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, productName) - 16usize];
    ["Offset of field: dai_BoardConfig_USB::manufacturer"]
        [::std::mem::offset_of!(dai_BoardConfig_USB, manufacturer) - 48usize];
};
#[doc = " Network configuration"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_BoardConfig_Network {
    #[doc = " Network MTU, 0 is auto (usually 1500 for Ethernet) or forwarded\n from bootloader (not yet implemented there).\n Note: not advised to increase past 1500 for now"]
    pub mtu: u16,
    #[doc = " Sets the `TCP_NODELAY` option for XLink TCP sockets (disable Nagle's algorithm),\n reducing latency at the expense of a small hit for max throughput. Default is `true`"]
    pub xlinkTcpNoDelay: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_Network"][::std::mem::size_of::<dai_BoardConfig_Network>() - 4usize];
    ["Alignment of dai_BoardConfig_Network"]
        [::std::mem::align_of::<dai_BoardConfig_Network>() - 2usize];
    ["Offset of field: dai_BoardConfig_Network::mtu"]
        [::std::mem::offset_of!(dai_BoardConfig_Network, mtu) - 0usize];
    ["Offset of field: dai_BoardConfig_Network::xlinkTcpNoDelay"]
        [::std::mem::offset_of!(dai_BoardConfig_Network, xlinkTcpNoDelay) - 2usize];
};
#[doc = " GPIO config"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_BoardConfig_GPIO {
    pub mode: dai_BoardConfig_GPIO_Mode,
    pub direction: dai_BoardConfig_GPIO_Direction,
    pub level: dai_BoardConfig_GPIO_Level,
    pub pull: dai_BoardConfig_GPIO_Pull,
    pub drive: dai_BoardConfig_GPIO_Drive,
    pub schmitt: bool,
    pub slewFast: bool,
}
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_0: dai_BoardConfig_GPIO_Mode = 0;
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_1: dai_BoardConfig_GPIO_Mode = 1;
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_2: dai_BoardConfig_GPIO_Mode = 2;
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_3: dai_BoardConfig_GPIO_Mode = 3;
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_4: dai_BoardConfig_GPIO_Mode = 4;
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_5: dai_BoardConfig_GPIO_Mode = 5;
pub const dai_BoardConfig_GPIO_Mode_ALT_MODE_6: dai_BoardConfig_GPIO_Mode = 6;
pub const dai_BoardConfig_GPIO_Mode_DIRECT: dai_BoardConfig_GPIO_Mode = 7;
pub type dai_BoardConfig_GPIO_Mode = ::std::os::raw::c_schar;
pub const dai_BoardConfig_GPIO_Direction_INPUT: dai_BoardConfig_GPIO_Direction = 0;
pub const dai_BoardConfig_GPIO_Direction_OUTPUT: dai_BoardConfig_GPIO_Direction = 1;
pub type dai_BoardConfig_GPIO_Direction = ::std::os::raw::c_schar;
pub const dai_BoardConfig_GPIO_Level_LOW: dai_BoardConfig_GPIO_Level = 0;
pub const dai_BoardConfig_GPIO_Level_HIGH: dai_BoardConfig_GPIO_Level = 1;
pub type dai_BoardConfig_GPIO_Level = ::std::os::raw::c_schar;
pub const dai_BoardConfig_GPIO_Pull_NO_PULL: dai_BoardConfig_GPIO_Pull = 0;
pub const dai_BoardConfig_GPIO_Pull_PULL_UP: dai_BoardConfig_GPIO_Pull = 1;
pub const dai_BoardConfig_GPIO_Pull_PULL_DOWN: dai_BoardConfig_GPIO_Pull = 2;
pub const dai_BoardConfig_GPIO_Pull_BUS_KEEPER: dai_BoardConfig_GPIO_Pull = 3;
pub type dai_BoardConfig_GPIO_Pull = ::std::os::raw::c_schar;
pub const dai_BoardConfig_GPIO_Drive_MA_2: dai_BoardConfig_GPIO_Drive = 2;
pub const dai_BoardConfig_GPIO_Drive_MA_4: dai_BoardConfig_GPIO_Drive = 4;
pub const dai_BoardConfig_GPIO_Drive_MA_8: dai_BoardConfig_GPIO_Drive = 8;
pub const dai_BoardConfig_GPIO_Drive_MA_12: dai_BoardConfig_GPIO_Drive = 12;
#[doc = " Drive strength in mA (2, 4, 8 and 12mA)"]
pub type dai_BoardConfig_GPIO_Drive = ::std::os::raw::c_schar;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_GPIO"][::std::mem::size_of::<dai_BoardConfig_GPIO>() - 7usize];
    ["Alignment of dai_BoardConfig_GPIO"][::std::mem::align_of::<dai_BoardConfig_GPIO>() - 1usize];
    ["Offset of field: dai_BoardConfig_GPIO::mode"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, mode) - 0usize];
    ["Offset of field: dai_BoardConfig_GPIO::direction"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, direction) - 1usize];
    ["Offset of field: dai_BoardConfig_GPIO::level"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, level) - 2usize];
    ["Offset of field: dai_BoardConfig_GPIO::pull"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, pull) - 3usize];
    ["Offset of field: dai_BoardConfig_GPIO::drive"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, drive) - 4usize];
    ["Offset of field: dai_BoardConfig_GPIO::schmitt"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, schmitt) - 5usize];
    ["Offset of field: dai_BoardConfig_GPIO::slewFast"]
        [::std::mem::offset_of!(dai_BoardConfig_GPIO, slewFast) - 6usize];
};
#[doc = " UART instance config"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_BoardConfig_UART {
    pub tmp: ::std::os::raw::c_schar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_UART"][::std::mem::size_of::<dai_BoardConfig_UART>() - 1usize];
    ["Alignment of dai_BoardConfig_UART"][::std::mem::align_of::<dai_BoardConfig_UART>() - 1usize];
    ["Offset of field: dai_BoardConfig_UART::tmp"]
        [::std::mem::offset_of!(dai_BoardConfig_UART, tmp) - 0usize];
};
#[doc = " Camera description"]
#[repr(C)]
pub struct dai_BoardConfig_Camera {
    pub name: std_string,
    pub sensorType: std_optional,
    pub orientation: std_optional,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_Camera"][::std::mem::size_of::<dai_BoardConfig_Camera>() - 48usize];
    ["Alignment of dai_BoardConfig_Camera"]
        [::std::mem::align_of::<dai_BoardConfig_Camera>() - 8usize];
    ["Offset of field: dai_BoardConfig_Camera::name"]
        [::std::mem::offset_of!(dai_BoardConfig_Camera, name) - 0usize];
    ["Offset of field: dai_BoardConfig_Camera::sensorType"]
        [::std::mem::offset_of!(dai_BoardConfig_Camera, sensorType) - 32usize];
    ["Offset of field: dai_BoardConfig_Camera::orientation"]
        [::std::mem::offset_of!(dai_BoardConfig_Camera, orientation) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_BoardConfig_IMU {
    pub bus: i8,
    pub interrupt: i8,
    pub wake: i8,
    pub csGpio: i8,
    pub boot: i8,
    pub reset: i8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_IMU"][::std::mem::size_of::<dai_BoardConfig_IMU>() - 6usize];
    ["Alignment of dai_BoardConfig_IMU"][::std::mem::align_of::<dai_BoardConfig_IMU>() - 1usize];
    ["Offset of field: dai_BoardConfig_IMU::bus"]
        [::std::mem::offset_of!(dai_BoardConfig_IMU, bus) - 0usize];
    ["Offset of field: dai_BoardConfig_IMU::interrupt"]
        [::std::mem::offset_of!(dai_BoardConfig_IMU, interrupt) - 1usize];
    ["Offset of field: dai_BoardConfig_IMU::wake"]
        [::std::mem::offset_of!(dai_BoardConfig_IMU, wake) - 2usize];
    ["Offset of field: dai_BoardConfig_IMU::csGpio"]
        [::std::mem::offset_of!(dai_BoardConfig_IMU, csGpio) - 3usize];
    ["Offset of field: dai_BoardConfig_IMU::boot"]
        [::std::mem::offset_of!(dai_BoardConfig_IMU, boot) - 4usize];
    ["Offset of field: dai_BoardConfig_IMU::reset"]
        [::std::mem::offset_of!(dai_BoardConfig_IMU, reset) - 5usize];
};
#[doc = " UVC configuration for USB descriptor"]
#[repr(C)]
pub struct dai_BoardConfig_UVC {
    pub cameraName: std_string,
    pub width: u16,
    pub height: u16,
    pub frameType: dai_ImgFrame_Type,
    pub enable: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig_UVC"][::std::mem::size_of::<dai_BoardConfig_UVC>() - 48usize];
    ["Alignment of dai_BoardConfig_UVC"][::std::mem::align_of::<dai_BoardConfig_UVC>() - 8usize];
    ["Offset of field: dai_BoardConfig_UVC::cameraName"]
        [::std::mem::offset_of!(dai_BoardConfig_UVC, cameraName) - 0usize];
    ["Offset of field: dai_BoardConfig_UVC::width"]
        [::std::mem::offset_of!(dai_BoardConfig_UVC, width) - 32usize];
    ["Offset of field: dai_BoardConfig_UVC::height"]
        [::std::mem::offset_of!(dai_BoardConfig_UVC, height) - 34usize];
    ["Offset of field: dai_BoardConfig_UVC::frameType"]
        [::std::mem::offset_of!(dai_BoardConfig_UVC, frameType) - 36usize];
    ["Offset of field: dai_BoardConfig_UVC::enable"]
        [::std::mem::offset_of!(dai_BoardConfig_UVC, enable) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BoardConfig"][::std::mem::size_of::<dai_BoardConfig>() - 496usize];
    ["Alignment of dai_BoardConfig"][::std::mem::align_of::<dai_BoardConfig>() - 8usize];
    ["Offset of field: dai_BoardConfig::usb"]
        [::std::mem::offset_of!(dai_BoardConfig, usb) - 0usize];
    ["Offset of field: dai_BoardConfig::network"]
        [::std::mem::offset_of!(dai_BoardConfig, network) - 80usize];
    ["Offset of field: dai_BoardConfig::sysctl"]
        [::std::mem::offset_of!(dai_BoardConfig, sysctl) - 88usize];
    ["Offset of field: dai_BoardConfig::watchdogTimeoutMs"]
        [::std::mem::offset_of!(dai_BoardConfig, watchdogTimeoutMs) - 112usize];
    ["Offset of field: dai_BoardConfig::watchdogInitialDelayMs"]
        [::std::mem::offset_of!(dai_BoardConfig, watchdogInitialDelayMs) - 120usize];
    ["Offset of field: dai_BoardConfig::gpio"]
        [::std::mem::offset_of!(dai_BoardConfig, gpio) - 128usize];
    ["Offset of field: dai_BoardConfig::uart"]
        [::std::mem::offset_of!(dai_BoardConfig, uart) - 184usize];
    ["Offset of field: dai_BoardConfig::pcieInternalClock"]
        [::std::mem::offset_of!(dai_BoardConfig, pcieInternalClock) - 240usize];
    ["Offset of field: dai_BoardConfig::usb3PhyInternalClock"]
        [::std::mem::offset_of!(dai_BoardConfig, usb3PhyInternalClock) - 242usize];
    ["Offset of field: dai_BoardConfig::mipi4LaneRgb"]
        [::std::mem::offset_of!(dai_BoardConfig, mipi4LaneRgb) - 244usize];
    ["Offset of field: dai_BoardConfig::emmc"]
        [::std::mem::offset_of!(dai_BoardConfig, emmc) - 246usize];
    ["Offset of field: dai_BoardConfig::logPath"]
        [::std::mem::offset_of!(dai_BoardConfig, logPath) - 248usize];
    ["Offset of field: dai_BoardConfig::logSizeMax"]
        [::std::mem::offset_of!(dai_BoardConfig, logSizeMax) - 288usize];
    ["Offset of field: dai_BoardConfig::logVerbosity"]
        [::std::mem::offset_of!(dai_BoardConfig, logVerbosity) - 304usize];
    ["Offset of field: dai_BoardConfig::logDevicePrints"]
        [::std::mem::offset_of!(dai_BoardConfig, logDevicePrints) - 312usize];
    ["Offset of field: dai_BoardConfig::nonExclusiveMode"]
        [::std::mem::offset_of!(dai_BoardConfig, nonExclusiveMode) - 314usize];
    ["Offset of field: dai_BoardConfig::camera"]
        [::std::mem::offset_of!(dai_BoardConfig, camera) - 320usize];
    ["Offset of field: dai_BoardConfig::imu"]
        [::std::mem::offset_of!(dai_BoardConfig, imu) - 376usize];
    ["Offset of field: dai_BoardConfig::uvc"]
        [::std::mem::offset_of!(dai_BoardConfig, uvc) - 384usize];
    ["Offset of field: dai_BoardConfig::defaultImuExtr"]
        [::std::mem::offset_of!(dai_BoardConfig, defaultImuExtr) - 440usize];
};
pub const dai_ProcessorType_LEON_CSS: dai_ProcessorType = 0;
pub const dai_ProcessorType_LEON_MSS: dai_ProcessorType = 1;
pub const dai_ProcessorType_CPU: dai_ProcessorType = 2;
pub const dai_ProcessorType_DSP: dai_ProcessorType = 3;
#[doc = " On which processor the node will be placed\n\n Enum specifying processor"]
pub type dai_ProcessorType = i32;
#[repr(C)]
pub struct dai_CrashDump {
    pub crashReports: std_vector,
    pub depthaiCommitHash: std_string,
    pub deviceId: std_string,
}
#[repr(C)]
pub struct dai_CrashDump_CrashReport {
    pub processor: dai_ProcessorType,
    pub errorSource: std_string,
    pub crashedThreadId: u32,
    pub errorSourceInfo: dai_CrashDump_CrashReport_ErrorSourceInfo,
    pub threadCallstack: std_vector,
}
#[repr(C)]
pub struct dai_CrashDump_CrashReport_ErrorSourceInfo {
    pub assertContext: dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext,
    pub trapContext: dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext,
    pub errorId: u32,
}
#[repr(C)]
pub struct dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext {
    pub fileName: std_string,
    pub functionName: std_string,
    pub line: u32,
}
pub type dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext"][::std::mem::size_of::<
        dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext,
    >() - 72usize];
    ["Alignment of dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext"][::std::mem::align_of::<
        dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext,
    >() - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext::fileName"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext,
        fileName
    )
        - 0usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext::functionName"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext,
        functionName
    )
        - 32usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext::line"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ErrorSourceInfo_AssertContext,
        line
    ) - 64usize];
};
#[repr(C)]
pub struct dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext {
    pub trapNumber: u32,
    pub trapAddress: u32,
    pub trapName: std_string,
}
pub type dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext"]
        [::std::mem::size_of::<dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext>() - 40usize];
    ["Alignment of dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext"]
        [::std::mem::align_of::<dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext>() - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext::trapNumber"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext,
        trapNumber
    )
        - 0usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext::trapAddress"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext,
        trapAddress
    )
        - 4usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext::trapName"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ErrorSourceInfo_TrapContext,
        trapName
    )
        - 8usize];
};
pub type dai_CrashDump_CrashReport_ErrorSourceInfo_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump_CrashReport_ErrorSourceInfo"]
        [::std::mem::size_of::<dai_CrashDump_CrashReport_ErrorSourceInfo>() - 120usize];
    ["Alignment of dai_CrashDump_CrashReport_ErrorSourceInfo"]
        [::std::mem::align_of::<dai_CrashDump_CrashReport_ErrorSourceInfo>() - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo::assertContext"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ErrorSourceInfo, assertContext) - 0usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo::trapContext"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ErrorSourceInfo, trapContext) - 72usize];
    ["Offset of field: dai_CrashDump_CrashReport_ErrorSourceInfo::errorId"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ErrorSourceInfo, errorId) - 112usize];
};
#[repr(C)]
pub struct dai_CrashDump_CrashReport_ThreadCallstack {
    pub threadId: u32,
    pub threadName: std_string,
    pub threadStatus: std_string,
    pub stackBottom: u32,
    pub stackTop: u32,
    pub stackPointer: u32,
    pub instructionPointer: u32,
    pub callStack: std_vector,
}
#[repr(C)]
pub struct dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext {
    pub callSite: u32,
    pub calledTarget: u32,
    pub framePointer: u32,
    pub context: std_string,
}
pub type dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext"][::std::mem::size_of::<
        dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext,
    >() - 48usize];
    ["Alignment of dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext"][::std::mem::align_of::<
        dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext,
    >() - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext::callSite"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext,
        callSite
    )
        - 0usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext::calledTarget"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext,
        calledTarget
    )
        - 4usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext::framePointer"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext,
        framePointer
    )
        - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext::context"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext,
        context
    )
        - 16usize];
};
pub type dai_CrashDump_CrashReport_ThreadCallstack_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump_CrashReport_ThreadCallstack"]
        [::std::mem::size_of::<dai_CrashDump_CrashReport_ThreadCallstack>() - 112usize];
    ["Alignment of dai_CrashDump_CrashReport_ThreadCallstack"]
        [::std::mem::align_of::<dai_CrashDump_CrashReport_ThreadCallstack>() - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::threadId"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, threadId) - 0usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::threadName"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, threadName) - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::threadStatus"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, threadStatus) - 40usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::stackBottom"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, stackBottom) - 72usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::stackTop"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, stackTop) - 76usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::stackPointer"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, stackPointer) - 80usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::instructionPointer"][::std::mem::offset_of!(
        dai_CrashDump_CrashReport_ThreadCallstack,
        instructionPointer
    ) - 84usize];
    ["Offset of field: dai_CrashDump_CrashReport_ThreadCallstack::callStack"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport_ThreadCallstack, callStack) - 88usize];
};
pub type dai_CrashDump_CrashReport_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump_CrashReport"]
        [::std::mem::size_of::<dai_CrashDump_CrashReport>() - 192usize];
    ["Alignment of dai_CrashDump_CrashReport"]
        [::std::mem::align_of::<dai_CrashDump_CrashReport>() - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport::processor"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport, processor) - 0usize];
    ["Offset of field: dai_CrashDump_CrashReport::errorSource"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport, errorSource) - 8usize];
    ["Offset of field: dai_CrashDump_CrashReport::crashedThreadId"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport, crashedThreadId) - 40usize];
    ["Offset of field: dai_CrashDump_CrashReport::errorSourceInfo"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport, errorSourceInfo) - 48usize];
    ["Offset of field: dai_CrashDump_CrashReport::threadCallstack"]
        [::std::mem::offset_of!(dai_CrashDump_CrashReport, threadCallstack) - 168usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CrashDump"][::std::mem::size_of::<dai_CrashDump>() - 88usize];
    ["Alignment of dai_CrashDump"][::std::mem::align_of::<dai_CrashDump>() - 8usize];
    ["Offset of field: dai_CrashDump::crashReports"]
        [::std::mem::offset_of!(dai_CrashDump, crashReports) - 0usize];
    ["Offset of field: dai_CrashDump::depthaiCommitHash"]
        [::std::mem::offset_of!(dai_CrashDump, depthaiCommitHash) - 24usize];
    ["Offset of field: dai_CrashDump::deviceId"]
        [::std::mem::offset_of!(dai_CrashDump, deviceId) - 56usize];
};
#[repr(C)]
pub struct dai_LogMessage {
    pub nodeIdName: std_string,
    pub level: dai_LogLevel,
    pub time: dai_Timestamp,
    pub colorRangeStart: usize,
    pub colorRangeEnd: usize,
    pub payload: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_LogMessage"][::std::mem::size_of::<dai_LogMessage>() - 104usize];
    ["Alignment of dai_LogMessage"][::std::mem::align_of::<dai_LogMessage>() - 8usize];
    ["Offset of field: dai_LogMessage::nodeIdName"]
        [::std::mem::offset_of!(dai_LogMessage, nodeIdName) - 0usize];
    ["Offset of field: dai_LogMessage::level"]
        [::std::mem::offset_of!(dai_LogMessage, level) - 32usize];
    ["Offset of field: dai_LogMessage::time"]
        [::std::mem::offset_of!(dai_LogMessage, time) - 40usize];
    ["Offset of field: dai_LogMessage::colorRangeStart"]
        [::std::mem::offset_of!(dai_LogMessage, colorRangeStart) - 56usize];
    ["Offset of field: dai_LogMessage::colorRangeEnd"]
        [::std::mem::offset_of!(dai_LogMessage, colorRangeEnd) - 64usize];
    ["Offset of field: dai_LogMessage::payload"]
        [::std::mem::offset_of!(dai_LogMessage, payload) - 72usize];
};
#[repr(C)]
pub struct dai_DeviceBase__bindgen_vtable(::std::os::raw::c_void);
#[doc = " The core of depthai device for RAII, connects to device and maintains watchdog, timesync, ..."]
#[repr(C)]
pub struct dai_DeviceBase {
    pub vtable_: *const dai_DeviceBase__bindgen_vtable,
    pub connection: std_shared_ptr,
    pub deviceInfo: dai_DeviceInfo,
    pub bootloaderVersion: std_optional,
    pub uniqueCallbackId: ::std::os::raw::c_int,
    pub logCallbackMapMtx: std_mutex,
    pub logCallbackMap: std_unordered_map,
    pub watchdogThread: std_thread,
    pub watchdogRunning: std_atomic<bool>,
    pub watchdogCondVar: std_condition_variable,
    pub watchdogMtx: std_mutex,
    pub timesyncThread: std_thread,
    pub timesyncRunning: std_atomic<bool>,
    pub loggingThread: std_thread,
    pub loggingRunning: std_atomic<bool>,
    pub profilingThread: std_thread,
    pub profilingRunning: std_atomic<bool>,
    pub monitorThread: std_thread,
    pub lastWatchdogPingTimeMtx: std_mutex,
    pub lastWatchdogPingTime: std_chrono_steady_clock_time_point,
    pub rpcStream: std_unique_ptr,
    pub gate: std_unique_ptr,
    pub closedMtx: std_mutex,
    pub closed: bool,
    pub pimpl: dai_Pimpl,
    pub config: dai_DeviceBase_Config,
    pub firmwarePath: dai_Path,
    pub dumpOnly: bool,
    pub pipelineSchema: std_optional,
    pub maxReconnectionAttempts: ::std::os::raw::c_int,
    pub pipelinePtr: std_weak_ptr,
    pub isClosing: bool,
    pub reconnectionCallback: __BindgenOpaqueArray<u64, 4usize>,
}
#[doc = " Device specific configuration"]
#[repr(C)]
pub struct dai_DeviceBase_Config {
    pub version: dai_OpenVINO_Version,
    pub board: dai_BoardConfig,
    pub nonExclusiveMode: bool,
    pub outputLogLevel: std_optional,
    pub logLevel: std_optional,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBase_Config"][::std::mem::size_of::<dai_DeviceBase_Config>() - 528usize];
    ["Alignment of dai_DeviceBase_Config"]
        [::std::mem::align_of::<dai_DeviceBase_Config>() - 8usize];
    ["Offset of field: dai_DeviceBase_Config::version"]
        [::std::mem::offset_of!(dai_DeviceBase_Config, version) - 0usize];
    ["Offset of field: dai_DeviceBase_Config::board"]
        [::std::mem::offset_of!(dai_DeviceBase_Config, board) - 8usize];
    ["Offset of field: dai_DeviceBase_Config::nonExclusiveMode"]
        [::std::mem::offset_of!(dai_DeviceBase_Config, nonExclusiveMode) - 504usize];
    ["Offset of field: dai_DeviceBase_Config::outputLogLevel"]
        [::std::mem::offset_of!(dai_DeviceBase_Config, outputLogLevel) - 508usize];
    ["Offset of field: dai_DeviceBase_Config::logLevel"]
        [::std::mem::offset_of!(dai_DeviceBase_Config, logLevel) - 516usize];
};
pub const dai_DeviceBase_ReconnectionStatus_RECONNECTED: dai_DeviceBase_ReconnectionStatus = 0;
pub const dai_DeviceBase_ReconnectionStatus_RECONNECTING: dai_DeviceBase_ReconnectionStatus = 1;
pub const dai_DeviceBase_ReconnectionStatus_RECONNECT_FAILED: dai_DeviceBase_ReconnectionStatus = 2;
pub type dai_DeviceBase_ReconnectionStatus = ::std::os::raw::c_int;
#[repr(C)]
pub struct dai_DeviceBase_PrevInfo {
    pub deviceInfo: dai_DeviceInfo,
    pub cfg: dai_DeviceBase_Config,
    pub pathToMvcmd: dai_Path,
    pub hasPipeline: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBase_PrevInfo"]
        [::std::mem::size_of::<dai_DeviceBase_PrevInfo>() - 648usize];
    ["Alignment of dai_DeviceBase_PrevInfo"]
        [::std::mem::align_of::<dai_DeviceBase_PrevInfo>() - 8usize];
    ["Offset of field: dai_DeviceBase_PrevInfo::deviceInfo"]
        [::std::mem::offset_of!(dai_DeviceBase_PrevInfo, deviceInfo) - 0usize];
    ["Offset of field: dai_DeviceBase_PrevInfo::cfg"]
        [::std::mem::offset_of!(dai_DeviceBase_PrevInfo, cfg) - 80usize];
    ["Offset of field: dai_DeviceBase_PrevInfo::pathToMvcmd"]
        [::std::mem::offset_of!(dai_DeviceBase_PrevInfo, pathToMvcmd) - 608usize];
    ["Offset of field: dai_DeviceBase_PrevInfo::hasPipeline"]
        [::std::mem::offset_of!(dai_DeviceBase_PrevInfo, hasPipeline) - 640usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_DeviceBase_Impl {
    _unused: [u8; 0],
}
unsafe extern "C" {
    #[doc = " Default search time for constructors which discover devices"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase19DEFAULT_SEARCH_TIMEE"]
    pub static dai_DeviceBase_DEFAULT_SEARCH_TIME: std_chrono_seconds;
}
#[doc = " Default rate at which system information is logged"]
pub const dai_DeviceBase_DEFAULT_SYSTEM_INFORMATION_LOGGING_RATE_HZ: f32 = 1.0;
unsafe extern "C" {
    #[doc = " Default UsbSpeed for device connection"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17DEFAULT_USB_SPEEDE"]
    pub static dai_DeviceBase_DEFAULT_USB_SPEED: dai_UsbSpeed;
}
unsafe extern "C" {
    #[doc = " Default Timesync period"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23DEFAULT_TIMESYNC_PERIODE"]
    pub static dai_DeviceBase_DEFAULT_TIMESYNC_PERIOD: std_chrono_milliseconds;
}
#[doc = " Default Timesync number of samples per sync"]
pub const dai_DeviceBase_DEFAULT_TIMESYNC_NUM_SAMPLES: ::std::os::raw::c_int = 10;
#[doc = " Default Timesync packet interval randomness"]
pub const dai_DeviceBase_DEFAULT_TIMESYNC_RANDOM: bool = true;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBase"][::std::mem::size_of::<dai_DeviceBase>() - 1944usize];
    ["Alignment of dai_DeviceBase"][::std::mem::align_of::<dai_DeviceBase>() - 8usize];
    ["Offset of field: dai_DeviceBase::connection"]
        [::std::mem::offset_of!(dai_DeviceBase, connection) - 8usize];
    ["Offset of field: dai_DeviceBase::deviceInfo"]
        [::std::mem::offset_of!(dai_DeviceBase, deviceInfo) - 24usize];
    ["Offset of field: dai_DeviceBase::bootloaderVersion"]
        [::std::mem::offset_of!(dai_DeviceBase, bootloaderVersion) - 104usize];
    ["Offset of field: dai_DeviceBase::uniqueCallbackId"]
        [::std::mem::offset_of!(dai_DeviceBase, uniqueCallbackId) - 136usize];
    ["Offset of field: dai_DeviceBase::logCallbackMapMtx"]
        [::std::mem::offset_of!(dai_DeviceBase, logCallbackMapMtx) - 144usize];
    ["Offset of field: dai_DeviceBase::logCallbackMap"]
        [::std::mem::offset_of!(dai_DeviceBase, logCallbackMap) - 184usize];
    ["Offset of field: dai_DeviceBase::watchdogThread"]
        [::std::mem::offset_of!(dai_DeviceBase, watchdogThread) - 240usize];
    ["Offset of field: dai_DeviceBase::watchdogRunning"]
        [::std::mem::offset_of!(dai_DeviceBase, watchdogRunning) - 248usize];
    ["Offset of field: dai_DeviceBase::watchdogCondVar"]
        [::std::mem::offset_of!(dai_DeviceBase, watchdogCondVar) - 256usize];
    ["Offset of field: dai_DeviceBase::watchdogMtx"]
        [::std::mem::offset_of!(dai_DeviceBase, watchdogMtx) - 304usize];
    ["Offset of field: dai_DeviceBase::timesyncThread"]
        [::std::mem::offset_of!(dai_DeviceBase, timesyncThread) - 344usize];
    ["Offset of field: dai_DeviceBase::timesyncRunning"]
        [::std::mem::offset_of!(dai_DeviceBase, timesyncRunning) - 352usize];
    ["Offset of field: dai_DeviceBase::loggingThread"]
        [::std::mem::offset_of!(dai_DeviceBase, loggingThread) - 360usize];
    ["Offset of field: dai_DeviceBase::loggingRunning"]
        [::std::mem::offset_of!(dai_DeviceBase, loggingRunning) - 368usize];
    ["Offset of field: dai_DeviceBase::profilingThread"]
        [::std::mem::offset_of!(dai_DeviceBase, profilingThread) - 376usize];
    ["Offset of field: dai_DeviceBase::profilingRunning"]
        [::std::mem::offset_of!(dai_DeviceBase, profilingRunning) - 384usize];
    ["Offset of field: dai_DeviceBase::monitorThread"]
        [::std::mem::offset_of!(dai_DeviceBase, monitorThread) - 392usize];
    ["Offset of field: dai_DeviceBase::lastWatchdogPingTimeMtx"]
        [::std::mem::offset_of!(dai_DeviceBase, lastWatchdogPingTimeMtx) - 400usize];
    ["Offset of field: dai_DeviceBase::lastWatchdogPingTime"]
        [::std::mem::offset_of!(dai_DeviceBase, lastWatchdogPingTime) - 440usize];
    ["Offset of field: dai_DeviceBase::rpcStream"]
        [::std::mem::offset_of!(dai_DeviceBase, rpcStream) - 448usize];
    ["Offset of field: dai_DeviceBase::gate"]
        [::std::mem::offset_of!(dai_DeviceBase, gate) - 456usize];
    ["Offset of field: dai_DeviceBase::closedMtx"]
        [::std::mem::offset_of!(dai_DeviceBase, closedMtx) - 464usize];
    ["Offset of field: dai_DeviceBase::closed"]
        [::std::mem::offset_of!(dai_DeviceBase, closed) - 504usize];
    ["Offset of field: dai_DeviceBase::pimpl"]
        [::std::mem::offset_of!(dai_DeviceBase, pimpl) - 512usize];
    ["Offset of field: dai_DeviceBase::config"]
        [::std::mem::offset_of!(dai_DeviceBase, config) - 520usize];
    ["Offset of field: dai_DeviceBase::firmwarePath"]
        [::std::mem::offset_of!(dai_DeviceBase, firmwarePath) - 1048usize];
    ["Offset of field: dai_DeviceBase::dumpOnly"]
        [::std::mem::offset_of!(dai_DeviceBase, dumpOnly) - 1080usize];
    ["Offset of field: dai_DeviceBase::pipelineSchema"]
        [::std::mem::offset_of!(dai_DeviceBase, pipelineSchema) - 1088usize];
    ["Offset of field: dai_DeviceBase::maxReconnectionAttempts"]
        [::std::mem::offset_of!(dai_DeviceBase, maxReconnectionAttempts) - 1880usize];
    ["Offset of field: dai_DeviceBase::pipelinePtr"]
        [::std::mem::offset_of!(dai_DeviceBase, pipelinePtr) - 1888usize];
    ["Offset of field: dai_DeviceBase::isClosing"]
        [::std::mem::offset_of!(dai_DeviceBase, isClosing) - 1904usize];
    ["Offset of field: dai_DeviceBase::reconnectionCallback"]
        [::std::mem::offset_of!(dai_DeviceBase, reconnectionCallback) - 1912usize];
};
unsafe extern "C" {
    #[doc = " @brief Get the Default Search Time for finding devices\n\n @returns Default search time in milliseconds"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase20getDefaultSearchTimeEv"]
    pub fn dai_DeviceBase_getDefaultSearchTime() -> std_chrono_milliseconds;
}
unsafe extern "C" {
    #[doc = " Waits for any available device with a timeout\n\n @param timeout duration of time to wait for the any device\n @returns Tuple of bool and DeviceInfo. Bool specifies if device was found. DeviceInfo specifies the found device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase21getAnyAvailableDeviceENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_DeviceBase_getAnyAvailableDevice(timeout: std_chrono_milliseconds) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Gets any available device\n\n @returns Tuple of bool and DeviceInfo. Bool specifies if device was found. DeviceInfo specifies the found device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase21getAnyAvailableDeviceEv"]
    pub fn dai_DeviceBase_getAnyAvailableDevice1() -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Waits for any available device with a timeout\n\n @param timeout duration of time to wait for the any device\n @param cb callback function called between pooling intervals\n @returns Tuple of bool and DeviceInfo. Bool specifies if device was found. DeviceInfo specifies the found device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase21getAnyAvailableDeviceENSt6chrono8durationIlSt5ratioILl1ELl1000EEEESt8functionIFvvEE"]
    pub fn dai_DeviceBase_getAnyAvailableDevice2(
        timeout: std_chrono_milliseconds,
        cb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Gets first available device. Device can be either in XLINK_UNBOOTED or XLINK_BOOTLOADER state\n @returns Tuple of bool and DeviceInfo. Bool specifies if device was found. DeviceInfo specifies the found device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23getFirstAvailableDeviceEb"]
    pub fn dai_DeviceBase_getFirstAvailableDevice(skipInvalidDevice: bool) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Finds a device by Device ID. Example: 14442C10D13EABCE00\n @param deviceId Device ID which uniquely specifies a device\n @returns Tuple of bool and DeviceInfo. Bool specifies if device was found. DeviceInfo specifies the found device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase13getDeviceByIdENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_DeviceBase_getDeviceById(deviceId: std_string) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Returns all available devices\n @returns Vector of available devices"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase22getAllAvailableDevicesEv"]
    pub fn dai_DeviceBase_getAllAvailableDevices() -> std_vector;
}
unsafe extern "C" {
    #[doc = " Returns information of all connected devices.\n The devices could be both connectable as well as already connected to devices.\n\n @returns Vector of connected device information"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase22getAllConnectedDevicesEv"]
    pub fn dai_DeviceBase_getAllConnectedDevices() -> std_vector;
}
unsafe extern "C" {
    #[doc = " Gets device firmware binary for a specific OpenVINO version\n @param usb2Mode USB2 mode firmware\n @param version Version of OpenVINO which firmware will support\n @returns Firmware binary"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23getEmbeddedDeviceBinaryEbNS_8OpenVINO7VersionE"]
    pub fn dai_DeviceBase_getEmbeddedDeviceBinary(
        usb2Mode: bool,
        version: dai_OpenVINO_Version,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Gets device firmware binary for a specific configuration\n @param config FW with applied configuration\n @returns Firmware binary"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23getEmbeddedDeviceBinaryENS0_6ConfigE"]
    pub fn dai_DeviceBase_getEmbeddedDeviceBinary1(config: dai_DeviceBase_Config) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get current global accumulated profiling data\n\n @returns ProfilingData from all devices"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase22getGlobalProfilingDataEv"]
    pub fn dai_DeviceBase_getGlobalProfilingData() -> dai_ProfilingData;
}
unsafe extern "C" {
    #[doc = " Gets Bootloader version if it was booted through Bootloader\n\n @returns DeviceBootloader::Version if booted through Bootloader or none otherwise"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase20getBootloaderVersionEv"]
    pub fn dai_DeviceBase_getBootloaderVersion(this: *mut dai_DeviceBase) -> std_optional;
}
unsafe extern "C" {
    #[doc = " Checks if devices pipeline is already running\n\n @returns True if running, false otherwise"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17isPipelineRunningEv"]
    pub fn dai_DeviceBase_isPipelineRunning(this: *mut dai_DeviceBase) -> bool;
}
unsafe extern "C" {
    #[doc = " Starts the execution of a given pipeline\n @param pipeline OpenVINO version of the pipeline must match the one which the device was booted with.\n\n @returns True if pipeline started, false otherwise"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase13startPipelineERKNS_8PipelineE"]
    pub fn dai_DeviceBase_startPipeline(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Sets the devices logging severity level. This level affects which logs are transferred from device to host.\n\n @param level Logging severity"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11setLogLevelENS_8LogLevelE"]
    pub fn dai_DeviceBase_setLogLevel(this: *mut dai_DeviceBase, level: dai_LogLevel);
}
unsafe extern "C" {
    #[doc = " Sets the logging severity level for a specific node with a given ID.\n\n @param id Node ID\n @param level Logging severity"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase15setNodeLogLevelElNS_8LogLevelE"]
    pub fn dai_DeviceBase_setNodeLogLevel(this: *mut dai_DeviceBase, id: i64, level: dai_LogLevel);
}
unsafe extern "C" {
    #[doc = " Gets current logging severity level of the device.\n\n @returns Logging severity level"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11getLogLevelEv"]
    pub fn dai_DeviceBase_getLogLevel(this: *mut dai_DeviceBase) -> dai_LogLevel;
}
unsafe extern "C" {
    #[doc = " Gets the logging severity level for a specific node with a given ID.\n\n @param id Node ID\n @returns Logging severity level"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase15getNodeLogLevelEl"]
    pub fn dai_DeviceBase_getNodeLogLevel(this: *mut dai_DeviceBase, id: i64) -> dai_LogLevel;
}
unsafe extern "C" {
    #[doc = " Sets the chunk size for splitting device-sent XLink packets. A larger value could\n increase performance, and 0 disables chunking. A negative value is ignored.\n Device defaults are configured per protocol, currently 64*1024 for both USB and Ethernet.\n\n @param sizeBytes XLink chunk size in bytes"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17setXLinkChunkSizeEi"]
    pub fn dai_DeviceBase_setXLinkChunkSize(
        this: *mut dai_DeviceBase,
        sizeBytes: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Gets current XLink chunk size.\n\n @returns XLink chunk size in bytes"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17getXLinkChunkSizeEv"]
    pub fn dai_DeviceBase_getXLinkChunkSize(this: *mut dai_DeviceBase) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get the Device Info object o the device which is currently running\n\n @return DeviceInfo of the current device in execution"]
    #[link_name = "\u{1}_ZNK3dai10DeviceBase13getDeviceInfoEv"]
    pub fn dai_DeviceBase_getDeviceInfo(this: *const dai_DeviceBase) -> dai_DeviceInfo;
}
unsafe extern "C" {
    #[doc = " Get device name if available\n @returns device name or empty string if not available"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase13getDeviceNameB5cxx11Ev"]
    pub fn dai_DeviceBase_getDeviceName(this: *mut dai_DeviceBase) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get product name if available\n @returns product name or empty string if not available"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase14getProductNameB5cxx11Ev"]
    pub fn dai_DeviceBase_getProductName(this: *mut dai_DeviceBase) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get MxId of device\n\n @returns MxId of connected device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase7getMxIdB5cxx11Ev"]
    pub fn dai_DeviceBase_getMxId(this: *mut dai_DeviceBase) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get DeviceId of device\n\n @returns DeviceId of connected device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11getDeviceIdB5cxx11Ev"]
    pub fn dai_DeviceBase_getDeviceId(this: *mut dai_DeviceBase) -> std_string;
}
unsafe extern "C" {
    #[doc = " Sets logging level which decides printing level to standard output.\n If lower than setLogLevel, no messages will be printed\n\n @param level Standard output printing severity"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17setLogOutputLevelENS_8LogLevelE"]
    pub fn dai_DeviceBase_setLogOutputLevel(this: *mut dai_DeviceBase, level: dai_LogLevel);
}
unsafe extern "C" {
    #[doc = " Gets logging level which decides printing level to standard output.\n\n @returns Standard output printing severity"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17getLogOutputLevelEv"]
    pub fn dai_DeviceBase_getLogOutputLevel(this: *mut dai_DeviceBase) -> dai_LogLevel;
}
unsafe extern "C" {
    #[doc = " Sets the intensity of the IR Laser Dot Projector. Limits: up to 765mA at 30% frame time duty cycle when exposure time is longer than 30% frame time.\n Otherwise, duty cycle is 100% of exposure time, with current increased up to max 1200mA to make up for shorter duty cycle.\n The duty cycle is controlled by `left` camera STROBE, aligned to start of exposure.\n The emitter is turned off by default\n\n @param intensity Intensity on range 0 to 1, that will determine brightness. 0 or negative to turn off\n @param mask Optional mask to modify only Left (0x1) or Right (0x2) sides on OAK-D-Pro-W-DEV\n @returns True on success, false if not found or other failure"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase31setIrLaserDotProjectorIntensityEfi"]
    pub fn dai_DeviceBase_setIrLaserDotProjectorIntensity(
        this: *mut dai_DeviceBase,
        intensity: f32,
        mask: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Sets the intensity of the IR Flood Light. Limits: Intensity is directly normalized to 0 - 1500mA current.\n The duty cycle is 30% when exposure time is longer than 30% frame time. Otherwise, duty cycle is 100% of exposure time.\n The duty cycle is controlled by the `left` camera STROBE, aligned to start of exposure.\n The emitter is turned off by default\n\n @param intensity Intensity on range 0 to 1, that will determine brightness, 0 or negative to turn off\n @param mask Optional mask to modify only Left (0x1) or Right (0x2) sides on OAK-D-Pro-W-DEV\n @returns True on success, false if not found or other failure"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase24setIrFloodLightIntensityEfi"]
    pub fn dai_DeviceBase_setIrFloodLightIntensity(
        this: *mut dai_DeviceBase,
        intensity: f32,
        mask: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves detected IR laser/LED drivers.\n\n @returns Vector of tuples containing: driver name, I2C bus, I2C address.\n For OAK-D-Pro it should be `[{\"LM3644\", 2, 0x63}]`"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase12getIrDriversB5cxx11Ev"]
    pub fn dai_DeviceBase_getIrDrivers(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves crash dump for debugging."]
    #[link_name = "\u{1}_ZN3dai10DeviceBase12getCrashDumpEb"]
    pub fn dai_DeviceBase_getCrashDump(
        this: *mut dai_DeviceBase,
        clearCrashDump: bool,
    ) -> dai_CrashDump;
}
unsafe extern "C" {
    #[doc = " Retrieves whether the is crash dump stored on device or not."]
    #[link_name = "\u{1}_ZN3dai10DeviceBase12hasCrashDumpEv"]
    pub fn dai_DeviceBase_hasCrashDump(this: *mut dai_DeviceBase) -> bool;
}
unsafe extern "C" {
    #[doc = " Get current accumulated profiling data\n\n @returns ProfilingData from the specific device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase16getProfilingDataEv"]
    pub fn dai_DeviceBase_getProfilingData(this: *mut dai_DeviceBase) -> dai_ProfilingData;
}
unsafe extern "C" {
    #[doc = " Add a callback for device logging. The callback will be called from a separate thread with the LogMessage being passed.\n\n @param callback Callback to call whenever a log message arrives\n @returns Id which can be used to later remove the callback"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase14addLogCallbackESt8functionIFvNS_10LogMessageEEE"]
    pub fn dai_DeviceBase_addLogCallback(
        this: *mut dai_DeviceBase,
        callback: std_function,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Removes a callback\n\n @param callbackId Id of callback to be removed\n @returns True if callback was removed, false otherwise"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17removeLogCallbackEi"]
    pub fn dai_DeviceBase_removeLogCallback(
        this: *mut dai_DeviceBase,
        callbackId: ::std::os::raw::c_int,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Sets rate of system information logging (\"info\" severity). Default 1Hz\n If parameter is less or equal to zero, then system information logging will be disabled\n\n @param rateHz Logging rate in Hz"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase31setSystemInformationLoggingRateEf"]
    pub fn dai_DeviceBase_setSystemInformationLoggingRate(this: *mut dai_DeviceBase, rateHz: f32);
}
unsafe extern "C" {
    #[doc = " Gets current rate of system information logging (\"info\" severity) in Hz.\n\n @returns Logging rate in Hz"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase31getSystemInformationLoggingRateEv"]
    pub fn dai_DeviceBase_getSystemInformationLoggingRate(this: *mut dai_DeviceBase) -> f32;
}
unsafe extern "C" {
    #[doc = " Get cameras that are connected to the device\n\n @returns Vector of connected cameras"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase19getConnectedCamerasEv"]
    pub fn dai_DeviceBase_getConnectedCameras(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get connection interfaces for device\n\n @returns Vector of connection type"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23getConnectionInterfacesEv"]
    pub fn dai_DeviceBase_getConnectionInterfaces(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get cameras that are connected to the device with their features/properties\n\n @returns Vector of connected camera features"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase26getConnectedCameraFeaturesEv"]
    pub fn dai_DeviceBase_getConnectedCameraFeatures(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get stereo pairs based on the device type.\n\n @returns Vector of stereo pairs"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase14getStereoPairsEv"]
    pub fn dai_DeviceBase_getStereoPairs(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get stereo pairs taking into account the calibration and connected cameras.\n\n @note This method will always return a subset of `getStereoPairs`.\n\n @returns Vector of stereo pairs"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23getAvailableStereoPairsEv"]
    pub fn dai_DeviceBase_getAvailableStereoPairs(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get sensor names for cameras that are connected to the device\n\n @returns Map/dictionary with camera sensor names, indexed by socket"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase20getCameraSensorNamesB5cxx11Ev"]
    pub fn dai_DeviceBase_getCameraSensorNames(this: *mut dai_DeviceBase) -> std_unordered_map;
}
unsafe extern "C" {
    #[doc = " Get connected IMU type\n\n @returns IMU type"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase15getConnectedIMUB5cxx11Ev"]
    pub fn dai_DeviceBase_getConnectedIMU(this: *mut dai_DeviceBase) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get connected IMU firmware version\n\n @returns IMU firmware version"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase21getIMUFirmwareVersionEv"]
    pub fn dai_DeviceBase_getIMUFirmwareVersion(this: *mut dai_DeviceBase) -> dai_Version;
}
unsafe extern "C" {
    #[doc = " Get embedded IMU firmware version to which IMU can be upgraded\n\n @returns Get embedded IMU firmware version to which IMU can be upgraded."]
    #[link_name = "\u{1}_ZN3dai10DeviceBase29getEmbeddedIMUFirmwareVersionEv"]
    pub fn dai_DeviceBase_getEmbeddedIMUFirmwareVersion(this: *mut dai_DeviceBase) -> dai_Version;
}
unsafe extern "C" {
    #[doc = " Starts IMU firmware update asynchronously only if IMU node is not running.\n If current firmware version is the same as embedded firmware version then it's no-op. Can be overridden by forceUpdate parameter.\n State of firmware update can be monitored using getIMUFirmwareUpdateStatus API.\n\n @param forceUpdate Force firmware update or not. Will perform FW update regardless of current version and embedded firmware version.\n\n @returns Returns whether firmware update can be started. Returns false if IMU node is started."]
    #[link_name = "\u{1}_ZN3dai10DeviceBase22startIMUFirmwareUpdateEb"]
    pub fn dai_DeviceBase_startIMUFirmwareUpdate(
        this: *mut dai_DeviceBase,
        forceUpdate: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Get IMU firmware update status\n\n @returns Whether IMU firmware update is done and last firmware update progress as percentage.\n return value true and 100 means that the update was successful\n return value true and other than 100 means that the update failed"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase26getIMUFirmwareUpdateStatusEv"]
    pub fn dai_DeviceBase_getIMUFirmwareUpdateStatus(this: *mut dai_DeviceBase) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Retrieves current DDR memory information from device\n\n @returns Used, remaining and total ddr memory"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17getDdrMemoryUsageEv"]
    pub fn dai_DeviceBase_getDdrMemoryUsage(this: *mut dai_DeviceBase) -> dai_MemoryInfo;
}
unsafe extern "C" {
    #[doc = " Retrieves current CMX memory information from device\n\n @returns Used, remaining and total cmx memory"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17getCmxMemoryUsageEv"]
    pub fn dai_DeviceBase_getCmxMemoryUsage(this: *mut dai_DeviceBase) -> dai_MemoryInfo;
}
unsafe extern "C" {
    #[doc = " Retrieves current CSS Leon CPU heap information from device\n\n @returns Used, remaining and total heap memory"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase19getLeonCssHeapUsageEv"]
    pub fn dai_DeviceBase_getLeonCssHeapUsage(this: *mut dai_DeviceBase) -> dai_MemoryInfo;
}
unsafe extern "C" {
    #[doc = " Retrieves current MSS Leon CPU heap information from device\n\n @returns Used, remaining and total heap memory"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase19getLeonMssHeapUsageEv"]
    pub fn dai_DeviceBase_getLeonMssHeapUsage(this: *mut dai_DeviceBase) -> dai_MemoryInfo;
}
unsafe extern "C" {
    #[doc = " Retrieves current chip temperature as measured by device\n\n @returns Temperature of various onboard sensors"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase18getChipTemperatureEv"]
    pub fn dai_DeviceBase_getChipTemperature(this: *mut dai_DeviceBase) -> dai_ChipTemperature;
}
unsafe extern "C" {
    #[doc = " Retrieves average CSS Leon CPU usage\n\n @returns Average CPU usage and sampling duration"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase18getLeonCssCpuUsageEv"]
    pub fn dai_DeviceBase_getLeonCssCpuUsage(this: *mut dai_DeviceBase) -> dai_CpuUsage;
}
unsafe extern "C" {
    #[doc = " Retrieves average MSS Leon CPU usage\n\n @returns Average CPU usage and sampling duration"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase18getLeonMssCpuUsageEv"]
    pub fn dai_DeviceBase_getLeonMssCpuUsage(this: *mut dai_DeviceBase) -> dai_CpuUsage;
}
unsafe extern "C" {
    #[doc = " Check if EEPROM is available\n @returns True if EEPROM is present on board, false otherwise"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17isEepromAvailableEv"]
    pub fn dai_DeviceBase_isEepromAvailable(this: *mut dai_DeviceBase) -> bool;
}
unsafe extern "C" {
    #[doc = " Stores the Calibration and Device information to the Device EEPROM\n\n @param calibrationObj CalibrationHandler object which is loaded with calibration information.\n\n @return true on successful flash, false on failure"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase16flashCalibrationENS_18CalibrationHandlerE"]
    pub fn dai_DeviceBase_flashCalibration(
        this: *mut dai_DeviceBase,
        calibrationDataHandler: dai_CalibrationHandler,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Stores the Calibration and Device information to the Device EEPROM\n\n @throws std::runtime_exception if failed to flash the calibration\n @param calibrationObj CalibrationHandler object which is loaded with calibration information."]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17flashCalibration2ENS_18CalibrationHandlerE"]
    pub fn dai_DeviceBase_flashCalibration2(
        this: *mut dai_DeviceBase,
        calibrationDataHandler: dai_CalibrationHandler,
    );
}
unsafe extern "C" {
    #[doc = " Sets the Calibration at runtime. This is not persistent and will be lost after device reset.\n\n @throws std::runtime_error if failed to set the calibration\n @param calibrationObj CalibrationHandler object which is loaded with calibration information.\n"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase14setCalibrationENS_18CalibrationHandlerE"]
    pub fn dai_DeviceBase_setCalibration(
        this: *mut dai_DeviceBase,
        calibrationDataHandler: dai_CalibrationHandler,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves the CalibrationHandler object containing the non-persistent calibration\n\n @throws std::runtime_exception if failed to get the calibration\n @returns The CalibrationHandler object containing the non-persistent calibration"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase14getCalibrationEv"]
    pub fn dai_DeviceBase_getCalibration(this: *mut dai_DeviceBase) -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Fetches the EEPROM data from the device and loads it into CalibrationHandler object\n If no calibration is flashed, it returns default\n\n @return The CalibrationHandler object containing the calibration currently flashed on device EEPROM"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase15readCalibrationEv"]
    pub fn dai_DeviceBase_readCalibration(this: *mut dai_DeviceBase) -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Fetches the EEPROM data from the device and loads it into CalibrationHandler object\n\n @throws std::runtime_exception if no calibration is flashed\n @return The CalibrationHandler object containing the calibration currently flashed on device EEPROM"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase16readCalibration2Ev"]
    pub fn dai_DeviceBase_readCalibration2(this: *mut dai_DeviceBase) -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Fetches the EEPROM data from the device and loads it into CalibrationHandler object\n If no calibration is flashed, it returns default\n\n @return The CalibrationHandler object containing the calibration currently flashed on device EEPROM"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase24readCalibrationOrDefaultEv"]
    pub fn dai_DeviceBase_readCalibrationOrDefault(
        this: *mut dai_DeviceBase,
    ) -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Factory reset EEPROM data if factory backup is available.\n\n @throws std::runtime_exception If factory reset was unsuccessful"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23factoryResetCalibrationEv"]
    pub fn dai_DeviceBase_factoryResetCalibration(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Stores the Calibration and Device information to the Device EEPROM in Factory area\n To perform this action, correct env variable must be set\n\n @throws std::runtime_exception if failed to flash the calibration\n @return True on successful flash, false on failure"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23flashFactoryCalibrationENS_18CalibrationHandlerE"]
    pub fn dai_DeviceBase_flashFactoryCalibration(
        this: *mut dai_DeviceBase,
        calibrationHandler: dai_CalibrationHandler,
    );
}
unsafe extern "C" {
    #[doc = " Destructive action, deletes User area EEPROM contents\n Requires PROTECTED permissions\n\n @throws std::runtime_exception if failed to flash the calibration\n @return True on successful flash, false on failure"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase16flashEepromClearEv"]
    pub fn dai_DeviceBase_flashEepromClear(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Destructive action, deletes Factory area EEPROM contents\n Requires FACTORY PROTECTED permissions\n\n @throws std::runtime_exception if failed to flash the calibration\n @return True on successful flash, false on failure"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase23flashFactoryEepromClearEv"]
    pub fn dai_DeviceBase_flashFactoryEepromClear(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Fetches the EEPROM data from Factory area and loads it into CalibrationHandler object\n\n @throws std::runtime_exception if no calibration is flashed\n @return The CalibrationHandler object containing the calibration currently flashed on device EEPROM in Factory Area"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase22readFactoryCalibrationEv"]
    pub fn dai_DeviceBase_readFactoryCalibration(
        this: *mut dai_DeviceBase,
    ) -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Fetches the EEPROM data from Factory area and loads it into CalibrationHandler object\n If no calibration is flashed, it returns default\n\n @return The CalibrationHandler object containing the calibration currently flashed on device EEPROM in Factory Area"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase31readFactoryCalibrationOrDefaultEv"]
    pub fn dai_DeviceBase_readFactoryCalibrationOrDefault(
        this: *mut dai_DeviceBase,
    ) -> dai_CalibrationHandler;
}
unsafe extern "C" {
    #[doc = " Fetches the raw EEPROM data from User area\n\n @throws std::runtime_exception if any error occurred\n @returns Binary dump of User area EEPROM data"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase18readCalibrationRawEv"]
    pub fn dai_DeviceBase_readCalibrationRaw(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Fetches the raw EEPROM data from Factory area\n\n @throws std::runtime_exception if any error occurred\n @returns Binary dump of Factory area EEPROM data"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase25readFactoryCalibrationRawEv"]
    pub fn dai_DeviceBase_readFactoryCalibrationRaw(this: *mut dai_DeviceBase) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves USB connection speed\n\n @returns USB connection speed of connected device if applicable. Unknown otherwise."]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11getUsbSpeedEv"]
    pub fn dai_DeviceBase_getUsbSpeed(this: *mut dai_DeviceBase) -> dai_UsbSpeed;
}
unsafe extern "C" {
    #[doc = " Configures Timesync service on device. It keeps host and device clocks in sync\n First time timesync is started it waits until the initial sync is completed\n Afterwards the function changes the following parameters\n\n @param period Interval between timesync runs\n @param numSamples Number of timesync samples per run which are used to compute a better value. Set to zero to disable timesync\n @param random If true partial timesync requests will be performed at random intervals, otherwise at fixed intervals"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11setTimesyncENSt6chrono8durationIlSt5ratioILl1ELl1000EEEEib"]
    pub fn dai_DeviceBase_setTimesync(
        this: *mut dai_DeviceBase,
        period: std_chrono_milliseconds,
        numSamples: ::std::os::raw::c_int,
        random: bool,
    );
}
unsafe extern "C" {
    #[doc = " Enables or disables Timesync service on device. It keeps host and device clocks in sync.\n\n @param enable Enables or disables consistent timesyncing"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11setTimesyncEb"]
    pub fn dai_DeviceBase_setTimesync1(this: *mut dai_DeviceBase, enable: bool);
}
unsafe extern "C" {
    #[doc = " Explicitly closes connection to device.\n @note This function does not need to be explicitly called\n as destructor closes the device automatically"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase5closeEv"]
    pub fn dai_DeviceBase_close(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Is the device already closed (or disconnected)\n\n @warning This function is thread-unsafe and may return outdated incorrect values. It is\n only meant for use in simple single-threaded code. Well written code should handle\n exceptions when calling any DepthAI apis to handle hardware events and multithreaded use."]
    #[link_name = "\u{1}_ZNK3dai10DeviceBase8isClosedEv"]
    pub fn dai_DeviceBase_isClosed(this: *const dai_DeviceBase) -> bool;
}
unsafe extern "C" {
    #[doc = " Crashes the device\n @warning ONLY FOR TESTING PURPOSES, it causes an unrecoverable crash on the device"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase11crashDeviceEv"]
    pub fn dai_DeviceBase_crashDevice(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Sets max number of automatic reconnection attempts\n @param maxAttempts Maximum number of reconnection attempts, 0 to disable reconnection\n @param callBack Callback to be called when reconnection is attempted"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase26setMaxReconnectionAttemptsEiSt8functionIFvNS0_18ReconnectionStatusEEE"]
    pub fn dai_DeviceBase_setMaxReconnectionAttempts(
        this: *mut dai_DeviceBase,
        maxAttempts: ::std::os::raw::c_int,
        callBack: __BindgenOpaqueArray<u64, 4usize>,
    );
}
unsafe extern "C" {
    #[doc = " @brief a safe way to start a pipeline, which is closed if any exception occurs"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase16tryStartPipelineERKNS_8PipelineE"]
    pub fn dai_DeviceBase_tryStartPipeline(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initEv"]
    pub fn dai_DeviceBase_init(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_4PathE"]
    pub fn dai_DeviceBase_init1(this: *mut dai_DeviceBase, pathToCmd: *const dai_Path);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_init2(this: *mut dai_DeviceBase, maxUsbSpeed: dai_UsbSpeed);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS_8UsbSpeedERKNS_4PathE"]
    pub fn dai_DeviceBase_init3(
        this: *mut dai_DeviceBase,
        maxUsbSpeed: dai_UsbSpeed,
        pathToMvcmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineE"]
    pub fn dai_DeviceBase_init4(this: *mut dai_DeviceBase, pipeline: *const dai_Pipeline);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_init5(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineERKNS_4PathE"]
    pub fn dai_DeviceBase_init6(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        pathToCmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineERKNS_10DeviceInfoE"]
    pub fn dai_DeviceBase_init7(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineERKNS_10DeviceInfoEb"]
    pub fn dai_DeviceBase_init8(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
        usb2Mode: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineERKNS_10DeviceInfoENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_init9(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineERKNS_10DeviceInfoERKNS_4PathE"]
    pub fn dai_DeviceBase_init10(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initERKNS_8PipelineENS_8UsbSpeedERKNS_4PathE"]
    pub fn dai_DeviceBase_init11(
        this: *mut dai_DeviceBase,
        pipeline: *const dai_Pipeline,
        maxUsbSpeed: dai_UsbSpeed,
        pathToMvcmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS0_6ConfigENS_8UsbSpeedERKNS_4PathE"]
    pub fn dai_DeviceBase_init12(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        maxUsbSpeed: dai_UsbSpeed,
        pathToMvcmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS0_6ConfigENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_init13(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS0_6ConfigERKNS_4PathE"]
    pub fn dai_DeviceBase_init14(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        pathToCmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS0_6ConfigERKNS_10DeviceInfoENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_init15(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceBase4initENS0_6ConfigERKNS_10DeviceInfoERKNS_4PathE"]
    pub fn dai_DeviceBase_init16(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Connects to any available device with a DEFAULT_SEARCH_TIME timeout.\n Uses OpenVINO version OpenVINO::VERSION_UNIVERSAL"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1Ev"]
    pub fn dai_DeviceBase_DeviceBase(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Connects to device\n @param maxUsbSpeed Maximum allowed USB speed"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_DeviceBase1(this: *mut dai_DeviceBase, maxUsbSpeed: dai_UsbSpeed);
}
unsafe extern "C" {
    #[doc = " Connects to device specified by devInfo.\n @param devInfo DeviceInfo which specifies which device to connect to\n @param maxUsbSpeed Maximum allowed USB speed"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ERKNS_10DeviceInfoENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_DeviceBase2(
        this: *mut dai_DeviceBase,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[doc = " Connects to device specified by devInfo.\n @param devInfo DeviceInfo which specifies which device to connect to\n @param pathToCmd Path to custom device firmware"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ERKNS_10DeviceInfoERKNS_4PathE"]
    pub fn dai_DeviceBase_DeviceBase3(
        this: *mut dai_DeviceBase,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Connects to any available device with custom config.\n @param config Device custom configuration to boot with"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS0_6ConfigE"]
    pub fn dai_DeviceBase_DeviceBase4(this: *mut dai_DeviceBase, config: dai_DeviceBase_Config);
}
unsafe extern "C" {
    #[doc = " Connects to device 'devInfo' with custom config.\n @param config Device custom configuration to boot with\n @param devInfo DeviceInfo which specifies which device to connect to"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS0_6ConfigERKNS_10DeviceInfoE"]
    pub fn dai_DeviceBase_DeviceBase5(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
    );
}
unsafe extern "C" {
    #[doc = " Connects to any available device with a DEFAULT_SEARCH_TIME timeout.\n Uses OpenVINO version OpenVINO::VERSION_UNIVERSAL\n\n @param devInfo DeviceInfo which specifies which device to connect to"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ERKNS_10DeviceInfoE"]
    pub fn dai_DeviceBase_DeviceBase6(this: *mut dai_DeviceBase, devInfo: *const dai_DeviceInfo);
}
unsafe extern "C" {
    #[doc = " Connects to any available device with a DEFAULT_SEARCH_TIME timeout.\n Uses OpenVINO version OpenVINO::VERSION_UNIVERSAL\n\n @param nameOrDeviceId Creates DeviceInfo with nameOrDeviceId to connect to"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_DeviceBase_DeviceBase7(this: *mut dai_DeviceBase, nameOrDeviceId: std_string);
}
unsafe extern "C" {
    #[doc = " Connects to any available device with a DEFAULT_SEARCH_TIME timeout.\n Uses OpenVINO version OpenVINO::VERSION_UNIVERSAL\n\n @param nameOrDeviceId Creates DeviceInfo with nameOrDeviceId to connect to\n @param maxUsbSpeed Maximum allowed USB speed"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_DeviceBase8(
        this: *mut dai_DeviceBase,
        nameOrDeviceId: std_string,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[doc = " Connects to device specified by devInfo.\n @param config Config with which the device will be booted with\n @param maxUsbSpeed Maximum allowed USB speed"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS0_6ConfigENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_DeviceBase9(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[doc = " Connects to any available device with a DEFAULT_SEARCH_TIME timeout.\n @param config Config with which the device will be booted with\n @param pathToCmd Path to custom device firmware"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS0_6ConfigERKNS_4PathE"]
    pub fn dai_DeviceBase_DeviceBase10(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        pathToCmd: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Connects to device specified by devInfo.\n @param config Config with which the device will be booted with\n @param devInfo DeviceInfo which specifies which device to connect to\n @param maxUsbSpeed Maximum allowed USB speed"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS0_6ConfigERKNS_10DeviceInfoENS_8UsbSpeedE"]
    pub fn dai_DeviceBase_DeviceBase11(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[doc = " Connects to device specified by devInfo.\n @param config Config with which the device will be booted with\n @param devInfo DeviceInfo which specifies which device to connect to\n @param pathToCmd Path to custom device firmware\n @param dumpOnly If true only the minimal connection is established to retrieve the crash dump"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseC1ENS0_6ConfigERKNS_10DeviceInfoERKNS_4PathEb"]
    pub fn dai_DeviceBase_DeviceBase12(
        this: *mut dai_DeviceBase,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
        dumpOnly: bool,
    );
}
impl dai_DeviceBase {
    #[inline]
    pub unsafe fn getDefaultSearchTime() -> std_chrono_milliseconds {
        dai_DeviceBase_getDefaultSearchTime()
    }
    #[inline]
    pub unsafe fn getAnyAvailableDevice(timeout: std_chrono_milliseconds) -> std_tuple {
        dai_DeviceBase_getAnyAvailableDevice(timeout)
    }
    #[inline]
    pub unsafe fn getAnyAvailableDevice1() -> std_tuple {
        dai_DeviceBase_getAnyAvailableDevice1()
    }
    #[inline]
    pub unsafe fn getAnyAvailableDevice2(
        timeout: std_chrono_milliseconds,
        cb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBase_getAnyAvailableDevice2(timeout, cb)
    }
    #[inline]
    pub unsafe fn getFirstAvailableDevice(skipInvalidDevice: bool) -> std_tuple {
        dai_DeviceBase_getFirstAvailableDevice(skipInvalidDevice)
    }
    #[inline]
    pub unsafe fn getDeviceById(deviceId: std_string) -> std_tuple {
        dai_DeviceBase_getDeviceById(deviceId)
    }
    #[inline]
    pub unsafe fn getAllAvailableDevices() -> std_vector {
        dai_DeviceBase_getAllAvailableDevices()
    }
    #[inline]
    pub unsafe fn getAllConnectedDevices() -> std_vector {
        dai_DeviceBase_getAllConnectedDevices()
    }
    #[inline]
    pub unsafe fn getEmbeddedDeviceBinary(
        usb2Mode: bool,
        version: dai_OpenVINO_Version,
    ) -> std_vector {
        dai_DeviceBase_getEmbeddedDeviceBinary(usb2Mode, version)
    }
    #[inline]
    pub unsafe fn getEmbeddedDeviceBinary1(config: dai_DeviceBase_Config) -> std_vector {
        dai_DeviceBase_getEmbeddedDeviceBinary1(config)
    }
    #[inline]
    pub unsafe fn getGlobalProfilingData() -> dai_ProfilingData {
        dai_DeviceBase_getGlobalProfilingData()
    }
    #[inline]
    pub unsafe fn getBootloaderVersion(&mut self) -> std_optional {
        dai_DeviceBase_getBootloaderVersion(self)
    }
    #[inline]
    pub unsafe fn isPipelineRunning(&mut self) -> bool {
        dai_DeviceBase_isPipelineRunning(self)
    }
    #[inline]
    pub unsafe fn startPipeline(&mut self, pipeline: *const dai_Pipeline) -> bool {
        dai_DeviceBase_startPipeline(self, pipeline)
    }
    #[inline]
    pub unsafe fn setLogLevel(&mut self, level: dai_LogLevel) {
        dai_DeviceBase_setLogLevel(self, level)
    }
    #[inline]
    pub unsafe fn setNodeLogLevel(&mut self, id: i64, level: dai_LogLevel) {
        dai_DeviceBase_setNodeLogLevel(self, id, level)
    }
    #[inline]
    pub unsafe fn getLogLevel(&mut self) -> dai_LogLevel {
        dai_DeviceBase_getLogLevel(self)
    }
    #[inline]
    pub unsafe fn getNodeLogLevel(&mut self, id: i64) -> dai_LogLevel {
        dai_DeviceBase_getNodeLogLevel(self, id)
    }
    #[inline]
    pub unsafe fn setXLinkChunkSize(&mut self, sizeBytes: ::std::os::raw::c_int) {
        dai_DeviceBase_setXLinkChunkSize(self, sizeBytes)
    }
    #[inline]
    pub unsafe fn getXLinkChunkSize(&mut self) -> ::std::os::raw::c_int {
        dai_DeviceBase_getXLinkChunkSize(self)
    }
    #[inline]
    pub unsafe fn getDeviceInfo(&self) -> dai_DeviceInfo {
        dai_DeviceBase_getDeviceInfo(self)
    }
    #[inline]
    pub unsafe fn getDeviceName(&mut self) -> std_string {
        dai_DeviceBase_getDeviceName(self)
    }
    #[inline]
    pub unsafe fn getProductName(&mut self) -> std_string {
        dai_DeviceBase_getProductName(self)
    }
    #[inline]
    pub unsafe fn getMxId(&mut self) -> std_string {
        dai_DeviceBase_getMxId(self)
    }
    #[inline]
    pub unsafe fn getDeviceId(&mut self) -> std_string {
        dai_DeviceBase_getDeviceId(self)
    }
    #[inline]
    pub unsafe fn setLogOutputLevel(&mut self, level: dai_LogLevel) {
        dai_DeviceBase_setLogOutputLevel(self, level)
    }
    #[inline]
    pub unsafe fn getLogOutputLevel(&mut self) -> dai_LogLevel {
        dai_DeviceBase_getLogOutputLevel(self)
    }
    #[inline]
    pub unsafe fn setIrLaserDotProjectorIntensity(
        &mut self,
        intensity: f32,
        mask: ::std::os::raw::c_int,
    ) -> bool {
        dai_DeviceBase_setIrLaserDotProjectorIntensity(self, intensity, mask)
    }
    #[inline]
    pub unsafe fn setIrFloodLightIntensity(
        &mut self,
        intensity: f32,
        mask: ::std::os::raw::c_int,
    ) -> bool {
        dai_DeviceBase_setIrFloodLightIntensity(self, intensity, mask)
    }
    #[inline]
    pub unsafe fn getIrDrivers(&mut self) -> std_vector {
        dai_DeviceBase_getIrDrivers(self)
    }
    #[inline]
    pub unsafe fn getCrashDump(&mut self, clearCrashDump: bool) -> dai_CrashDump {
        dai_DeviceBase_getCrashDump(self, clearCrashDump)
    }
    #[inline]
    pub unsafe fn hasCrashDump(&mut self) -> bool {
        dai_DeviceBase_hasCrashDump(self)
    }
    #[inline]
    pub unsafe fn getProfilingData(&mut self) -> dai_ProfilingData {
        dai_DeviceBase_getProfilingData(self)
    }
    #[inline]
    pub unsafe fn addLogCallback(&mut self, callback: std_function) -> ::std::os::raw::c_int {
        dai_DeviceBase_addLogCallback(self, callback)
    }
    #[inline]
    pub unsafe fn removeLogCallback(&mut self, callbackId: ::std::os::raw::c_int) -> bool {
        dai_DeviceBase_removeLogCallback(self, callbackId)
    }
    #[inline]
    pub unsafe fn setSystemInformationLoggingRate(&mut self, rateHz: f32) {
        dai_DeviceBase_setSystemInformationLoggingRate(self, rateHz)
    }
    #[inline]
    pub unsafe fn getSystemInformationLoggingRate(&mut self) -> f32 {
        dai_DeviceBase_getSystemInformationLoggingRate(self)
    }
    #[inline]
    pub unsafe fn getConnectedCameras(&mut self) -> std_vector {
        dai_DeviceBase_getConnectedCameras(self)
    }
    #[inline]
    pub unsafe fn getConnectionInterfaces(&mut self) -> std_vector {
        dai_DeviceBase_getConnectionInterfaces(self)
    }
    #[inline]
    pub unsafe fn getConnectedCameraFeatures(&mut self) -> std_vector {
        dai_DeviceBase_getConnectedCameraFeatures(self)
    }
    #[inline]
    pub unsafe fn getStereoPairs(&mut self) -> std_vector {
        dai_DeviceBase_getStereoPairs(self)
    }
    #[inline]
    pub unsafe fn getAvailableStereoPairs(&mut self) -> std_vector {
        dai_DeviceBase_getAvailableStereoPairs(self)
    }
    #[inline]
    pub unsafe fn getCameraSensorNames(&mut self) -> std_unordered_map {
        dai_DeviceBase_getCameraSensorNames(self)
    }
    #[inline]
    pub unsafe fn getConnectedIMU(&mut self) -> std_string {
        dai_DeviceBase_getConnectedIMU(self)
    }
    #[inline]
    pub unsafe fn getIMUFirmwareVersion(&mut self) -> dai_Version {
        dai_DeviceBase_getIMUFirmwareVersion(self)
    }
    #[inline]
    pub unsafe fn getEmbeddedIMUFirmwareVersion(&mut self) -> dai_Version {
        dai_DeviceBase_getEmbeddedIMUFirmwareVersion(self)
    }
    #[inline]
    pub unsafe fn startIMUFirmwareUpdate(&mut self, forceUpdate: bool) -> bool {
        dai_DeviceBase_startIMUFirmwareUpdate(self, forceUpdate)
    }
    #[inline]
    pub unsafe fn getIMUFirmwareUpdateStatus(&mut self) -> std_tuple {
        dai_DeviceBase_getIMUFirmwareUpdateStatus(self)
    }
    #[inline]
    pub unsafe fn getDdrMemoryUsage(&mut self) -> dai_MemoryInfo {
        dai_DeviceBase_getDdrMemoryUsage(self)
    }
    #[inline]
    pub unsafe fn getCmxMemoryUsage(&mut self) -> dai_MemoryInfo {
        dai_DeviceBase_getCmxMemoryUsage(self)
    }
    #[inline]
    pub unsafe fn getLeonCssHeapUsage(&mut self) -> dai_MemoryInfo {
        dai_DeviceBase_getLeonCssHeapUsage(self)
    }
    #[inline]
    pub unsafe fn getLeonMssHeapUsage(&mut self) -> dai_MemoryInfo {
        dai_DeviceBase_getLeonMssHeapUsage(self)
    }
    #[inline]
    pub unsafe fn getChipTemperature(&mut self) -> dai_ChipTemperature {
        dai_DeviceBase_getChipTemperature(self)
    }
    #[inline]
    pub unsafe fn getLeonCssCpuUsage(&mut self) -> dai_CpuUsage {
        dai_DeviceBase_getLeonCssCpuUsage(self)
    }
    #[inline]
    pub unsafe fn getLeonMssCpuUsage(&mut self) -> dai_CpuUsage {
        dai_DeviceBase_getLeonMssCpuUsage(self)
    }
    #[inline]
    pub unsafe fn isEepromAvailable(&mut self) -> bool {
        dai_DeviceBase_isEepromAvailable(self)
    }
    #[inline]
    pub unsafe fn flashCalibration(
        &mut self,
        calibrationDataHandler: dai_CalibrationHandler,
    ) -> bool {
        dai_DeviceBase_flashCalibration(self, calibrationDataHandler)
    }
    #[inline]
    pub unsafe fn flashCalibration2(&mut self, calibrationDataHandler: dai_CalibrationHandler) {
        dai_DeviceBase_flashCalibration2(self, calibrationDataHandler)
    }
    #[inline]
    pub unsafe fn setCalibration(&mut self, calibrationDataHandler: dai_CalibrationHandler) {
        dai_DeviceBase_setCalibration(self, calibrationDataHandler)
    }
    #[inline]
    pub unsafe fn getCalibration(&mut self) -> dai_CalibrationHandler {
        dai_DeviceBase_getCalibration(self)
    }
    #[inline]
    pub unsafe fn readCalibration(&mut self) -> dai_CalibrationHandler {
        dai_DeviceBase_readCalibration(self)
    }
    #[inline]
    pub unsafe fn readCalibration2(&mut self) -> dai_CalibrationHandler {
        dai_DeviceBase_readCalibration2(self)
    }
    #[inline]
    pub unsafe fn readCalibrationOrDefault(&mut self) -> dai_CalibrationHandler {
        dai_DeviceBase_readCalibrationOrDefault(self)
    }
    #[inline]
    pub unsafe fn factoryResetCalibration(&mut self) {
        dai_DeviceBase_factoryResetCalibration(self)
    }
    #[inline]
    pub unsafe fn flashFactoryCalibration(&mut self, calibrationHandler: dai_CalibrationHandler) {
        dai_DeviceBase_flashFactoryCalibration(self, calibrationHandler)
    }
    #[inline]
    pub unsafe fn flashEepromClear(&mut self) {
        dai_DeviceBase_flashEepromClear(self)
    }
    #[inline]
    pub unsafe fn flashFactoryEepromClear(&mut self) {
        dai_DeviceBase_flashFactoryEepromClear(self)
    }
    #[inline]
    pub unsafe fn readFactoryCalibration(&mut self) -> dai_CalibrationHandler {
        dai_DeviceBase_readFactoryCalibration(self)
    }
    #[inline]
    pub unsafe fn readFactoryCalibrationOrDefault(&mut self) -> dai_CalibrationHandler {
        dai_DeviceBase_readFactoryCalibrationOrDefault(self)
    }
    #[inline]
    pub unsafe fn readCalibrationRaw(&mut self) -> std_vector {
        dai_DeviceBase_readCalibrationRaw(self)
    }
    #[inline]
    pub unsafe fn readFactoryCalibrationRaw(&mut self) -> std_vector {
        dai_DeviceBase_readFactoryCalibrationRaw(self)
    }
    #[inline]
    pub unsafe fn getUsbSpeed(&mut self) -> dai_UsbSpeed {
        dai_DeviceBase_getUsbSpeed(self)
    }
    #[inline]
    pub unsafe fn setTimesync(
        &mut self,
        period: std_chrono_milliseconds,
        numSamples: ::std::os::raw::c_int,
        random: bool,
    ) {
        dai_DeviceBase_setTimesync(self, period, numSamples, random)
    }
    #[inline]
    pub unsafe fn setTimesync1(&mut self, enable: bool) {
        dai_DeviceBase_setTimesync1(self, enable)
    }
    #[inline]
    pub unsafe fn close(&mut self) {
        dai_DeviceBase_close(self)
    }
    #[inline]
    pub unsafe fn isClosed(&self) -> bool {
        dai_DeviceBase_isClosed(self)
    }
    #[inline]
    pub unsafe fn crashDevice(&mut self) {
        dai_DeviceBase_crashDevice(self)
    }
    #[inline]
    pub unsafe fn setMaxReconnectionAttempts(
        &mut self,
        maxAttempts: ::std::os::raw::c_int,
        callBack: __BindgenOpaqueArray<u64, 4usize>,
    ) {
        dai_DeviceBase_setMaxReconnectionAttempts(self, maxAttempts, callBack)
    }
    #[inline]
    pub unsafe fn tryStartPipeline(&mut self, pipeline: *const dai_Pipeline) {
        dai_DeviceBase_tryStartPipeline(self, pipeline)
    }
    #[inline]
    pub unsafe fn init(&mut self) {
        dai_DeviceBase_init(self)
    }
    #[inline]
    pub unsafe fn init1(&mut self, pathToCmd: *const dai_Path) {
        dai_DeviceBase_init1(self, pathToCmd)
    }
    #[inline]
    pub unsafe fn init2(&mut self, maxUsbSpeed: dai_UsbSpeed) {
        dai_DeviceBase_init2(self, maxUsbSpeed)
    }
    #[inline]
    pub unsafe fn init3(&mut self, maxUsbSpeed: dai_UsbSpeed, pathToMvcmd: *const dai_Path) {
        dai_DeviceBase_init3(self, maxUsbSpeed, pathToMvcmd)
    }
    #[inline]
    pub unsafe fn init4(&mut self, pipeline: *const dai_Pipeline) {
        dai_DeviceBase_init4(self, pipeline)
    }
    #[inline]
    pub unsafe fn init5(&mut self, pipeline: *const dai_Pipeline, maxUsbSpeed: dai_UsbSpeed) {
        dai_DeviceBase_init5(self, pipeline, maxUsbSpeed)
    }
    #[inline]
    pub unsafe fn init6(&mut self, pipeline: *const dai_Pipeline, pathToCmd: *const dai_Path) {
        dai_DeviceBase_init6(self, pipeline, pathToCmd)
    }
    #[inline]
    pub unsafe fn init7(&mut self, pipeline: *const dai_Pipeline, devInfo: *const dai_DeviceInfo) {
        dai_DeviceBase_init7(self, pipeline, devInfo)
    }
    #[inline]
    pub unsafe fn init8(
        &mut self,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
        usb2Mode: bool,
    ) {
        dai_DeviceBase_init8(self, pipeline, devInfo, usb2Mode)
    }
    #[inline]
    pub unsafe fn init9(
        &mut self,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    ) {
        dai_DeviceBase_init9(self, pipeline, devInfo, maxUsbSpeed)
    }
    #[inline]
    pub unsafe fn init10(
        &mut self,
        pipeline: *const dai_Pipeline,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
    ) {
        dai_DeviceBase_init10(self, pipeline, devInfo, pathToCmd)
    }
    #[inline]
    pub unsafe fn init11(
        &mut self,
        pipeline: *const dai_Pipeline,
        maxUsbSpeed: dai_UsbSpeed,
        pathToMvcmd: *const dai_Path,
    ) {
        dai_DeviceBase_init11(self, pipeline, maxUsbSpeed, pathToMvcmd)
    }
    #[inline]
    pub unsafe fn init12(
        &mut self,
        config: dai_DeviceBase_Config,
        maxUsbSpeed: dai_UsbSpeed,
        pathToMvcmd: *const dai_Path,
    ) {
        dai_DeviceBase_init12(self, config, maxUsbSpeed, pathToMvcmd)
    }
    #[inline]
    pub unsafe fn init13(&mut self, config: dai_DeviceBase_Config, maxUsbSpeed: dai_UsbSpeed) {
        dai_DeviceBase_init13(self, config, maxUsbSpeed)
    }
    #[inline]
    pub unsafe fn init14(&mut self, config: dai_DeviceBase_Config, pathToCmd: *const dai_Path) {
        dai_DeviceBase_init14(self, config, pathToCmd)
    }
    #[inline]
    pub unsafe fn init15(
        &mut self,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    ) {
        dai_DeviceBase_init15(self, config, devInfo, maxUsbSpeed)
    }
    #[inline]
    pub unsafe fn init16(
        &mut self,
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
    ) {
        dai_DeviceBase_init16(self, config, devInfo, pathToCmd)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(maxUsbSpeed: dai_UsbSpeed) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase1(__bindgen_tmp.as_mut_ptr(), maxUsbSpeed);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(devInfo: *const dai_DeviceInfo, maxUsbSpeed: dai_UsbSpeed) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase2(__bindgen_tmp.as_mut_ptr(), devInfo, maxUsbSpeed);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(devInfo: *const dai_DeviceInfo, pathToCmd: *const dai_Path) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase3(__bindgen_tmp.as_mut_ptr(), devInfo, pathToCmd);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(config: dai_DeviceBase_Config) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase4(__bindgen_tmp.as_mut_ptr(), config);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(config: dai_DeviceBase_Config, devInfo: *const dai_DeviceInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase5(__bindgen_tmp.as_mut_ptr(), config, devInfo);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(devInfo: *const dai_DeviceInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase6(__bindgen_tmp.as_mut_ptr(), devInfo);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new7(nameOrDeviceId: std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase7(__bindgen_tmp.as_mut_ptr(), nameOrDeviceId);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new8(nameOrDeviceId: std_string, maxUsbSpeed: dai_UsbSpeed) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase8(__bindgen_tmp.as_mut_ptr(), nameOrDeviceId, maxUsbSpeed);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new9(config: dai_DeviceBase_Config, maxUsbSpeed: dai_UsbSpeed) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase9(__bindgen_tmp.as_mut_ptr(), config, maxUsbSpeed);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new10(config: dai_DeviceBase_Config, pathToCmd: *const dai_Path) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase10(__bindgen_tmp.as_mut_ptr(), config, pathToCmd);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new11(
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        maxUsbSpeed: dai_UsbSpeed,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase11(__bindgen_tmp.as_mut_ptr(), config, devInfo, maxUsbSpeed);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new12(
        config: dai_DeviceBase_Config,
        devInfo: *const dai_DeviceInfo,
        pathToCmd: *const dai_Path,
        dumpOnly: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBase_DeviceBase12(
            __bindgen_tmp.as_mut_ptr(),
            config,
            devInfo,
            pathToCmd,
            dumpOnly,
        );
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[doc = " Device destructor\n @note In the destructor of the derived class, remember to call close()"]
    #[link_name = "\u{1}_ZN3dai10DeviceBaseD1Ev"]
    pub fn dai_DeviceBase_DeviceBase_destructor(this: *mut dai_DeviceBase);
}
unsafe extern "C" {
    #[doc = " Allows the derived classes to handle custom setup for starting the pipeline\n\n @param pipeline OpenVINO version of the pipeline must match the one which the device was booted with\n @sa startPipeline\n @note Remember to call this function in the overload to setup the communication properly\n\n @returns True if pipeline started, false otherwise"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase17startPipelineImplERKNS_8PipelineE"]
    pub fn dai_DeviceBase_startPipelineImpl(
        this: *mut ::std::os::raw::c_void,
        pipeline: *const dai_Pipeline,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Allows the derived classes to handle custom setup for gracefully stopping the pipeline\n\n @note Remember to call this function in the overload to setup the communication properly"]
    #[link_name = "\u{1}_ZN3dai10DeviceBase9closeImplEv"]
    pub fn dai_DeviceBase_closeImpl(this: *mut ::std::os::raw::c_void);
}
#[doc = " Specify properties for VideoEncoder such as profile, bitrate, ..."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_VideoEncoderProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Specifies preferred bitrate (in bit/s) of compressed output bitstream in CBR mode\n\n \"0\" for automatic computation, based on input resolution and FPS:\n 720p30: 4Mbps, 1080p30: 8.5Mbps, 1440p30: 14Mbps, 2160p30: 20Mbps"]
    pub bitrate: ::std::os::raw::c_int,
    #[doc = " Every x number of frames a keyframe will be inserted"]
    pub keyframeFrequency: ::std::os::raw::c_int,
    #[doc = " Specifies maximum bitrate (in bit/s) of compressed output bitstream in CBR mode\n\n \"0\" to follow `bitrate` setting"]
    pub maxBitrate: ::std::os::raw::c_int,
    #[doc = " Specifies number of B frames to be inserted"]
    pub numBFrames: ::std::os::raw::c_int,
    #[doc = " This options specifies how many frames are available in this node's pool.\n Helps when receiver is slow at consuming.\n\n Value \"0\" indicates automatic number of frames assignment"]
    pub numFramesPool: ::std::os::raw::c_uint,
    #[doc = " Specifies max output frame size in pool.\n Value \"0\" indicates auto"]
    pub outputFrameSize: ::std::os::raw::c_int,
    #[doc = " Encoding profile, H264, H265 or MJPEG"]
    pub profile: dai_VideoEncoderProperties_Profile,
    #[doc = " Value between 0-100% (approximates quality)"]
    pub quality: ::std::os::raw::c_int,
    #[doc = " Lossless mode ([M]JPEG only)"]
    pub lossless: bool,
    #[doc = " Rate control mode specifies if constant or variable bitrate should be used (H264 / H265)"]
    pub rateCtrlMode: dai_VideoEncoderProperties_RateControlMode,
    #[doc = " Frame rate"]
    pub frameRate: f32,
}
pub const dai_VideoEncoderProperties_RateControlMode_CBR:
    dai_VideoEncoderProperties_RateControlMode = 0;
pub const dai_VideoEncoderProperties_RateControlMode_VBR:
    dai_VideoEncoderProperties_RateControlMode = 1;
#[doc = " Rate control mode specifies if constant or variable bitrate should be used (H264 / H265)"]
pub type dai_VideoEncoderProperties_RateControlMode = ::std::os::raw::c_int;
pub const dai_VideoEncoderProperties_Profile_H264_BASELINE: dai_VideoEncoderProperties_Profile = 0;
pub const dai_VideoEncoderProperties_Profile_H264_HIGH: dai_VideoEncoderProperties_Profile = 1;
pub const dai_VideoEncoderProperties_Profile_H264_MAIN: dai_VideoEncoderProperties_Profile = 2;
pub const dai_VideoEncoderProperties_Profile_H265_MAIN: dai_VideoEncoderProperties_Profile = 3;
pub const dai_VideoEncoderProperties_Profile_MJPEG: dai_VideoEncoderProperties_Profile = 4;
#[doc = " Encoding profile, H264 (AVC), H265 (HEVC) or MJPEG"]
pub type dai_VideoEncoderProperties_Profile = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_VideoEncoderProperties"]
        [::std::mem::size_of::<dai_VideoEncoderProperties>() - 56usize];
    ["Alignment of dai_VideoEncoderProperties"]
        [::std::mem::align_of::<dai_VideoEncoderProperties>() - 8usize];
    ["Offset of field: dai_VideoEncoderProperties::bitrate"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, bitrate) - 8usize];
    ["Offset of field: dai_VideoEncoderProperties::keyframeFrequency"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, keyframeFrequency) - 12usize];
    ["Offset of field: dai_VideoEncoderProperties::maxBitrate"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, maxBitrate) - 16usize];
    ["Offset of field: dai_VideoEncoderProperties::numBFrames"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, numBFrames) - 20usize];
    ["Offset of field: dai_VideoEncoderProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, numFramesPool) - 24usize];
    ["Offset of field: dai_VideoEncoderProperties::outputFrameSize"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, outputFrameSize) - 28usize];
    ["Offset of field: dai_VideoEncoderProperties::profile"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, profile) - 32usize];
    ["Offset of field: dai_VideoEncoderProperties::quality"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, quality) - 36usize];
    ["Offset of field: dai_VideoEncoderProperties::lossless"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, lossless) - 40usize];
    ["Offset of field: dai_VideoEncoderProperties::rateCtrlMode"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, rateCtrlMode) - 44usize];
    ["Offset of field: dai_VideoEncoderProperties::frameRate"]
        [::std::mem::offset_of!(dai_VideoEncoderProperties, frameRate) - 48usize];
};
#[doc = " Configuration for recording and replaying messages"]
#[repr(C)]
pub struct dai_RecordConfig {
    pub state: dai_RecordConfig_RecordReplayState,
    pub outputDir: std_string,
    pub videoEncoding: dai_RecordConfig_VideoEncoding,
    pub compressionLevel: dai_RecordConfig_CompressionLevel,
}
#[doc = " Encoding profile, H264 (AVC), H265 (HEVC) or MJPEG"]
pub use self::dai_VideoEncoderProperties_Profile as dai_RecordConfig_Profile;
pub const dai_RecordConfig_RecordReplayState_RECORD: dai_RecordConfig_RecordReplayState = 0;
pub const dai_RecordConfig_RecordReplayState_REPLAY: dai_RecordConfig_RecordReplayState = 1;
pub const dai_RecordConfig_RecordReplayState_NONE: dai_RecordConfig_RecordReplayState = 2;
pub type dai_RecordConfig_RecordReplayState = ::std::os::raw::c_int;
pub const dai_RecordConfig_CompressionLevel_NONE: dai_RecordConfig_CompressionLevel = 0;
pub const dai_RecordConfig_CompressionLevel_FASTEST: dai_RecordConfig_CompressionLevel = 1;
pub const dai_RecordConfig_CompressionLevel_FAST: dai_RecordConfig_CompressionLevel = 2;
pub const dai_RecordConfig_CompressionLevel_DEFAULT: dai_RecordConfig_CompressionLevel = 3;
pub const dai_RecordConfig_CompressionLevel_SLOW: dai_RecordConfig_CompressionLevel = 4;
pub const dai_RecordConfig_CompressionLevel_SLOWEST: dai_RecordConfig_CompressionLevel = 5;
pub type dai_RecordConfig_CompressionLevel = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_RecordConfig_VideoEncoding {
    pub enabled: bool,
    pub bitrate: ::std::os::raw::c_int,
    pub profile: dai_RecordConfig_Profile,
    pub lossless: bool,
    pub quality: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_RecordConfig_VideoEncoding"]
        [::std::mem::size_of::<dai_RecordConfig_VideoEncoding>() - 20usize];
    ["Alignment of dai_RecordConfig_VideoEncoding"]
        [::std::mem::align_of::<dai_RecordConfig_VideoEncoding>() - 4usize];
    ["Offset of field: dai_RecordConfig_VideoEncoding::enabled"]
        [::std::mem::offset_of!(dai_RecordConfig_VideoEncoding, enabled) - 0usize];
    ["Offset of field: dai_RecordConfig_VideoEncoding::bitrate"]
        [::std::mem::offset_of!(dai_RecordConfig_VideoEncoding, bitrate) - 4usize];
    ["Offset of field: dai_RecordConfig_VideoEncoding::profile"]
        [::std::mem::offset_of!(dai_RecordConfig_VideoEncoding, profile) - 8usize];
    ["Offset of field: dai_RecordConfig_VideoEncoding::lossless"]
        [::std::mem::offset_of!(dai_RecordConfig_VideoEncoding, lossless) - 12usize];
    ["Offset of field: dai_RecordConfig_VideoEncoding::quality"]
        [::std::mem::offset_of!(dai_RecordConfig_VideoEncoding, quality) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_RecordConfig"][::std::mem::size_of::<dai_RecordConfig>() - 64usize];
    ["Alignment of dai_RecordConfig"][::std::mem::align_of::<dai_RecordConfig>() - 8usize];
    ["Offset of field: dai_RecordConfig::state"]
        [::std::mem::offset_of!(dai_RecordConfig, state) - 0usize];
    ["Offset of field: dai_RecordConfig::outputDir"]
        [::std::mem::offset_of!(dai_RecordConfig, outputDir) - 8usize];
    ["Offset of field: dai_RecordConfig::videoEncoding"]
        [::std::mem::offset_of!(dai_RecordConfig, videoEncoding) - 40usize];
    ["Offset of field: dai_RecordConfig::compressionLevel"]
        [::std::mem::offset_of!(dai_RecordConfig, compressionLevel) - 60usize];
};
#[repr(C)]
pub struct dai_NodeRecordParams {
    pub video: bool,
    pub name: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NodeRecordParams"][::std::mem::size_of::<dai_NodeRecordParams>() - 40usize];
    ["Alignment of dai_NodeRecordParams"][::std::mem::align_of::<dai_NodeRecordParams>() - 8usize];
    ["Offset of field: dai_NodeRecordParams::video"]
        [::std::mem::offset_of!(dai_NodeRecordParams, video) - 0usize];
    ["Offset of field: dai_NodeRecordParams::name"]
        [::std::mem::offset_of!(dai_NodeRecordParams, name) - 8usize];
};
pub const dai_Platform_RVC2: dai_Platform = 0;
pub const dai_Platform_RVC3: dai_Platform = 1;
pub const dai_Platform_RVC4: dai_Platform = 2;
#[doc = " @brief Hardware platform type\n"]
pub type dai_Platform = ::std::os::raw::c_int;
unsafe extern "C" {
    #[doc = " @brief Convert Platform enum to string\n\n @param platform Platform enum\n @return std::string String representation of Platform"]
    #[link_name = "\u{1}_ZN3dai15platform2stringB5cxx11ENS_8PlatformE"]
    pub fn dai_platform2string(platform: dai_Platform) -> std_string;
}
unsafe extern "C" {
    #[doc = " @brief Convert string to Platform enum\n\n @param platform String representation of Platform\n @return Platform Platform enum"]
    #[link_name = "\u{1}_ZN3dai15string2platformERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_string2platform(platform: *const std_string) -> dai_Platform;
}
#[doc = " Represents the DepthAI device with the methods to interact with it.\n Implements the host-side queues to connect with XLinkIn and XLinkOut nodes"]
#[repr(C)]
pub struct dai_Device {
    pub _base: dai_DeviceBase,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Device"][::std::mem::size_of::<dai_Device>() - 1944usize];
    ["Alignment of dai_Device"][::std::mem::align_of::<dai_Device>() - 8usize];
};
unsafe extern "C" {
    #[doc = " @brief Get the platform of the connected device\n @return Platform Platform enum"]
    #[link_name = "\u{1}_ZNK3dai6Device11getPlatformEv"]
    pub fn dai_Device_getPlatform(this: *const dai_Device) -> dai_Platform;
}
unsafe extern "C" {
    #[doc = " @brief Get the platform of the connected device as string\n @return std::string String representation of Platform"]
    #[link_name = "\u{1}_ZNK3dai6Device19getPlatformAsStringB5cxx11Ev"]
    pub fn dai_Device_getPlatformAsString(this: *const dai_Device) -> std_string;
}
unsafe extern "C" {
    #[doc = " Connects to any available device with a DEFAULT_SEARCH_TIME timeout.\n Uses OpenVINO version OpenVINO::VERSION_UNIVERSAL"]
    #[link_name = "\u{1}_ZN3dai6DeviceC1Ev"]
    pub fn dai_Device_Device(this: *mut dai_Device);
}
impl dai_Device {
    #[inline]
    pub unsafe fn getPlatform(&self) -> dai_Platform {
        dai_Device_getPlatform(self)
    }
    #[inline]
    pub unsafe fn getPlatformAsString(&self) -> std_string {
        dai_Device_getPlatformAsString(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Device_Device(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[doc = " @brief dtor to close the device"]
    #[link_name = "\u{1}_ZN3dai6DeviceD1Ev"]
    pub fn dai_Device_Device_destructor(this: *mut dai_Device);
}
#[repr(C)]
pub struct dai_CallbackHandler {
    pub t: std_thread,
    pub running: std_atomic<bool>,
    pub connection: std_shared_ptr,
    pub callback: __BindgenOpaqueArray<u64, 4usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CallbackHandler"][::std::mem::size_of::<dai_CallbackHandler>() - 64usize];
    ["Alignment of dai_CallbackHandler"][::std::mem::align_of::<dai_CallbackHandler>() - 8usize];
    ["Offset of field: dai_CallbackHandler::t"]
        [::std::mem::offset_of!(dai_CallbackHandler, t) - 0usize];
    ["Offset of field: dai_CallbackHandler::running"]
        [::std::mem::offset_of!(dai_CallbackHandler, running) - 8usize];
    ["Offset of field: dai_CallbackHandler::connection"]
        [::std::mem::offset_of!(dai_CallbackHandler, connection) - 16usize];
    ["Offset of field: dai_CallbackHandler::callback"]
        [::std::mem::offset_of!(dai_CallbackHandler, callback) - 32usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15CallbackHandler11setCallbackESt8functionIFSt10shared_ptrINS_9ADatatypeEES4_EE"]
    pub fn dai_CallbackHandler_setCallback(
        this: *mut dai_CallbackHandler,
        cb: __BindgenOpaqueArray<u64, 4usize>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15CallbackHandlerC1ESt10shared_ptrINS_15XLinkConnectionEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFS1_INS_9ADatatypeEESE_EE"]
    pub fn dai_CallbackHandler_CallbackHandler(
        this: *mut dai_CallbackHandler,
        conn: std_shared_ptr,
        streamName: *const std_string,
        cb: __BindgenOpaqueArray<u64, 4usize>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15CallbackHandlerD1Ev"]
    pub fn dai_CallbackHandler_CallbackHandler_destructor(this: *mut dai_CallbackHandler);
}
impl dai_CallbackHandler {
    #[inline]
    pub unsafe fn setCallback(&mut self, cb: __BindgenOpaqueArray<u64, 4usize>) {
        dai_CallbackHandler_setCallback(self, cb)
    }
    #[inline]
    pub unsafe fn new(
        conn: std_shared_ptr,
        streamName: *const std_string,
        cb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_CallbackHandler_CallbackHandler(__bindgen_tmp.as_mut_ptr(), conn, streamName, cb);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_CallbackHandler_CallbackHandler_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_AssetView {
    pub data: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uint,
    pub alignment: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AssetView"][::std::mem::size_of::<dai_AssetView>() - 16usize];
    ["Alignment of dai_AssetView"][::std::mem::align_of::<dai_AssetView>() - 8usize];
    ["Offset of field: dai_AssetView::data"][::std::mem::offset_of!(dai_AssetView, data) - 0usize];
    ["Offset of field: dai_AssetView::size"][::std::mem::offset_of!(dai_AssetView, size) - 8usize];
    ["Offset of field: dai_AssetView::alignment"]
        [::std::mem::offset_of!(dai_AssetView, alignment) - 12usize];
};
#[repr(C)]
pub struct dai_Assets {
    pub pStorageStart: *mut ::std::os::raw::c_uchar,
    pub map: std_unordered_map,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Assets_AssetInternal {
    pub offset: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub alignment: ::std::os::raw::c_uint,
}
pub type dai_Assets_AssetInternal_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Assets_AssetInternal"]
        [::std::mem::size_of::<dai_Assets_AssetInternal>() - 12usize];
    ["Alignment of dai_Assets_AssetInternal"]
        [::std::mem::align_of::<dai_Assets_AssetInternal>() - 4usize];
    ["Offset of field: dai_Assets_AssetInternal::offset"]
        [::std::mem::offset_of!(dai_Assets_AssetInternal, offset) - 0usize];
    ["Offset of field: dai_Assets_AssetInternal::size"]
        [::std::mem::offset_of!(dai_Assets_AssetInternal, size) - 4usize];
    ["Offset of field: dai_Assets_AssetInternal::alignment"]
        [::std::mem::offset_of!(dai_Assets_AssetInternal, alignment) - 8usize];
};
pub type dai_Assets_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Assets"][::std::mem::size_of::<dai_Assets>() - 64usize];
    ["Alignment of dai_Assets"][::std::mem::align_of::<dai_Assets>() - 8usize];
    ["Offset of field: dai_Assets::pStorageStart"]
        [::std::mem::offset_of!(dai_Assets, pStorageStart) - 0usize];
    ["Offset of field: dai_Assets::map"][::std::mem::offset_of!(dai_Assets, map) - 8usize];
};
#[doc = " @brief Asset is identified with string key and can store arbitrary binary data"]
#[repr(C)]
pub struct dai_Asset {
    pub key: std_string,
    pub data: std_vector,
    pub alignment: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Asset"][::std::mem::size_of::<dai_Asset>() - 64usize];
    ["Alignment of dai_Asset"][::std::mem::align_of::<dai_Asset>() - 8usize];
    ["Offset of field: dai_Asset::key"][::std::mem::offset_of!(dai_Asset, key) - 0usize];
    ["Offset of field: dai_Asset::data"][::std::mem::offset_of!(dai_Asset, data) - 32usize];
    ["Offset of field: dai_Asset::alignment"]
        [::std::mem::offset_of!(dai_Asset, alignment) - 56usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai5Asset14getRelativeUriB5cxx11Ev"]
    pub fn dai_Asset_getRelativeUri(this: *mut dai_Asset) -> std_string;
}
impl dai_Asset {
    #[inline]
    pub unsafe fn getRelativeUri(&mut self) -> std_string {
        dai_Asset_getRelativeUri(self)
    }
}
#[repr(C)]
pub struct dai_AssetsMutable {
    pub _base: dai_Assets,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AssetsMutable"][::std::mem::size_of::<dai_AssetsMutable>() - 64usize];
    ["Alignment of dai_AssetsMutable"][::std::mem::align_of::<dai_AssetsMutable>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai13AssetsMutable3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjjj"]
    pub fn dai_AssetsMutable_set(
        this: *mut dai_AssetsMutable,
        arg1: std_string,
        offset: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        alignment: ::std::os::raw::c_uint,
    );
}
impl dai_AssetsMutable {
    #[inline]
    pub unsafe fn set(
        &mut self,
        arg1: std_string,
        offset: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        alignment: ::std::os::raw::c_uint,
    ) {
        dai_AssetsMutable_set(self, arg1, offset, size, alignment)
    }
}
#[doc = " @brief AssetManager can store assets and serialize"]
#[repr(C)]
pub struct dai_AssetManager {
    pub assetMap: std_map,
    pub rootPath: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AssetManager"][::std::mem::size_of::<dai_AssetManager>() - 80usize];
    ["Alignment of dai_AssetManager"][::std::mem::align_of::<dai_AssetManager>() - 8usize];
    ["Offset of field: dai_AssetManager::assetMap"]
        [::std::mem::offset_of!(dai_AssetManager, assetMap) - 0usize];
    ["Offset of field: dai_AssetManager::rootPath"]
        [::std::mem::offset_of!(dai_AssetManager, rootPath) - 48usize];
};
unsafe extern "C" {
    #[doc = " Adds all assets in an array to the AssetManager\n @param assets Vector of assets to add"]
    #[link_name = "\u{1}_ZN3dai12AssetManager11addExistingESt6vectorISt10shared_ptrINS_5AssetEESaIS4_EE"]
    pub fn dai_AssetManager_addExisting(this: *mut dai_AssetManager, assets: std_vector);
}
unsafe extern "C" {
    #[doc = " Get root path of the asset manager\n @returns Root path"]
    #[link_name = "\u{1}_ZN3dai12AssetManager11getRootPathB5cxx11Ev"]
    pub fn dai_AssetManager_getRootPath(this: *mut dai_AssetManager) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set root path of the asset manager\n @param rootPath Root path"]
    #[link_name = "\u{1}_ZN3dai12AssetManager11setRootPathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_AssetManager_setRootPath(this: *mut dai_AssetManager, rootPath: *const std_string);
}
unsafe extern "C" {
    #[doc = " Adds or overwrites an asset object to AssetManager.\n @param asset Asset to add\n @returns Shared pointer to asset"]
    #[link_name = "\u{1}_ZN3dai12AssetManager3setENS_5AssetE"]
    pub fn dai_AssetManager_set(this: *mut dai_AssetManager, asset: dai_Asset) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Adds or overwrites an asset object to AssetManager with a specified key.\n Key value will be assigned to an Asset as well\n\n @param key Key under which the asset should be stored\n @param asset Asset to store\n @returns Shared pointer to asset"]
    #[link_name = "\u{1}_ZN3dai12AssetManager3setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_5AssetE"]
    pub fn dai_AssetManager_set1(
        this: *mut dai_AssetManager,
        key: *const std_string,
        asset: dai_Asset,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Loads file into asset manager under specified key.\n\n @param key Key under which the asset should be stored\n @param path Path to file which to load as asset\n @param alignment [Optional] alignment of asset data in asset storage. Default is 64B"]
    #[link_name = "\u{1}_ZN3dai12AssetManager3setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_4PathEi"]
    pub fn dai_AssetManager_set2(
        this: *mut dai_AssetManager,
        key: *const std_string,
        path: *const dai_Path,
        alignment: ::std::os::raw::c_int,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Loads file into asset manager under specified key.\n\n @param key Key under which the asset should be stored\n @param data Asset data\n @param alignment [Optional] alignment of asset data in asset storage. Default is 64B\n @returns Shared pointer to asset"]
    #[link_name = "\u{1}_ZN3dai12AssetManager3setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIhSaIhEEi"]
    pub fn dai_AssetManager_set3(
        this: *mut dai_AssetManager,
        key: *const std_string,
        data: *const std_vector,
        alignment: ::std::os::raw::c_int,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12AssetManager3setERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEOSt6vectorIhSaIhEEi"]
    pub fn dai_AssetManager_set4(
        this: *mut dai_AssetManager,
        key: *const std_string,
        data: *mut std_vector,
        alignment: ::std::os::raw::c_int,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @returns Asset assigned to the specified key or a nullptr otherwise"]
    #[link_name = "\u{1}_ZNK3dai12AssetManager3getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_AssetManager_get(
        this: *const dai_AssetManager,
        key: *const std_string,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @returns Asset assigned to the specified key or a nullptr otherwise"]
    #[link_name = "\u{1}_ZN3dai12AssetManager3getERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_AssetManager_get1(
        this: *mut dai_AssetManager,
        key: *const std_string,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @returns All asset stored in the AssetManager"]
    #[link_name = "\u{1}_ZNK3dai12AssetManager6getAllEv"]
    pub fn dai_AssetManager_getAll(this: *const dai_AssetManager) -> std_vector;
}
unsafe extern "C" {
    #[doc = " @returns All asset stored in the AssetManager"]
    #[link_name = "\u{1}_ZN3dai12AssetManager6getAllEv"]
    pub fn dai_AssetManager_getAll1(this: *mut dai_AssetManager) -> std_vector;
}
unsafe extern "C" {
    #[doc = " @returns Number of asset stored in the AssetManager"]
    #[link_name = "\u{1}_ZNK3dai12AssetManager4sizeEv"]
    pub fn dai_AssetManager_size(this: *const dai_AssetManager) -> usize;
}
unsafe extern "C" {
    #[doc = " Removes asset with key\n @param key Key of asset to remove"]
    #[link_name = "\u{1}_ZN3dai12AssetManager6removeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_AssetManager_remove(this: *mut dai_AssetManager, key: *const std_string);
}
unsafe extern "C" {
    #[doc = " Serializes"]
    #[link_name = "\u{1}_ZNK3dai12AssetManager9serializeERNS_13AssetsMutableERSt6vectorIhSaIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_AssetManager_serialize(
        this: *const dai_AssetManager,
        assets: *mut dai_AssetsMutable,
        assetStorage: *mut std_vector,
        prefix: std_string,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12AssetManagerC1Ev"]
    pub fn dai_AssetManager_AssetManager(this: *mut dai_AssetManager);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12AssetManagerC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_AssetManager_AssetManager1(this: *mut dai_AssetManager, rootPath: std_string);
}
impl dai_AssetManager {
    #[inline]
    pub unsafe fn addExisting(&mut self, assets: std_vector) {
        dai_AssetManager_addExisting(self, assets)
    }
    #[inline]
    pub unsafe fn getRootPath(&mut self) -> std_string {
        dai_AssetManager_getRootPath(self)
    }
    #[inline]
    pub unsafe fn setRootPath(&mut self, rootPath: *const std_string) {
        dai_AssetManager_setRootPath(self, rootPath)
    }
    #[inline]
    pub unsafe fn set(&mut self, asset: dai_Asset) -> std_shared_ptr {
        dai_AssetManager_set(self, asset)
    }
    #[inline]
    pub unsafe fn set1(&mut self, key: *const std_string, asset: dai_Asset) -> std_shared_ptr {
        dai_AssetManager_set1(self, key, asset)
    }
    #[inline]
    pub unsafe fn set2(
        &mut self,
        key: *const std_string,
        path: *const dai_Path,
        alignment: ::std::os::raw::c_int,
    ) -> std_shared_ptr {
        dai_AssetManager_set2(self, key, path, alignment)
    }
    #[inline]
    pub unsafe fn set3(
        &mut self,
        key: *const std_string,
        data: *const std_vector,
        alignment: ::std::os::raw::c_int,
    ) -> std_shared_ptr {
        dai_AssetManager_set3(self, key, data, alignment)
    }
    #[inline]
    pub unsafe fn set4(
        &mut self,
        key: *const std_string,
        data: *mut std_vector,
        alignment: ::std::os::raw::c_int,
    ) -> std_shared_ptr {
        dai_AssetManager_set4(self, key, data, alignment)
    }
    #[inline]
    pub unsafe fn get(&self, key: *const std_string) -> std_shared_ptr {
        dai_AssetManager_get(self, key)
    }
    #[inline]
    pub unsafe fn get1(&mut self, key: *const std_string) -> std_shared_ptr {
        dai_AssetManager_get1(self, key)
    }
    #[inline]
    pub unsafe fn getAll(&self) -> std_vector {
        dai_AssetManager_getAll(self)
    }
    #[inline]
    pub unsafe fn getAll1(&mut self) -> std_vector {
        dai_AssetManager_getAll1(self)
    }
    #[inline]
    pub unsafe fn size(&self) -> usize {
        dai_AssetManager_size(self)
    }
    #[inline]
    pub unsafe fn remove(&mut self, key: *const std_string) {
        dai_AssetManager_remove(self, key)
    }
    #[inline]
    pub unsafe fn serialize(
        &self,
        assets: *mut dai_AssetsMutable,
        assetStorage: *mut std_vector,
        prefix: std_string,
    ) {
        dai_AssetManager_serialize(self, assets, assetStorage, prefix)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_AssetManager_AssetManager(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(rootPath: std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_AssetManager_AssetManager1(__bindgen_tmp.as_mut_ptr(), rootPath);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct dai_LockingQueue {
    pub maxSize: ::std::os::raw::c_uint,
    pub blocking: bool,
    pub queue: std_queue<_Sequence>,
    pub guard: std_mutex,
    pub destructed: bool,
    pub signalPop: std_condition_variable,
    pub signalPush: std_condition_variable,
}
#[repr(C)]
pub struct dai_MessageQueue__bindgen_vtable(::std::os::raw::c_void);
#[doc = " Thread safe queue to send messages between nodes"]
#[repr(C)]
pub struct dai_MessageQueue {
    pub vtable_: *const dai_MessageQueue__bindgen_vtable,
    pub _base: std_enable_shared_from_this,
    pub queue: dai_LockingQueue,
    pub name: std_string,
    pub callbacksMtx: std_mutex,
    pub callbacks: std_unordered_map,
    pub uniqueCallbackId: dai_MessageQueue_CallbackId,
}
#[doc = " Alias for callback id"]
pub type dai_MessageQueue_CallbackId = ::std::os::raw::c_int;
#[repr(C)]
pub struct dai_MessageQueue_QueueException {
    pub _base: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_MessageQueue_QueueException"]
        [::std::mem::size_of::<dai_MessageQueue_QueueException>() - 16usize];
    ["Alignment of dai_MessageQueue_QueueException"]
        [::std::mem::align_of::<dai_MessageQueue_QueueException>() - 8usize];
};
pub const dai_MessageQueue_CLOSED_QUEUE_MESSAGE: &[u8; 24] = b"MessageQueue was closed\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_MessageQueue"][::std::mem::size_of::<dai_MessageQueue>() - 392usize];
    ["Alignment of dai_MessageQueue"][::std::mem::align_of::<dai_MessageQueue>() - 8usize];
    ["Offset of field: dai_MessageQueue::queue"]
        [::std::mem::offset_of!(dai_MessageQueue, queue) - 24usize];
    ["Offset of field: dai_MessageQueue::name"]
        [::std::mem::offset_of!(dai_MessageQueue, name) - 256usize];
    ["Offset of field: dai_MessageQueue::callbacksMtx"]
        [::std::mem::offset_of!(dai_MessageQueue, callbacksMtx) - 288usize];
    ["Offset of field: dai_MessageQueue::callbacks"]
        [::std::mem::offset_of!(dai_MessageQueue, callbacks) - 328usize];
    ["Offset of field: dai_MessageQueue::uniqueCallbackId"]
        [::std::mem::offset_of!(dai_MessageQueue, uniqueCallbackId) - 384usize];
};
unsafe extern "C" {
    #[doc = " @brief Get name of the queue"]
    #[link_name = "\u{1}_ZNK3dai12MessageQueue7getNameB5cxx11Ev"]
    pub fn dai_MessageQueue_getName(this: *const dai_MessageQueue) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set the name of the queue"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue7setNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_MessageQueue_setName(this: *mut dai_MessageQueue, name: std_string);
}
unsafe extern "C" {
    #[doc = " Check whether queue is closed"]
    #[link_name = "\u{1}_ZNK3dai12MessageQueue8isClosedEv"]
    pub fn dai_MessageQueue_isClosed(this: *const dai_MessageQueue) -> bool;
}
unsafe extern "C" {
    #[doc = " Closes the queue and unblocks any waiting consumers or producers"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue5closeEv"]
    pub fn dai_MessageQueue_close(this: *mut dai_MessageQueue);
}
unsafe extern "C" {
    #[doc = " Sets queue behavior when full (maxSize)\n\n @param blocking Specifies if block or overwrite the oldest message in the queue"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue11setBlockingEb"]
    pub fn dai_MessageQueue_setBlocking(this: *mut dai_MessageQueue, blocking: bool);
}
unsafe extern "C" {
    #[doc = " Gets current queue behavior when full (maxSize)\n\n @returns True if blocking, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai12MessageQueue11getBlockingEv"]
    pub fn dai_MessageQueue_getBlocking(this: *const dai_MessageQueue) -> bool;
}
unsafe extern "C" {
    #[doc = " Sets queue maximum size\n\n @param maxSize Specifies maximum number of messages in the queue\n @note If maxSize is smaller than size, queue will not be truncated immediately, only after messages are popped"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue10setMaxSizeEj"]
    pub fn dai_MessageQueue_setMaxSize(
        this: *mut dai_MessageQueue,
        maxSize: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[doc = " Gets queue maximum size\n\n @returns Maximum queue size"]
    #[link_name = "\u{1}_ZNK3dai12MessageQueue10getMaxSizeEv"]
    pub fn dai_MessageQueue_getMaxSize(this: *const dai_MessageQueue) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Gets queue current size\n\n @returns Current queue size"]
    #[link_name = "\u{1}_ZNK3dai12MessageQueue7getSizeEv"]
    pub fn dai_MessageQueue_getSize(this: *const dai_MessageQueue) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Gets whether queue is full\n\n @returns True if queue is full, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai12MessageQueue6isFullEv"]
    pub fn dai_MessageQueue_isFull(this: *const dai_MessageQueue) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Adds a callback on message received\n\n @param callback Callback function with queue name and message pointer\n @returns Callback id"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue11addCallbackESt8functionIFvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrINS_9ADatatypeEEEE"]
    pub fn dai_MessageQueue_addCallback(
        this: *mut dai_MessageQueue,
        arg1: __BindgenOpaqueArray<u64, 4usize>,
    ) -> dai_MessageQueue_CallbackId;
}
unsafe extern "C" {
    #[doc = " Adds a callback on message received\n\n @param callback Callback function with message pointer\n @returns Callback id"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue11addCallbackERKSt8functionIFvSt10shared_ptrINS_9ADatatypeEEEE"]
    pub fn dai_MessageQueue_addCallback1(
        this: *mut dai_MessageQueue,
        arg1: *const std_function,
    ) -> dai_MessageQueue_CallbackId;
}
unsafe extern "C" {
    #[doc = " Adds a callback on message received\n\n @param callback Callback function without any parameters\n @returns Callback id"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue11addCallbackERKSt8functionIFvvEE"]
    pub fn dai_MessageQueue_addCallback2(
        this: *mut dai_MessageQueue,
        callback: *const __BindgenOpaqueArray<u64, 4usize>,
    ) -> dai_MessageQueue_CallbackId;
}
unsafe extern "C" {
    #[doc = " Removes a callback\n\n @param callbackId Id of callback to be removed\n @returns True if callback was removed, false otherwise"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue14removeCallbackEi"]
    pub fn dai_MessageQueue_removeCallback(
        this: *mut dai_MessageQueue,
        callbackId: dai_MessageQueue_CallbackId,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Adds a message to the queue, which will be picked up and sent to the device.\n Can either block if 'blocking' behavior is true or overwrite oldest\n @param msg Message to add to the queue"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue4sendERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_MessageQueue_send(this: *mut dai_MessageQueue, msg: *const std_shared_ptr);
}
unsafe extern "C" {
    #[doc = " Adds message to the queue, which will be picked up and sent to the device.\n Can either block until timeout if 'blocking' behavior is true or overwrite oldest\n\n @param msg Message to add to the queue\n @param timeout Maximum duration to block in milliseconds"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue4sendERKSt10shared_ptrINS_9ADatatypeEENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_MessageQueue_send1(
        this: *mut dai_MessageQueue,
        msg: *const std_shared_ptr,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Adds message to the queue, which will be picked up and sent to the device.\n Can either block until timeout if 'blocking' behavior is true or overwrite oldest\n\n @param msg Message to add to the queue\n @param timeout Maximum duration to block in milliseconds"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue4sendERKNS_9ADatatypeENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_MessageQueue_send2(
        this: *mut dai_MessageQueue,
        msg: *const dai_ADatatype,
        timeout: std_chrono_milliseconds,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Tries sending a message\n\n @param msg message to send"]
    #[link_name = "\u{1}_ZN3dai12MessageQueue7trySendERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_MessageQueue_trySend(
        this: *mut dai_MessageQueue,
        msg: *const std_shared_ptr,
    ) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12MessageQueueC1Ejb"]
    pub fn dai_MessageQueue_MessageQueue(
        this: *mut dai_MessageQueue,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12MessageQueueC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEjb"]
    pub fn dai_MessageQueue_MessageQueue1(
        this: *mut dai_MessageQueue,
        name: std_string,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    );
}
impl dai_MessageQueue {
    #[inline]
    pub unsafe fn getName(&self) -> std_string {
        dai_MessageQueue_getName(self)
    }
    #[inline]
    pub unsafe fn setName(&mut self, name: std_string) {
        dai_MessageQueue_setName(self, name)
    }
    #[inline]
    pub unsafe fn isClosed(&self) -> bool {
        dai_MessageQueue_isClosed(self)
    }
    #[inline]
    pub unsafe fn close(&mut self) {
        dai_MessageQueue_close(self)
    }
    #[inline]
    pub unsafe fn setBlocking(&mut self, blocking: bool) {
        dai_MessageQueue_setBlocking(self, blocking)
    }
    #[inline]
    pub unsafe fn getBlocking(&self) -> bool {
        dai_MessageQueue_getBlocking(self)
    }
    #[inline]
    pub unsafe fn setMaxSize(&mut self, maxSize: ::std::os::raw::c_uint) {
        dai_MessageQueue_setMaxSize(self, maxSize)
    }
    #[inline]
    pub unsafe fn getMaxSize(&self) -> ::std::os::raw::c_uint {
        dai_MessageQueue_getMaxSize(self)
    }
    #[inline]
    pub unsafe fn getSize(&self) -> ::std::os::raw::c_uint {
        dai_MessageQueue_getSize(self)
    }
    #[inline]
    pub unsafe fn isFull(&self) -> ::std::os::raw::c_uint {
        dai_MessageQueue_isFull(self)
    }
    #[inline]
    pub unsafe fn addCallback(
        &mut self,
        arg1: __BindgenOpaqueArray<u64, 4usize>,
    ) -> dai_MessageQueue_CallbackId {
        dai_MessageQueue_addCallback(self, arg1)
    }
    #[inline]
    pub unsafe fn addCallback1(
        &mut self,
        arg1: *const std_function,
    ) -> dai_MessageQueue_CallbackId {
        dai_MessageQueue_addCallback1(self, arg1)
    }
    #[inline]
    pub unsafe fn addCallback2(
        &mut self,
        callback: *const __BindgenOpaqueArray<u64, 4usize>,
    ) -> dai_MessageQueue_CallbackId {
        dai_MessageQueue_addCallback2(self, callback)
    }
    #[inline]
    pub unsafe fn removeCallback(&mut self, callbackId: dai_MessageQueue_CallbackId) -> bool {
        dai_MessageQueue_removeCallback(self, callbackId)
    }
    #[inline]
    pub unsafe fn send(&mut self, msg: *const std_shared_ptr) {
        dai_MessageQueue_send(self, msg)
    }
    #[inline]
    pub unsafe fn send1(
        &mut self,
        msg: *const std_shared_ptr,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_MessageQueue_send1(self, msg, timeout)
    }
    #[inline]
    pub unsafe fn send2(
        &mut self,
        msg: *const dai_ADatatype,
        timeout: std_chrono_milliseconds,
    ) -> bool {
        dai_MessageQueue_send2(self, msg, timeout)
    }
    #[inline]
    pub unsafe fn trySend(&mut self, msg: *const std_shared_ptr) -> bool {
        dai_MessageQueue_trySend(self, msg)
    }
    #[inline]
    pub unsafe fn new(maxSize: ::std::os::raw::c_uint, blocking: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_MessageQueue_MessageQueue(__bindgen_tmp.as_mut_ptr(), maxSize, blocking);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(name: std_string, maxSize: ::std::os::raw::c_uint, blocking: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_MessageQueue_MessageQueue1(__bindgen_tmp.as_mut_ptr(), name, maxSize, blocking);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12MessageQueueD1Ev"]
    pub fn dai_MessageQueue_MessageQueue_destructor(this: *mut dai_MessageQueue);
}
#[doc = " A smart pointer with deep copy semantics.\n\nThis is _similar_ to `std::unique_ptr` in that it does not permit shared\nownership of the contained object. However, unlike `std::unique_ptr`,\n%copyable_unique_ptr supports copy and assignment operations, by insisting that\nthe contained object be \"copyable\". To be copyable, the class must have either\nan accessible copy constructor, or it must have an accessible clone method\nwith signature @code\nstd::unique_ptr<Foo> Clone() const;\n@endcode\nwhere Foo is the type of the managed object. By \"accessible\" we mean either\nthat the copy constructor or clone method is public, or\n`friend copyable_unique_ptr<Foo>;` appears in Foo's class declaration.\n\n<!-- Developer note: if you change or extend the definition of an acceptable\nclone method here, be sure to consider whether drake::is_cloneable should\nbe changed as well. -->\n\nGenerally, the API is modeled as closely as possible on the C++ standard\n`std::unique_ptr` API and %copyable_unique_ptr<T> is interoperable with\n`unique_ptr<T>` wherever that makes sense. However, there are some differences:\n\n1. It always uses a default deleter.\n2. There is no array version.\n3. To allow for future copy-on-write optimizations, there is a distinction\nbetween writable and const access, the get() method is modified to return\nonly a const pointer, with get_mutable() added to return a writable pointer.\nFurthermore, derefencing (operator*()) a mutable pointer will give a mutable\nreference (in so far as T is not declared const), and dereferencing a\nconst pointer will give a const reference.\n\nThis class is entirely inline and has no computational or space overhead except\nwhen copying is required; it contains just a single pointer and does no\nreference counting.\n\n__Usage__\n\nIn the simplest use case, the instantiation type will match the type of object\nit references, e.g.:\n@code\ncopyable_unique_ptr<Foo> ptr = make_unique<Foo>(...);\n@endcode\nIn this case, as long `Foo` is deemed compatible, the behavior will be as\nexpected, i.e., when `ptr` copies, it will contain a reference to a new\ninstance of `Foo`.\n\n%copyable_unique_ptr can also be used with polymorphic classes -- a\n%copyable_unique_ptr, instantiated on a _base_ class, references an\ninstance of a _derived_ class. When copying the object, we would want the copy\nto likewise contain an instance of the derived class.  For example:\n\n@code\ncopyable_unique_ptr<Base> cu_ptr = make_unique<Derived>();\ncopyable_unique_ptr<Base> other_cu_ptr = cu_ptr;           // Triggers a copy.\nis_dynamic_castable<Derived>(other_cu_ptr.get());          // Should be true.\n@endcode\n\nThis works for well-designed polymorphic classes.\n\n@warning Ill-formed polymorphic classes can lead to fatal type slicing of the\nreferenced object, such that the new copy contains an instance of `Base`\ninstead of `Derived`. Some mistakes that would lead to this degenerate\nbehavior:\n\n- The `Base` class's Clone() implementation does not invoke the `Derived`\nclass's implementation of a suitable virtual method.\n\n<!--\nFor future developers:\n- the copyability of a base class does *not* imply anything about the\ncopyability of a derived class. In other words, `copyable_unique_ptr<Base>`\ncan be compilable while `copyable_unique_ptr<Derived>` is not.\n- Given the pointer `copyable_unique_ptr<Base> ptr(new Derived())`, even if\nthis copies \"correctly\" (such that the copy contains an instance of\n`Derived`), this does _not_ imply that `copyable_unique_ptr<Derived>` is\ncompilable.\n-->\n\n@tparam T   The type of the contained object, which *must* be copyable as\ndefined above. May be an abstract or concrete type."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_copyable_unique_ptr {
    pub _base: std_unique_ptr,
}
#[repr(C)]
pub struct dai_Capability__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_Capability {
    pub vtable_: *const dai_Capability__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Capability"][::std::mem::size_of::<dai_Capability>() - 8usize];
    ["Alignment of dai_Capability"][::std::mem::align_of::<dai_Capability>() - 8usize];
};
#[repr(C)]
pub struct dai_CapabilityCRTP__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_CapabilityCRTP<Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Base>>,
    pub vtable_: *const dai_CapabilityCRTP__bindgen_vtable,
    pub _base: Base,
}
#[repr(C)]
pub struct dai_Node__bindgen_vtable(::std::os::raw::c_void);
#[doc = " @brief Abstract Node"]
#[repr(C)]
pub struct dai_Node {
    pub vtable_: *const dai_Node__bindgen_vtable,
    pub _base: std_enable_shared_from_this,
    pub outputRefs: std_vector,
    pub inputRefs: std_vector,
    pub outputMapRefs: std_vector,
    pub inputMapRefs: std_vector,
    pub nodeRefs: std_vector,
    pub configureMode: bool,
    pub parent: std_weak_ptr,
    pub parentId: ::std::os::raw::c_int,
    #[doc = " Id of node. Assigned after being placed on the pipeline"]
    pub id: dai_Node_Id,
    #[doc = " alias or name"]
    pub alias: std_string,
    pub assetManager: dai_AssetManager,
    pub nodeMap: dai_Node_NodeMap,
    pub connections: dai_Node_SetConnectionInternal,
}
#[doc = " Node identificator. Unique for every node on a single Pipeline"]
pub type dai_Node_Id = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Node_DatatypeHierarchy {
    pub datatype: dai_DatatypeEnum,
    pub descendants: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_DatatypeHierarchy"]
        [::std::mem::size_of::<dai_Node_DatatypeHierarchy>() - 8usize];
    ["Alignment of dai_Node_DatatypeHierarchy"]
        [::std::mem::align_of::<dai_Node_DatatypeHierarchy>() - 4usize];
    ["Offset of field: dai_Node_DatatypeHierarchy::datatype"]
        [::std::mem::offset_of!(dai_Node_DatatypeHierarchy, datatype) - 0usize];
    ["Offset of field: dai_Node_DatatypeHierarchy::descendants"]
        [::std::mem::offset_of!(dai_Node_DatatypeHierarchy, descendants) - 4usize];
};
#[repr(C)]
pub struct dai_Node_OutputDescription {
    pub name: std_string,
    pub group: std_string,
    pub types: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_OutputDescription"]
        [::std::mem::size_of::<dai_Node_OutputDescription>() - 88usize];
    ["Alignment of dai_Node_OutputDescription"]
        [::std::mem::align_of::<dai_Node_OutputDescription>() - 8usize];
    ["Offset of field: dai_Node_OutputDescription::name"]
        [::std::mem::offset_of!(dai_Node_OutputDescription, name) - 0usize];
    ["Offset of field: dai_Node_OutputDescription::group"]
        [::std::mem::offset_of!(dai_Node_OutputDescription, group) - 32usize];
    ["Offset of field: dai_Node_OutputDescription::types"]
        [::std::mem::offset_of!(dai_Node_OutputDescription, types) - 64usize];
};
#[repr(C)]
pub struct dai_Node_Output__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct dai_Node_Output {
    pub vtable_: *const dai_Node_Output__bindgen_vtable,
    pub parent: std_reference_wrapper<dai_Node>,
    pub connectedInputs: std_vector,
    pub queueConnections: std_vector,
    pub type_: dai_Node_Output_Type,
    pub desc: dai_Node_OutputDescription,
}
#[repr(C)]
pub struct dai_Node_Output_QueueConnection {
    pub output: *mut dai_Node_Output,
    pub queue: std_shared_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_Output_QueueConnection"]
        [::std::mem::size_of::<dai_Node_Output_QueueConnection>() - 24usize];
    ["Alignment of dai_Node_Output_QueueConnection"]
        [::std::mem::align_of::<dai_Node_Output_QueueConnection>() - 8usize];
    ["Offset of field: dai_Node_Output_QueueConnection::output"]
        [::std::mem::offset_of!(dai_Node_Output_QueueConnection, output) - 0usize];
    ["Offset of field: dai_Node_Output_QueueConnection::queue"]
        [::std::mem::offset_of!(dai_Node_Output_QueueConnection, queue) - 8usize];
};
pub const dai_Node_Output_Type_MSender: dai_Node_Output_Type = 0;
pub const dai_Node_Output_Type_SSender: dai_Node_Output_Type = 1;
pub type dai_Node_Output_Type = ::std::os::raw::c_int;
#[doc = " Default value for the blocking argument in the createOutputQueue method"]
pub const dai_Node_Output_OUTPUT_QUEUE_DEFAULT_BLOCKING: bool = false;
#[doc = " Default value for the maxSize argument in the createOutputQueue method"]
pub const dai_Node_Output_OUTPUT_QUEUE_DEFAULT_MAX_SIZE: ::std::os::raw::c_uint = 16;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_Output"][::std::mem::size_of::<dai_Node_Output>() - 160usize];
    ["Alignment of dai_Node_Output"][::std::mem::align_of::<dai_Node_Output>() - 8usize];
    ["Offset of field: dai_Node_Output::parent"]
        [::std::mem::offset_of!(dai_Node_Output, parent) - 8usize];
    ["Offset of field: dai_Node_Output::connectedInputs"]
        [::std::mem::offset_of!(dai_Node_Output, connectedInputs) - 16usize];
    ["Offset of field: dai_Node_Output::queueConnections"]
        [::std::mem::offset_of!(dai_Node_Output, queueConnections) - 40usize];
    ["Offset of field: dai_Node_Output::type_"]
        [::std::mem::offset_of!(dai_Node_Output, type_) - 64usize];
    ["Offset of field: dai_Node_Output::desc"]
        [::std::mem::offset_of!(dai_Node_Output, desc) - 72usize];
};
unsafe extern "C" {
    #[doc = " Output to string representation"]
    #[link_name = "\u{1}_ZNK3dai4Node6Output8toStringB5cxx11Ev"]
    pub fn dai_Node_Output_toString(this: *const dai_Node_Output) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get possible datatypes that can be sent"]
    #[link_name = "\u{1}_ZNK3dai4Node6Output20getPossibleDatatypesEv"]
    pub fn dai_Node_Output_getPossibleDatatypes(this: *const dai_Node_Output) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Set possible datatypes that can be sent"]
    #[link_name = "\u{1}_ZN3dai4Node6Output20setPossibleDatatypesESt6vectorINS0_17DatatypeHierarchyESaIS3_EE"]
    pub fn dai_Node_Output_setPossibleDatatypes(this: *mut dai_Node_Output, types: std_vector);
}
unsafe extern "C" {
    #[doc = " Check if this output and given input are on the same pipeline.\n @see canConnect for checking if connection is possible\n @returns True if output and input are on the same pipeline"]
    #[link_name = "\u{1}_ZN3dai4Node6Output14isSamePipelineERKNS0_5InputE"]
    pub fn dai_Node_Output_isSamePipeline(
        this: *mut dai_Node_Output,
        in_: *const dai_Node_Input,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Check if connection is possible\n @param in Input to connect to\n @returns True if connection is possible, false otherwise"]
    #[link_name = "\u{1}_ZN3dai4Node6Output10canConnectERKNS0_5InputE"]
    pub fn dai_Node_Output_canConnect(
        this: *mut dai_Node_Output,
        in_: *const dai_Node_Input,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieve all connections from this output\n @returns Vector of connections"]
    #[link_name = "\u{1}_ZN3dai4Node6Output14getConnectionsEv"]
    pub fn dai_Node_Output_getConnections(this: *mut dai_Node_Output) -> std_vector;
}
unsafe extern "C" {
    #[doc = " @brief Construct and return a shared pointer to an output message queue\n\n @param maxSize: Maximum size of the output queue\n @param blocking: Whether the output queue should block when full\n\n @return std::shared_ptr<dai::MessageQueue>: shared pointer to an output queue"]
    #[link_name = "\u{1}_ZN3dai4Node6Output17createOutputQueueEjb"]
    pub fn dai_Node_Output_createOutputQueue(
        this: *mut dai_Node_Output,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Link current output to input.\n\n Throws an error if this output cannot be linked to given input,\n or if they are already linked\n\n @param in Input to link to"]
    #[link_name = "\u{1}_ZN3dai4Node6Output4linkERNS0_5InputE"]
    pub fn dai_Node_Output_link(this: *mut dai_Node_Output, in_: *mut dai_Node_Input);
}
unsafe extern "C" {
    #[doc = " Unlink a previously linked connection\n\n Throws an error if not linked.\n\n @param in Input from which to unlink from"]
    #[link_name = "\u{1}_ZN3dai4Node6Output6unlinkERNS0_5InputE"]
    pub fn dai_Node_Output_unlink(this: *mut dai_Node_Output, in_: *mut dai_Node_Input);
}
unsafe extern "C" {
    #[doc = " Sends a Message to all connected inputs\n @param msg Message to send to all connected inputs"]
    #[link_name = "\u{1}_ZN3dai4Node6Output4sendERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_Node_Output_send(this: *mut dai_Node_Output, msg: *const std_shared_ptr);
}
unsafe extern "C" {
    #[doc = " Try sending a message to all connected inputs\n @param msg Message to send to all connected inputs\n @returns True if ALL connected inputs got the message, false otherwise"]
    #[link_name = "\u{1}_ZN3dai4Node6Output7trySendERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_Node_Output_trySend(this: *mut dai_Node_Output, msg: *const std_shared_ptr) -> bool;
}
impl dai_Node_Output {
    #[inline]
    pub unsafe fn toString(&self) -> std_string {
        dai_Node_Output_toString(self)
    }
    #[inline]
    pub unsafe fn getPossibleDatatypes(&self) -> std_vector {
        dai_Node_Output_getPossibleDatatypes(self)
    }
    #[inline]
    pub unsafe fn setPossibleDatatypes(&mut self, types: std_vector) {
        dai_Node_Output_setPossibleDatatypes(self, types)
    }
    #[inline]
    pub unsafe fn isSamePipeline(&mut self, in_: *const dai_Node_Input) -> bool {
        dai_Node_Output_isSamePipeline(self, in_)
    }
    #[inline]
    pub unsafe fn canConnect(&mut self, in_: *const dai_Node_Input) -> bool {
        dai_Node_Output_canConnect(self, in_)
    }
    #[inline]
    pub unsafe fn getConnections(&mut self) -> std_vector {
        dai_Node_Output_getConnections(self)
    }
    #[inline]
    pub unsafe fn createOutputQueue(
        &mut self,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    ) -> std_shared_ptr {
        dai_Node_Output_createOutputQueue(self, maxSize, blocking)
    }
    #[inline]
    pub unsafe fn link(&mut self, in_: *mut dai_Node_Input) {
        dai_Node_Output_link(self, in_)
    }
    #[inline]
    pub unsafe fn unlink(&mut self, in_: *mut dai_Node_Input) {
        dai_Node_Output_unlink(self, in_)
    }
    #[inline]
    pub unsafe fn send(&mut self, msg: *const std_shared_ptr) {
        dai_Node_Output_send(self, msg)
    }
    #[inline]
    pub unsafe fn trySend(&mut self, msg: *const std_shared_ptr) -> bool {
        dai_Node_Output_trySend(self, msg)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Node_PairHash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_PairHash"][::std::mem::size_of::<dai_Node_PairHash>() - 1usize];
    ["Alignment of dai_Node_PairHash"][::std::mem::align_of::<dai_Node_PairHash>() - 1usize];
};
#[doc = " Output map which keeps track of extra outputs assigned to a node\n Extends std::unordered_map<std::string, dai::Node::Output>"]
#[repr(C)]
pub struct dai_Node_OutputMap {
    pub _base: std_unordered_map,
    pub defaultOutput: dai_Node_OutputDescription,
    pub parent: std_reference_wrapper<dai_Node>,
    pub name: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_OutputMap"][::std::mem::size_of::<dai_Node_OutputMap>() - 184usize];
    ["Alignment of dai_Node_OutputMap"][::std::mem::align_of::<dai_Node_OutputMap>() - 8usize];
    ["Offset of field: dai_Node_OutputMap::defaultOutput"]
        [::std::mem::offset_of!(dai_Node_OutputMap, defaultOutput) - 56usize];
    ["Offset of field: dai_Node_OutputMap::parent"]
        [::std::mem::offset_of!(dai_Node_OutputMap, parent) - 144usize];
    ["Offset of field: dai_Node_OutputMap::name"]
        [::std::mem::offset_of!(dai_Node_OutputMap, name) - 152usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node9OutputMapC1ERS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_17OutputDescriptionEb"]
    pub fn dai_Node_OutputMap_OutputMap(
        this: *mut dai_Node_OutputMap,
        parent: *mut dai_Node,
        name: std_string,
        defaultOutput: dai_Node_OutputDescription,
        ref_: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node9OutputMapC1ERS0_NS0_17OutputDescriptionEb"]
    pub fn dai_Node_OutputMap_OutputMap1(
        this: *mut dai_Node_OutputMap,
        parent: *mut dai_Node,
        defaultOutput: dai_Node_OutputDescription,
        ref_: bool,
    );
}
impl dai_Node_OutputMap {
    #[inline]
    pub unsafe fn new(
        parent: *mut dai_Node,
        name: std_string,
        defaultOutput: dai_Node_OutputDescription,
        ref_: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_OutputMap_OutputMap(
            __bindgen_tmp.as_mut_ptr(),
            parent,
            name,
            defaultOutput,
            ref_,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        parent: *mut dai_Node,
        defaultOutput: dai_Node_OutputDescription,
        ref_: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_OutputMap_OutputMap1(__bindgen_tmp.as_mut_ptr(), parent, defaultOutput, ref_);
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct dai_Node_InputDescription {
    pub name: std_string,
    pub group: std_string,
    pub blocking: bool,
    pub queueSize: ::std::os::raw::c_int,
    pub types: std_vector,
    pub waitForMessage: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_InputDescription"]
        [::std::mem::size_of::<dai_Node_InputDescription>() - 104usize];
    ["Alignment of dai_Node_InputDescription"]
        [::std::mem::align_of::<dai_Node_InputDescription>() - 8usize];
    ["Offset of field: dai_Node_InputDescription::name"]
        [::std::mem::offset_of!(dai_Node_InputDescription, name) - 0usize];
    ["Offset of field: dai_Node_InputDescription::group"]
        [::std::mem::offset_of!(dai_Node_InputDescription, group) - 32usize];
    ["Offset of field: dai_Node_InputDescription::blocking"]
        [::std::mem::offset_of!(dai_Node_InputDescription, blocking) - 64usize];
    ["Offset of field: dai_Node_InputDescription::queueSize"]
        [::std::mem::offset_of!(dai_Node_InputDescription, queueSize) - 68usize];
    ["Offset of field: dai_Node_InputDescription::types"]
        [::std::mem::offset_of!(dai_Node_InputDescription, types) - 72usize];
    ["Offset of field: dai_Node_InputDescription::waitForMessage"]
        [::std::mem::offset_of!(dai_Node_InputDescription, waitForMessage) - 96usize];
};
#[repr(C)]
pub struct dai_Node_Input {
    pub _base: dai_MessageQueue,
    pub connectedOutputs: std_vector,
    pub parent: std_reference_wrapper<dai_Node>,
    pub waitForMessage: bool,
    pub group: std_string,
    pub type_: dai_Node_Input_Type,
    pub possibleDatatypes: std_vector,
}
pub const dai_Node_Input_Type_SReceiver: dai_Node_Input_Type = 0;
pub const dai_Node_Input_Type_MReceiver: dai_Node_Input_Type = 1;
pub type dai_Node_Input_Type = ::std::os::raw::c_int;
#[doc = " Default value for the blocking argument in the createInputQueue method"]
pub const dai_Node_Input_INPUT_QUEUE_DEFAULT_BLOCKING: bool = false;
#[doc = " Default value for the maxSize argument in the createInputQueue method"]
pub const dai_Node_Input_INPUT_QUEUE_DEFAULT_MAX_SIZE: ::std::os::raw::c_uint = 16;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_Input"][::std::mem::size_of::<dai_Node_Input>() - 496usize];
    ["Alignment of dai_Node_Input"][::std::mem::align_of::<dai_Node_Input>() - 8usize];
    ["Offset of field: dai_Node_Input::connectedOutputs"]
        [::std::mem::offset_of!(dai_Node_Input, connectedOutputs) - 392usize];
    ["Offset of field: dai_Node_Input::parent"]
        [::std::mem::offset_of!(dai_Node_Input, parent) - 416usize];
    ["Offset of field: dai_Node_Input::waitForMessage"]
        [::std::mem::offset_of!(dai_Node_Input, waitForMessage) - 424usize];
    ["Offset of field: dai_Node_Input::group"]
        [::std::mem::offset_of!(dai_Node_Input, group) - 432usize];
    ["Offset of field: dai_Node_Input::type_"]
        [::std::mem::offset_of!(dai_Node_Input, type_) - 464usize];
    ["Offset of field: dai_Node_Input::possibleDatatypes"]
        [::std::mem::offset_of!(dai_Node_Input, possibleDatatypes) - 472usize];
};
unsafe extern "C" {
    #[doc = " Input to string representation"]
    #[link_name = "\u{1}_ZNK3dai4Node5Input8toStringB5cxx11Ev"]
    pub fn dai_Node_Input_toString(this: *const dai_Node_Input) -> std_string;
}
unsafe extern "C" {
    #[doc = " Overrides default wait for message behavior.\n Applicable for nodes with multiple inputs.\n Specifies behavior whether to wait for this input when a Node processes certain data or not.\n @param waitForMessage Whether to wait for message to arrive to this input or not"]
    #[link_name = "\u{1}_ZN3dai4Node5Input17setWaitForMessageEb"]
    pub fn dai_Node_Input_setWaitForMessage(this: *mut dai_Node_Input, waitForMessage: bool);
}
unsafe extern "C" {
    #[doc = " Get behavior whether to wait for this input when a Node processes certain data or not\n @returns Whether to wait for message to arrive to this input or not"]
    #[link_name = "\u{1}_ZNK3dai4Node5Input17getWaitForMessageEv"]
    pub fn dai_Node_Input_getWaitForMessage(this: *const dai_Node_Input) -> bool;
}
unsafe extern "C" {
    #[doc = " Get possible datatypes that can be received"]
    #[link_name = "\u{1}_ZNK3dai4Node5Input20getPossibleDatatypesEv"]
    pub fn dai_Node_Input_getPossibleDatatypes(this: *const dai_Node_Input) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Set possible datatypes that can be received"]
    #[link_name = "\u{1}_ZN3dai4Node5Input20setPossibleDatatypesESt6vectorINS0_17DatatypeHierarchyESaIS3_EE"]
    pub fn dai_Node_Input_setPossibleDatatypes(this: *mut dai_Node_Input, types: std_vector);
}
unsafe extern "C" {
    #[doc = " Equivalent to setWaitForMessage but with inverted logic."]
    #[link_name = "\u{1}_ZN3dai4Node5Input23setReusePreviousMessageEb"]
    pub fn dai_Node_Input_setReusePreviousMessage(
        this: *mut dai_Node_Input,
        reusePreviousMessage: bool,
    );
}
unsafe extern "C" {
    #[doc = " Equivalent to getWaitForMessage but with inverted logic."]
    #[link_name = "\u{1}_ZNK3dai4Node5Input23getReusePreviousMessageEv"]
    pub fn dai_Node_Input_getReusePreviousMessage(this: *const dai_Node_Input) -> bool;
}
unsafe extern "C" {
    #[doc = " Set group name for this input"]
    #[link_name = "\u{1}_ZN3dai4Node5Input8setGroupENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Node_Input_setGroup(this: *mut dai_Node_Input, group: std_string);
}
unsafe extern "C" {
    #[doc = " Get group name for this input"]
    #[link_name = "\u{1}_ZNK3dai4Node5Input8getGroupB5cxx11Ev"]
    pub fn dai_Node_Input_getGroup(this: *const dai_Node_Input) -> std_string;
}
unsafe extern "C" {
    #[doc = " Check if this input is connected"]
    #[link_name = "\u{1}_ZNK3dai4Node5Input11isConnectedEv"]
    pub fn dai_Node_Input_isConnected(this: *const dai_Node_Input) -> bool;
}
unsafe extern "C" {
    #[doc = " @brief Create an shared pointer to an input queue that can be used to send messages to this input from onhost\n\n @param maxSize: Maximum size of the input queue\n @param blocking: Whether the input queue should block when full\n\n @return std::shared_ptr<InputQueue>: shared pointer to an input queue"]
    #[link_name = "\u{1}_ZN3dai4Node5Input16createInputQueueEjb"]
    pub fn dai_Node_Input_createInputQueue(
        this: *mut dai_Node_Input,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    ) -> std_shared_ptr;
}
impl dai_Node_Input {
    #[inline]
    pub unsafe fn toString(&self) -> std_string {
        dai_Node_Input_toString(self)
    }
    #[inline]
    pub unsafe fn setWaitForMessage(&mut self, waitForMessage: bool) {
        dai_Node_Input_setWaitForMessage(self, waitForMessage)
    }
    #[inline]
    pub unsafe fn getWaitForMessage(&self) -> bool {
        dai_Node_Input_getWaitForMessage(self)
    }
    #[inline]
    pub unsafe fn getPossibleDatatypes(&self) -> std_vector {
        dai_Node_Input_getPossibleDatatypes(self)
    }
    #[inline]
    pub unsafe fn setPossibleDatatypes(&mut self, types: std_vector) {
        dai_Node_Input_setPossibleDatatypes(self, types)
    }
    #[inline]
    pub unsafe fn setReusePreviousMessage(&mut self, reusePreviousMessage: bool) {
        dai_Node_Input_setReusePreviousMessage(self, reusePreviousMessage)
    }
    #[inline]
    pub unsafe fn getReusePreviousMessage(&self) -> bool {
        dai_Node_Input_getReusePreviousMessage(self)
    }
    #[inline]
    pub unsafe fn setGroup(&mut self, group: std_string) {
        dai_Node_Input_setGroup(self, group)
    }
    #[inline]
    pub unsafe fn getGroup(&self) -> std_string {
        dai_Node_Input_getGroup(self)
    }
    #[inline]
    pub unsafe fn isConnected(&self) -> bool {
        dai_Node_Input_isConnected(self)
    }
    #[inline]
    pub unsafe fn createInputQueue(
        &mut self,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    ) -> std_shared_ptr {
        dai_Node_Input_createInputQueue(self, maxSize, blocking)
    }
}
#[doc = " Input map which keeps track of inputs assigned to a node\n Extends std::unordered_map<std::string, dai::Node::Input>"]
#[repr(C)]
pub struct dai_Node_InputMap {
    pub _base: std_unordered_map,
    pub parent: std_reference_wrapper<dai_Node>,
    pub defaultInput: dai_Node_InputDescription,
    pub name: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_InputMap"][::std::mem::size_of::<dai_Node_InputMap>() - 200usize];
    ["Alignment of dai_Node_InputMap"][::std::mem::align_of::<dai_Node_InputMap>() - 8usize];
    ["Offset of field: dai_Node_InputMap::parent"]
        [::std::mem::offset_of!(dai_Node_InputMap, parent) - 56usize];
    ["Offset of field: dai_Node_InputMap::defaultInput"]
        [::std::mem::offset_of!(dai_Node_InputMap, defaultInput) - 64usize];
    ["Offset of field: dai_Node_InputMap::name"]
        [::std::mem::offset_of!(dai_Node_InputMap, name) - 168usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4Node8InputMap3hasERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Node_InputMap_has(this: *const dai_Node_InputMap, key: *const std_string) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node8InputMapC1ERS0_NS0_16InputDescriptionE"]
    pub fn dai_Node_InputMap_InputMap(
        this: *mut dai_Node_InputMap,
        parent: *mut dai_Node,
        defaultInput: dai_Node_InputDescription,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node8InputMapC1ERS0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_16InputDescriptionE"]
    pub fn dai_Node_InputMap_InputMap1(
        this: *mut dai_Node_InputMap,
        parent: *mut dai_Node,
        name: std_string,
        defaultInput: dai_Node_InputDescription,
    );
}
impl dai_Node_InputMap {
    #[inline]
    pub unsafe fn has(&self, key: *const std_string) -> bool {
        dai_Node_InputMap_has(self, key)
    }
    #[inline]
    pub unsafe fn new(parent: *mut dai_Node, defaultInput: dai_Node_InputDescription) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_InputMap_InputMap(__bindgen_tmp.as_mut_ptr(), parent, defaultInput);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        parent: *mut dai_Node,
        name: std_string,
        defaultInput: dai_Node_InputDescription,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_InputMap_InputMap1(__bindgen_tmp.as_mut_ptr(), parent, name, defaultInput);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " Connection between an Input and Output internal"]
#[repr(C)]
pub struct dai_Node_ConnectionInternal {
    pub outputNode: std_weak_ptr,
    pub outputName: std_string,
    pub outputGroup: std_string,
    pub inputNode: std_weak_ptr,
    pub inputName: std_string,
    pub inputGroup: std_string,
    pub out: *mut dai_Node_Output,
    pub in_: *mut dai_Node_Input,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Node_ConnectionInternal_Hash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_ConnectionInternal_Hash"]
        [::std::mem::size_of::<dai_Node_ConnectionInternal_Hash>() - 1usize];
    ["Alignment of dai_Node_ConnectionInternal_Hash"]
        [::std::mem::align_of::<dai_Node_ConnectionInternal_Hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_ConnectionInternal"]
        [::std::mem::size_of::<dai_Node_ConnectionInternal>() - 176usize];
    ["Alignment of dai_Node_ConnectionInternal"]
        [::std::mem::align_of::<dai_Node_ConnectionInternal>() - 8usize];
    ["Offset of field: dai_Node_ConnectionInternal::outputNode"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, outputNode) - 0usize];
    ["Offset of field: dai_Node_ConnectionInternal::outputName"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, outputName) - 16usize];
    ["Offset of field: dai_Node_ConnectionInternal::outputGroup"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, outputGroup) - 48usize];
    ["Offset of field: dai_Node_ConnectionInternal::inputNode"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, inputNode) - 80usize];
    ["Offset of field: dai_Node_ConnectionInternal::inputName"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, inputName) - 96usize];
    ["Offset of field: dai_Node_ConnectionInternal::inputGroup"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, inputGroup) - 128usize];
    ["Offset of field: dai_Node_ConnectionInternal::out"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, out) - 160usize];
    ["Offset of field: dai_Node_ConnectionInternal::in_"]
        [::std::mem::offset_of!(dai_Node_ConnectionInternal, in_) - 168usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node18ConnectionInternalC1ERNS0_6OutputERNS0_5InputE"]
    pub fn dai_Node_ConnectionInternal_ConnectionInternal(
        this: *mut dai_Node_ConnectionInternal,
        out: *mut dai_Node_Output,
        in_: *mut dai_Node_Input,
    );
}
impl dai_Node_ConnectionInternal {
    #[inline]
    pub unsafe fn new(out: *mut dai_Node_Output, in_: *mut dai_Node_Input) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_ConnectionInternal_ConnectionInternal(__bindgen_tmp.as_mut_ptr(), out, in_);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " Connection between an Input and Output"]
#[repr(C)]
pub struct dai_Node_Connection {
    pub outputId: dai_Node_Id,
    pub outputName: std_string,
    pub outputGroup: std_string,
    pub inputId: dai_Node_Id,
    pub inputName: std_string,
    pub inputGroup: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node_Connection"][::std::mem::size_of::<dai_Node_Connection>() - 144usize];
    ["Alignment of dai_Node_Connection"][::std::mem::align_of::<dai_Node_Connection>() - 8usize];
    ["Offset of field: dai_Node_Connection::outputId"]
        [::std::mem::offset_of!(dai_Node_Connection, outputId) - 0usize];
    ["Offset of field: dai_Node_Connection::outputName"]
        [::std::mem::offset_of!(dai_Node_Connection, outputName) - 8usize];
    ["Offset of field: dai_Node_Connection::outputGroup"]
        [::std::mem::offset_of!(dai_Node_Connection, outputGroup) - 40usize];
    ["Offset of field: dai_Node_Connection::inputId"]
        [::std::mem::offset_of!(dai_Node_Connection, inputId) - 72usize];
    ["Offset of field: dai_Node_Connection::inputName"]
        [::std::mem::offset_of!(dai_Node_Connection, inputName) - 80usize];
    ["Offset of field: dai_Node_Connection::inputGroup"]
        [::std::mem::offset_of!(dai_Node_Connection, inputGroup) - 112usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node10ConnectionC1ENS0_6OutputENS0_5InputE"]
    pub fn dai_Node_Connection_Connection(
        this: *mut dai_Node_Connection,
        out: dai_Node_Output,
        in_: dai_Node_Input,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node10ConnectionC1ENS0_18ConnectionInternalE"]
    pub fn dai_Node_Connection_Connection1(
        this: *mut dai_Node_Connection,
        c: dai_Node_ConnectionInternal,
    );
}
impl dai_Node_Connection {
    #[inline]
    pub unsafe fn new(out: dai_Node_Output, in_: dai_Node_Input) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_Connection_Connection(__bindgen_tmp.as_mut_ptr(), out, in_);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(c: dai_Node_ConnectionInternal) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_Connection_Connection1(__bindgen_tmp.as_mut_ptr(), c);
        __bindgen_tmp.assume_init()
    }
}
pub type dai_Node_NodeMap = std_vector;
pub type dai_Node_SetConnectionInternal = std_unordered_set;
pub type dai_Node_ConnectionMap = std_unordered_map;
pub const dai_Node_DEFAULT_GROUP: &[u8; 1] = b"\0";
pub const dai_Node_DEFAULT_NAME: &[u8; 1] = b"\0";
pub const dai_Node_DEFAULT_BLOCKING: bool = true;
pub const dai_Node_DEFAULT_QUEUE_SIZE: ::std::os::raw::c_int = 3;
pub const dai_Node_DEFAULT_WAIT_FOR_MESSAGE: bool = false;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Node"][::std::mem::size_of::<dai_Node>() - 376usize];
    ["Alignment of dai_Node"][::std::mem::align_of::<dai_Node>() - 8usize];
    ["Offset of field: dai_Node::outputRefs"]
        [::std::mem::offset_of!(dai_Node, outputRefs) - 24usize];
    ["Offset of field: dai_Node::inputRefs"][::std::mem::offset_of!(dai_Node, inputRefs) - 48usize];
    ["Offset of field: dai_Node::outputMapRefs"]
        [::std::mem::offset_of!(dai_Node, outputMapRefs) - 72usize];
    ["Offset of field: dai_Node::inputMapRefs"]
        [::std::mem::offset_of!(dai_Node, inputMapRefs) - 96usize];
    ["Offset of field: dai_Node::nodeRefs"][::std::mem::offset_of!(dai_Node, nodeRefs) - 120usize];
    ["Offset of field: dai_Node::configureMode"]
        [::std::mem::offset_of!(dai_Node, configureMode) - 144usize];
    ["Offset of field: dai_Node::parent"][::std::mem::offset_of!(dai_Node, parent) - 152usize];
    ["Offset of field: dai_Node::parentId"][::std::mem::offset_of!(dai_Node, parentId) - 168usize];
    ["Offset of field: dai_Node::id"][::std::mem::offset_of!(dai_Node, id) - 176usize];
    ["Offset of field: dai_Node::alias"][::std::mem::offset_of!(dai_Node, alias) - 184usize];
    ["Offset of field: dai_Node::assetManager"]
        [::std::mem::offset_of!(dai_Node, assetManager) - 216usize];
    ["Offset of field: dai_Node::nodeMap"][::std::mem::offset_of!(dai_Node, nodeMap) - 296usize];
    ["Offset of field: dai_Node::connections"]
        [::std::mem::offset_of!(dai_Node, connections) - 320usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node13setOutputRefsESt16initializer_listIPNS0_6OutputEE"]
    pub fn dai_Node_setOutputRefs(
        this: *mut dai_Node,
        l: std_initializer_list<*mut dai_Node_Output>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node13setOutputRefsEPNS0_6OutputE"]
    pub fn dai_Node_setOutputRefs1(this: *mut dai_Node, outRef: *mut dai_Node_Output);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node12setInputRefsESt16initializer_listIPNS0_5InputEE"]
    pub fn dai_Node_setInputRefs(this: *mut dai_Node, l: std_initializer_list<*mut dai_Node_Input>);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node12setInputRefsEPNS0_5InputE"]
    pub fn dai_Node_setInputRefs1(this: *mut dai_Node, inRef: *mut dai_Node_Input);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node16setOutputMapRefsESt16initializer_listIPNS0_9OutputMapEE"]
    pub fn dai_Node_setOutputMapRefs(
        this: *mut dai_Node,
        l: std_initializer_list<*mut dai_Node_OutputMap>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node16setOutputMapRefsEPNS0_9OutputMapE"]
    pub fn dai_Node_setOutputMapRefs1(this: *mut dai_Node, outMapRef: *mut dai_Node_OutputMap);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node15setInputMapRefsESt16initializer_listIPNS0_8InputMapEE"]
    pub fn dai_Node_setInputMapRefs(
        this: *mut dai_Node,
        l: std_initializer_list<*mut dai_Node_InputMap>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node15setInputMapRefsEPNS0_8InputMapE"]
    pub fn dai_Node_setInputMapRefs1(this: *mut dai_Node, inMapRef: *mut dai_Node_InputMap);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node11setNodeRefsESt16initializer_listISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt10shared_ptrIS0_EEE"]
    pub fn dai_Node_setNodeRefs(
        this: *mut dai_Node,
        l: std_initializer_list<std_pair<std_string, *mut std_shared_ptr>>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node11setNodeRefsESt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt10shared_ptrIS0_EE"]
    pub fn dai_Node_setNodeRefs1(
        this: *mut dai_Node,
        nodeRef: std_pair<std_string, *mut std_shared_ptr>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node11setNodeRefsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPSt10shared_ptrIS0_E"]
    pub fn dai_Node_setNodeRefs2(
        this: *mut dai_Node,
        alias: std_string,
        nodeRef: *mut std_shared_ptr,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node17getParentPipelineEv"]
    pub fn dai_Node_getParentPipeline(this: *mut dai_Node) -> dai_Pipeline;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4Node17getParentPipelineEv"]
    pub fn dai_Node_getParentPipeline1(this: *const dai_Node) -> dai_Pipeline;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node12stopPipelineEv"]
    pub fn dai_Node_stopPipeline(this: *mut dai_Node);
}
unsafe extern "C" {
    #[doc = " Retrieves all nodes outputs"]
    #[link_name = "\u{1}_ZN3dai4Node10getOutputsEv"]
    pub fn dai_Node_getOutputs(this: *mut dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves all nodes inputs"]
    #[link_name = "\u{1}_ZN3dai4Node9getInputsEv"]
    pub fn dai_Node_getInputs(this: *mut dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to node outputs"]
    #[link_name = "\u{1}_ZN3dai4Node13getOutputRefsEv"]
    pub fn dai_Node_getOutputRefs(this: *mut dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to node outputs"]
    #[link_name = "\u{1}_ZNK3dai4Node13getOutputRefsEv"]
    pub fn dai_Node_getOutputRefs1(this: *const dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to node inputs"]
    #[link_name = "\u{1}_ZN3dai4Node12getInputRefsEv"]
    pub fn dai_Node_getInputRefs(this: *mut dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to node inputs"]
    #[link_name = "\u{1}_ZNK3dai4Node12getInputRefsEv"]
    pub fn dai_Node_getInputRefs1(this: *const dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to node outputs"]
    #[link_name = "\u{1}_ZN3dai4Node16getOutputMapRefsEv"]
    pub fn dai_Node_getOutputMapRefs(this: *mut dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to node inputs"]
    #[link_name = "\u{1}_ZN3dai4Node15getInputMapRefsEv"]
    pub fn dai_Node_getInputMapRefs(this: *mut dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to specific output"]
    #[link_name = "\u{1}_ZN3dai4Node12getOutputRefENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Node_getOutputRef(this: *mut dai_Node, name: std_string) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node12getOutputRefENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
    pub fn dai_Node_getOutputRef1(
        this: *mut dai_Node,
        group: std_string,
        name: std_string,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to specific input"]
    #[link_name = "\u{1}_ZN3dai4Node11getInputRefENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Node_getInputRef(this: *mut dai_Node, name: std_string) -> *mut dai_Node_Input;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node11getInputRefENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
    pub fn dai_Node_getInputRef1(
        this: *mut dai_Node,
        group: std_string,
        name: std_string,
    ) -> *mut dai_Node_Input;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to specific output map"]
    #[link_name = "\u{1}_ZN3dai4Node15getOutputMapRefENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Node_getOutputMapRef(
        this: *mut dai_Node,
        group: std_string,
    ) -> *mut dai_Node_OutputMap;
}
unsafe extern "C" {
    #[doc = " Retrieves reference to specific input map"]
    #[link_name = "\u{1}_ZN3dai4Node14getInputMapRefENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Node_getInputMapRef(
        this: *mut dai_Node,
        group: std_string,
    ) -> *mut dai_Node_InputMap;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node22removeConnectionToNodeESt10shared_ptrIS0_E"]
    pub fn dai_Node_removeConnectionToNode(this: *mut dai_Node, node: std_shared_ptr);
}
unsafe extern "C" {
    #[doc = " Get node AssetManager as a const reference"]
    #[link_name = "\u{1}_ZNK3dai4Node15getAssetManagerEv"]
    pub fn dai_Node_getAssetManager(this: *const dai_Node) -> *const dai_AssetManager;
}
unsafe extern "C" {
    #[doc = " Get node AssetManager as a reference"]
    #[link_name = "\u{1}_ZN3dai4Node15getAssetManagerEv"]
    pub fn dai_Node_getAssetManager1(this: *mut dai_Node) -> *mut dai_AssetManager;
}
unsafe extern "C" {
    #[doc = " Loads resource specified by URI and returns its data"]
    #[link_name = "\u{1}_ZN3dai4Node12loadResourceENS_4PathE"]
    pub fn dai_Node_loadResource(this: *mut dai_Node, uri: dai_Path) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Moves the resource out"]
    #[link_name = "\u{1}_ZN3dai4Node12moveResourceENS_4PathE"]
    pub fn dai_Node_moveResource(this: *mut dai_Node, uri: dai_Path) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Add existing node to nodeMap"]
    #[link_name = "\u{1}_ZN3dai4Node3addESt10shared_ptrIS0_E"]
    pub fn dai_Node_add(this: *mut dai_Node, node: std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4Node11getAllNodesEv"]
    pub fn dai_Node_getAllNodes(this: *const dai_Node) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4Node7getNodeEl"]
    pub fn dai_Node_getNode(this: *const dai_Node, id: dai_Node_Id) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node7getNodeEl"]
    pub fn dai_Node_getNode1(this: *mut dai_Node, id: dai_Node_Id) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node6removeESt10shared_ptrIS0_E"]
    pub fn dai_Node_remove(this: *mut dai_Node, node: std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node16getConnectionMapEv"]
    pub fn dai_Node_getConnectionMap(this: *mut dai_Node) -> dai_Node_ConnectionMap;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node4linkERKNS0_6OutputERKNS0_5InputE"]
    pub fn dai_Node_link(
        this: *mut dai_Node,
        out: *const dai_Node_Output,
        in_: *const dai_Node_Input,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node6unlinkERKNS0_6OutputERKNS0_5InputE"]
    pub fn dai_Node_unlink(
        this: *mut dai_Node,
        out: *const dai_Node_Output,
        in_: *const dai_Node_Input,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4NodeC2Eb"]
    pub fn dai_Node_Node(this: *mut dai_Node, conf: bool);
}
impl dai_Node {
    #[inline]
    pub unsafe fn setOutputRefs(&mut self, l: std_initializer_list<*mut dai_Node_Output>) {
        dai_Node_setOutputRefs(self, l)
    }
    #[inline]
    pub unsafe fn setOutputRefs1(&mut self, outRef: *mut dai_Node_Output) {
        dai_Node_setOutputRefs1(self, outRef)
    }
    #[inline]
    pub unsafe fn setInputRefs(&mut self, l: std_initializer_list<*mut dai_Node_Input>) {
        dai_Node_setInputRefs(self, l)
    }
    #[inline]
    pub unsafe fn setInputRefs1(&mut self, inRef: *mut dai_Node_Input) {
        dai_Node_setInputRefs1(self, inRef)
    }
    #[inline]
    pub unsafe fn setOutputMapRefs(&mut self, l: std_initializer_list<*mut dai_Node_OutputMap>) {
        dai_Node_setOutputMapRefs(self, l)
    }
    #[inline]
    pub unsafe fn setOutputMapRefs1(&mut self, outMapRef: *mut dai_Node_OutputMap) {
        dai_Node_setOutputMapRefs1(self, outMapRef)
    }
    #[inline]
    pub unsafe fn setInputMapRefs(&mut self, l: std_initializer_list<*mut dai_Node_InputMap>) {
        dai_Node_setInputMapRefs(self, l)
    }
    #[inline]
    pub unsafe fn setInputMapRefs1(&mut self, inMapRef: *mut dai_Node_InputMap) {
        dai_Node_setInputMapRefs1(self, inMapRef)
    }
    #[inline]
    pub unsafe fn setNodeRefs(
        &mut self,
        l: std_initializer_list<std_pair<std_string, *mut std_shared_ptr>>,
    ) {
        dai_Node_setNodeRefs(self, l)
    }
    #[inline]
    pub unsafe fn setNodeRefs1(&mut self, nodeRef: std_pair<std_string, *mut std_shared_ptr>) {
        dai_Node_setNodeRefs1(self, nodeRef)
    }
    #[inline]
    pub unsafe fn setNodeRefs2(&mut self, alias: std_string, nodeRef: *mut std_shared_ptr) {
        dai_Node_setNodeRefs2(self, alias, nodeRef)
    }
    #[inline]
    pub unsafe fn getParentPipeline(&mut self) -> dai_Pipeline {
        dai_Node_getParentPipeline(self)
    }
    #[inline]
    pub unsafe fn getParentPipeline1(&self) -> dai_Pipeline {
        dai_Node_getParentPipeline1(self)
    }
    #[inline]
    pub unsafe fn stopPipeline(&mut self) {
        dai_Node_stopPipeline(self)
    }
    #[inline]
    pub unsafe fn getOutputs(&mut self) -> std_vector {
        dai_Node_getOutputs(self)
    }
    #[inline]
    pub unsafe fn getInputs(&mut self) -> std_vector {
        dai_Node_getInputs(self)
    }
    #[inline]
    pub unsafe fn getOutputRefs(&mut self) -> std_vector {
        dai_Node_getOutputRefs(self)
    }
    #[inline]
    pub unsafe fn getOutputRefs1(&self) -> std_vector {
        dai_Node_getOutputRefs1(self)
    }
    #[inline]
    pub unsafe fn getInputRefs(&mut self) -> std_vector {
        dai_Node_getInputRefs(self)
    }
    #[inline]
    pub unsafe fn getInputRefs1(&self) -> std_vector {
        dai_Node_getInputRefs1(self)
    }
    #[inline]
    pub unsafe fn getOutputMapRefs(&mut self) -> std_vector {
        dai_Node_getOutputMapRefs(self)
    }
    #[inline]
    pub unsafe fn getInputMapRefs(&mut self) -> std_vector {
        dai_Node_getInputMapRefs(self)
    }
    #[inline]
    pub unsafe fn getOutputRef(&mut self, name: std_string) -> *mut dai_Node_Output {
        dai_Node_getOutputRef(self, name)
    }
    #[inline]
    pub unsafe fn getOutputRef1(
        &mut self,
        group: std_string,
        name: std_string,
    ) -> *mut dai_Node_Output {
        dai_Node_getOutputRef1(self, group, name)
    }
    #[inline]
    pub unsafe fn getInputRef(&mut self, name: std_string) -> *mut dai_Node_Input {
        dai_Node_getInputRef(self, name)
    }
    #[inline]
    pub unsafe fn getInputRef1(
        &mut self,
        group: std_string,
        name: std_string,
    ) -> *mut dai_Node_Input {
        dai_Node_getInputRef1(self, group, name)
    }
    #[inline]
    pub unsafe fn getOutputMapRef(&mut self, group: std_string) -> *mut dai_Node_OutputMap {
        dai_Node_getOutputMapRef(self, group)
    }
    #[inline]
    pub unsafe fn getInputMapRef(&mut self, group: std_string) -> *mut dai_Node_InputMap {
        dai_Node_getInputMapRef(self, group)
    }
    #[inline]
    pub unsafe fn removeConnectionToNode(&mut self, node: std_shared_ptr) {
        dai_Node_removeConnectionToNode(self, node)
    }
    #[inline]
    pub unsafe fn getAssetManager(&self) -> *const dai_AssetManager {
        dai_Node_getAssetManager(self)
    }
    #[inline]
    pub unsafe fn getAssetManager1(&mut self) -> *mut dai_AssetManager {
        dai_Node_getAssetManager1(self)
    }
    #[inline]
    pub unsafe fn loadResource(&mut self, uri: dai_Path) -> std_vector {
        dai_Node_loadResource(self, uri)
    }
    #[inline]
    pub unsafe fn moveResource(&mut self, uri: dai_Path) -> std_vector {
        dai_Node_moveResource(self, uri)
    }
    #[inline]
    pub unsafe fn add(&mut self, node: std_shared_ptr) {
        dai_Node_add(self, node)
    }
    #[inline]
    pub unsafe fn getAllNodes(&self) -> std_vector {
        dai_Node_getAllNodes(self)
    }
    #[inline]
    pub unsafe fn getNode(&self, id: dai_Node_Id) -> std_shared_ptr {
        dai_Node_getNode(self, id)
    }
    #[inline]
    pub unsafe fn getNode1(&mut self, id: dai_Node_Id) -> std_shared_ptr {
        dai_Node_getNode1(self, id)
    }
    #[inline]
    pub unsafe fn remove(&mut self, node: std_shared_ptr) {
        dai_Node_remove(self, node)
    }
    #[inline]
    pub unsafe fn getConnectionMap(&mut self) -> dai_Node_ConnectionMap {
        dai_Node_getConnectionMap(self)
    }
    #[inline]
    pub unsafe fn link(&mut self, out: *const dai_Node_Output, in_: *const dai_Node_Input) {
        dai_Node_link(self, out, in_)
    }
    #[inline]
    pub unsafe fn unlink(&mut self, out: *const dai_Node_Output, in_: *const dai_Node_Input) {
        dai_Node_unlink(self, out, in_)
    }
    #[inline]
    pub unsafe fn new(conf: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Node_Node(__bindgen_tmp.as_mut_ptr(), conf);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node6Output4linkESt10shared_ptrIS0_E"]
    pub fn dai_Node_Output_link1(this: *mut ::std::os::raw::c_void, in_: std_shared_ptr);
}
unsafe extern "C" {
    #[doc = " Build stages;"]
    #[link_name = "\u{1}_ZN3dai4Node11buildStage1Ev"]
    pub fn dai_Node_buildStage1(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node11buildStage2Ev"]
    pub fn dai_Node_buildStage2(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node11buildStage3Ev"]
    pub fn dai_Node_buildStage3(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4Node12isSourceNodeEv"]
    pub fn dai_Node_isSourceNode(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[doc = " Get a reference to internal node map"]
    #[link_name = "\u{1}_ZN3dai4Node4linkESt10shared_ptrIS0_E"]
    pub fn dai_Node_link1(this: *mut ::std::os::raw::c_void, in_: std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node13requestOutputERKNS_10CapabilityEb"]
    pub fn dai_Node_requestOutput(
        this: *mut ::std::os::raw::c_void,
        capability: *const dai_Capability,
        onHost: bool,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4Node17getRequiredInputsEv"]
    pub fn dai_Node_getRequiredInputs(this: *mut ::std::os::raw::c_void) -> std_vector;
}
#[repr(C)]
pub struct dai_SourceNode__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_SourceNode {
    pub vtable_: *const dai_SourceNode__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SourceNode"][::std::mem::size_of::<dai_SourceNode>() - 8usize];
    ["Alignment of dai_SourceNode"][::std::mem::align_of::<dai_SourceNode>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10SourceNode19getNodeRecordParamsEv"]
    pub fn dai_SourceNode_getNodeRecordParams(
        this: *mut ::std::os::raw::c_void,
    ) -> dai_NodeRecordParams;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10SourceNode15getRecordOutputEv"]
    pub fn dai_SourceNode_getRecordOutput(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10SourceNode14getReplayInputEv"]
    pub fn dai_SourceNode_getReplayInput(this: *mut ::std::os::raw::c_void) -> *mut dai_Node_Input;
}
#[repr(C)]
pub struct dai_NodeCRTP__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_NodeCRTP<Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Base>>,
    pub vtable_: *const dai_NodeCRTP__bindgen_vtable,
    pub _base: Base,
}
#[repr(C)]
#[derive(Debug)]
pub struct dai_AtomicBool {
    pub _base: std_atomic<bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AtomicBool"][::std::mem::size_of::<dai_AtomicBool>() - 1usize];
    ["Alignment of dai_AtomicBool"][::std::mem::align_of::<dai_AtomicBool>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_JoiningThread {
    pub _base: std_thread,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_JoiningThread"][::std::mem::size_of::<dai_JoiningThread>() - 8usize];
    ["Alignment of dai_JoiningThread"][::std::mem::align_of::<dai_JoiningThread>() - 8usize];
};
#[repr(C)]
pub struct dai_ThreadedNode {
    pub _base: dai_Node,
    pub thread: dai_JoiningThread,
    pub running: dai_AtomicBool,
    pub pimpl: spimpl_impl_ptr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ThreadedNode_Impl {
    _unused: [u8; 0],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ThreadedNode"][::std::mem::size_of::<dai_ThreadedNode>() - 416usize];
    ["Alignment of dai_ThreadedNode"][::std::mem::align_of::<dai_ThreadedNode>() - 8usize];
    ["Offset of field: dai_ThreadedNode::thread"]
        [::std::mem::offset_of!(dai_ThreadedNode, thread) - 376usize];
    ["Offset of field: dai_ThreadedNode::running"]
        [::std::mem::offset_of!(dai_ThreadedNode, running) - 384usize];
    ["Offset of field: dai_ThreadedNode::pimpl"]
        [::std::mem::offset_of!(dai_ThreadedNode, pimpl) - 392usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai12ThreadedNode9isRunningEv"]
    pub fn dai_ThreadedNode_isRunning(this: *const dai_ThreadedNode) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12ThreadedNodeC2Ev"]
    pub fn dai_ThreadedNode_ThreadedNode(this: *mut dai_ThreadedNode);
}
impl dai_ThreadedNode {
    #[inline]
    pub unsafe fn isRunning(&self) -> bool {
        dai_ThreadedNode_isRunning(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_ThreadedNode_ThreadedNode(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12ThreadedNode5startEv"]
    pub fn dai_ThreadedNode_start(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12ThreadedNode4waitEv"]
    pub fn dai_ThreadedNode_wait(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12ThreadedNode4stopEv"]
    pub fn dai_ThreadedNode_stop(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[doc = " @brief Sets the logging severity level for this node.\n\n @param level Logging severity level"]
    #[link_name = "\u{1}_ZN3dai12ThreadedNode11setLogLevelENS_8LogLevelE"]
    pub fn dai_ThreadedNode_setLogLevel(this: *mut ::std::os::raw::c_void, level: dai_LogLevel);
}
unsafe extern "C" {
    #[doc = " @brief Gets the logging severity level for this node.\n\n @returns Logging severity level"]
    #[link_name = "\u{1}_ZNK3dai12ThreadedNode11getLogLevelEv"]
    pub fn dai_ThreadedNode_getLogLevel(this: *mut ::std::os::raw::c_void) -> dai_LogLevel;
}
#[repr(C)]
pub struct dai_DeviceNode {
    pub _base: dai_ThreadedNode,
    pub device: std_shared_ptr,
    pub propertiesHolder: dai_copyable_unique_ptr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceNode"][::std::mem::size_of::<dai_DeviceNode>() - 440usize];
    ["Alignment of dai_DeviceNode"][::std::mem::align_of::<dai_DeviceNode>() - 8usize];
    ["Offset of field: dai_DeviceNode::device"]
        [::std::mem::offset_of!(dai_DeviceNode, device) - 416usize];
    ["Offset of field: dai_DeviceNode::propertiesHolder"]
        [::std::mem::offset_of!(dai_DeviceNode, propertiesHolder) - 432usize];
};
unsafe extern "C" {
    #[doc = " @brief Get device for this node\n\n @return shared pointer to device"]
    #[link_name = "\u{1}_ZNK3dai10DeviceNode9getDeviceEv"]
    pub fn dai_DeviceNode_getDevice(this: *const dai_DeviceNode) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @brief Set device for this node\n\n @param device: shared pointer to device"]
    #[link_name = "\u{1}_ZN3dai10DeviceNode9setDeviceESt10shared_ptrINS_6DeviceEE"]
    pub fn dai_DeviceNode_setDevice(this: *mut dai_DeviceNode, device: std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceNodeC2ERKSt10shared_ptrINS_6DeviceEESt10unique_ptrINS_10PropertiesESt14default_deleteIS7_EEb"]
    pub fn dai_DeviceNode_DeviceNode(
        this: *mut dai_DeviceNode,
        device: *const std_shared_ptr,
        props: std_unique_ptr,
        conf: bool,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceNodeC2ESt10unique_ptrINS_10PropertiesESt14default_deleteIS2_EEb"]
    pub fn dai_DeviceNode_DeviceNode1(this: *mut dai_DeviceNode, props: std_unique_ptr, conf: bool);
}
impl dai_DeviceNode {
    #[inline]
    pub unsafe fn getDevice(&self) -> std_shared_ptr {
        dai_DeviceNode_getDevice(self)
    }
    #[inline]
    pub unsafe fn setDevice(&mut self, device: std_shared_ptr) {
        dai_DeviceNode_setDevice(self, device)
    }
    #[inline]
    pub unsafe fn new(device: *const std_shared_ptr, props: std_unique_ptr, conf: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceNode_DeviceNode(__bindgen_tmp.as_mut_ptr(), device, props, conf);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(props: std_unique_ptr, conf: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceNode_DeviceNode1(__bindgen_tmp.as_mut_ptr(), props, conf);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceNode3runEv"]
    pub fn dai_DeviceNode_run(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceNode13getPropertiesEv"]
    pub fn dai_DeviceNode_getProperties(this: *mut ::std::os::raw::c_void) -> *mut dai_Properties;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10DeviceNode11setLogLevelENS_8LogLevelE"]
    pub fn dai_DeviceNode_setLogLevel(this: *mut ::std::os::raw::c_void, level: dai_LogLevel);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10DeviceNode11getLogLevelEv"]
    pub fn dai_DeviceNode_getLogLevel(this: *mut ::std::os::raw::c_void) -> dai_LogLevel;
}
#[repr(C)]
pub struct dai_DeviceNodeCRTP__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_DeviceNodeCRTP<Base, Props> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Base>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<Props>>,
    pub vtable_: *const dai_DeviceNodeCRTP__bindgen_vtable,
    pub _base: Base,
    #[doc = " Underlying properties"]
    pub properties: *mut dai_DeviceNodeCRTP_Properties<Props>,
}
pub type dai_DeviceNodeCRTP_Properties<Props> = Props;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_HostRunnable {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_HostRunnable"][::std::mem::size_of::<dai_HostRunnable>() - 1usize];
    ["Alignment of dai_HostRunnable"][::std::mem::align_of::<dai_HostRunnable>() - 1usize];
};
#[repr(C)]
pub struct dai_PipelineImpl {
    pub _base: std_enable_shared_from_this,
    pub latestId: dai_Node_Id,
    pub assetManager: dai_AssetManager,
    pub forceRequiredOpenVINOVersion: std_optional,
    pub globalProperties: dai_GlobalProperties,
    pub nodes: std_vector,
    pub board: dai_BoardConfig,
    pub recordConfig: dai_RecordConfig,
    pub enableHolisticRecordReplay: bool,
    pub recordReplayFilenames: std_unordered_map,
    pub removeRecordReplayFiles: bool,
    pub defaultDeviceId: std_string,
    pub outputQueues: std_vector,
    pub parent: *mut dai_Pipeline,
    pub running: dai_AtomicBool,
    pub isBuild: dai_AtomicBool,
    pub stateMtx: std_mutex,
    pub defaultDevice: std_shared_ptr,
    pub tasks: dai_LockingQueue,
}
pub type dai_PipelineImpl_NodeConnectionMap = std_unordered_map;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_PipelineImpl"][::std::mem::size_of::<dai_PipelineImpl>() - 1832usize];
    ["Alignment of dai_PipelineImpl"][::std::mem::align_of::<dai_PipelineImpl>() - 8usize];
    ["Offset of field: dai_PipelineImpl::latestId"]
        [::std::mem::offset_of!(dai_PipelineImpl, latestId) - 16usize];
    ["Offset of field: dai_PipelineImpl::assetManager"]
        [::std::mem::offset_of!(dai_PipelineImpl, assetManager) - 24usize];
    ["Offset of field: dai_PipelineImpl::forceRequiredOpenVINOVersion"]
        [::std::mem::offset_of!(dai_PipelineImpl, forceRequiredOpenVINOVersion) - 104usize];
    ["Offset of field: dai_PipelineImpl::globalProperties"]
        [::std::mem::offset_of!(dai_PipelineImpl, globalProperties) - 112usize];
    ["Offset of field: dai_PipelineImpl::nodes"]
        [::std::mem::offset_of!(dai_PipelineImpl, nodes) - 816usize];
    ["Offset of field: dai_PipelineImpl::board"]
        [::std::mem::offset_of!(dai_PipelineImpl, board) - 840usize];
    ["Offset of field: dai_PipelineImpl::recordConfig"]
        [::std::mem::offset_of!(dai_PipelineImpl, recordConfig) - 1336usize];
    ["Offset of field: dai_PipelineImpl::enableHolisticRecordReplay"]
        [::std::mem::offset_of!(dai_PipelineImpl, enableHolisticRecordReplay) - 1400usize];
    ["Offset of field: dai_PipelineImpl::recordReplayFilenames"]
        [::std::mem::offset_of!(dai_PipelineImpl, recordReplayFilenames) - 1408usize];
    ["Offset of field: dai_PipelineImpl::removeRecordReplayFiles"]
        [::std::mem::offset_of!(dai_PipelineImpl, removeRecordReplayFiles) - 1464usize];
    ["Offset of field: dai_PipelineImpl::defaultDeviceId"]
        [::std::mem::offset_of!(dai_PipelineImpl, defaultDeviceId) - 1472usize];
    ["Offset of field: dai_PipelineImpl::outputQueues"]
        [::std::mem::offset_of!(dai_PipelineImpl, outputQueues) - 1504usize];
    ["Offset of field: dai_PipelineImpl::parent"]
        [::std::mem::offset_of!(dai_PipelineImpl, parent) - 1528usize];
    ["Offset of field: dai_PipelineImpl::running"]
        [::std::mem::offset_of!(dai_PipelineImpl, running) - 1536usize];
    ["Offset of field: dai_PipelineImpl::isBuild"]
        [::std::mem::offset_of!(dai_PipelineImpl, isBuild) - 1537usize];
    ["Offset of field: dai_PipelineImpl::stateMtx"]
        [::std::mem::offset_of!(dai_PipelineImpl, stateMtx) - 1544usize];
    ["Offset of field: dai_PipelineImpl::defaultDevice"]
        [::std::mem::offset_of!(dai_PipelineImpl, defaultDevice) - 1584usize];
    ["Offset of field: dai_PipelineImpl::tasks"]
        [::std::mem::offset_of!(dai_PipelineImpl, tasks) - 1600usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12PipelineImplD1Ev"]
    pub fn dai_PipelineImpl_PipelineImpl_destructor(this: *mut dai_PipelineImpl);
}
impl dai_PipelineImpl {
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_PipelineImpl_PipelineImpl_destructor(self)
    }
}
#[doc = " @brief Represents the pipeline, set of nodes and connections between them"]
#[repr(C)]
pub struct dai_Pipeline {
    pub pimpl: std_shared_ptr,
}
pub type dai_Pipeline_NodeConnectionMap = dai_PipelineImpl_NodeConnectionMap;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Pipeline"][::std::mem::size_of::<dai_Pipeline>() - 16usize];
    ["Alignment of dai_Pipeline"][::std::mem::align_of::<dai_Pipeline>() - 8usize];
    ["Offset of field: dai_Pipeline::pimpl"][::std::mem::offset_of!(dai_Pipeline, pimpl) - 0usize];
};
unsafe extern "C" {
    #[doc = " @returns Pipeline schema"]
    #[link_name = "\u{1}_ZNK3dai8Pipeline17getPipelineSchemaENS_17SerializationTypeE"]
    pub fn dai_Pipeline_getPipelineSchema(
        this: *const dai_Pipeline,
        type_: dai_SerializationType,
    ) -> dai_PipelineSchema;
}
unsafe extern "C" {
    #[doc = " Record and Replay"]
    #[link_name = "\u{1}_ZN3dai8Pipeline20enableHolisticRecordERKNS_12RecordConfigE"]
    pub fn dai_Pipeline_enableHolisticRecord(
        this: *mut dai_Pipeline,
        config: *const dai_RecordConfig,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8Pipeline20enableHolisticReplayERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_Pipeline_enableHolisticReplay(
        this: *mut dai_Pipeline,
        pathToRecording: *const std_string,
    );
}
unsafe extern "C" {
    #[doc = " Creates a pipeline\n @param createImplicitDevice If true, creates a default device (default = true)"]
    #[link_name = "\u{1}_ZN3dai8PipelineC1Eb"]
    pub fn dai_Pipeline_Pipeline(this: *mut dai_Pipeline, createImplicitDevice: bool);
}
unsafe extern "C" {
    #[doc = " Creates a pipeline with specified device"]
    #[link_name = "\u{1}_ZN3dai8PipelineC1ESt10shared_ptrINS_6DeviceEE"]
    pub fn dai_Pipeline_Pipeline1(this: *mut dai_Pipeline, device: std_shared_ptr);
}
unsafe extern "C" {
    #[doc = " Creates a pipeline with specified device"]
    #[link_name = "\u{1}_ZN3dai8PipelineC1ESt10shared_ptrINS_12PipelineImplEE"]
    pub fn dai_Pipeline_Pipeline2(this: *mut dai_Pipeline, pimpl: std_shared_ptr);
}
impl dai_Pipeline {
    #[inline]
    pub unsafe fn getPipelineSchema(&self, type_: dai_SerializationType) -> dai_PipelineSchema {
        dai_Pipeline_getPipelineSchema(self, type_)
    }
    #[inline]
    pub unsafe fn enableHolisticRecord(&mut self, config: *const dai_RecordConfig) {
        dai_Pipeline_enableHolisticRecord(self, config)
    }
    #[inline]
    pub unsafe fn enableHolisticReplay(&mut self, pathToRecording: *const std_string) {
        dai_Pipeline_enableHolisticReplay(self, pathToRecording)
    }
    #[inline]
    pub unsafe fn new(createImplicitDevice: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Pipeline_Pipeline(__bindgen_tmp.as_mut_ptr(), createImplicitDevice);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(device: std_shared_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Pipeline_Pipeline1(__bindgen_tmp.as_mut_ptr(), device);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(pimpl: std_shared_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_Pipeline_Pipeline2(__bindgen_tmp.as_mut_ptr(), pimpl);
        __bindgen_tmp.assume_init()
    }
}
pub const dai_bootloader_Memory_AUTO: dai_bootloader_Memory = -1;
pub const dai_bootloader_Memory_FLASH: dai_bootloader_Memory = 0;
pub const dai_bootloader_Memory_EMMC: dai_bootloader_Memory = 1;
pub type dai_bootloader_Memory = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_bootloader_NetworkConfig {
    #[doc = " If timeout < 0 - waits forever\n if timeout == 0 - no timeout\n if timeout > 0 - waits timeout milliseconds"]
    pub timeoutMs: ::std::os::raw::c_int,
    pub ipv4: ::std::os::raw::c_uint,
    pub ipv4Mask: ::std::os::raw::c_uint,
    pub ipv4Gateway: ::std::os::raw::c_uint,
    pub ipv4Dns: ::std::os::raw::c_uint,
    pub ipv4DnsAlt: ::std::os::raw::c_uint,
    pub staticIpv4: bool,
    pub ipv6: __BindgenOpaqueArray<u32, 4usize>,
    pub ipv6Prefix: ::std::os::raw::c_uint,
    pub ipv6Gateway: __BindgenOpaqueArray<u32, 4usize>,
    pub ipv6Dns: __BindgenOpaqueArray<u32, 4usize>,
    pub ipv6DnsAlt: __BindgenOpaqueArray<u32, 4usize>,
    pub staticIpv6: bool,
    pub mac: __BindgenOpaqueArray<u8, 6usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_bootloader_NetworkConfig"]
        [::std::mem::size_of::<dai_bootloader_NetworkConfig>() - 104usize];
    ["Alignment of dai_bootloader_NetworkConfig"]
        [::std::mem::align_of::<dai_bootloader_NetworkConfig>() - 4usize];
    ["Offset of field: dai_bootloader_NetworkConfig::timeoutMs"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, timeoutMs) - 0usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv4"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv4) - 4usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv4Mask"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv4Mask) - 8usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv4Gateway"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv4Gateway) - 12usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv4Dns"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv4Dns) - 16usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv4DnsAlt"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv4DnsAlt) - 20usize];
    ["Offset of field: dai_bootloader_NetworkConfig::staticIpv4"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, staticIpv4) - 24usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv6"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv6) - 28usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv6Prefix"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv6Prefix) - 44usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv6Gateway"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv6Gateway) - 48usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv6Dns"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv6Dns) - 64usize];
    ["Offset of field: dai_bootloader_NetworkConfig::ipv6DnsAlt"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, ipv6DnsAlt) - 80usize];
    ["Offset of field: dai_bootloader_NetworkConfig::staticIpv6"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, staticIpv6) - 96usize];
    ["Offset of field: dai_bootloader_NetworkConfig::mac"]
        [::std::mem::offset_of!(dai_bootloader_NetworkConfig, mac) - 97usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_bootloader_UsbConfig {
    #[doc = " If timeout < 0 - waits forever\n if timeout == 0 - no timeout\n if timeout > 0 - waits timeout milliseconds"]
    pub timeoutMs: ::std::os::raw::c_int,
    #[doc = " UNKNOWN = 0, LOW, FULL, HIGH, SUPER, SUPER_PLUS"]
    pub maxUsbSpeed: ::std::os::raw::c_int,
    #[doc = " VID/PID pair used by bootloader"]
    pub vid: u16,
    #[doc = " VID/PID pair used by bootloader"]
    pub pid: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_bootloader_UsbConfig"]
        [::std::mem::size_of::<dai_bootloader_UsbConfig>() - 12usize];
    ["Alignment of dai_bootloader_UsbConfig"]
        [::std::mem::align_of::<dai_bootloader_UsbConfig>() - 4usize];
    ["Offset of field: dai_bootloader_UsbConfig::timeoutMs"]
        [::std::mem::offset_of!(dai_bootloader_UsbConfig, timeoutMs) - 0usize];
    ["Offset of field: dai_bootloader_UsbConfig::maxUsbSpeed"]
        [::std::mem::offset_of!(dai_bootloader_UsbConfig, maxUsbSpeed) - 4usize];
    ["Offset of field: dai_bootloader_UsbConfig::vid"]
        [::std::mem::offset_of!(dai_bootloader_UsbConfig, vid) - 8usize];
    ["Offset of field: dai_bootloader_UsbConfig::pid"]
        [::std::mem::offset_of!(dai_bootloader_UsbConfig, pid) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_bootloader_Config {
    pub appMem: dai_bootloader_Memory,
    pub usb: dai_bootloader_UsbConfig,
    pub network: dai_bootloader_NetworkConfig,
    pub userBlSize: u32,
    pub userBlChecksum: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_bootloader_Config"][::std::mem::size_of::<dai_bootloader_Config>() - 128usize];
    ["Alignment of dai_bootloader_Config"]
        [::std::mem::align_of::<dai_bootloader_Config>() - 4usize];
    ["Offset of field: dai_bootloader_Config::appMem"]
        [::std::mem::offset_of!(dai_bootloader_Config, appMem) - 0usize];
    ["Offset of field: dai_bootloader_Config::usb"]
        [::std::mem::offset_of!(dai_bootloader_Config, usb) - 4usize];
    ["Offset of field: dai_bootloader_Config::network"]
        [::std::mem::offset_of!(dai_bootloader_Config, network) - 16usize];
    ["Offset of field: dai_bootloader_Config::userBlSize"]
        [::std::mem::offset_of!(dai_bootloader_Config, userBlSize) - 120usize];
    ["Offset of field: dai_bootloader_Config::userBlChecksum"]
        [::std::mem::offset_of!(dai_bootloader_Config, userBlChecksum) - 124usize];
};
pub const dai_bootloader_Section_AUTO: dai_bootloader_Section = -1;
pub const dai_bootloader_Section_HEADER: dai_bootloader_Section = 0;
pub const dai_bootloader_Section_BOOTLOADER: dai_bootloader_Section = 1;
pub const dai_bootloader_Section_BOOTLOADER_CONFIG: dai_bootloader_Section = 2;
pub const dai_bootloader_Section_APPLICATION: dai_bootloader_Section = 3;
pub const dai_bootloader_Section_USER_BOOTLOADER: dai_bootloader_Section = 4;
pub type dai_bootloader_Section = ::std::os::raw::c_int;
pub const dai_bootloader_Type_AUTO: dai_bootloader_Type = -1;
pub const dai_bootloader_Type_USB: dai_bootloader_Type = 0;
pub const dai_bootloader_Type_NETWORK: dai_bootloader_Type = 1;
pub type dai_bootloader_Type = ::std::os::raw::c_int;
#[doc = " Represents the DepthAI bootloader with the methods to interact with it."]
#[repr(C)]
pub struct dai_DeviceBootloader {
    pub connection: std_shared_ptr,
    pub deviceInfo: dai_DeviceInfo,
    pub isEmbedded: bool,
    pub bootloaderType: dai_DeviceBootloader_Type,
    pub closed: std_atomic<bool>,
    pub watchdogThread: std_thread,
    pub watchdogRunning: std_atomic<bool>,
    pub monitorThread: std_thread,
    pub lastWatchdogPingTimeMtx: std_mutex,
    pub lastWatchdogPingTime: std_chrono_steady_clock_time_point,
    pub stream: std_unique_ptr,
    pub allowFlashingBootloader: bool,
    pub version: dai_DeviceBootloader_Version,
}
pub use self::dai_bootloader_Memory as dai_DeviceBootloader_Memory;
pub use self::dai_bootloader_Section as dai_DeviceBootloader_Section;
pub use self::dai_bootloader_Type as dai_DeviceBootloader_Type;
pub type dai_DeviceBootloader_UsbConfig = dai_bootloader_UsbConfig;
pub type dai_DeviceBootloader_NetworkConfig = dai_bootloader_NetworkConfig;
#[repr(C)]
pub struct dai_DeviceBootloader_Config {
    pub _base: dai_bootloader_Config,
    pub data: nlohmann_json,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBootloader_Config"]
        [::std::mem::size_of::<dai_DeviceBootloader_Config>() - 144usize];
    ["Alignment of dai_DeviceBootloader_Config"]
        [::std::mem::align_of::<dai_DeviceBootloader_Config>() - 8usize];
    ["Offset of field: dai_DeviceBootloader_Config::data"]
        [::std::mem::offset_of!(dai_DeviceBootloader_Config, data) - 128usize];
};
unsafe extern "C" {
    #[doc = " Setting a static IPv4 won't start DHCP client"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config13setStaticIPv4ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_"]
    pub fn dai_DeviceBootloader_Config_setStaticIPv4(
        this: *mut dai_DeviceBootloader_Config,
        ip: std_string,
        mask: std_string,
        gateway: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Setting a dynamic IPv4 will set that IP as well as start DHCP client"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config14setDynamicIPv4ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_"]
    pub fn dai_DeviceBootloader_Config_setDynamicIPv4(
        this: *mut dai_DeviceBootloader_Config,
        ip: std_string,
        mask: std_string,
        gateway: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Get if static IPv4 configuration is set"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config12isStaticIPV4Ev"]
    pub fn dai_DeviceBootloader_Config_isStaticIPV4(this: *mut dai_DeviceBootloader_Config)
    -> bool;
}
unsafe extern "C" {
    #[doc = " Get IPv4"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config7getIPv4B5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_getIPv4(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get IPv4 mask"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config11getIPv4MaskB5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_getIPv4Mask(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get IPv4 gateway"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config14getIPv4GatewayB5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_getIPv4Gateway(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set IPv4 DNS options"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config10setDnsIPv4ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_"]
    pub fn dai_DeviceBootloader_Config_setDnsIPv4(
        this: *mut dai_DeviceBootloader_Config,
        dns: std_string,
        dnsAlt: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Get primary IPv4 DNS server"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config10getDnsIPv4B5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_getDnsIPv4(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get alternate IPv4 DNS server"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config13getDnsAltIPv4B5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_getDnsAltIPv4(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set USB timeout"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config13setUsbTimeoutENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_DeviceBootloader_Config_setUsbTimeout(
        this: *mut dai_DeviceBootloader_Config,
        ms: std_chrono_milliseconds,
    );
}
unsafe extern "C" {
    #[doc = " Get USB timeout"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config13getUsbTimeoutEv"]
    pub fn dai_DeviceBootloader_Config_getUsbTimeout(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_chrono_milliseconds;
}
unsafe extern "C" {
    #[doc = " Set NETWOR timeout"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config17setNetworkTimeoutENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE"]
    pub fn dai_DeviceBootloader_Config_setNetworkTimeout(
        this: *mut dai_DeviceBootloader_Config,
        ms: std_chrono_milliseconds,
    );
}
unsafe extern "C" {
    #[doc = " Get NETWORK timeout"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config17getNetworkTimeoutEv"]
    pub fn dai_DeviceBootloader_Config_getNetworkTimeout(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_chrono_milliseconds;
}
unsafe extern "C" {
    #[doc = " Set MAC address if not flashed on controller"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config13setMacAddressENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_DeviceBootloader_Config_setMacAddress(
        this: *mut dai_DeviceBootloader_Config,
        mac: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Get MAC address if not flashed on controller"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config13getMacAddressB5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_getMacAddress(
        this: *mut dai_DeviceBootloader_Config,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set maxUsbSpeed"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config14setUsbMaxSpeedENS_8UsbSpeedE"]
    pub fn dai_DeviceBootloader_Config_setUsbMaxSpeed(
        this: *mut dai_DeviceBootloader_Config,
        speed: dai_UsbSpeed,
    );
}
unsafe extern "C" {
    #[doc = " Get maxUsbSpeed"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config14getUsbMaxSpeedEv"]
    pub fn dai_DeviceBootloader_Config_getUsbMaxSpeed(
        this: *mut dai_DeviceBootloader_Config,
    ) -> dai_UsbSpeed;
}
unsafe extern "C" {
    #[doc = " To JSON"]
    #[link_name = "\u{1}_ZNK3dai16DeviceBootloader6Config6toJsonB5cxx11Ev"]
    pub fn dai_DeviceBootloader_Config_toJson(
        this: *const dai_DeviceBootloader_Config,
    ) -> nlohmann_json;
}
unsafe extern "C" {
    #[doc = " from JSON"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader6Config8fromJsonEN8nlohmann16json_abi_v3_12_010basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS3_14adl_serializerES6_IhSaIhEEvEE"]
    pub fn dai_DeviceBootloader_Config_fromJson(arg1: nlohmann_json)
    -> dai_DeviceBootloader_Config;
}
impl dai_DeviceBootloader_Config {
    #[inline]
    pub unsafe fn setStaticIPv4(&mut self, ip: std_string, mask: std_string, gateway: std_string) {
        dai_DeviceBootloader_Config_setStaticIPv4(self, ip, mask, gateway)
    }
    #[inline]
    pub unsafe fn setDynamicIPv4(&mut self, ip: std_string, mask: std_string, gateway: std_string) {
        dai_DeviceBootloader_Config_setDynamicIPv4(self, ip, mask, gateway)
    }
    #[inline]
    pub unsafe fn isStaticIPV4(&mut self) -> bool {
        dai_DeviceBootloader_Config_isStaticIPV4(self)
    }
    #[inline]
    pub unsafe fn getIPv4(&mut self) -> std_string {
        dai_DeviceBootloader_Config_getIPv4(self)
    }
    #[inline]
    pub unsafe fn getIPv4Mask(&mut self) -> std_string {
        dai_DeviceBootloader_Config_getIPv4Mask(self)
    }
    #[inline]
    pub unsafe fn getIPv4Gateway(&mut self) -> std_string {
        dai_DeviceBootloader_Config_getIPv4Gateway(self)
    }
    #[inline]
    pub unsafe fn setDnsIPv4(&mut self, dns: std_string, dnsAlt: std_string) {
        dai_DeviceBootloader_Config_setDnsIPv4(self, dns, dnsAlt)
    }
    #[inline]
    pub unsafe fn getDnsIPv4(&mut self) -> std_string {
        dai_DeviceBootloader_Config_getDnsIPv4(self)
    }
    #[inline]
    pub unsafe fn getDnsAltIPv4(&mut self) -> std_string {
        dai_DeviceBootloader_Config_getDnsAltIPv4(self)
    }
    #[inline]
    pub unsafe fn setUsbTimeout(&mut self, ms: std_chrono_milliseconds) {
        dai_DeviceBootloader_Config_setUsbTimeout(self, ms)
    }
    #[inline]
    pub unsafe fn getUsbTimeout(&mut self) -> std_chrono_milliseconds {
        dai_DeviceBootloader_Config_getUsbTimeout(self)
    }
    #[inline]
    pub unsafe fn setNetworkTimeout(&mut self, ms: std_chrono_milliseconds) {
        dai_DeviceBootloader_Config_setNetworkTimeout(self, ms)
    }
    #[inline]
    pub unsafe fn getNetworkTimeout(&mut self) -> std_chrono_milliseconds {
        dai_DeviceBootloader_Config_getNetworkTimeout(self)
    }
    #[inline]
    pub unsafe fn setMacAddress(&mut self, mac: std_string) {
        dai_DeviceBootloader_Config_setMacAddress(self, mac)
    }
    #[inline]
    pub unsafe fn getMacAddress(&mut self) -> std_string {
        dai_DeviceBootloader_Config_getMacAddress(self)
    }
    #[inline]
    pub unsafe fn setUsbMaxSpeed(&mut self, speed: dai_UsbSpeed) {
        dai_DeviceBootloader_Config_setUsbMaxSpeed(self, speed)
    }
    #[inline]
    pub unsafe fn getUsbMaxSpeed(&mut self) -> dai_UsbSpeed {
        dai_DeviceBootloader_Config_getUsbMaxSpeed(self)
    }
    #[inline]
    pub unsafe fn toJson(&self) -> nlohmann_json {
        dai_DeviceBootloader_Config_toJson(self)
    }
    #[inline]
    pub unsafe fn fromJson(arg1: nlohmann_json) -> dai_DeviceBootloader_Config {
        dai_DeviceBootloader_Config_fromJson(arg1)
    }
}
#[doc = " Version structure"]
pub type dai_DeviceBootloader_Version = dai_Version;
#[repr(C)]
pub struct dai_DeviceBootloader_ApplicationInfo {
    pub memory: dai_DeviceBootloader_Memory,
    pub hasApplication: bool,
    pub firmwareVersion: std_string,
    pub applicationName: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBootloader_ApplicationInfo"]
        [::std::mem::size_of::<dai_DeviceBootloader_ApplicationInfo>() - 72usize];
    ["Alignment of dai_DeviceBootloader_ApplicationInfo"]
        [::std::mem::align_of::<dai_DeviceBootloader_ApplicationInfo>() - 8usize];
    ["Offset of field: dai_DeviceBootloader_ApplicationInfo::memory"]
        [::std::mem::offset_of!(dai_DeviceBootloader_ApplicationInfo, memory) - 0usize];
    ["Offset of field: dai_DeviceBootloader_ApplicationInfo::hasApplication"]
        [::std::mem::offset_of!(dai_DeviceBootloader_ApplicationInfo, hasApplication) - 4usize];
    ["Offset of field: dai_DeviceBootloader_ApplicationInfo::firmwareVersion"]
        [::std::mem::offset_of!(dai_DeviceBootloader_ApplicationInfo, firmwareVersion) - 8usize];
    ["Offset of field: dai_DeviceBootloader_ApplicationInfo::applicationName"]
        [::std::mem::offset_of!(dai_DeviceBootloader_ApplicationInfo, applicationName) - 40usize];
};
#[repr(C)]
pub struct dai_DeviceBootloader_MemoryInfo {
    pub available: bool,
    pub size: ::std::os::raw::c_long,
    pub info: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBootloader_MemoryInfo"]
        [::std::mem::size_of::<dai_DeviceBootloader_MemoryInfo>() - 48usize];
    ["Alignment of dai_DeviceBootloader_MemoryInfo"]
        [::std::mem::align_of::<dai_DeviceBootloader_MemoryInfo>() - 8usize];
    ["Offset of field: dai_DeviceBootloader_MemoryInfo::available"]
        [::std::mem::offset_of!(dai_DeviceBootloader_MemoryInfo, available) - 0usize];
    ["Offset of field: dai_DeviceBootloader_MemoryInfo::size"]
        [::std::mem::offset_of!(dai_DeviceBootloader_MemoryInfo, size) - 8usize];
    ["Offset of field: dai_DeviceBootloader_MemoryInfo::info"]
        [::std::mem::offset_of!(dai_DeviceBootloader_MemoryInfo, info) - 16usize];
};
unsafe extern "C" {
    #[doc = " Default Bootloader type"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader12DEFAULT_TYPEE"]
    pub static dai_DeviceBootloader_DEFAULT_TYPE: dai_DeviceBootloader_Type;
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceBootloader"][::std::mem::size_of::<dai_DeviceBootloader>() - 224usize];
    ["Alignment of dai_DeviceBootloader"][::std::mem::align_of::<dai_DeviceBootloader>() - 8usize];
    ["Offset of field: dai_DeviceBootloader::connection"]
        [::std::mem::offset_of!(dai_DeviceBootloader, connection) - 0usize];
    ["Offset of field: dai_DeviceBootloader::deviceInfo"]
        [::std::mem::offset_of!(dai_DeviceBootloader, deviceInfo) - 16usize];
    ["Offset of field: dai_DeviceBootloader::isEmbedded"]
        [::std::mem::offset_of!(dai_DeviceBootloader, isEmbedded) - 96usize];
    ["Offset of field: dai_DeviceBootloader::bootloaderType"]
        [::std::mem::offset_of!(dai_DeviceBootloader, bootloaderType) - 100usize];
    ["Offset of field: dai_DeviceBootloader::closed"]
        [::std::mem::offset_of!(dai_DeviceBootloader, closed) - 104usize];
    ["Offset of field: dai_DeviceBootloader::watchdogThread"]
        [::std::mem::offset_of!(dai_DeviceBootloader, watchdogThread) - 112usize];
    ["Offset of field: dai_DeviceBootloader::watchdogRunning"]
        [::std::mem::offset_of!(dai_DeviceBootloader, watchdogRunning) - 120usize];
    ["Offset of field: dai_DeviceBootloader::monitorThread"]
        [::std::mem::offset_of!(dai_DeviceBootloader, monitorThread) - 128usize];
    ["Offset of field: dai_DeviceBootloader::lastWatchdogPingTimeMtx"]
        [::std::mem::offset_of!(dai_DeviceBootloader, lastWatchdogPingTimeMtx) - 136usize];
    ["Offset of field: dai_DeviceBootloader::lastWatchdogPingTime"]
        [::std::mem::offset_of!(dai_DeviceBootloader, lastWatchdogPingTime) - 176usize];
    ["Offset of field: dai_DeviceBootloader::stream"]
        [::std::mem::offset_of!(dai_DeviceBootloader, stream) - 184usize];
    ["Offset of field: dai_DeviceBootloader::allowFlashingBootloader"]
        [::std::mem::offset_of!(dai_DeviceBootloader, allowFlashingBootloader) - 192usize];
    ["Offset of field: dai_DeviceBootloader::version"]
        [::std::mem::offset_of!(dai_DeviceBootloader, version) - 200usize];
};
unsafe extern "C" {
    #[doc = " Searches for connected devices in either UNBOOTED or BOOTLOADER states and returns first available.\n @returns Tuple of boolean and DeviceInfo. If found boolean is true and DeviceInfo describes the device. Otherwise false"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader23getFirstAvailableDeviceEv"]
    pub fn dai_DeviceBootloader_getFirstAvailableDevice() -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Searches for connected devices in either UNBOOTED or BOOTLOADER states.\n @returns Vector of all found devices"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader22getAllAvailableDevicesEv"]
    pub fn dai_DeviceBootloader_getAllAvailableDevices() -> std_vector;
}
unsafe extern "C" {
    #[doc = " Creates application package which can be flashed to depthai device.\n @param pipeline Pipeline from which to create the application package\n @param pathToCmd Optional path to custom device firmware\n @param compress Optional boolean which specifies if contents should be compressed\n @param applicationName Optional name the application that is flashed\n @returns Depthai application package"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader31createDepthaiApplicationPackageERKNS_8PipelineERKNS_4PathEbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn dai_DeviceBootloader_createDepthaiApplicationPackage(
        pipeline: *const dai_Pipeline,
        pathToCmd: *const dai_Path,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Creates application package which can be flashed to depthai device.\n @param pipeline Pipeline from which to create the application package\n @param compress Specifies if contents should be compressed\n @param applicationName Name the application that is flashed\n @returns Depthai application package"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader31createDepthaiApplicationPackageERKNS_8PipelineEbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn dai_DeviceBootloader_createDepthaiApplicationPackage1(
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Saves application package to a file which can be flashed to depthai device.\n @param path Path where to save the application package\n @param pipeline Pipeline from which to create the application package\n @param pathToCmd Optional path to custom device firmware\n @param compress Optional boolean which specifies if contents should be compressed\n @param applicationName Optional name the application that is flashed"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader29saveDepthaiApplicationPackageERKNS_4PathERKNS_8PipelineES3_bNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn dai_DeviceBootloader_saveDepthaiApplicationPackage(
        path: *const dai_Path,
        pipeline: *const dai_Pipeline,
        pathToCmd: *const dai_Path,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    );
}
unsafe extern "C" {
    #[doc = " Saves application package to a file which can be flashed to depthai device.\n @param path Path where to save the application package\n @param pipeline Pipeline from which to create the application package\n @param compress Specifies if contents should be compressed\n @param applicationName Optional name the application that is flashed"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader29saveDepthaiApplicationPackageERKNS_4PathERKNS_8PipelineEbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn dai_DeviceBootloader_saveDepthaiApplicationPackage1(
        path: *const dai_Path,
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    );
}
unsafe extern "C" {
    #[doc = " @returns Embedded bootloader version"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader28getEmbeddedBootloaderVersionEv"]
    pub fn dai_DeviceBootloader_getEmbeddedBootloaderVersion() -> dai_DeviceBootloader_Version;
}
unsafe extern "C" {
    #[doc = " @returns Embedded bootloader binary"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader27getEmbeddedBootloaderBinaryENS_10bootloader4TypeE"]
    pub fn dai_DeviceBootloader_getEmbeddedBootloaderBinary(
        type_: dai_DeviceBootloader_Type,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Flashes a given pipeline to the device.\n @param progressCallback Callback that sends back a value between 0..1 which signifies current flashing progress\n @param pipeline Pipeline to flash to the board\n @param compress Compresses application to reduce needed memory size\n @param applicationName Name the application that is flashed"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader5flashESt8functionIFvfEERKNS_8PipelineEbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_10bootloader6MemoryEb"]
    pub fn dai_DeviceBootloader_flash(
        this: *mut dai_DeviceBootloader,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        memory: dai_DeviceBootloader_Memory,
        checkChecksum: bool,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flashes a given pipeline to the device.\n @param pipeline Pipeline to flash to the board\n @param compress Compresses application to reduce needed memory size\n @param applicationName Optional name the application that is flashed"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader5flashERKNS_8PipelineEbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_10bootloader6MemoryEb"]
    pub fn dai_DeviceBootloader_flash1(
        this: *mut dai_DeviceBootloader,
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        memory: dai_DeviceBootloader_Memory,
        checkChecksum: bool,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Reads information about flashed application in specified memory from device\n @param memory Specifies which memory to query"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader19readApplicationInfoENS_10bootloader6MemoryE"]
    pub fn dai_DeviceBootloader_readApplicationInfo(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
    ) -> dai_DeviceBootloader_ApplicationInfo;
}
unsafe extern "C" {
    #[doc = " Flashes a specific depthai application package that was generated using createDepthaiApplicationPackage or saveDepthaiApplicationPackage\n @param progressCallback Callback that sends back a value between 0..1 which signifies current flashing progress\n @param package Depthai application package to flash to the board"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader30flashDepthaiApplicationPackageB5cxx11ESt8functionIFvfEESt6vectorIhSaIhEENS_10bootloader6MemoryE"]
    pub fn dai_DeviceBootloader_flashDepthaiApplicationPackage(
        this: *mut dai_DeviceBootloader,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        package: std_vector,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flashes a specific depthai application package that was generated using createDepthaiApplicationPackage or saveDepthaiApplicationPackage\n @param package Depthai application package to flash to the board"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader30flashDepthaiApplicationPackageB5cxx11ESt6vectorIhSaIhEENS_10bootloader6MemoryE"]
    pub fn dai_DeviceBootloader_flashDepthaiApplicationPackage1(
        this: *mut dai_DeviceBootloader,
        package: std_vector,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Clears flashed application on the device, by removing SBR boot structure\n Doesn't remove fast boot header capability to still boot the application"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10flashClearB5cxx11ENS_10bootloader6MemoryE"]
    pub fn dai_DeviceBootloader_flashClear(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flashes bootloader to the current board\n @param progressCallback Callback that sends back a value between 0..1 which signifies current flashing progress\n @param path Optional parameter to custom bootloader to flash"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader15flashBootloaderB5cxx11ESt8functionIFvfEERKNS_4PathE"]
    pub fn dai_DeviceBootloader_flashBootloader(
        this: *mut dai_DeviceBootloader,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        path: *const dai_Path,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flash selected bootloader to the current board\n @param memory Memory to flash\n @param type Bootloader type to flash\n @param progressCallback Callback that sends back a value between 0..1 which signifies current flashing progress\n @param path Optional parameter to custom bootloader to flash"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader15flashBootloaderB5cxx11ENS_10bootloader6MemoryENS1_4TypeESt8functionIFvfEERKNS_4PathE"]
    pub fn dai_DeviceBootloader_flashBootloader1(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        path: *const dai_Path,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flashes user bootloader to the current board. Available for NETWORK bootloader type\n @param progressCallback Callback that sends back a value between 0..1 which signifies current flashing progress\n @param path Optional parameter to custom bootloader to flash"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader19flashUserBootloaderB5cxx11ESt8functionIFvfEERKNS_4PathE"]
    pub fn dai_DeviceBootloader_flashUserBootloader(
        this: *mut dai_DeviceBootloader,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        path: *const dai_Path,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flash boot header which boots same as equivalent GPIO mode would\n @param gpioMode GPIO mode equivalent"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader23flashGpioModeBootHeaderB5cxx11ENS_10bootloader6MemoryEi"]
    pub fn dai_DeviceBootloader_flashGpioModeBootHeader(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        gpioMode: ::std::os::raw::c_int,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flash USB recovery boot header. Switches to USB ROM Bootloader\n @param memory Which memory to flash the header to"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader26flashUsbRecoveryBootHeaderB5cxx11ENS_10bootloader6MemoryE"]
    pub fn dai_DeviceBootloader_flashUsbRecoveryBootHeader(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flash optimized boot header\n @param memory Which memory to flasht the header to\n @param frequency SPI specific parameter, frequency in MHz\n @param location Target location the header should boot to. Default to location of bootloader\n @param dummyCycles SPI specific parameter\n @param offset Offset in memory to flash the header to. Defaults to offset of boot header\n @returns status as std::tuple<bool, std::string>"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader15flashBootHeaderB5cxx11ENS_10bootloader6MemoryEilil"]
    pub fn dai_DeviceBootloader_flashBootHeader(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        frequency: i32,
        location: i64,
        dummyCycles: i32,
        offset: i64,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flash fast boot header. Application must already be present in flash, or location must be specified manually.\n Note - Can soft brick your device if firmware location changes.\n @param memory Which memory to flash the header to\n @param frequency SPI specific parameter, frequency in MHz\n @param location Target location the header should boot to. Default to location of bootloader\n @param dummyCycles SPI specific parameter\n @param offset Offset in memory to flash the header to. Defaults to offset of boot header\n @returns status as std::tuple<bool, std::string>"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader19flashFastBootHeaderB5cxx11ENS_10bootloader6MemoryEilil"]
    pub fn dai_DeviceBootloader_flashFastBootHeader(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        frequency: i32,
        location: i64,
        dummyCycles: i32,
        offset: i64,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flash arbitrary data at custom offset in specified memory\n @param memory Memory to flash\n @param offset Offset at which to flash the given data in bytes\n @param progressCallback Callback that sends back a value between 0..1 which signifies current flashing progress\n @param data Data to flash"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader11flashCustomB5cxx11ENS_10bootloader6MemoryEmRKSt6vectorIhSaIhEESt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_flashCustom(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        data: *const std_vector,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader11flashCustomB5cxx11ENS_10bootloader6MemoryEmPKhmSt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_flashCustom1(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        data: *const u8,
        size: usize,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader11flashCustomENS_10bootloader6MemoryEmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_flashCustom2(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        filename: std_string,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Reads arbitrary data at custom offset in specified memory\n @param memory Memory to read\n @param offset Offset at which to read the specified bytes\n @param size Number of bytes to read\n @param data Data to read to. Must be at least 'size' number of bytes big\n @param progressCallback Callback that sends back a value between 0..1 which signifies current reading progress"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10readCustomB5cxx11ENS_10bootloader6MemoryEmmRSt6vectorIhSaIhEESt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_readCustom(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        data: *mut std_vector,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10readCustomB5cxx11ENS_10bootloader6MemoryEmmPhSt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_readCustom1(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        data: *mut u8,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10readCustomENS_10bootloader6MemoryEmmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_readCustom2(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        filename: std_string,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10readCustomB5cxx11ENS_10bootloader6MemoryEmmSt8functionIFvfEE"]
    pub fn dai_DeviceBootloader_readCustom3(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Reads configuration data from bootloader\n @returns Unstructured configuration data\n @param memory Optional - from which memory to read configuration data\n @param type Optional - from which type of bootloader to read configuration data"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader14readConfigDataB5cxx11ENS_10bootloader6MemoryENS1_4TypeE"]
    pub fn dai_DeviceBootloader_readConfigData(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> nlohmann_json;
}
unsafe extern "C" {
    #[doc = " Flashes configuration data to bootloader\n @param configData Unstructured configuration data\n @param memory Optional - to which memory flash configuration\n @param type Optional - for which type of bootloader to flash configuration"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader15flashConfigDataEN8nlohmann16json_abi_v3_12_010basic_jsonISt3mapSt6vectorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEblmdSaNS2_14adl_serializerES5_IhSaIhEEvEENS_10bootloader6MemoryENSG_4TypeE"]
    pub fn dai_DeviceBootloader_flashConfigData(
        this: *mut dai_DeviceBootloader,
        configData: nlohmann_json,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Flashes configuration data to bootloader\n @param configPath Unstructured configuration data\n @param memory Optional - to which memory flash configuration\n @param type Optional - for which type of bootloader to flash configuration"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader15flashConfigFileB5cxx11ERKNS_4PathENS_10bootloader6MemoryENS4_4TypeE"]
    pub fn dai_DeviceBootloader_flashConfigFile(
        this: *mut dai_DeviceBootloader,
        configPath: *const dai_Path,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Clears configuration data\n @param memory Optional - on which memory to clear configuration data\n @param type Optional - for which type of bootloader to clear configuration data"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader16flashConfigClearB5cxx11ENS_10bootloader6MemoryENS1_4TypeE"]
    pub fn dai_DeviceBootloader_flashConfigClear(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Reads configuration from bootloader\n @param memory Optional - from which memory to read configuration\n @param type Optional - from which type of bootloader to read configuration\n @returns Configuration structure"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10readConfigENS_10bootloader6MemoryENS1_4TypeE"]
    pub fn dai_DeviceBootloader_readConfig(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> dai_DeviceBootloader_Config;
}
unsafe extern "C" {
    #[doc = " Flashes configuration to bootloader\n @param configData Configuration structure\n @param memory Optional - to which memory flash configuration\n @param type Optional - for which type of bootloader to flash configuration"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader11flashConfigB5cxx11ERKNS0_6ConfigENS_10bootloader6MemoryENS4_4TypeE"]
    pub fn dai_DeviceBootloader_flashConfig(
        this: *mut dai_DeviceBootloader,
        config: *const dai_DeviceBootloader_Config,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Retrieves information about specified memory\n @param memory Specifies which memory to query"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader13getMemoryInfoENS_10bootloader6MemoryE"]
    pub fn dai_DeviceBootloader_getMemoryInfo(
        this: *mut dai_DeviceBootloader,
        memory: dai_DeviceBootloader_Memory,
    ) -> dai_DeviceBootloader_MemoryInfo;
}
unsafe extern "C" {
    #[doc = " Checks whether User Bootloader is supported with current bootloader\n @returns true of User Bootloader is supported, false otherwise"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader25isUserBootloaderSupportedEv"]
    pub fn dai_DeviceBootloader_isUserBootloaderSupported(this: *mut dai_DeviceBootloader) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves whether current bootloader is User Bootloader (B out of A/B configuration)"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader16isUserBootloaderEv"]
    pub fn dai_DeviceBootloader_isUserBootloader(this: *mut dai_DeviceBootloader) -> bool;
}
unsafe extern "C" {
    #[doc = " Boots a custom FW in memory\n @param fw\n @throws A runtime exception if there are any communication issues"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader10bootMemoryERKSt6vectorIhSaIhEE"]
    pub fn dai_DeviceBootloader_bootMemory(this: *mut dai_DeviceBootloader, fw: *const std_vector);
}
unsafe extern "C" {
    #[doc = " Boots into integrated ROM bootloader in USB mode\n @throws A runtime exception if there are any communication issues"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader20bootUsbRomBootloaderEv"]
    pub fn dai_DeviceBootloader_bootUsbRomBootloader(this: *mut dai_DeviceBootloader);
}
unsafe extern "C" {
    #[doc = " @returns Version of current running bootloader"]
    #[link_name = "\u{1}_ZNK3dai16DeviceBootloader10getVersionEv"]
    pub fn dai_DeviceBootloader_getVersion(
        this: *const dai_DeviceBootloader,
    ) -> dai_DeviceBootloader_Version;
}
unsafe extern "C" {
    #[doc = " @returns True when bootloader was booted using latest bootloader integrated in the library.\n False when bootloader is already running on the device and just connected to."]
    #[link_name = "\u{1}_ZNK3dai16DeviceBootloader17isEmbeddedVersionEv"]
    pub fn dai_DeviceBootloader_isEmbeddedVersion(this: *const dai_DeviceBootloader) -> bool;
}
unsafe extern "C" {
    #[doc = " @returns Type of currently connected bootloader"]
    #[link_name = "\u{1}_ZNK3dai16DeviceBootloader7getTypeEv"]
    pub fn dai_DeviceBootloader_getType(
        this: *const dai_DeviceBootloader,
    ) -> dai_DeviceBootloader_Type;
}
unsafe extern "C" {
    #[doc = " @returns True if allowed to flash bootloader"]
    #[link_name = "\u{1}_ZNK3dai16DeviceBootloader27isAllowedFlashingBootloaderEv"]
    pub fn dai_DeviceBootloader_isAllowedFlashingBootloader(
        this: *const dai_DeviceBootloader,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Explicitly closes connection to device.\n @note This function does not need to be explicitly called\n as destructor closes the device automatically"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloader5closeEv"]
    pub fn dai_DeviceBootloader_close(this: *mut dai_DeviceBootloader);
}
unsafe extern "C" {
    #[doc = " Is the device already closed (or disconnected)\n\n @warning This function is thread-unsafe and may return outdated incorrect values. It is\n only meant for use in simple single-threaded code. Well written code should handle\n exceptions when calling any DepthAI apis to handle hardware events and multithreaded use."]
    #[link_name = "\u{1}_ZNK3dai16DeviceBootloader8isClosedEv"]
    pub fn dai_DeviceBootloader_isClosed(this: *const dai_DeviceBootloader) -> bool;
}
unsafe extern "C" {
    #[doc = " Connects to or boots device in bootloader mode depending on devInfo state; flashing not allowed\n @param devInfo DeviceInfo of which to boot or connect to"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloaderC1ERKNS_10DeviceInfoE"]
    pub fn dai_DeviceBootloader_DeviceBootloader(
        this: *mut dai_DeviceBootloader,
        devInfo: *const dai_DeviceInfo,
    );
}
unsafe extern "C" {
    #[doc = " Connects to device in bootloader of specified type. Throws if it wasn't possible.\n This constructor will automatically boot into specified bootloader type if not already running\n @param devInfo DeviceInfo of which to boot or connect to\n @param type Type of bootloader to boot/connect to.\n @param allowFlashingBootloader Set to true to allow flashing the devices bootloader. Defaults to false"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloaderC1ERKNS_10DeviceInfoENS_10bootloader4TypeEb"]
    pub fn dai_DeviceBootloader_DeviceBootloader1(
        this: *mut dai_DeviceBootloader,
        devInfo: *const dai_DeviceInfo,
        type_: dai_DeviceBootloader_Type,
        allowFlashingBootloader: bool,
    );
}
unsafe extern "C" {
    #[doc = " Connects to or boots device in bootloader mode depending on devInfo state with a custom bootloader firmware.\n @param devInfo DeviceInfo of which to boot or connect to\n @param pathToBootloader Custom bootloader firmware to boot\n @param allowFlashingBootloader Set to true to allow flashing the devices bootloader. Defaults to false"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloaderC1ERKNS_10DeviceInfoERKNS_4PathEb"]
    pub fn dai_DeviceBootloader_DeviceBootloader2(
        this: *mut dai_DeviceBootloader,
        devInfo: *const dai_DeviceInfo,
        pathToBootloader: *const dai_Path,
        allowFlashingBootloader: bool,
    );
}
unsafe extern "C" {
    #[doc = " Connects to device with specified name/device id\n\n @param nameOrDeviceId Creates DeviceInfo with nameOrDeviceId to connect to\n @param allowFlashingBootloader Set to true to allow flashing the devices bootloader. Defaults to false"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloaderC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"]
    pub fn dai_DeviceBootloader_DeviceBootloader3(
        this: *mut dai_DeviceBootloader,
        nameOrDeviceId: std_string,
        allowFlashingBootloader: bool,
    );
}
unsafe extern "C" {
    #[doc = " @brief Destroy the Device Bootloader object\n"]
    #[link_name = "\u{1}_ZN3dai16DeviceBootloaderD1Ev"]
    pub fn dai_DeviceBootloader_DeviceBootloader_destructor(this: *mut dai_DeviceBootloader);
}
impl dai_DeviceBootloader {
    #[inline]
    pub unsafe fn getFirstAvailableDevice() -> std_tuple {
        dai_DeviceBootloader_getFirstAvailableDevice()
    }
    #[inline]
    pub unsafe fn getAllAvailableDevices() -> std_vector {
        dai_DeviceBootloader_getAllAvailableDevices()
    }
    #[inline]
    pub unsafe fn createDepthaiApplicationPackage(
        pipeline: *const dai_Pipeline,
        pathToCmd: *const dai_Path,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    ) -> std_vector {
        dai_DeviceBootloader_createDepthaiApplicationPackage(
            pipeline,
            pathToCmd,
            compress,
            applicationName,
            checkChecksum,
        )
    }
    #[inline]
    pub unsafe fn createDepthaiApplicationPackage1(
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    ) -> std_vector {
        dai_DeviceBootloader_createDepthaiApplicationPackage1(
            pipeline,
            compress,
            applicationName,
            checkChecksum,
        )
    }
    #[inline]
    pub unsafe fn saveDepthaiApplicationPackage(
        path: *const dai_Path,
        pipeline: *const dai_Pipeline,
        pathToCmd: *const dai_Path,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    ) {
        dai_DeviceBootloader_saveDepthaiApplicationPackage(
            path,
            pipeline,
            pathToCmd,
            compress,
            applicationName,
            checkChecksum,
        )
    }
    #[inline]
    pub unsafe fn saveDepthaiApplicationPackage1(
        path: *const dai_Path,
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        checkChecksum: bool,
    ) {
        dai_DeviceBootloader_saveDepthaiApplicationPackage1(
            path,
            pipeline,
            compress,
            applicationName,
            checkChecksum,
        )
    }
    #[inline]
    pub unsafe fn getEmbeddedBootloaderVersion() -> dai_DeviceBootloader_Version {
        dai_DeviceBootloader_getEmbeddedBootloaderVersion()
    }
    #[inline]
    pub unsafe fn getEmbeddedBootloaderBinary(type_: dai_DeviceBootloader_Type) -> std_vector {
        dai_DeviceBootloader_getEmbeddedBootloaderBinary(type_)
    }
    #[inline]
    pub unsafe fn flash(
        &mut self,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        memory: dai_DeviceBootloader_Memory,
        checkChecksum: bool,
    ) -> std_tuple {
        dai_DeviceBootloader_flash(
            self,
            progressCallback,
            pipeline,
            compress,
            applicationName,
            memory,
            checkChecksum,
        )
    }
    #[inline]
    pub unsafe fn flash1(
        &mut self,
        pipeline: *const dai_Pipeline,
        compress: bool,
        applicationName: std_string,
        memory: dai_DeviceBootloader_Memory,
        checkChecksum: bool,
    ) -> std_tuple {
        dai_DeviceBootloader_flash1(
            self,
            pipeline,
            compress,
            applicationName,
            memory,
            checkChecksum,
        )
    }
    #[inline]
    pub unsafe fn readApplicationInfo(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
    ) -> dai_DeviceBootloader_ApplicationInfo {
        dai_DeviceBootloader_readApplicationInfo(self, memory)
    }
    #[inline]
    pub unsafe fn flashDepthaiApplicationPackage(
        &mut self,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        package: std_vector,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple {
        dai_DeviceBootloader_flashDepthaiApplicationPackage(self, progressCallback, package, memory)
    }
    #[inline]
    pub unsafe fn flashDepthaiApplicationPackage1(
        &mut self,
        package: std_vector,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple {
        dai_DeviceBootloader_flashDepthaiApplicationPackage1(self, package, memory)
    }
    #[inline]
    pub unsafe fn flashClear(&mut self, memory: dai_DeviceBootloader_Memory) -> std_tuple {
        dai_DeviceBootloader_flashClear(self, memory)
    }
    #[inline]
    pub unsafe fn flashBootloader(
        &mut self,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        path: *const dai_Path,
    ) -> std_tuple {
        dai_DeviceBootloader_flashBootloader(self, progressCallback, path)
    }
    #[inline]
    pub unsafe fn flashBootloader1(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        path: *const dai_Path,
    ) -> std_tuple {
        dai_DeviceBootloader_flashBootloader1(self, memory, type_, progressCallback, path)
    }
    #[inline]
    pub unsafe fn flashUserBootloader(
        &mut self,
        progressCallback: __BindgenOpaqueArray<u64, 4usize>,
        path: *const dai_Path,
    ) -> std_tuple {
        dai_DeviceBootloader_flashUserBootloader(self, progressCallback, path)
    }
    #[inline]
    pub unsafe fn flashGpioModeBootHeader(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        gpioMode: ::std::os::raw::c_int,
    ) -> std_tuple {
        dai_DeviceBootloader_flashGpioModeBootHeader(self, memory, gpioMode)
    }
    #[inline]
    pub unsafe fn flashUsbRecoveryBootHeader(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
    ) -> std_tuple {
        dai_DeviceBootloader_flashUsbRecoveryBootHeader(self, memory)
    }
    #[inline]
    pub unsafe fn flashBootHeader(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        frequency: i32,
        location: i64,
        dummyCycles: i32,
        offset: i64,
    ) -> std_tuple {
        dai_DeviceBootloader_flashBootHeader(self, memory, frequency, location, dummyCycles, offset)
    }
    #[inline]
    pub unsafe fn flashFastBootHeader(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        frequency: i32,
        location: i64,
        dummyCycles: i32,
        offset: i64,
    ) -> std_tuple {
        dai_DeviceBootloader_flashFastBootHeader(
            self,
            memory,
            frequency,
            location,
            dummyCycles,
            offset,
        )
    }
    #[inline]
    pub unsafe fn flashCustom(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        data: *const std_vector,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_flashCustom(self, memory, offset, data, progressCb)
    }
    #[inline]
    pub unsafe fn flashCustom1(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        data: *const u8,
        size: usize,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_flashCustom1(self, memory, offset, data, size, progressCb)
    }
    #[inline]
    pub unsafe fn flashCustom2(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        filename: std_string,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_flashCustom2(self, memory, offset, filename, progressCb)
    }
    #[inline]
    pub unsafe fn readCustom(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        data: *mut std_vector,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_readCustom(self, memory, offset, size, data, progressCb)
    }
    #[inline]
    pub unsafe fn readCustom1(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        data: *mut u8,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_readCustom1(self, memory, offset, size, data, progressCb)
    }
    #[inline]
    pub unsafe fn readCustom2(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        filename: std_string,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_readCustom2(self, memory, offset, size, filename, progressCb)
    }
    #[inline]
    pub unsafe fn readCustom3(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        offset: usize,
        size: usize,
        progressCb: __BindgenOpaqueArray<u64, 4usize>,
    ) -> std_tuple {
        dai_DeviceBootloader_readCustom3(self, memory, offset, size, progressCb)
    }
    #[inline]
    pub unsafe fn readConfigData(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> nlohmann_json {
        dai_DeviceBootloader_readConfigData(self, memory, type_)
    }
    #[inline]
    pub unsafe fn flashConfigData(
        &mut self,
        configData: nlohmann_json,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple {
        dai_DeviceBootloader_flashConfigData(self, configData, memory, type_)
    }
    #[inline]
    pub unsafe fn flashConfigFile(
        &mut self,
        configPath: *const dai_Path,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple {
        dai_DeviceBootloader_flashConfigFile(self, configPath, memory, type_)
    }
    #[inline]
    pub unsafe fn flashConfigClear(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple {
        dai_DeviceBootloader_flashConfigClear(self, memory, type_)
    }
    #[inline]
    pub unsafe fn readConfig(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> dai_DeviceBootloader_Config {
        dai_DeviceBootloader_readConfig(self, memory, type_)
    }
    #[inline]
    pub unsafe fn flashConfig(
        &mut self,
        config: *const dai_DeviceBootloader_Config,
        memory: dai_DeviceBootloader_Memory,
        type_: dai_DeviceBootloader_Type,
    ) -> std_tuple {
        dai_DeviceBootloader_flashConfig(self, config, memory, type_)
    }
    #[inline]
    pub unsafe fn getMemoryInfo(
        &mut self,
        memory: dai_DeviceBootloader_Memory,
    ) -> dai_DeviceBootloader_MemoryInfo {
        dai_DeviceBootloader_getMemoryInfo(self, memory)
    }
    #[inline]
    pub unsafe fn isUserBootloaderSupported(&mut self) -> bool {
        dai_DeviceBootloader_isUserBootloaderSupported(self)
    }
    #[inline]
    pub unsafe fn isUserBootloader(&mut self) -> bool {
        dai_DeviceBootloader_isUserBootloader(self)
    }
    #[inline]
    pub unsafe fn bootMemory(&mut self, fw: *const std_vector) {
        dai_DeviceBootloader_bootMemory(self, fw)
    }
    #[inline]
    pub unsafe fn bootUsbRomBootloader(&mut self) {
        dai_DeviceBootloader_bootUsbRomBootloader(self)
    }
    #[inline]
    pub unsafe fn getVersion(&self) -> dai_DeviceBootloader_Version {
        dai_DeviceBootloader_getVersion(self)
    }
    #[inline]
    pub unsafe fn isEmbeddedVersion(&self) -> bool {
        dai_DeviceBootloader_isEmbeddedVersion(self)
    }
    #[inline]
    pub unsafe fn getType(&self) -> dai_DeviceBootloader_Type {
        dai_DeviceBootloader_getType(self)
    }
    #[inline]
    pub unsafe fn isAllowedFlashingBootloader(&self) -> bool {
        dai_DeviceBootloader_isAllowedFlashingBootloader(self)
    }
    #[inline]
    pub unsafe fn close(&mut self) {
        dai_DeviceBootloader_close(self)
    }
    #[inline]
    pub unsafe fn isClosed(&self) -> bool {
        dai_DeviceBootloader_isClosed(self)
    }
    #[inline]
    pub unsafe fn new(devInfo: *const dai_DeviceInfo) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBootloader_DeviceBootloader(__bindgen_tmp.as_mut_ptr(), devInfo);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        devInfo: *const dai_DeviceInfo,
        type_: dai_DeviceBootloader_Type,
        allowFlashingBootloader: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBootloader_DeviceBootloader1(
            __bindgen_tmp.as_mut_ptr(),
            devInfo,
            type_,
            allowFlashingBootloader,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        devInfo: *const dai_DeviceInfo,
        pathToBootloader: *const dai_Path,
        allowFlashingBootloader: bool,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBootloader_DeviceBootloader2(
            __bindgen_tmp.as_mut_ptr(),
            devInfo,
            pathToBootloader,
            allowFlashingBootloader,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(nameOrDeviceId: std_string, allowFlashingBootloader: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_DeviceBootloader_DeviceBootloader3(
            __bindgen_tmp.as_mut_ptr(),
            nameOrDeviceId,
            allowFlashingBootloader,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        dai_DeviceBootloader_DeviceBootloader_destructor(self)
    }
}
#[repr(C)]
pub struct dai_node_ThreadedHostNode {
    pub _base: dai_ThreadedNode,
}
pub const dai_node_ThreadedHostNode_NAME: &[u8; 9] = b"HostNode\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_ThreadedHostNode"]
        [::std::mem::size_of::<dai_node_ThreadedHostNode>() - 416usize];
    ["Alignment of dai_node_ThreadedHostNode"]
        [::std::mem::align_of::<dai_node_ThreadedHostNode>() - 8usize];
};
#[doc = " @brief Custom node for host node. When creating a custom host node, inherit from this class!\n @tparam T Node type (same as the class you are creating)\n\n Example:\n @code{.cpp}\n class MyNode : public CustomThreadedNode<MyNode> {\n    public:\n        void run() override {\n            // ...\n        }\n };\n @endcode"]
pub type dai_node_CustomThreadedNode = dai_NodeCRTP<dai_node_ThreadedHostNode>;
#[doc = " @brief AprilTag node."]
#[repr(C)]
pub struct dai_node_AprilTag {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_AprilTagProperties>,
    pub runOnHostVar: bool,
    #[doc = " Initial config to use when calculating spatial location data."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input AprilTagConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input message with depth data used to retrieve spatial information about detected object.\n Default queue is non-blocking with size 4."]
    pub inputImage: dai_Node_Input,
    #[doc = " Outputs AprilTags message that carries spatial location results."]
    pub out: dai_Node_Output,
    #[doc = " Outputs AprilTagConfig message that contains current configuration."]
    pub outConfig: dai_Node_Output,
    #[doc = " Passthrough message on which the calculation was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughInputImage: dai_Node_Output,
}
pub const dai_node_AprilTag_NAME: &[u8; 9] = b"AprilTag\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_AprilTag"][::std::mem::size_of::<dai_node_AprilTag>() - 1944usize];
    ["Alignment of dai_node_AprilTag"][::std::mem::align_of::<dai_node_AprilTag>() - 8usize];
    ["Offset of field: dai_node_AprilTag::runOnHostVar"]
        [::std::mem::offset_of!(dai_node_AprilTag, runOnHostVar) - 448usize];
    ["Offset of field: dai_node_AprilTag::initialConfig"]
        [::std::mem::offset_of!(dai_node_AprilTag, initialConfig) - 456usize];
    ["Offset of field: dai_node_AprilTag::inputConfig"]
        [::std::mem::offset_of!(dai_node_AprilTag, inputConfig) - 472usize];
    ["Offset of field: dai_node_AprilTag::inputImage"]
        [::std::mem::offset_of!(dai_node_AprilTag, inputImage) - 968usize];
    ["Offset of field: dai_node_AprilTag::out"]
        [::std::mem::offset_of!(dai_node_AprilTag, out) - 1464usize];
    ["Offset of field: dai_node_AprilTag::outConfig"]
        [::std::mem::offset_of!(dai_node_AprilTag, outConfig) - 1624usize];
    ["Offset of field: dai_node_AprilTag::passthroughInputImage"]
        [::std::mem::offset_of!(dai_node_AprilTag, passthroughInputImage) - 1784usize];
};
unsafe extern "C" {
    #[doc = " Specify whether or not wait until configuration message arrives to inputConfig Input.\n @param wait True to wait for configuration message, false otherwise."]
    #[link_name = "\u{1}_ZN3dai4node8AprilTag21setWaitForConfigInputEb"]
    pub fn dai_node_AprilTag_setWaitForConfigInput(this: *mut dai_node_AprilTag, wait: bool);
}
unsafe extern "C" {
    #[doc = " @brief Get whether or not wait until configuration message arrives to inputConfig Input."]
    #[link_name = "\u{1}_ZNK3dai4node8AprilTag21getWaitForConfigInputEv"]
    pub fn dai_node_AprilTag_getWaitForConfigInput(this: *const dai_node_AprilTag) -> bool;
}
unsafe extern "C" {
    #[doc = " Set number of threads to use for AprilTag detection.\n @param numThreads Number of threads to use."]
    #[link_name = "\u{1}_ZN3dai4node8AprilTag13setNumThreadsEi"]
    pub fn dai_node_AprilTag_setNumThreads(
        this: *mut dai_node_AprilTag,
        numThreads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Get number of threads to use for AprilTag detection.\n @return Number of threads to use."]
    #[link_name = "\u{1}_ZNK3dai4node8AprilTag13getNumThreadsEv"]
    pub fn dai_node_AprilTag_getNumThreads(this: *const dai_node_AprilTag)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Specify whether to run on host or device\n By default, the node will run on device."]
    #[link_name = "\u{1}_ZN3dai4node8AprilTag12setRunOnHostEb"]
    pub fn dai_node_AprilTag_setRunOnHost(this: *mut dai_node_AprilTag, runOnHost: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node8AprilTagC1ESt10unique_ptrINS_18AprilTagPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_AprilTag_AprilTag(this: *mut dai_node_AprilTag, props: std_unique_ptr);
}
impl dai_node_AprilTag {
    #[inline]
    pub unsafe fn setWaitForConfigInput(&mut self, wait: bool) {
        dai_node_AprilTag_setWaitForConfigInput(self, wait)
    }
    #[inline]
    pub unsafe fn getWaitForConfigInput(&self) -> bool {
        dai_node_AprilTag_getWaitForConfigInput(self)
    }
    #[inline]
    pub unsafe fn setNumThreads(&mut self, numThreads: ::std::os::raw::c_int) {
        dai_node_AprilTag_setNumThreads(self, numThreads)
    }
    #[inline]
    pub unsafe fn getNumThreads(&self) -> ::std::os::raw::c_int {
        dai_node_AprilTag_getNumThreads(self)
    }
    #[inline]
    pub unsafe fn setRunOnHost(&mut self, runOnHost: bool) {
        dai_node_AprilTag_setRunOnHost(self, runOnHost)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_AprilTag_AprilTag(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node8AprilTag13getPropertiesEv"]
    pub fn dai_node_AprilTag_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 16usize>;
}
unsafe extern "C" {
    #[doc = " Check if the node is set to run on host"]
    #[link_name = "\u{1}_ZNK3dai4node8AprilTag9runOnHostEv"]
    pub fn dai_node_AprilTag_runOnHost(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node8AprilTag3runEv"]
    pub fn dai_node_AprilTag_run(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node8AprilTag13buildInternalEv"]
    pub fn dai_node_AprilTag_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct dai_node_BenchmarkIn {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_BenchmarkInProperties>,
    #[doc = " Receive messages as fast as possible"]
    pub input: dai_Node_Input,
    #[doc = " Passthrough for input messages (so the node can be placed between other nodes)"]
    pub passthrough: dai_Node_Output,
    #[doc = " Send a benchmark report when the set number of messages are received"]
    pub report: dai_Node_Output,
    pub runOnHostVar: bool,
}
pub const dai_node_BenchmarkIn_NAME: &[u8; 12] = b"BenchmarkIn\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_BenchmarkIn"][::std::mem::size_of::<dai_node_BenchmarkIn>() - 1272usize];
    ["Alignment of dai_node_BenchmarkIn"][::std::mem::align_of::<dai_node_BenchmarkIn>() - 8usize];
    ["Offset of field: dai_node_BenchmarkIn::input"]
        [::std::mem::offset_of!(dai_node_BenchmarkIn, input) - 448usize];
    ["Offset of field: dai_node_BenchmarkIn::passthrough"]
        [::std::mem::offset_of!(dai_node_BenchmarkIn, passthrough) - 944usize];
    ["Offset of field: dai_node_BenchmarkIn::report"]
        [::std::mem::offset_of!(dai_node_BenchmarkIn, report) - 1104usize];
    ["Offset of field: dai_node_BenchmarkIn::runOnHostVar"]
        [::std::mem::offset_of!(dai_node_BenchmarkIn, runOnHostVar) - 1264usize];
};
unsafe extern "C" {
    #[doc = " Specify how many messages to measure for each report"]
    #[link_name = "\u{1}_ZN3dai4node11BenchmarkIn24sendReportEveryNMessagesEj"]
    pub fn dai_node_BenchmarkIn_sendReportEveryNMessages(this: *mut dai_node_BenchmarkIn, n: u32);
}
unsafe extern "C" {
    #[doc = " Specify whether to run on host or device\n By default, the node will run on device."]
    #[link_name = "\u{1}_ZN3dai4node11BenchmarkIn12setRunOnHostEb"]
    pub fn dai_node_BenchmarkIn_setRunOnHost(this: *mut dai_node_BenchmarkIn, runOnHost: bool);
}
unsafe extern "C" {
    #[doc = " Log the reports as warnings"]
    #[link_name = "\u{1}_ZN3dai4node11BenchmarkIn20logReportsAsWarningsEb"]
    pub fn dai_node_BenchmarkIn_logReportsAsWarnings(
        this: *mut dai_node_BenchmarkIn,
        logReportsAsWarnings: bool,
    );
}
unsafe extern "C" {
    #[doc = " Attach latencies to the report"]
    #[link_name = "\u{1}_ZN3dai4node11BenchmarkIn26measureIndividualLatenciesEb"]
    pub fn dai_node_BenchmarkIn_measureIndividualLatencies(
        this: *mut dai_node_BenchmarkIn,
        attachLatencies: bool,
    );
}
impl dai_node_BenchmarkIn {
    #[inline]
    pub unsafe fn sendReportEveryNMessages(&mut self, n: u32) {
        dai_node_BenchmarkIn_sendReportEveryNMessages(self, n)
    }
    #[inline]
    pub unsafe fn setRunOnHost(&mut self, runOnHost: bool) {
        dai_node_BenchmarkIn_setRunOnHost(self, runOnHost)
    }
    #[inline]
    pub unsafe fn logReportsAsWarnings(&mut self, logReportsAsWarnings: bool) {
        dai_node_BenchmarkIn_logReportsAsWarnings(self, logReportsAsWarnings)
    }
    #[inline]
    pub unsafe fn measureIndividualLatencies(&mut self, attachLatencies: bool) {
        dai_node_BenchmarkIn_measureIndividualLatencies(self, attachLatencies)
    }
}
unsafe extern "C" {
    #[doc = " Check if the node is set to run on host"]
    #[link_name = "\u{1}_ZNK3dai4node11BenchmarkIn9runOnHostEv"]
    pub fn dai_node_BenchmarkIn_runOnHost(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11BenchmarkIn3runEv"]
    pub fn dai_node_BenchmarkIn_run(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct dai_node_BenchmarkOut {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_BenchmarkOutProperties>,
    #[doc = " Send messages out as fast as possible"]
    pub out: dai_Node_Output,
    #[doc = " Message that will be sent repeatedly"]
    pub input: dai_Node_Input,
    pub runOnHostVar: bool,
}
pub const dai_node_BenchmarkOut_NAME: &[u8; 13] = b"BenchmarkOut\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_BenchmarkOut"][::std::mem::size_of::<dai_node_BenchmarkOut>() - 1112usize];
    ["Alignment of dai_node_BenchmarkOut"]
        [::std::mem::align_of::<dai_node_BenchmarkOut>() - 8usize];
    ["Offset of field: dai_node_BenchmarkOut::out"]
        [::std::mem::offset_of!(dai_node_BenchmarkOut, out) - 448usize];
    ["Offset of field: dai_node_BenchmarkOut::input"]
        [::std::mem::offset_of!(dai_node_BenchmarkOut, input) - 608usize];
    ["Offset of field: dai_node_BenchmarkOut::runOnHostVar"]
        [::std::mem::offset_of!(dai_node_BenchmarkOut, runOnHostVar) - 1104usize];
};
unsafe extern "C" {
    #[doc = " Sets number of messages to send, by default send messages indefinitely\n @param num number of messages to send"]
    #[link_name = "\u{1}_ZN3dai4node12BenchmarkOut20setNumMessagesToSendEi"]
    pub fn dai_node_BenchmarkOut_setNumMessagesToSend(
        this: *mut dai_node_BenchmarkOut,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set FPS at which the node is sending out messages. 0 means as fast as possible"]
    #[link_name = "\u{1}_ZN3dai4node12BenchmarkOut6setFpsEf"]
    pub fn dai_node_BenchmarkOut_setFps(this: *mut dai_node_BenchmarkOut, fps: f32);
}
unsafe extern "C" {
    #[doc = " Specify whether to run on host or device\n By default, the node will run on device."]
    #[link_name = "\u{1}_ZN3dai4node12BenchmarkOut12setRunOnHostEb"]
    pub fn dai_node_BenchmarkOut_setRunOnHost(this: *mut dai_node_BenchmarkOut, runOnHost: bool);
}
impl dai_node_BenchmarkOut {
    #[inline]
    pub unsafe fn setNumMessagesToSend(&mut self, num: ::std::os::raw::c_int) {
        dai_node_BenchmarkOut_setNumMessagesToSend(self, num)
    }
    #[inline]
    pub unsafe fn setFps(&mut self, fps: f32) {
        dai_node_BenchmarkOut_setFps(self, fps)
    }
    #[inline]
    pub unsafe fn setRunOnHost(&mut self, runOnHost: bool) {
        dai_node_BenchmarkOut_setRunOnHost(self, runOnHost)
    }
}
unsafe extern "C" {
    #[doc = " Check if the node is set to run on host"]
    #[link_name = "\u{1}_ZNK3dai4node12BenchmarkOut9runOnHostEv"]
    pub fn dai_node_BenchmarkOut_runOnHost(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node12BenchmarkOut3runEv"]
    pub fn dai_node_BenchmarkOut_run(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct dai_node_Camera {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_CameraProperties>,
    pub _base_1: dai_SourceNode,
    #[doc = " Initial control options to apply to sensor"]
    pub initialControl: dai_CameraControl,
    #[doc = " Input for CameraControl message, which can modify camera parameters in runtime"]
    pub inputControl: dai_Node_Input,
    #[doc = " Input for mocking 'isp' functionality on RVC2.\n Default queue is blocking with size 8"]
    pub mockIsp: dai_Node_Input,
    #[doc = " Outputs ImgFrame message that carries RAW10-packed (MIPI CSI-2 format) frame data.\n\n Captured directly from the camera sensor, and the source for the 'isp' output."]
    pub raw: dai_Node_Output,
    pub pimpl: spimpl_impl_ptr,
    pub dynamicOutputs: dai_Node_OutputMap,
    pub isBuilt: bool,
    pub cameraFeatures: dai_CameraFeatures,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_node_Camera_Impl {
    _unused: [u8; 0],
}
pub const dai_node_Camera_NAME: &[u8; 7] = b"Camera\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_Camera"][::std::mem::size_of::<dai_node_Camera>() - 2232usize];
    ["Alignment of dai_node_Camera"][::std::mem::align_of::<dai_node_Camera>() - 8usize];
    ["Offset of field: dai_node_Camera::initialControl"]
        [::std::mem::offset_of!(dai_node_Camera, initialControl) - 456usize];
    ["Offset of field: dai_node_Camera::inputControl"]
        [::std::mem::offset_of!(dai_node_Camera, inputControl) - 648usize];
    ["Offset of field: dai_node_Camera::mockIsp"]
        [::std::mem::offset_of!(dai_node_Camera, mockIsp) - 1144usize];
    ["Offset of field: dai_node_Camera::raw"]
        [::std::mem::offset_of!(dai_node_Camera, raw) - 1640usize];
    ["Offset of field: dai_node_Camera::pimpl"]
        [::std::mem::offset_of!(dai_node_Camera, pimpl) - 1800usize];
    ["Offset of field: dai_node_Camera::dynamicOutputs"]
        [::std::mem::offset_of!(dai_node_Camera, dynamicOutputs) - 1824usize];
    ["Offset of field: dai_node_Camera::isBuilt"]
        [::std::mem::offset_of!(dai_node_Camera, isBuilt) - 2008usize];
    ["Offset of field: dai_node_Camera::cameraFeatures"]
        [::std::mem::offset_of!(dai_node_Camera, cameraFeatures) - 2016usize];
};
unsafe extern "C" {
    #[doc = " Get video output with specified size."]
    #[link_name = "\u{1}_ZN3dai4node6Camera13requestOutputESt4pairIjjESt8optionalINS_8ImgFrame4TypeEENS_13ImgResizeModeES4_IfES4_IbE"]
    pub fn dai_node_Camera_requestOutput(
        this: *mut dai_node_Camera,
        size: std_pair<u32, u32>,
        type_: std_optional,
        resizeMode: dai_ImgResizeMode,
        fps: std_optional,
        enableUndistortion: std_optional,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[doc = " Get a high resolution output with full FOV on the sensor.\n By default the function will not use the resolutions higher than 5000x4000, as those often need a lot of resources,\n making them hard to use in combination with other nodes.\n @param type Type of the output (NV12, BGR, ...) - by default it's auto-selected for best performance\n @param fps FPS of the output - by default it's auto-selected to highest possible that a sensor config support or 30, whichever is lower\n @param useHighestResolution If true, the function will use the highest resolution available on the sensor, even if it's higher than 5000x4000"]
    #[link_name = "\u{1}_ZN3dai4node6Camera27requestFullResolutionOutputESt8optionalINS_8ImgFrame4TypeEES2_IfEb"]
    pub fn dai_node_Camera_requestFullResolutionOutput(
        this: *mut dai_node_Camera,
        type_: std_optional,
        fps: std_optional,
        useHighestResolution: bool,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[doc = " Build with a specific board socket\n @param boardSocket Board socket to use\n @param sensorResolution Sensor resolution to use - by default it's auto-detected from the requested outputs\n @param sensorFps Sensor FPS to use - by default it's auto-detected from the requested outputs (maximum is used)"]
    #[link_name = "\u{1}_ZN3dai4node6Camera5buildENS_17CameraBoardSocketESt8optionalISt4pairIjjEES3_IfE"]
    pub fn dai_node_Camera_build(
        this: *mut dai_node_Camera,
        boardSocket: dai_CameraBoardSocket,
        sensorResolution: std_optional,
        sensorFps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Get max width of the camera (can only be called after build)"]
    #[link_name = "\u{1}_ZNK3dai4node6Camera11getMaxWidthEv"]
    pub fn dai_node_Camera_getMaxWidth(this: *const dai_node_Camera) -> u32;
}
unsafe extern "C" {
    #[doc = " Get max height of the camera (can only be called after build)"]
    #[link_name = "\u{1}_ZNK3dai4node6Camera12getMaxHeightEv"]
    pub fn dai_node_Camera_getMaxHeight(this: *const dai_node_Camera) -> u32;
}
unsafe extern "C" {
    #[doc = " Retrieves which board socket to use\n @returns Board socket to use"]
    #[link_name = "\u{1}_ZNK3dai4node6Camera14getBoardSocketEv"]
    pub fn dai_node_Camera_getBoardSocket(this: *const dai_node_Camera) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node6Camera18getMaxRequestedFpsEv"]
    pub fn dai_node_Camera_getMaxRequestedFps(this: *const dai_node_Camera) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node6Camera20getMaxRequestedWidthEv"]
    pub fn dai_node_Camera_getMaxRequestedWidth(this: *const dai_node_Camera) -> u32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node6Camera21getMaxRequestedHeightEv"]
    pub fn dai_node_Camera_getMaxRequestedHeight(this: *const dai_node_Camera) -> u32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node6CameraC1Ev"]
    pub fn dai_node_Camera_Camera(this: *mut dai_node_Camera);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node6CameraC1ERSt10shared_ptrINS_6DeviceEE"]
    pub fn dai_node_Camera_Camera1(this: *mut dai_node_Camera, defaultDevice: *mut std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node6CameraC1ESt10unique_ptrINS_16CameraPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_Camera_Camera2(this: *mut dai_node_Camera, props: std_unique_ptr);
}
impl dai_node_Camera {
    #[inline]
    pub unsafe fn requestOutput(
        &mut self,
        size: std_pair<u32, u32>,
        type_: std_optional,
        resizeMode: dai_ImgResizeMode,
        fps: std_optional,
        enableUndistortion: std_optional,
    ) -> *mut dai_Node_Output {
        dai_node_Camera_requestOutput(self, size, type_, resizeMode, fps, enableUndistortion)
    }
    #[inline]
    pub unsafe fn requestFullResolutionOutput(
        &mut self,
        type_: std_optional,
        fps: std_optional,
        useHighestResolution: bool,
    ) -> *mut dai_Node_Output {
        dai_node_Camera_requestFullResolutionOutput(self, type_, fps, useHighestResolution)
    }
    #[inline]
    pub unsafe fn build(
        &mut self,
        boardSocket: dai_CameraBoardSocket,
        sensorResolution: std_optional,
        sensorFps: std_optional,
    ) -> std_shared_ptr {
        dai_node_Camera_build(self, boardSocket, sensorResolution, sensorFps)
    }
    #[inline]
    pub unsafe fn getMaxWidth(&self) -> u32 {
        dai_node_Camera_getMaxWidth(self)
    }
    #[inline]
    pub unsafe fn getMaxHeight(&self) -> u32 {
        dai_node_Camera_getMaxHeight(self)
    }
    #[inline]
    pub unsafe fn getBoardSocket(&self) -> dai_CameraBoardSocket {
        dai_node_Camera_getBoardSocket(self)
    }
    #[inline]
    pub unsafe fn getMaxRequestedFps(&self) -> f32 {
        dai_node_Camera_getMaxRequestedFps(self)
    }
    #[inline]
    pub unsafe fn getMaxRequestedWidth(&self) -> u32 {
        dai_node_Camera_getMaxRequestedWidth(self)
    }
    #[inline]
    pub unsafe fn getMaxRequestedHeight(&self) -> u32 {
        dai_node_Camera_getMaxRequestedHeight(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_Camera_Camera(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(defaultDevice: *mut std_shared_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_Camera_Camera1(__bindgen_tmp.as_mut_ptr(), defaultDevice);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_Camera_Camera2(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[doc = " Request output with advanced controls. Mainly to be used by custom node writers."]
    #[link_name = "\u{1}_ZN3dai4node6Camera13requestOutputERKNS_10CapabilityEb"]
    pub fn dai_node_Camera_requestOutput1(
        this: *mut ::std::os::raw::c_void,
        capability: *const dai_Capability,
        onHost: bool,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node6Camera11buildStage1Ev"]
    pub fn dai_node_Camera_buildStage1(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node6Camera13getPropertiesEv"]
    pub fn dai_node_Camera_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 40usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node6Camera12isSourceNodeEv"]
    pub fn dai_node_Camera_isSourceNode(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_NK3dai4node6Camera19getNodeRecordParamsEv"]
    pub fn dai_node_Camera_getNodeRecordParams(
        this: *mut ::std::os::raw::c_void,
    ) -> dai_NodeRecordParams;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node6Camera14getReplayInputEv"]
    pub fn dai_node_Camera_getReplayInput(this: *mut ::std::os::raw::c_void)
    -> *mut dai_Node_Input;
}
#[doc = " @brief ColorCamera node. For use with color sensors."]
#[repr(C)]
pub struct dai_node_ColorCamera {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ColorCameraProperties>,
    pub _base_1: dai_SourceNode,
    #[doc = " Initial control options to apply to sensor"]
    pub initialControl: dai_CameraControl,
    #[doc = " Input for CameraControl message, which can modify camera parameters in runtime"]
    pub inputControl: dai_Node_Input,
    #[doc = " Input for mocking 'isp' functionality.\n Default queue is blocking with size 8"]
    pub mockIsp: dai_Node_Input,
    #[doc = " Outputs ImgFrame message that carries NV12 encoded (YUV420, UV plane interleaved) frame data.\n\n Suitable for use with VideoEncoder node"]
    pub video: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries BGR/RGB planar/interleaved encoded frame data.\n\n Suitable for use with NeuralNetwork node"]
    pub preview: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries NV12 encoded (YUV420, UV plane interleaved) frame data.\n\n The message is sent only when a CameraControl message arrives to inputControl with captureStill command set."]
    pub still: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries YUV420 planar (I420/IYUV) frame data.\n\n Generated by the ISP engine, and the source for the 'video', 'preview' and 'still' outputs"]
    pub isp: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries RAW10-packed (MIPI CSI-2 format) frame data.\n\n Captured directly from the camera sensor, and the source for the 'isp' output."]
    pub raw: dai_Node_Output,
    #[doc = " Outputs metadata-only ImgFrame message as an early indicator of an incoming frame.\n\n It's sent on the MIPI SoF (start-of-frame) event, just after the exposure of the current frame\n has finished and before the exposure for next frame starts.\n Could be used to synchronize various processes with camera capture.\n Fields populated: camera id, sequence number, timestamp"]
    pub frameEvent: dai_Node_Output,
}
pub const dai_node_ColorCamera_NAME: &[u8; 12] = b"ColorCamera\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_ColorCamera"][::std::mem::size_of::<dai_node_ColorCamera>() - 2600usize];
    ["Alignment of dai_node_ColorCamera"][::std::mem::align_of::<dai_node_ColorCamera>() - 8usize];
    ["Offset of field: dai_node_ColorCamera::initialControl"]
        [::std::mem::offset_of!(dai_node_ColorCamera, initialControl) - 456usize];
    ["Offset of field: dai_node_ColorCamera::inputControl"]
        [::std::mem::offset_of!(dai_node_ColorCamera, inputControl) - 648usize];
    ["Offset of field: dai_node_ColorCamera::mockIsp"]
        [::std::mem::offset_of!(dai_node_ColorCamera, mockIsp) - 1144usize];
    ["Offset of field: dai_node_ColorCamera::video"]
        [::std::mem::offset_of!(dai_node_ColorCamera, video) - 1640usize];
    ["Offset of field: dai_node_ColorCamera::preview"]
        [::std::mem::offset_of!(dai_node_ColorCamera, preview) - 1800usize];
    ["Offset of field: dai_node_ColorCamera::still"]
        [::std::mem::offset_of!(dai_node_ColorCamera, still) - 1960usize];
    ["Offset of field: dai_node_ColorCamera::isp"]
        [::std::mem::offset_of!(dai_node_ColorCamera, isp) - 2120usize];
    ["Offset of field: dai_node_ColorCamera::raw"]
        [::std::mem::offset_of!(dai_node_ColorCamera, raw) - 2280usize];
    ["Offset of field: dai_node_ColorCamera::frameEvent"]
        [::std::mem::offset_of!(dai_node_ColorCamera, frameEvent) - 2440usize];
};
unsafe extern "C" {
    #[doc = " Computes the scaled size given numerator and denominator"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera13getScaledSizeEiii"]
    pub fn dai_node_ColorCamera_getScaledSize(
        this: *const dai_node_ColorCamera,
        input: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
        denom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Specify which board socket to use\n @param boardSocket Board socket to use"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera14setBoardSocketENS_17CameraBoardSocketE"]
    pub fn dai_node_ColorCamera_setBoardSocket(
        this: *mut dai_node_ColorCamera,
        boardSocket: dai_CameraBoardSocket,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves which board socket to use\n @returns Board socket to use"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getBoardSocketEv"]
    pub fn dai_node_ColorCamera_getBoardSocket(
        this: *const dai_node_ColorCamera,
    ) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[doc = " Specify which camera to use by name\n @param name Name of the camera to use"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera9setCameraENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_ColorCamera_setCamera(this: *mut dai_node_ColorCamera, name: std_string);
}
unsafe extern "C" {
    #[doc = " Retrieves which camera to use by name\n @returns Name of the camera to use"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera9getCameraB5cxx11Ev"]
    pub fn dai_node_ColorCamera_getCamera(this: *const dai_node_ColorCamera) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set which color camera to use"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera8setCamIdEl"]
    pub fn dai_node_ColorCamera_setCamId(this: *mut dai_node_ColorCamera, id: i64);
}
unsafe extern "C" {
    #[doc = " Get which color camera to use"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera8getCamIdEv"]
    pub fn dai_node_ColorCamera_getCamId(this: *const dai_node_ColorCamera) -> i64;
}
unsafe extern "C" {
    #[doc = " Set camera image orientation"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera19setImageOrientationENS_22CameraImageOrientationE"]
    pub fn dai_node_ColorCamera_setImageOrientation(
        this: *mut dai_node_ColorCamera,
        imageOrientation: dai_CameraImageOrientation,
    );
}
unsafe extern "C" {
    #[doc = " Get camera image orientation"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera19getImageOrientationEv"]
    pub fn dai_node_ColorCamera_getImageOrientation(
        this: *const dai_node_ColorCamera,
    ) -> dai_CameraImageOrientation;
}
unsafe extern "C" {
    #[doc = " Set color order of preview output images. RGB or BGR"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera13setColorOrderENS_21ColorCameraProperties10ColorOrderE"]
    pub fn dai_node_ColorCamera_setColorOrder(
        this: *mut dai_node_ColorCamera,
        colorOrder: dai_ColorCameraProperties_ColorOrder,
    );
}
unsafe extern "C" {
    #[doc = " Get color order of preview output frames. RGB or BGR"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera13getColorOrderEv"]
    pub fn dai_node_ColorCamera_getColorOrder(
        this: *const dai_node_ColorCamera,
    ) -> dai_ColorCameraProperties_ColorOrder;
}
unsafe extern "C" {
    #[doc = " Set planar or interleaved data of preview output frames"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera14setInterleavedEb"]
    pub fn dai_node_ColorCamera_setInterleaved(this: *mut dai_node_ColorCamera, interleaved: bool);
}
unsafe extern "C" {
    #[doc = " Get planar or interleaved data of preview output frames"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getInterleavedEv"]
    pub fn dai_node_ColorCamera_getInterleaved(this: *const dai_node_ColorCamera) -> bool;
}
unsafe extern "C" {
    #[doc = " Set type of preview output images."]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera14setPreviewTypeENS_8ImgFrame4TypeE"]
    pub fn dai_node_ColorCamera_setPreviewType(
        this: *mut dai_node_ColorCamera,
        type_: dai_ImgFrame_Type,
    );
}
unsafe extern "C" {
    #[doc = " Get the preview type"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getPreviewTypeEv"]
    pub fn dai_node_ColorCamera_getPreviewType(
        this: *const dai_node_ColorCamera,
    ) -> dai_ImgFrame_Type;
}
unsafe extern "C" {
    #[doc = " Set fp16 (0..255) data type of preview output frames"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera7setFp16Eb"]
    pub fn dai_node_ColorCamera_setFp16(this: *mut dai_node_ColorCamera, fp16: bool);
}
unsafe extern "C" {
    #[doc = " Get fp16 (0..255) data of preview output frames"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera7getFp16Ev"]
    pub fn dai_node_ColorCamera_getFp16(this: *const dai_node_ColorCamera) -> bool;
}
unsafe extern "C" {
    #[doc = " Set preview output size"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera14setPreviewSizeEii"]
    pub fn dai_node_ColorCamera_setPreviewSize(
        this: *mut dai_node_ColorCamera,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set preview output size, as a tuple <width, height>"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera14setPreviewSizeESt5tupleIJiiEE"]
    pub fn dai_node_ColorCamera_setPreviewSize1(this: *mut dai_node_ColorCamera, size: std_tuple);
}
unsafe extern "C" {
    #[doc = " Set number of frames in preview pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera23setPreviewNumFramesPoolEi"]
    pub fn dai_node_ColorCamera_setPreviewNumFramesPool(
        this: *mut dai_node_ColorCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set video output size"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera12setVideoSizeEii"]
    pub fn dai_node_ColorCamera_setVideoSize(
        this: *mut dai_node_ColorCamera,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set video output size, as a tuple <width, height>"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera12setVideoSizeESt5tupleIJiiEE"]
    pub fn dai_node_ColorCamera_setVideoSize1(this: *mut dai_node_ColorCamera, size: std_tuple);
}
unsafe extern "C" {
    #[doc = " Set number of frames in preview pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera21setVideoNumFramesPoolEi"]
    pub fn dai_node_ColorCamera_setVideoNumFramesPool(
        this: *mut dai_node_ColorCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set still output size"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera12setStillSizeEii"]
    pub fn dai_node_ColorCamera_setStillSize(
        this: *mut dai_node_ColorCamera,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set still output size, as a tuple <width, height>"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera12setStillSizeESt5tupleIJiiEE"]
    pub fn dai_node_ColorCamera_setStillSize1(this: *mut dai_node_ColorCamera, size: std_tuple);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera14setMockIspSizeEii"]
    pub fn dai_node_ColorCamera_setMockIspSize(
        this: *mut dai_node_ColorCamera,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set number of frames in preview pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera21setStillNumFramesPoolEi"]
    pub fn dai_node_ColorCamera_setStillNumFramesPool(
        this: *mut dai_node_ColorCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set sensor resolution"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera13setResolutionENS_21ColorCameraProperties16SensorResolutionE"]
    pub fn dai_node_ColorCamera_setResolution(
        this: *mut dai_node_ColorCamera,
        resolution: dai_ColorCameraProperties_SensorResolution,
    );
}
unsafe extern "C" {
    #[doc = " Get sensor resolution"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera13getResolutionEv"]
    pub fn dai_node_ColorCamera_getResolution(
        this: *const dai_node_ColorCamera,
    ) -> dai_ColorCameraProperties_SensorResolution;
}
unsafe extern "C" {
    #[doc = " Set number of frames in raw pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera19setRawNumFramesPoolEi"]
    pub fn dai_node_ColorCamera_setRawNumFramesPool(
        this: *mut dai_node_ColorCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set number of frames in isp pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera19setIspNumFramesPoolEi"]
    pub fn dai_node_ColorCamera_setIspNumFramesPool(
        this: *mut dai_node_ColorCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set number of frames in all pools"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera16setNumFramesPoolEiiiii"]
    pub fn dai_node_ColorCamera_setNumFramesPool(
        this: *mut dai_node_ColorCamera,
        raw: ::std::os::raw::c_int,
        isp: ::std::os::raw::c_int,
        preview: ::std::os::raw::c_int,
        video: ::std::os::raw::c_int,
        still: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set 'isp' output scaling (numerator/denominator), preserving the aspect ratio.\n The fraction numerator/denominator is simplified first to a irreducible form,\n then a set of hardware scaler constraints applies:\n max numerator = 16, max denominator = 63"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera11setIspScaleEii"]
    pub fn dai_node_ColorCamera_setIspScale(
        this: *mut dai_node_ColorCamera,
        numerator: ::std::os::raw::c_int,
        denominator: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set 'isp' output scaling, as a tuple <numerator, denominator>"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera11setIspScaleESt5tupleIJiiEE"]
    pub fn dai_node_ColorCamera_setIspScale1(this: *mut dai_node_ColorCamera, scale: std_tuple);
}
unsafe extern "C" {
    #[doc = " Set 'isp' output scaling, per each direction. If the horizontal scaling factor\n (horizNum/horizDen) is different than the vertical scaling factor\n (vertNum/vertDen), a distorted (stretched or squished) image is generated"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera11setIspScaleEiiii"]
    pub fn dai_node_ColorCamera_setIspScale2(
        this: *mut dai_node_ColorCamera,
        horizNum: ::std::os::raw::c_int,
        horizDenom: ::std::os::raw::c_int,
        vertNum: ::std::os::raw::c_int,
        vertDenom: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set 'isp' output scaling, per each direction, as <numerator, denominator> tuples"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera11setIspScaleESt5tupleIJiiEES3_"]
    pub fn dai_node_ColorCamera_setIspScale3(
        this: *mut dai_node_ColorCamera,
        horizScale: std_tuple,
        vertScale: std_tuple,
    );
}
unsafe extern "C" {
    #[doc = " Set rate at which camera should produce frames\n @param fps Rate in frames per second"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera6setFpsEf"]
    pub fn dai_node_ColorCamera_setFps(this: *mut dai_node_ColorCamera, fps: f32);
}
unsafe extern "C" {
    #[doc = " Isp 3A rate (auto focus, auto exposure, auto white balance, camera controls etc.).\n Default (0) matches the camera FPS, meaning that 3A is running on each frame.\n Reducing the rate of 3A reduces the CPU usage on CSS, but also increases the convergence rate of 3A.\n Note that camera controls will be processed at this rate. E.g. if camera is running at 30 fps, and camera control is sent at every frame,\n but 3A fps is set to 15, the camera control messages will be processed at 15 fps rate, which will lead to queueing.\n"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera11setIsp3aFpsEi"]
    pub fn dai_node_ColorCamera_setIsp3aFps(
        this: *mut dai_node_ColorCamera,
        isp3aFps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera19setFrameEventFilterERKSt6vectorINS_10FrameEventESaIS3_EE"]
    pub fn dai_node_ColorCamera_setFrameEventFilter(
        this: *mut dai_node_ColorCamera,
        events: *const std_vector,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera19getFrameEventFilterEv"]
    pub fn dai_node_ColorCamera_getFrameEventFilter(
        this: *const dai_node_ColorCamera,
    ) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get rate at which camera should produce frames\n @returns Rate in frames per second"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera6getFpsEv"]
    pub fn dai_node_ColorCamera_getFps(this: *const dai_node_ColorCamera) -> f32;
}
unsafe extern "C" {
    #[doc = " Get preview size as tuple"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getPreviewSizeEv"]
    pub fn dai_node_ColorCamera_getPreviewSize(this: *const dai_node_ColorCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get preview width"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera15getPreviewWidthEv"]
    pub fn dai_node_ColorCamera_getPreviewWidth(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get preview height"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera16getPreviewHeightEv"]
    pub fn dai_node_ColorCamera_getPreviewHeight(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get video size as tuple"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera12getVideoSizeEv"]
    pub fn dai_node_ColorCamera_getVideoSize(this: *const dai_node_ColorCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get video width"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera13getVideoWidthEv"]
    pub fn dai_node_ColorCamera_getVideoWidth(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get video height"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getVideoHeightEv"]
    pub fn dai_node_ColorCamera_getVideoHeight(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get still size as tuple"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera12getStillSizeEv"]
    pub fn dai_node_ColorCamera_getStillSize(this: *const dai_node_ColorCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get still width"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera13getStillWidthEv"]
    pub fn dai_node_ColorCamera_getStillWidth(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get still height"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getStillHeightEv"]
    pub fn dai_node_ColorCamera_getStillHeight(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get sensor resolution as size"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera17getResolutionSizeEv"]
    pub fn dai_node_ColorCamera_getResolutionSize(this: *const dai_node_ColorCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get sensor resolution width"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera18getResolutionWidthEv"]
    pub fn dai_node_ColorCamera_getResolutionWidth(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get sensor resolution height"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera19getResolutionHeightEv"]
    pub fn dai_node_ColorCamera_getResolutionHeight(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get 'isp' output resolution as size, after scaling"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera10getIspSizeEv"]
    pub fn dai_node_ColorCamera_getIspSize(this: *const dai_node_ColorCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get 'isp' output width"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera11getIspWidthEv"]
    pub fn dai_node_ColorCamera_getIspWidth(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get 'isp' output height"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera12getIspHeightEv"]
    pub fn dai_node_ColorCamera_getIspHeight(
        this: *const dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Specify sensor center crop.\n Resolution size / video size"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera16sensorCenterCropEv"]
    pub fn dai_node_ColorCamera_sensorCenterCrop(this: *mut dai_node_ColorCamera);
}
unsafe extern "C" {
    #[doc = " Specifies the cropping that happens when converting ISP to video output. By default, video will be center cropped\n from the ISP output. Note that this doesn't actually do on-sensor cropping (and MIPI-stream only that region), but\n it does postprocessing on the ISP (on RVC).\n @param x Top left X coordinate\n @param y Top left Y coordinate"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera13setSensorCropEff"]
    pub fn dai_node_ColorCamera_setSensorCrop(this: *mut dai_node_ColorCamera, x: f32, y: f32);
}
unsafe extern "C" {
    #[doc = " @returns Sensor top left crop coordinates"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera13getSensorCropEv"]
    pub fn dai_node_ColorCamera_getSensorCrop(this: *const dai_node_ColorCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get sensor top left x crop coordinate"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getSensorCropXEv"]
    pub fn dai_node_ColorCamera_getSensorCropX(this: *const dai_node_ColorCamera) -> f32;
}
unsafe extern "C" {
    #[doc = " Get sensor top left y crop coordinate"]
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera14getSensorCropYEv"]
    pub fn dai_node_ColorCamera_getSensorCropY(this: *const dai_node_ColorCamera) -> f32;
}
unsafe extern "C" {
    #[doc = " Specifies whether preview output should preserve aspect ratio,\n after downscaling from video size or not.\n\n @param keep If true, a larger crop region will be considered to still be able to\n create the final image in the specified aspect ratio. Otherwise video size is resized to fit preview size"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera25setPreviewKeepAspectRatioEb"]
    pub fn dai_node_ColorCamera_setPreviewKeepAspectRatio(
        this: *mut dai_node_ColorCamera,
        keep: bool,
    );
}
unsafe extern "C" {
    #[doc = " @see setPreviewKeepAspectRatio\n @returns Preview keep aspect ratio option"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera25getPreviewKeepAspectRatioEv"]
    pub fn dai_node_ColorCamera_getPreviewKeepAspectRatio(this: *mut dai_node_ColorCamera) -> bool;
}
unsafe extern "C" {
    #[doc = " Get number of frames in preview pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera23getPreviewNumFramesPoolEv"]
    pub fn dai_node_ColorCamera_getPreviewNumFramesPool(
        this: *mut dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get number of frames in video pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera21getVideoNumFramesPoolEv"]
    pub fn dai_node_ColorCamera_getVideoNumFramesPool(
        this: *mut dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get number of frames in still pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera21getStillNumFramesPoolEv"]
    pub fn dai_node_ColorCamera_getStillNumFramesPool(
        this: *mut dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get number of frames in raw pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera19getRawNumFramesPoolEv"]
    pub fn dai_node_ColorCamera_getRawNumFramesPool(
        this: *mut dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get number of frames in isp pool"]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera19getIspNumFramesPoolEv"]
    pub fn dai_node_ColorCamera_getIspNumFramesPool(
        this: *mut dai_node_ColorCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Configures whether the camera `raw` frames are saved as MIPI-packed to memory.\n The packed format is more efficient, consuming less memory on device, and less data\n to send to host: RAW10: 4 pixels saved on 5 bytes, RAW12: 2 pixels saved on 3 bytes.\n When packing is disabled (`false`), data is saved lsb-aligned, e.g. a RAW10 pixel\n will be stored as uint16, on bits 9..0: 0b0000'00pp'pppp'pppp.\n Default is auto: enabled for standard color/monochrome cameras where ISP can work\n with both packed/unpacked, but disabled for other cameras like ToF."]
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera18setRawOutputPackedEb"]
    pub fn dai_node_ColorCamera_setRawOutputPacked(this: *mut dai_node_ColorCamera, packed: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11ColorCameraC1ESt10unique_ptrINS_21ColorCameraPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_ColorCamera_ColorCamera(this: *mut dai_node_ColorCamera, props: std_unique_ptr);
}
impl dai_node_ColorCamera {
    #[inline]
    pub unsafe fn getScaledSize(
        &self,
        input: ::std::os::raw::c_int,
        num: ::std::os::raw::c_int,
        denom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getScaledSize(self, input, num, denom)
    }
    #[inline]
    pub unsafe fn setBoardSocket(&mut self, boardSocket: dai_CameraBoardSocket) {
        dai_node_ColorCamera_setBoardSocket(self, boardSocket)
    }
    #[inline]
    pub unsafe fn getBoardSocket(&self) -> dai_CameraBoardSocket {
        dai_node_ColorCamera_getBoardSocket(self)
    }
    #[inline]
    pub unsafe fn setCamera(&mut self, name: std_string) {
        dai_node_ColorCamera_setCamera(self, name)
    }
    #[inline]
    pub unsafe fn getCamera(&self) -> std_string {
        dai_node_ColorCamera_getCamera(self)
    }
    #[inline]
    pub unsafe fn setCamId(&mut self, id: i64) {
        dai_node_ColorCamera_setCamId(self, id)
    }
    #[inline]
    pub unsafe fn getCamId(&self) -> i64 {
        dai_node_ColorCamera_getCamId(self)
    }
    #[inline]
    pub unsafe fn setImageOrientation(&mut self, imageOrientation: dai_CameraImageOrientation) {
        dai_node_ColorCamera_setImageOrientation(self, imageOrientation)
    }
    #[inline]
    pub unsafe fn getImageOrientation(&self) -> dai_CameraImageOrientation {
        dai_node_ColorCamera_getImageOrientation(self)
    }
    #[inline]
    pub unsafe fn setColorOrder(&mut self, colorOrder: dai_ColorCameraProperties_ColorOrder) {
        dai_node_ColorCamera_setColorOrder(self, colorOrder)
    }
    #[inline]
    pub unsafe fn getColorOrder(&self) -> dai_ColorCameraProperties_ColorOrder {
        dai_node_ColorCamera_getColorOrder(self)
    }
    #[inline]
    pub unsafe fn setInterleaved(&mut self, interleaved: bool) {
        dai_node_ColorCamera_setInterleaved(self, interleaved)
    }
    #[inline]
    pub unsafe fn getInterleaved(&self) -> bool {
        dai_node_ColorCamera_getInterleaved(self)
    }
    #[inline]
    pub unsafe fn setPreviewType(&mut self, type_: dai_ImgFrame_Type) {
        dai_node_ColorCamera_setPreviewType(self, type_)
    }
    #[inline]
    pub unsafe fn getPreviewType(&self) -> dai_ImgFrame_Type {
        dai_node_ColorCamera_getPreviewType(self)
    }
    #[inline]
    pub unsafe fn setFp16(&mut self, fp16: bool) {
        dai_node_ColorCamera_setFp16(self, fp16)
    }
    #[inline]
    pub unsafe fn getFp16(&self) -> bool {
        dai_node_ColorCamera_getFp16(self)
    }
    #[inline]
    pub unsafe fn setPreviewSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setPreviewSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setPreviewSize1(&mut self, size: std_tuple) {
        dai_node_ColorCamera_setPreviewSize1(self, size)
    }
    #[inline]
    pub unsafe fn setPreviewNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_ColorCamera_setPreviewNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn setVideoSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setVideoSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setVideoSize1(&mut self, size: std_tuple) {
        dai_node_ColorCamera_setVideoSize1(self, size)
    }
    #[inline]
    pub unsafe fn setVideoNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_ColorCamera_setVideoNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn setStillSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setStillSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setStillSize1(&mut self, size: std_tuple) {
        dai_node_ColorCamera_setStillSize1(self, size)
    }
    #[inline]
    pub unsafe fn setMockIspSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setMockIspSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setStillNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_ColorCamera_setStillNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn setResolution(&mut self, resolution: dai_ColorCameraProperties_SensorResolution) {
        dai_node_ColorCamera_setResolution(self, resolution)
    }
    #[inline]
    pub unsafe fn getResolution(&self) -> dai_ColorCameraProperties_SensorResolution {
        dai_node_ColorCamera_getResolution(self)
    }
    #[inline]
    pub unsafe fn setRawNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_ColorCamera_setRawNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn setIspNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_ColorCamera_setIspNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(
        &mut self,
        raw: ::std::os::raw::c_int,
        isp: ::std::os::raw::c_int,
        preview: ::std::os::raw::c_int,
        video: ::std::os::raw::c_int,
        still: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setNumFramesPool(self, raw, isp, preview, video, still)
    }
    #[inline]
    pub unsafe fn setIspScale(
        &mut self,
        numerator: ::std::os::raw::c_int,
        denominator: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setIspScale(self, numerator, denominator)
    }
    #[inline]
    pub unsafe fn setIspScale1(&mut self, scale: std_tuple) {
        dai_node_ColorCamera_setIspScale1(self, scale)
    }
    #[inline]
    pub unsafe fn setIspScale2(
        &mut self,
        horizNum: ::std::os::raw::c_int,
        horizDenom: ::std::os::raw::c_int,
        vertNum: ::std::os::raw::c_int,
        vertDenom: ::std::os::raw::c_int,
    ) {
        dai_node_ColorCamera_setIspScale2(self, horizNum, horizDenom, vertNum, vertDenom)
    }
    #[inline]
    pub unsafe fn setIspScale3(&mut self, horizScale: std_tuple, vertScale: std_tuple) {
        dai_node_ColorCamera_setIspScale3(self, horizScale, vertScale)
    }
    #[inline]
    pub unsafe fn setFps(&mut self, fps: f32) {
        dai_node_ColorCamera_setFps(self, fps)
    }
    #[inline]
    pub unsafe fn setIsp3aFps(&mut self, isp3aFps: ::std::os::raw::c_int) {
        dai_node_ColorCamera_setIsp3aFps(self, isp3aFps)
    }
    #[inline]
    pub unsafe fn setFrameEventFilter(&mut self, events: *const std_vector) {
        dai_node_ColorCamera_setFrameEventFilter(self, events)
    }
    #[inline]
    pub unsafe fn getFrameEventFilter(&self) -> std_vector {
        dai_node_ColorCamera_getFrameEventFilter(self)
    }
    #[inline]
    pub unsafe fn getFps(&self) -> f32 {
        dai_node_ColorCamera_getFps(self)
    }
    #[inline]
    pub unsafe fn getPreviewSize(&self) -> std_tuple {
        dai_node_ColorCamera_getPreviewSize(self)
    }
    #[inline]
    pub unsafe fn getPreviewWidth(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getPreviewWidth(self)
    }
    #[inline]
    pub unsafe fn getPreviewHeight(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getPreviewHeight(self)
    }
    #[inline]
    pub unsafe fn getVideoSize(&self) -> std_tuple {
        dai_node_ColorCamera_getVideoSize(self)
    }
    #[inline]
    pub unsafe fn getVideoWidth(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getVideoWidth(self)
    }
    #[inline]
    pub unsafe fn getVideoHeight(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getVideoHeight(self)
    }
    #[inline]
    pub unsafe fn getStillSize(&self) -> std_tuple {
        dai_node_ColorCamera_getStillSize(self)
    }
    #[inline]
    pub unsafe fn getStillWidth(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getStillWidth(self)
    }
    #[inline]
    pub unsafe fn getStillHeight(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getStillHeight(self)
    }
    #[inline]
    pub unsafe fn getResolutionSize(&self) -> std_tuple {
        dai_node_ColorCamera_getResolutionSize(self)
    }
    #[inline]
    pub unsafe fn getResolutionWidth(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getResolutionWidth(self)
    }
    #[inline]
    pub unsafe fn getResolutionHeight(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getResolutionHeight(self)
    }
    #[inline]
    pub unsafe fn getIspSize(&self) -> std_tuple {
        dai_node_ColorCamera_getIspSize(self)
    }
    #[inline]
    pub unsafe fn getIspWidth(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getIspWidth(self)
    }
    #[inline]
    pub unsafe fn getIspHeight(&self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getIspHeight(self)
    }
    #[inline]
    pub unsafe fn sensorCenterCrop(&mut self) {
        dai_node_ColorCamera_sensorCenterCrop(self)
    }
    #[inline]
    pub unsafe fn setSensorCrop(&mut self, x: f32, y: f32) {
        dai_node_ColorCamera_setSensorCrop(self, x, y)
    }
    #[inline]
    pub unsafe fn getSensorCrop(&self) -> std_tuple {
        dai_node_ColorCamera_getSensorCrop(self)
    }
    #[inline]
    pub unsafe fn getSensorCropX(&self) -> f32 {
        dai_node_ColorCamera_getSensorCropX(self)
    }
    #[inline]
    pub unsafe fn getSensorCropY(&self) -> f32 {
        dai_node_ColorCamera_getSensorCropY(self)
    }
    #[inline]
    pub unsafe fn setPreviewKeepAspectRatio(&mut self, keep: bool) {
        dai_node_ColorCamera_setPreviewKeepAspectRatio(self, keep)
    }
    #[inline]
    pub unsafe fn getPreviewKeepAspectRatio(&mut self) -> bool {
        dai_node_ColorCamera_getPreviewKeepAspectRatio(self)
    }
    #[inline]
    pub unsafe fn getPreviewNumFramesPool(&mut self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getPreviewNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn getVideoNumFramesPool(&mut self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getVideoNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn getStillNumFramesPool(&mut self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getStillNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn getRawNumFramesPool(&mut self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getRawNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn getIspNumFramesPool(&mut self) -> ::std::os::raw::c_int {
        dai_node_ColorCamera_getIspNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn setRawOutputPacked(&mut self, packed: bool) {
        dai_node_ColorCamera_setRawOutputPacked(self, packed)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_ColorCamera_ColorCamera(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11ColorCamera13getPropertiesEv"]
    pub fn dai_node_ColorCamera_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 54usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node11ColorCamera12isSourceNodeEv"]
    pub fn dai_node_ColorCamera_isSourceNode(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_NK3dai4node11ColorCamera19getNodeRecordParamsEv"]
    pub fn dai_node_ColorCamera_getNodeRecordParams(
        this: *mut ::std::os::raw::c_void,
    ) -> dai_NodeRecordParams;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node11ColorCamera15getRecordOutputEv"]
    pub fn dai_node_ColorCamera_getRecordOutput(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node11ColorCamera14getReplayInputEv"]
    pub fn dai_node_ColorCamera_getReplayInput(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut dai_Node_Input;
}
#[doc = " @brief DetectionParser node. Parses detection results from different neural networks and is being used internally by MobileNetDetectionNetwork and\n YoloDetectionNetwork."]
#[repr(C)]
pub struct dai_node_DetectionParser {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_DetectionParserProperties>,
    #[doc = " Input NN results with detection data to parse\n Default queue is blocking with size 5"]
    pub input: dai_Node_Input,
    #[doc = " Outputs image frame with detected edges"]
    pub out: dai_Node_Output,
    #[doc = " Input for image that produced the detection - image size can be taken from here"]
    pub imageIn: dai_Node_Input,
    pub mArchive: std_optional,
    pub archiveConfig: std_optional,
}
pub const dai_node_DetectionParser_NAME: &[u8; 16] = b"DetectionParser\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_DetectionParser"]
        [::std::mem::size_of::<dai_node_DetectionParser>() - 1952usize];
    ["Alignment of dai_node_DetectionParser"]
        [::std::mem::align_of::<dai_node_DetectionParser>() - 8usize];
    ["Offset of field: dai_node_DetectionParser::input"]
        [::std::mem::offset_of!(dai_node_DetectionParser, input) - 448usize];
    ["Offset of field: dai_node_DetectionParser::out"]
        [::std::mem::offset_of!(dai_node_DetectionParser, out) - 944usize];
    ["Offset of field: dai_node_DetectionParser::imageIn"]
        [::std::mem::offset_of!(dai_node_DetectionParser, imageIn) - 1104usize];
    ["Offset of field: dai_node_DetectionParser::mArchive"]
        [::std::mem::offset_of!(dai_node_DetectionParser, mArchive) - 1600usize];
    ["Offset of field: dai_node_DetectionParser::archiveConfig"]
        [::std::mem::offset_of!(dai_node_DetectionParser, archiveConfig) - 1736usize];
};
unsafe extern "C" {
    #[doc = " @brief Build DetectionParser node. Connect output to this node's input. Also call setNNArchive() with provided NNArchive.\n @param nnInput: Output to link\n @param nnArchive: Neural network archive"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser5buildERNS_4Node6OutputERKNS_9NNArchiveE"]
    pub fn dai_node_DetectionParser_build(
        this: *mut dai_node_DetectionParser,
        nnInput: *mut dai_Node_Output,
        nnArchive: *const dai_NNArchive,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Specify number of frames in pool.\n @param numFramesPool How many frames should the pool have"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser16setNumFramesPoolEi"]
    pub fn dai_node_DetectionParser_setNumFramesPool(
        this: *mut dai_node_DetectionParser,
        numFramesPool: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Returns number of frames in pool\n"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser16getNumFramesPoolEv"]
    pub fn dai_node_DetectionParser_getNumFramesPool(
        this: *mut dai_node_DetectionParser,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node. If the archive's type is SUPERBLOB, use default number of shaves.\n\n @param nnArchive: NNArchive to set"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser12setNNArchiveERKNS_9NNArchiveE"]
    pub fn dai_node_DetectionParser_setNNArchive(
        this: *mut dai_node_DetectionParser,
        nnArchive: *const dai_NNArchive,
    );
}
unsafe extern "C" {
    #[doc = " Load network xml and bin files into assets.\n @param xmlModelPath Path to the neural network model file."]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser12setModelPathERKNS_4PathE"]
    pub fn dai_node_DetectionParser_setModelPath(
        this: *mut dai_node_DetectionParser,
        modelPath: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser11setBlobPathERKNS_4PathE"]
    pub fn dai_node_DetectionParser_setBlobPath(
        this: *mut dai_node_DetectionParser,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves some input tensor information from the blob\n\n @param blob OpenVINO blob to retrieve the information from"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser7setBlobENS_8OpenVINO4BlobE"]
    pub fn dai_node_DetectionParser_setBlob(
        this: *mut dai_node_DetectionParser,
        blob: dai_OpenVINO_Blob,
    );
}
unsafe extern "C" {
    #[doc = " Same functionality as the setBlobPath(). Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser7setBlobERKNS_4PathE"]
    pub fn dai_node_DetectionParser_setBlob1(
        this: *mut dai_node_DetectionParser,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Set input image size\n\n This should only be used instead of setBlob, not besides it"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser17setInputImageSizeEii"]
    pub fn dai_node_DetectionParser_setInputImageSize(
        this: *mut dai_node_DetectionParser,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser17setInputImageSizeESt5tupleIJiiEE"]
    pub fn dai_node_DetectionParser_setInputImageSize1(
        this: *mut dai_node_DetectionParser,
        size: std_tuple,
    );
}
unsafe extern "C" {
    #[doc = " Sets NN Family to parse"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser11setNNFamilyE20DetectionNetworkType"]
    pub fn dai_node_DetectionParser_setNNFamily(
        this: *mut dai_node_DetectionParser,
        type_: DetectionNetworkType,
    );
}
unsafe extern "C" {
    #[doc = " Gets NN Family to parse"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser11getNNFamilyEv"]
    pub fn dai_node_DetectionParser_getNNFamily(
        this: *mut dai_node_DetectionParser,
    ) -> DetectionNetworkType;
}
unsafe extern "C" {
    #[doc = " Specifies confidence threshold at which to filter the rest of the detections.\n @param thresh Detection confidence must be greater than specified threshold to be added to the list"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser22setConfidenceThresholdEf"]
    pub fn dai_node_DetectionParser_setConfidenceThreshold(
        this: *mut dai_node_DetectionParser,
        thresh: f32,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves threshold at which to filter the rest of the detections.\n @returns Detection confidence"]
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser22getConfidenceThresholdEv"]
    pub fn dai_node_DetectionParser_getConfidenceThreshold(
        this: *const dai_node_DetectionParser,
    ) -> f32;
}
unsafe extern "C" {
    #[doc = " Set num classes"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser13setNumClassesEi"]
    pub fn dai_node_DetectionParser_setNumClasses(
        this: *mut dai_node_DetectionParser,
        numClasses: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser10setClassesERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EE"]
    pub fn dai_node_DetectionParser_setClasses(
        this: *mut dai_node_DetectionParser,
        classes: *const std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set coordianate size"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser17setCoordinateSizeEi"]
    pub fn dai_node_DetectionParser_setCoordinateSize(
        this: *mut dai_node_DetectionParser,
        coordinates: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set anchors"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser10setAnchorsESt6vectorIfSaIfEE"]
    pub fn dai_node_DetectionParser_setAnchors(
        this: *mut dai_node_DetectionParser,
        anchors: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set anchor masks"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser14setAnchorMasksESt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIiSaIiEESt4lessIS8_ESaISt4pairIKS8_SB_EEE"]
    pub fn dai_node_DetectionParser_setAnchorMasks(
        this: *mut dai_node_DetectionParser,
        anchorMasks: std_map,
    );
}
unsafe extern "C" {
    #[doc = " Set anchors with masks"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser10setAnchorsERKSt6vectorIS2_IS2_IfSaIfEESaIS4_EESaIS6_EE"]
    pub fn dai_node_DetectionParser_setAnchors1(
        this: *mut dai_node_DetectionParser,
        anchors: *const std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set Iou threshold"]
    #[link_name = "\u{1}_ZN3dai4node15DetectionParser15setIouThresholdEf"]
    pub fn dai_node_DetectionParser_setIouThreshold(
        this: *mut dai_node_DetectionParser,
        thresh: f32,
    );
}
unsafe extern "C" {
    #[doc = " Get num classes"]
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser13getNumClassesEv"]
    pub fn dai_node_DetectionParser_getNumClasses(
        this: *const dai_node_DetectionParser,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser10getClassesB5cxx11Ev"]
    pub fn dai_node_DetectionParser_getClasses(
        this: *const dai_node_DetectionParser,
    ) -> std_optional;
}
unsafe extern "C" {
    #[doc = " Get coordianate size"]
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser17getCoordinateSizeEv"]
    pub fn dai_node_DetectionParser_getCoordinateSize(
        this: *const dai_node_DetectionParser,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get anchors"]
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser10getAnchorsEv"]
    pub fn dai_node_DetectionParser_getAnchors(this: *const dai_node_DetectionParser)
    -> std_vector;
}
unsafe extern "C" {
    #[doc = " Get anchor masks"]
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser14getAnchorMasksB5cxx11Ev"]
    pub fn dai_node_DetectionParser_getAnchorMasks(
        this: *const dai_node_DetectionParser,
    ) -> std_map;
}
unsafe extern "C" {
    #[doc = " Get Iou threshold"]
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser15getIouThresholdEv"]
    pub fn dai_node_DetectionParser_getIouThreshold(this: *const dai_node_DetectionParser) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node15DetectionParser27getNNArchiveVersionedConfigEv"]
    pub fn dai_node_DetectionParser_getNNArchiveVersionedConfig(
        this: *const dai_node_DetectionParser,
    ) -> *const dai_NNArchiveVersionedConfig;
}
impl dai_node_DetectionParser {
    #[inline]
    pub unsafe fn build(
        &mut self,
        nnInput: *mut dai_Node_Output,
        nnArchive: *const dai_NNArchive,
    ) -> std_shared_ptr {
        dai_node_DetectionParser_build(self, nnInput, nnArchive)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, numFramesPool: ::std::os::raw::c_int) {
        dai_node_DetectionParser_setNumFramesPool(self, numFramesPool)
    }
    #[inline]
    pub unsafe fn getNumFramesPool(&mut self) -> ::std::os::raw::c_int {
        dai_node_DetectionParser_getNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn setNNArchive(&mut self, nnArchive: *const dai_NNArchive) {
        dai_node_DetectionParser_setNNArchive(self, nnArchive)
    }
    #[inline]
    pub unsafe fn setModelPath(&mut self, modelPath: *const dai_Path) {
        dai_node_DetectionParser_setModelPath(self, modelPath)
    }
    #[inline]
    pub unsafe fn setBlobPath(&mut self, path: *const dai_Path) {
        dai_node_DetectionParser_setBlobPath(self, path)
    }
    #[inline]
    pub unsafe fn setBlob(&mut self, blob: dai_OpenVINO_Blob) {
        dai_node_DetectionParser_setBlob(self, blob)
    }
    #[inline]
    pub unsafe fn setBlob1(&mut self, path: *const dai_Path) {
        dai_node_DetectionParser_setBlob1(self, path)
    }
    #[inline]
    pub unsafe fn setInputImageSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_DetectionParser_setInputImageSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setInputImageSize1(&mut self, size: std_tuple) {
        dai_node_DetectionParser_setInputImageSize1(self, size)
    }
    #[inline]
    pub unsafe fn setNNFamily(&mut self, type_: DetectionNetworkType) {
        dai_node_DetectionParser_setNNFamily(self, type_)
    }
    #[inline]
    pub unsafe fn getNNFamily(&mut self) -> DetectionNetworkType {
        dai_node_DetectionParser_getNNFamily(self)
    }
    #[inline]
    pub unsafe fn setConfidenceThreshold(&mut self, thresh: f32) {
        dai_node_DetectionParser_setConfidenceThreshold(self, thresh)
    }
    #[inline]
    pub unsafe fn getConfidenceThreshold(&self) -> f32 {
        dai_node_DetectionParser_getConfidenceThreshold(self)
    }
    #[inline]
    pub unsafe fn setNumClasses(&mut self, numClasses: ::std::os::raw::c_int) {
        dai_node_DetectionParser_setNumClasses(self, numClasses)
    }
    #[inline]
    pub unsafe fn setClasses(&mut self, classes: *const std_vector) {
        dai_node_DetectionParser_setClasses(self, classes)
    }
    #[inline]
    pub unsafe fn setCoordinateSize(&mut self, coordinates: ::std::os::raw::c_int) {
        dai_node_DetectionParser_setCoordinateSize(self, coordinates)
    }
    #[inline]
    pub unsafe fn setAnchors(&mut self, anchors: std_vector) {
        dai_node_DetectionParser_setAnchors(self, anchors)
    }
    #[inline]
    pub unsafe fn setAnchorMasks(&mut self, anchorMasks: std_map) {
        dai_node_DetectionParser_setAnchorMasks(self, anchorMasks)
    }
    #[inline]
    pub unsafe fn setAnchors1(&mut self, anchors: *const std_vector) {
        dai_node_DetectionParser_setAnchors1(self, anchors)
    }
    #[inline]
    pub unsafe fn setIouThreshold(&mut self, thresh: f32) {
        dai_node_DetectionParser_setIouThreshold(self, thresh)
    }
    #[inline]
    pub unsafe fn getNumClasses(&self) -> ::std::os::raw::c_int {
        dai_node_DetectionParser_getNumClasses(self)
    }
    #[inline]
    pub unsafe fn getClasses(&self) -> std_optional {
        dai_node_DetectionParser_getClasses(self)
    }
    #[inline]
    pub unsafe fn getCoordinateSize(&self) -> ::std::os::raw::c_int {
        dai_node_DetectionParser_getCoordinateSize(self)
    }
    #[inline]
    pub unsafe fn getAnchors(&self) -> std_vector {
        dai_node_DetectionParser_getAnchors(self)
    }
    #[inline]
    pub unsafe fn getAnchorMasks(&self) -> std_map {
        dai_node_DetectionParser_getAnchorMasks(self)
    }
    #[inline]
    pub unsafe fn getIouThreshold(&self) -> f32 {
        dai_node_DetectionParser_getIouThreshold(self)
    }
    #[inline]
    pub unsafe fn getNNArchiveVersionedConfig(&self) -> *const dai_NNArchiveVersionedConfig {
        dai_node_DetectionParser_getNNArchiveVersionedConfig(self)
    }
}
#[doc = " @brief NeuralNetwork node. Runs a neural inference on input data."]
#[repr(C)]
pub struct dai_node_NeuralNetwork {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_NeuralNetworkProperties>,
    #[doc = " Input message with data to be inferred upon"]
    pub input: dai_Node_Input,
    #[doc = " Outputs NNData message that carries inference results"]
    pub out: dai_Node_Output,
    #[doc = " Passthrough message on which the inference was performed.\n\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthrough: dai_Node_Output,
    #[doc = " Inputs mapped to network inputs. Useful for inferring from separate data sources\n Default input is non-blocking with queue size 1 and waits for messages"]
    pub inputs: dai_Node_InputMap,
    #[doc = " Passthroughs which correspond to specified input"]
    pub passthroughs: dai_Node_OutputMap,
    pub nnArchive: std_optional,
}
pub const dai_node_NeuralNetwork_NAME: &[u8; 14] = b"NeuralNetwork\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_NeuralNetwork"][::std::mem::size_of::<dai_node_NeuralNetwork>() - 1784usize];
    ["Alignment of dai_node_NeuralNetwork"]
        [::std::mem::align_of::<dai_node_NeuralNetwork>() - 8usize];
    ["Offset of field: dai_node_NeuralNetwork::input"]
        [::std::mem::offset_of!(dai_node_NeuralNetwork, input) - 448usize];
    ["Offset of field: dai_node_NeuralNetwork::out"]
        [::std::mem::offset_of!(dai_node_NeuralNetwork, out) - 944usize];
    ["Offset of field: dai_node_NeuralNetwork::passthrough"]
        [::std::mem::offset_of!(dai_node_NeuralNetwork, passthrough) - 1104usize];
    ["Offset of field: dai_node_NeuralNetwork::inputs"]
        [::std::mem::offset_of!(dai_node_NeuralNetwork, inputs) - 1264usize];
    ["Offset of field: dai_node_NeuralNetwork::passthroughs"]
        [::std::mem::offset_of!(dai_node_NeuralNetwork, passthroughs) - 1464usize];
    ["Offset of field: dai_node_NeuralNetwork::nnArchive"]
        [::std::mem::offset_of!(dai_node_NeuralNetwork, nnArchive) - 1648usize];
};
unsafe extern "C" {
    #[doc = " @brief Build NeuralNetwork node. Connect output to this node's input. Also call setNNArchive() with provided NNArchive.\n\n @param output: Output to link\n @param nnArchive: Neural network archive\n @returns Shared pointer to NeuralNetwork node"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork5buildERNS_4Node6OutputERKNS_9NNArchiveE"]
    pub fn dai_node_NeuralNetwork_build(
        this: *mut dai_node_NeuralNetwork,
        input: *mut dai_Node_Output,
        nnArchive: *const dai_NNArchive,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork5buildERKSt10shared_ptrINS0_6CameraEENS_18NNModelDescriptionESt8optionalIfE"]
    pub fn dai_node_NeuralNetwork_build1(
        this: *mut dai_node_NeuralNetwork,
        input: *const std_shared_ptr,
        modelDesc: dai_NNModelDescription,
        fps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork5buildERKSt10shared_ptrINS0_6CameraEENS_9NNArchiveESt8optionalIfE"]
    pub fn dai_node_NeuralNetwork_build2(
        this: *mut dai_node_NeuralNetwork,
        input: *const std_shared_ptr,
        nnArchive: dai_NNArchive,
        fps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node. If the archive's type is SUPERBLOB, use default number of shaves.\n\n @param nnArchive: NNArchive to set"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork12setNNArchiveERKNS_9NNArchiveE"]
    pub fn dai_node_NeuralNetwork_setNNArchive(
        this: *mut dai_node_NeuralNetwork,
        nnArchive: *const dai_NNArchive,
    );
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node, throws if the archive's type is not SUPERBLOB\n\n @param nnArchive: NNArchive to set\n @param numShaves: Number of shaves to use"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork12setNNArchiveERKNS_9NNArchiveEi"]
    pub fn dai_node_NeuralNetwork_setNNArchive1(
        this: *mut dai_node_NeuralNetwork,
        nnArchive: *const dai_NNArchive,
        numShaves: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " @brief Download model from zoo and set it for this Node\n\n @param description: Model description to download\n @param useCached: Use cached model if available"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork15setFromModelZooENS_18NNModelDescriptionEb"]
    pub fn dai_node_NeuralNetwork_setFromModelZoo(
        this: *mut dai_node_NeuralNetwork,
        description: dai_NNModelDescription,
        useCached: bool,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork11setBlobPathERKNS_4PathE"]
    pub fn dai_node_NeuralNetwork_setBlobPath(
        this: *mut dai_node_NeuralNetwork,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @param blob Network blob"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork7setBlobENS_8OpenVINO4BlobE"]
    pub fn dai_node_NeuralNetwork_setBlob(
        this: *mut dai_node_NeuralNetwork,
        blob: dai_OpenVINO_Blob,
    );
}
unsafe extern "C" {
    #[doc = " Same functionality as the setBlobPath(). Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork7setBlobERKNS_4PathE"]
    pub fn dai_node_NeuralNetwork_setBlob1(
        this: *mut dai_node_NeuralNetwork,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network xml and bin files into assets.\n @param xmlModelPath Path to the neural network model file."]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork12setModelPathERKNS_4PathE"]
    pub fn dai_node_NeuralNetwork_setModelPath(
        this: *mut dai_node_NeuralNetwork,
        modelPath: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Specifies how many frames will be available in the pool\n @param numFrames How many frames will pool have"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork16setNumPoolFramesEi"]
    pub fn dai_node_NeuralNetwork_setNumPoolFrames(
        this: *mut dai_node_NeuralNetwork,
        numFrames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many threads should the node use to run the network.\n @param numThreads Number of threads to dedicate to this node"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork22setNumInferenceThreadsEi"]
    pub fn dai_node_NeuralNetwork_setNumInferenceThreads(
        this: *mut dai_node_NeuralNetwork,
        numThreads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many Neural Compute Engines should a single thread use for inference\n @param numNCEPerThread Number of NCE per thread"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork27setNumNCEPerInferenceThreadEi"]
    pub fn dai_node_NeuralNetwork_setNumNCEPerInferenceThread(
        this: *mut dai_node_NeuralNetwork,
        numNCEPerThread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many Shaves should a single thread use for inference\n @param numShavesPerThread Number of shaves per thread"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork30setNumShavesPerInferenceThreadEi"]
    pub fn dai_node_NeuralNetwork_setNumShavesPerInferenceThread(
        this: *mut dai_node_NeuralNetwork,
        numShavesPerThread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specifies backend to use\n @param backend String specifying backend to use"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork10setBackendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_NeuralNetwork_setBackend(
        this: *mut dai_node_NeuralNetwork,
        backend: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set backend properties\n @param backendProperties backend properties map"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork20setBackendPropertiesESt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_St4lessIS8_ESaISt4pairIKS8_S8_EEE"]
    pub fn dai_node_NeuralNetwork_setBackendProperties(
        this: *mut dai_node_NeuralNetwork,
        properties: std_map,
    );
}
unsafe extern "C" {
    #[doc = " How many inference threads will be used to run the network\n @returns Number of threads, 0, 1 or 2. Zero means AUTO"]
    #[link_name = "\u{1}_ZN3dai4node13NeuralNetwork22getNumInferenceThreadsEv"]
    pub fn dai_node_NeuralNetwork_getNumInferenceThreads(
        this: *mut dai_node_NeuralNetwork,
    ) -> ::std::os::raw::c_int;
}
impl dai_node_NeuralNetwork {
    #[inline]
    pub unsafe fn build(
        &mut self,
        input: *mut dai_Node_Output,
        nnArchive: *const dai_NNArchive,
    ) -> std_shared_ptr {
        dai_node_NeuralNetwork_build(self, input, nnArchive)
    }
    #[inline]
    pub unsafe fn build1(
        &mut self,
        input: *const std_shared_ptr,
        modelDesc: dai_NNModelDescription,
        fps: std_optional,
    ) -> std_shared_ptr {
        dai_node_NeuralNetwork_build1(self, input, modelDesc, fps)
    }
    #[inline]
    pub unsafe fn build2(
        &mut self,
        input: *const std_shared_ptr,
        nnArchive: dai_NNArchive,
        fps: std_optional,
    ) -> std_shared_ptr {
        dai_node_NeuralNetwork_build2(self, input, nnArchive, fps)
    }
    #[inline]
    pub unsafe fn setNNArchive(&mut self, nnArchive: *const dai_NNArchive) {
        dai_node_NeuralNetwork_setNNArchive(self, nnArchive)
    }
    #[inline]
    pub unsafe fn setNNArchive1(
        &mut self,
        nnArchive: *const dai_NNArchive,
        numShaves: ::std::os::raw::c_int,
    ) {
        dai_node_NeuralNetwork_setNNArchive1(self, nnArchive, numShaves)
    }
    #[inline]
    pub unsafe fn setFromModelZoo(&mut self, description: dai_NNModelDescription, useCached: bool) {
        dai_node_NeuralNetwork_setFromModelZoo(self, description, useCached)
    }
    #[inline]
    pub unsafe fn setBlobPath(&mut self, path: *const dai_Path) {
        dai_node_NeuralNetwork_setBlobPath(self, path)
    }
    #[inline]
    pub unsafe fn setBlob(&mut self, blob: dai_OpenVINO_Blob) {
        dai_node_NeuralNetwork_setBlob(self, blob)
    }
    #[inline]
    pub unsafe fn setBlob1(&mut self, path: *const dai_Path) {
        dai_node_NeuralNetwork_setBlob1(self, path)
    }
    #[inline]
    pub unsafe fn setModelPath(&mut self, modelPath: *const dai_Path) {
        dai_node_NeuralNetwork_setModelPath(self, modelPath)
    }
    #[inline]
    pub unsafe fn setNumPoolFrames(&mut self, numFrames: ::std::os::raw::c_int) {
        dai_node_NeuralNetwork_setNumPoolFrames(self, numFrames)
    }
    #[inline]
    pub unsafe fn setNumInferenceThreads(&mut self, numThreads: ::std::os::raw::c_int) {
        dai_node_NeuralNetwork_setNumInferenceThreads(self, numThreads)
    }
    #[inline]
    pub unsafe fn setNumNCEPerInferenceThread(&mut self, numNCEPerThread: ::std::os::raw::c_int) {
        dai_node_NeuralNetwork_setNumNCEPerInferenceThread(self, numNCEPerThread)
    }
    #[inline]
    pub unsafe fn setNumShavesPerInferenceThread(
        &mut self,
        numShavesPerThread: ::std::os::raw::c_int,
    ) {
        dai_node_NeuralNetwork_setNumShavesPerInferenceThread(self, numShavesPerThread)
    }
    #[inline]
    pub unsafe fn setBackend(&mut self, backend: std_string) {
        dai_node_NeuralNetwork_setBackend(self, backend)
    }
    #[inline]
    pub unsafe fn setBackendProperties(&mut self, properties: std_map) {
        dai_node_NeuralNetwork_setBackendProperties(self, properties)
    }
    #[inline]
    pub unsafe fn getNumInferenceThreads(&mut self) -> ::std::os::raw::c_int {
        dai_node_NeuralNetwork_getNumInferenceThreads(self)
    }
}
#[doc = " @brief DetectionNetwork, base for different network specializations"]
#[repr(C)]
pub struct dai_node_DetectionNetwork {
    pub _base: dai_DeviceNodeGroup,
    pub neuralNetwork: dai_Subnode,
    pub detectionParser: dai_Subnode,
    #[doc = " Outputs ImgDetections message that carries parsed detection results.\n Overrides NeuralNetwork 'out' with ImgDetections output message type."]
    pub out: *mut dai_Node_Output,
    #[doc = " Outputs unparsed inference results."]
    pub outNetwork: *mut dai_Node_Output,
    #[doc = " Input message with data to be inferred upon\n Default queue is blocking with size 5"]
    pub input: *mut dai_Node_Input,
    #[doc = " Passthrough message on which the inference was performed.\n\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthrough: *mut dai_Node_Output,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_DetectionNetwork"]
        [::std::mem::size_of::<dai_node_DetectionNetwork>() - 504usize];
    ["Alignment of dai_node_DetectionNetwork"]
        [::std::mem::align_of::<dai_node_DetectionNetwork>() - 8usize];
    ["Offset of field: dai_node_DetectionNetwork::neuralNetwork"]
        [::std::mem::offset_of!(dai_node_DetectionNetwork, neuralNetwork) - 440usize];
    ["Offset of field: dai_node_DetectionNetwork::detectionParser"]
        [::std::mem::offset_of!(dai_node_DetectionNetwork, detectionParser) - 456usize];
    ["Offset of field: dai_node_DetectionNetwork::out"]
        [::std::mem::offset_of!(dai_node_DetectionNetwork, out) - 472usize];
    ["Offset of field: dai_node_DetectionNetwork::outNetwork"]
        [::std::mem::offset_of!(dai_node_DetectionNetwork, outNetwork) - 480usize];
    ["Offset of field: dai_node_DetectionNetwork::input"]
        [::std::mem::offset_of!(dai_node_DetectionNetwork, input) - 488usize];
    ["Offset of field: dai_node_DetectionNetwork::passthrough"]
        [::std::mem::offset_of!(dai_node_DetectionNetwork, passthrough) - 496usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork5buildERNS_4Node6OutputERKNS_9NNArchiveE"]
    pub fn dai_node_DetectionNetwork_build(
        this: *mut dai_node_DetectionNetwork,
        input: *mut dai_Node_Output,
        nnArchive: *const dai_NNArchive,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork5buildERKSt10shared_ptrINS0_6CameraEENS_18NNModelDescriptionESt8optionalIfE"]
    pub fn dai_node_DetectionNetwork_build1(
        this: *mut dai_node_DetectionNetwork,
        input: *const std_shared_ptr,
        modelDesc: dai_NNModelDescription,
        fps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork5buildERKSt10shared_ptrINS0_6CameraEERKNS_9NNArchiveESt8optionalIfE"]
    pub fn dai_node_DetectionNetwork_build2(
        this: *mut dai_node_DetectionNetwork,
        input: *const std_shared_ptr,
        nnArchive: *const dai_NNArchive,
        fps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node. If the archive's type is SUPERBLOB, use default number of shaves.\n\n @param nnArchive: NNArchive to set"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork12setNNArchiveERKNS_9NNArchiveE"]
    pub fn dai_node_DetectionNetwork_setNNArchive(
        this: *mut dai_node_DetectionNetwork,
        nnArchive: *const dai_NNArchive,
    );
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node, throws if the archive's type is not SUPERBLOB\n\n @param nnArchive: NNArchive to set\n @param numShaves: Number of shaves to use"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork12setNNArchiveERKNS_9NNArchiveEi"]
    pub fn dai_node_DetectionNetwork_setNNArchive1(
        this: *mut dai_node_DetectionNetwork,
        nnArchive: *const dai_NNArchive,
        numShaves: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " @brief Download model from zoo and set it for this Node\n\n @param description: Model description to download\n @param useCached: Use cached model if available"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork15setFromModelZooENS_18NNModelDescriptionEb"]
    pub fn dai_node_DetectionNetwork_setFromModelZoo(
        this: *mut dai_node_DetectionNetwork,
        description: dai_NNModelDescription,
        useCached: bool,
    );
}
unsafe extern "C" {
    #[doc = " @brief Download model from zoo and set it for this node.\n\n @param description: Model description to download\n @param numShaves: Number of shaves to use\n @param useCached: Use cached model if available"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork15setFromModelZooENS_18NNModelDescriptionEib"]
    pub fn dai_node_DetectionNetwork_setFromModelZoo1(
        this: *mut dai_node_DetectionNetwork,
        description: dai_NNModelDescription,
        numShaves: ::std::os::raw::c_int,
        useCached: bool,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork11setBlobPathERKNS_4PathE"]
    pub fn dai_node_DetectionNetwork_setBlobPath(
        this: *mut dai_node_DetectionNetwork,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @param blob Network blob"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork7setBlobENS_8OpenVINO4BlobE"]
    pub fn dai_node_DetectionNetwork_setBlob(
        this: *mut dai_node_DetectionNetwork,
        blob: dai_OpenVINO_Blob,
    );
}
unsafe extern "C" {
    #[doc = " Same functionality as the setBlobPath(). Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork7setBlobERKNS_4PathE"]
    pub fn dai_node_DetectionNetwork_setBlob1(
        this: *mut dai_node_DetectionNetwork,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network model into assets.\n @param modelPath Path to the model file."]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork12setModelPathERKNS_4PathE"]
    pub fn dai_node_DetectionNetwork_setModelPath(
        this: *mut dai_node_DetectionNetwork,
        modelPath: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Specifies how many frames will be available in the pool\n @param numFrames How many frames will pool have"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork16setNumPoolFramesEi"]
    pub fn dai_node_DetectionNetwork_setNumPoolFrames(
        this: *mut dai_node_DetectionNetwork,
        numFrames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many threads should the node use to run the network.\n @param numThreads Number of threads to dedicate to this node"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork22setNumInferenceThreadsEi"]
    pub fn dai_node_DetectionNetwork_setNumInferenceThreads(
        this: *mut dai_node_DetectionNetwork,
        numThreads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many Neural Compute Engines should a single thread use for inference\n @param numNCEPerThread Number of NCE per thread"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork27setNumNCEPerInferenceThreadEi"]
    pub fn dai_node_DetectionNetwork_setNumNCEPerInferenceThread(
        this: *mut dai_node_DetectionNetwork,
        numNCEPerThread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many Shaves should a single thread use for inference\n @param numShavesPerThread Number of shaves per thread"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork30setNumShavesPerInferenceThreadEi"]
    pub fn dai_node_DetectionNetwork_setNumShavesPerInferenceThread(
        this: *mut dai_node_DetectionNetwork,
        numShavesPerThread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specifies backend to use\n @param backend String specifying backend to use"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork10setBackendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_DetectionNetwork_setBackend(
        this: *mut dai_node_DetectionNetwork,
        backend: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set backend properties\n @param backendProperties backend properties map"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork20setBackendPropertiesESt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_St4lessIS8_ESaISt4pairIKS8_S8_EEE"]
    pub fn dai_node_DetectionNetwork_setBackendProperties(
        this: *mut dai_node_DetectionNetwork,
        properties: std_map,
    );
}
unsafe extern "C" {
    #[doc = " How many inference threads will be used to run the network\n @returns Number of threads, 0, 1 or 2. Zero means AUTO"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork22getNumInferenceThreadsEv"]
    pub fn dai_node_DetectionNetwork_getNumInferenceThreads(
        this: *mut dai_node_DetectionNetwork,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Specifies confidence threshold at which to filter the rest of the detections.\n @param thresh Detection confidence must be greater than specified threshold to be added to the list"]
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork22setConfidenceThresholdEf"]
    pub fn dai_node_DetectionNetwork_setConfidenceThreshold(
        this: *mut dai_node_DetectionNetwork,
        thresh: f32,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves threshold at which to filter the rest of the detections.\n @returns Detection confidence"]
    #[link_name = "\u{1}_ZNK3dai4node16DetectionNetwork22getConfidenceThresholdEv"]
    pub fn dai_node_DetectionNetwork_getConfidenceThreshold(
        this: *const dai_node_DetectionNetwork,
    ) -> f32;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node16DetectionNetwork10getClassesB5cxx11Ev"]
    pub fn dai_node_DetectionNetwork_getClasses(
        this: *const dai_node_DetectionNetwork,
    ) -> std_optional;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetworkC1ERKSt10shared_ptrINS_6DeviceEE"]
    pub fn dai_node_DetectionNetwork_DetectionNetwork(
        this: *mut dai_node_DetectionNetwork,
        device: *const std_shared_ptr,
    );
}
impl dai_node_DetectionNetwork {
    #[inline]
    pub unsafe fn build(
        &mut self,
        input: *mut dai_Node_Output,
        nnArchive: *const dai_NNArchive,
    ) -> std_shared_ptr {
        dai_node_DetectionNetwork_build(self, input, nnArchive)
    }
    #[inline]
    pub unsafe fn build1(
        &mut self,
        input: *const std_shared_ptr,
        modelDesc: dai_NNModelDescription,
        fps: std_optional,
    ) -> std_shared_ptr {
        dai_node_DetectionNetwork_build1(self, input, modelDesc, fps)
    }
    #[inline]
    pub unsafe fn build2(
        &mut self,
        input: *const std_shared_ptr,
        nnArchive: *const dai_NNArchive,
        fps: std_optional,
    ) -> std_shared_ptr {
        dai_node_DetectionNetwork_build2(self, input, nnArchive, fps)
    }
    #[inline]
    pub unsafe fn setNNArchive(&mut self, nnArchive: *const dai_NNArchive) {
        dai_node_DetectionNetwork_setNNArchive(self, nnArchive)
    }
    #[inline]
    pub unsafe fn setNNArchive1(
        &mut self,
        nnArchive: *const dai_NNArchive,
        numShaves: ::std::os::raw::c_int,
    ) {
        dai_node_DetectionNetwork_setNNArchive1(self, nnArchive, numShaves)
    }
    #[inline]
    pub unsafe fn setFromModelZoo(&mut self, description: dai_NNModelDescription, useCached: bool) {
        dai_node_DetectionNetwork_setFromModelZoo(self, description, useCached)
    }
    #[inline]
    pub unsafe fn setFromModelZoo1(
        &mut self,
        description: dai_NNModelDescription,
        numShaves: ::std::os::raw::c_int,
        useCached: bool,
    ) {
        dai_node_DetectionNetwork_setFromModelZoo1(self, description, numShaves, useCached)
    }
    #[inline]
    pub unsafe fn setBlobPath(&mut self, path: *const dai_Path) {
        dai_node_DetectionNetwork_setBlobPath(self, path)
    }
    #[inline]
    pub unsafe fn setBlob(&mut self, blob: dai_OpenVINO_Blob) {
        dai_node_DetectionNetwork_setBlob(self, blob)
    }
    #[inline]
    pub unsafe fn setBlob1(&mut self, path: *const dai_Path) {
        dai_node_DetectionNetwork_setBlob1(self, path)
    }
    #[inline]
    pub unsafe fn setModelPath(&mut self, modelPath: *const dai_Path) {
        dai_node_DetectionNetwork_setModelPath(self, modelPath)
    }
    #[inline]
    pub unsafe fn setNumPoolFrames(&mut self, numFrames: ::std::os::raw::c_int) {
        dai_node_DetectionNetwork_setNumPoolFrames(self, numFrames)
    }
    #[inline]
    pub unsafe fn setNumInferenceThreads(&mut self, numThreads: ::std::os::raw::c_int) {
        dai_node_DetectionNetwork_setNumInferenceThreads(self, numThreads)
    }
    #[inline]
    pub unsafe fn setNumNCEPerInferenceThread(&mut self, numNCEPerThread: ::std::os::raw::c_int) {
        dai_node_DetectionNetwork_setNumNCEPerInferenceThread(self, numNCEPerThread)
    }
    #[inline]
    pub unsafe fn setNumShavesPerInferenceThread(
        &mut self,
        numShavesPerThread: ::std::os::raw::c_int,
    ) {
        dai_node_DetectionNetwork_setNumShavesPerInferenceThread(self, numShavesPerThread)
    }
    #[inline]
    pub unsafe fn setBackend(&mut self, backend: std_string) {
        dai_node_DetectionNetwork_setBackend(self, backend)
    }
    #[inline]
    pub unsafe fn setBackendProperties(&mut self, properties: std_map) {
        dai_node_DetectionNetwork_setBackendProperties(self, properties)
    }
    #[inline]
    pub unsafe fn getNumInferenceThreads(&mut self) -> ::std::os::raw::c_int {
        dai_node_DetectionNetwork_getNumInferenceThreads(self)
    }
    #[inline]
    pub unsafe fn setConfidenceThreshold(&mut self, thresh: f32) {
        dai_node_DetectionNetwork_setConfidenceThreshold(self, thresh)
    }
    #[inline]
    pub unsafe fn getConfidenceThreshold(&self) -> f32 {
        dai_node_DetectionNetwork_getConfidenceThreshold(self)
    }
    #[inline]
    pub unsafe fn getClasses(&self) -> std_optional {
        dai_node_DetectionNetwork_getClasses(self)
    }
    #[inline]
    pub unsafe fn new(device: *const std_shared_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_DetectionNetwork_DetectionNetwork(__bindgen_tmp.as_mut_ptr(), device);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork17getRequiredInputsEv"]
    pub fn dai_node_DetectionNetwork_getRequiredInputs(
        this: *mut ::std::os::raw::c_void,
    ) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node16DetectionNetwork13buildInternalEv"]
    pub fn dai_node_DetectionNetwork_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief EdgeDetector node. Performs edge detection using 3x3 Sobel filter"]
#[repr(C)]
pub struct dai_node_EdgeDetector {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_EdgeDetectorProperties>,
    #[doc = " Initial config to use for edge detection."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input EdgeDetectorConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input image on which edge detection is performed.\n Default queue is non-blocking with size 4."]
    pub inputImage: dai_Node_Input,
    #[doc = " Outputs image frame with detected edges"]
    pub outputImage: dai_Node_Output,
    #[doc = " Passthrough message on which the calculation was performed."]
    pub passthroughInputImage: dai_Node_Output,
}
pub const dai_node_EdgeDetector_NAME: &[u8; 13] = b"EdgeDetector\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_EdgeDetector"][::std::mem::size_of::<dai_node_EdgeDetector>() - 1776usize];
    ["Alignment of dai_node_EdgeDetector"]
        [::std::mem::align_of::<dai_node_EdgeDetector>() - 8usize];
    ["Offset of field: dai_node_EdgeDetector::initialConfig"]
        [::std::mem::offset_of!(dai_node_EdgeDetector, initialConfig) - 448usize];
    ["Offset of field: dai_node_EdgeDetector::inputConfig"]
        [::std::mem::offset_of!(dai_node_EdgeDetector, inputConfig) - 464usize];
    ["Offset of field: dai_node_EdgeDetector::inputImage"]
        [::std::mem::offset_of!(dai_node_EdgeDetector, inputImage) - 960usize];
    ["Offset of field: dai_node_EdgeDetector::outputImage"]
        [::std::mem::offset_of!(dai_node_EdgeDetector, outputImage) - 1456usize];
    ["Offset of field: dai_node_EdgeDetector::passthroughInputImage"]
        [::std::mem::offset_of!(dai_node_EdgeDetector, passthroughInputImage) - 1616usize];
};
unsafe extern "C" {
    #[doc = " Specify number of frames in pool.\n @param numFramesPool How many frames should the pool have"]
    #[link_name = "\u{1}_ZN3dai4node12EdgeDetector16setNumFramesPoolEi"]
    pub fn dai_node_EdgeDetector_setNumFramesPool(
        this: *mut dai_node_EdgeDetector,
        numFramesPool: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify maximum size of output image.\n @param maxFrameSize Maximum frame size in bytes"]
    #[link_name = "\u{1}_ZN3dai4node12EdgeDetector21setMaxOutputFrameSizeEi"]
    pub fn dai_node_EdgeDetector_setMaxOutputFrameSize(
        this: *mut dai_node_EdgeDetector,
        maxFrameSize: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node12EdgeDetectorC1ESt10unique_ptrINS_22EdgeDetectorPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_EdgeDetector_EdgeDetector(
        this: *mut dai_node_EdgeDetector,
        props: std_unique_ptr,
    );
}
impl dai_node_EdgeDetector {
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, numFramesPool: ::std::os::raw::c_int) {
        dai_node_EdgeDetector_setNumFramesPool(self, numFramesPool)
    }
    #[inline]
    pub unsafe fn setMaxOutputFrameSize(&mut self, maxFrameSize: ::std::os::raw::c_int) {
        dai_node_EdgeDetector_setMaxOutputFrameSize(self, maxFrameSize)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_EdgeDetector_EdgeDetector(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node12EdgeDetector13getPropertiesEv"]
    pub fn dai_node_EdgeDetector_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 16usize>;
}
#[doc = " @brief FeatureTracker node.\n Performs feature tracking and reidentification using motion estimation between 2 consecutive frames."]
#[repr(C)]
pub struct dai_node_FeatureTracker {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_FeatureTrackerProperties>,
    #[doc = " Initial config to use for feature tracking."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input FeatureTrackerConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input message with frame data on which feature tracking is performed.\n Default queue is non-blocking with size 4."]
    pub inputImage: dai_Node_Input,
    #[doc = " Outputs TrackedFeatures message that carries tracked features results."]
    pub outputFeatures: dai_Node_Output,
    #[doc = " Passthrough message on which the calculation was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughInputImage: dai_Node_Output,
}
pub const dai_node_FeatureTracker_NAME: &[u8; 15] = b"FeatureTracker\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_FeatureTracker"]
        [::std::mem::size_of::<dai_node_FeatureTracker>() - 1776usize];
    ["Alignment of dai_node_FeatureTracker"]
        [::std::mem::align_of::<dai_node_FeatureTracker>() - 8usize];
    ["Offset of field: dai_node_FeatureTracker::initialConfig"]
        [::std::mem::offset_of!(dai_node_FeatureTracker, initialConfig) - 448usize];
    ["Offset of field: dai_node_FeatureTracker::inputConfig"]
        [::std::mem::offset_of!(dai_node_FeatureTracker, inputConfig) - 464usize];
    ["Offset of field: dai_node_FeatureTracker::inputImage"]
        [::std::mem::offset_of!(dai_node_FeatureTracker, inputImage) - 960usize];
    ["Offset of field: dai_node_FeatureTracker::outputFeatures"]
        [::std::mem::offset_of!(dai_node_FeatureTracker, outputFeatures) - 1456usize];
    ["Offset of field: dai_node_FeatureTracker::passthroughInputImage"]
        [::std::mem::offset_of!(dai_node_FeatureTracker, passthroughInputImage) - 1616usize];
};
unsafe extern "C" {
    #[doc = " Specify allocated hardware resources for feature tracking.\n 2 shaves/memory slices are required for optical flow, 1 for corner detection only.\n @param numShaves Number of shaves. Maximum 2.\n @param numMemorySlices Number of memory slices. Maximum 2."]
    #[link_name = "\u{1}_ZN3dai4node14FeatureTracker20setHardwareResourcesEii"]
    pub fn dai_node_FeatureTracker_setHardwareResources(
        this: *mut dai_node_FeatureTracker,
        numShaves: ::std::os::raw::c_int,
        numMemorySlices: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node14FeatureTrackerC1ESt10unique_ptrINS_24FeatureTrackerPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_FeatureTracker_FeatureTracker(
        this: *mut dai_node_FeatureTracker,
        props: std_unique_ptr,
    );
}
impl dai_node_FeatureTracker {
    #[inline]
    pub unsafe fn setHardwareResources(
        &mut self,
        numShaves: ::std::os::raw::c_int,
        numMemorySlices: ::std::os::raw::c_int,
    ) {
        dai_node_FeatureTracker_setHardwareResources(self, numShaves, numMemorySlices)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_FeatureTracker_FeatureTracker(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node14FeatureTracker13getPropertiesEv"]
    pub fn dai_node_FeatureTracker_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 21usize>;
}
#[doc = " @brief IMU node for BNO08X."]
#[repr(C)]
pub struct dai_node_IMU {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_IMUProperties>,
    pub _base_1: dai_SourceNode,
    #[doc = " Outputs IMUData message that carries IMU packets."]
    pub out: dai_Node_Output,
    #[doc = " Mock IMU data for replaying recorded data"]
    pub mockIn: dai_Node_Input,
}
pub const dai_node_IMU_NAME: &[u8; 4] = b"IMU\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_IMU"][::std::mem::size_of::<dai_node_IMU>() - 1112usize];
    ["Alignment of dai_node_IMU"][::std::mem::align_of::<dai_node_IMU>() - 8usize];
    ["Offset of field: dai_node_IMU::out"][::std::mem::offset_of!(dai_node_IMU, out) - 456usize];
    ["Offset of field: dai_node_IMU::mockIn"]
        [::std::mem::offset_of!(dai_node_IMU, mockIn) - 616usize];
};
unsafe extern "C" {
    #[doc = " Enable a new IMU sensor with explicit configuration"]
    #[link_name = "\u{1}_ZN3dai4node3IMU15enableIMUSensorENS_15IMUSensorConfigE"]
    pub fn dai_node_IMU_enableIMUSensor(this: *mut dai_node_IMU, sensorConfig: dai_IMUSensorConfig);
}
unsafe extern "C" {
    #[doc = " Enable a list of IMU sensors with explicit configuration"]
    #[link_name = "\u{1}_ZN3dai4node3IMU15enableIMUSensorERKSt6vectorINS_15IMUSensorConfigESaIS3_EE"]
    pub fn dai_node_IMU_enableIMUSensor1(this: *mut dai_node_IMU, sensorConfigs: *const std_vector);
}
unsafe extern "C" {
    #[doc = " Enable a new IMU sensor with default configuration"]
    #[link_name = "\u{1}_ZN3dai4node3IMU15enableIMUSensorENS_9IMUSensorEj"]
    pub fn dai_node_IMU_enableIMUSensor2(
        this: *mut dai_node_IMU,
        sensor: dai_IMUSensor,
        reportRate: u32,
    );
}
unsafe extern "C" {
    #[doc = " Enable a list of IMU sensors with default configuration"]
    #[link_name = "\u{1}_ZN3dai4node3IMU15enableIMUSensorERKSt6vectorINS_9IMUSensorESaIS3_EEj"]
    pub fn dai_node_IMU_enableIMUSensor3(
        this: *mut dai_node_IMU,
        sensors: *const std_vector,
        reportRate: u32,
    );
}
unsafe extern "C" {
    #[doc = " Above this packet threshold data will be sent to host, if queue is not blocked"]
    #[link_name = "\u{1}_ZN3dai4node3IMU23setBatchReportThresholdEi"]
    pub fn dai_node_IMU_setBatchReportThreshold(
        this: *mut dai_node_IMU,
        batchReportThreshold: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Above this packet threshold data will be sent to host, if queue is not blocked"]
    #[link_name = "\u{1}_ZNK3dai4node3IMU23getBatchReportThresholdEv"]
    pub fn dai_node_IMU_getBatchReportThreshold(this: *const dai_node_IMU)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Maximum number of IMU packets in a batch report"]
    #[link_name = "\u{1}_ZN3dai4node3IMU18setMaxBatchReportsEi"]
    pub fn dai_node_IMU_setMaxBatchReports(
        this: *mut dai_node_IMU,
        maxBatchReports: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Maximum number of IMU packets in a batch report"]
    #[link_name = "\u{1}_ZNK3dai4node3IMU18getMaxBatchReportsEv"]
    pub fn dai_node_IMU_getMaxBatchReports(this: *const dai_node_IMU) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node3IMU20enableFirmwareUpdateEb"]
    pub fn dai_node_IMU_enableFirmwareUpdate(this: *mut dai_node_IMU, enable: bool);
}
impl dai_node_IMU {
    #[inline]
    pub unsafe fn enableIMUSensor(&mut self, sensorConfig: dai_IMUSensorConfig) {
        dai_node_IMU_enableIMUSensor(self, sensorConfig)
    }
    #[inline]
    pub unsafe fn enableIMUSensor1(&mut self, sensorConfigs: *const std_vector) {
        dai_node_IMU_enableIMUSensor1(self, sensorConfigs)
    }
    #[inline]
    pub unsafe fn enableIMUSensor2(&mut self, sensor: dai_IMUSensor, reportRate: u32) {
        dai_node_IMU_enableIMUSensor2(self, sensor, reportRate)
    }
    #[inline]
    pub unsafe fn enableIMUSensor3(&mut self, sensors: *const std_vector, reportRate: u32) {
        dai_node_IMU_enableIMUSensor3(self, sensors, reportRate)
    }
    #[inline]
    pub unsafe fn setBatchReportThreshold(&mut self, batchReportThreshold: ::std::os::raw::c_int) {
        dai_node_IMU_setBatchReportThreshold(self, batchReportThreshold)
    }
    #[inline]
    pub unsafe fn getBatchReportThreshold(&self) -> ::std::os::raw::c_int {
        dai_node_IMU_getBatchReportThreshold(self)
    }
    #[inline]
    pub unsafe fn setMaxBatchReports(&mut self, maxBatchReports: ::std::os::raw::c_int) {
        dai_node_IMU_setMaxBatchReports(self, maxBatchReports)
    }
    #[inline]
    pub unsafe fn getMaxBatchReports(&self) -> ::std::os::raw::c_int {
        dai_node_IMU_getMaxBatchReports(self)
    }
    #[inline]
    pub unsafe fn enableFirmwareUpdate(&mut self, enable: bool) {
        dai_node_IMU_enableFirmwareUpdate(self, enable)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node3IMU12isSourceNodeEv"]
    pub fn dai_node_IMU_isSourceNode(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_NK3dai4node3IMU19getNodeRecordParamsEv"]
    pub fn dai_node_IMU_getNodeRecordParams(
        this: *mut ::std::os::raw::c_void,
    ) -> dai_NodeRecordParams;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node3IMU15getRecordOutputEv"]
    pub fn dai_node_IMU_getRecordOutput(this: *mut ::std::os::raw::c_void) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node3IMU14getReplayInputEv"]
    pub fn dai_node_IMU_getReplayInput(this: *mut ::std::os::raw::c_void) -> *mut dai_Node_Input;
}
#[doc = " @brief ImageManip node. Capability to crop, resize, warp, ... incoming image frames"]
#[repr(C)]
pub struct dai_node_ImageManip {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ImageManipProperties>,
    pub runOnHostVar: bool,
    #[doc = " Initial config to use when manipulating frames"]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input ImageManipConfig message with ability to modify parameters in runtime"]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input image to be modified"]
    pub inputImage: dai_Node_Input,
    pub out: dai_Node_Output,
}
#[doc = " Enable hardware accelerated image manipulation if set to HW. Only applied on RVC4.\n This can cause some unexpected behavior when using multiple ImageManip nodes in series.\n Currently, the only operation affected is downscaling."]
pub use self::dai_ImageManipProperties_Backend as dai_node_ImageManip_Backend;
#[doc = " Set performance mode for ImageManip with a tradeoff between performance and power consumption. Only applied on RVC4.\n This only affects scaling NV12 and GRAY images.\n  - PERFORMANCE: High performance, high power consumption. Uses the OpenCV backend.\n  - BALANCED: Balanced performance and power consumption. Uses the FastCV backend configured for high performance where possible with a fallback to\n OpenCV.\n  - LOW_POWER: Low performance, low power consumption. Uses the FastCV backend configured for low power where possible with a fallback to OpenCV."]
pub use self::dai_ImageManipProperties_PerformanceMode as dai_node_ImageManip_PerformanceMode;
pub const dai_node_ImageManip_NAME: &[u8; 11] = b"ImageManip\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_ImageManip"][::std::mem::size_of::<dai_node_ImageManip>() - 1624usize];
    ["Alignment of dai_node_ImageManip"][::std::mem::align_of::<dai_node_ImageManip>() - 8usize];
    ["Offset of field: dai_node_ImageManip::runOnHostVar"]
        [::std::mem::offset_of!(dai_node_ImageManip, runOnHostVar) - 448usize];
    ["Offset of field: dai_node_ImageManip::initialConfig"]
        [::std::mem::offset_of!(dai_node_ImageManip, initialConfig) - 456usize];
    ["Offset of field: dai_node_ImageManip::inputConfig"]
        [::std::mem::offset_of!(dai_node_ImageManip, inputConfig) - 472usize];
    ["Offset of field: dai_node_ImageManip::inputImage"]
        [::std::mem::offset_of!(dai_node_ImageManip, inputImage) - 968usize];
    ["Offset of field: dai_node_ImageManip::out"]
        [::std::mem::offset_of!(dai_node_ImageManip, out) - 1464usize];
};
unsafe extern "C" {
    #[doc = " Specify number of frames in pool.\n @param numFramesPool How many frames should the pool have"]
    #[link_name = "\u{1}_ZN3dai4node10ImageManip16setNumFramesPoolEi"]
    pub fn dai_node_ImageManip_setNumFramesPool(
        this: *mut dai_node_ImageManip,
        numFramesPool: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify maximum size of output image.\n @param maxFrameSize Maximum frame size in bytes"]
    #[link_name = "\u{1}_ZN3dai4node10ImageManip21setMaxOutputFrameSizeEi"]
    pub fn dai_node_ImageManip_setMaxOutputFrameSize(
        this: *mut dai_node_ImageManip,
        maxFrameSize: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify whether to run on host or device\n @param runOnHost Run node on host"]
    #[link_name = "\u{1}_ZN3dai4node10ImageManip12setRunOnHostEb"]
    pub fn dai_node_ImageManip_setRunOnHost(
        this: *mut dai_node_ImageManip,
        runOnHost: bool,
    ) -> *mut dai_node_ImageManip;
}
unsafe extern "C" {
    #[doc = " Set CPU as backend preference\n @param backend Backend preference"]
    #[link_name = "\u{1}_ZN3dai4node10ImageManip10setBackendENS_20ImageManipProperties7BackendE"]
    pub fn dai_node_ImageManip_setBackend(
        this: *mut dai_node_ImageManip,
        backend: dai_node_ImageManip_Backend,
    ) -> *mut dai_node_ImageManip;
}
unsafe extern "C" {
    #[doc = " Set performance mode\n @param performanceMode Performance mode"]
    #[link_name = "\u{1}_ZN3dai4node10ImageManip18setPerformanceModeENS_20ImageManipProperties15PerformanceModeE"]
    pub fn dai_node_ImageManip_setPerformanceMode(
        this: *mut dai_node_ImageManip,
        performanceMode: dai_node_ImageManip_PerformanceMode,
    ) -> *mut dai_node_ImageManip;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10ImageManipC1ESt10unique_ptrINS_20ImageManipPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_ImageManip_ImageManip(this: *mut dai_node_ImageManip, props: std_unique_ptr);
}
impl dai_node_ImageManip {
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, numFramesPool: ::std::os::raw::c_int) {
        dai_node_ImageManip_setNumFramesPool(self, numFramesPool)
    }
    #[inline]
    pub unsafe fn setMaxOutputFrameSize(&mut self, maxFrameSize: ::std::os::raw::c_int) {
        dai_node_ImageManip_setMaxOutputFrameSize(self, maxFrameSize)
    }
    #[inline]
    pub unsafe fn setRunOnHost(&mut self, runOnHost: bool) -> *mut dai_node_ImageManip {
        dai_node_ImageManip_setRunOnHost(self, runOnHost)
    }
    #[inline]
    pub unsafe fn setBackend(
        &mut self,
        backend: dai_node_ImageManip_Backend,
    ) -> *mut dai_node_ImageManip {
        dai_node_ImageManip_setBackend(self, backend)
    }
    #[inline]
    pub unsafe fn setPerformanceMode(
        &mut self,
        performanceMode: dai_node_ImageManip_PerformanceMode,
    ) -> *mut dai_node_ImageManip {
        dai_node_ImageManip_setPerformanceMode(self, performanceMode)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_ImageManip_ImageManip(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10ImageManip13getPropertiesEv"]
    pub fn dai_node_ImageManip_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 19usize>;
}
unsafe extern "C" {
    #[doc = " Check if the node is set to run on host"]
    #[link_name = "\u{1}_ZNK3dai4node10ImageManip9runOnHostEv"]
    pub fn dai_node_ImageManip_runOnHost(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10ImageManip3runEv"]
    pub fn dai_node_ImageManip_run(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct dai_node_MessageDemux {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_MessageDemuxProperties>,
    #[doc = " Input message of type MessageGroup"]
    pub input: dai_Node_Input,
    #[doc = " A map of outputs, where keys are same as in the input MessageGroup"]
    pub outputs: dai_Node_OutputMap,
}
pub const dai_node_MessageDemux_NAME: &[u8; 13] = b"MessageDemux\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_MessageDemux"][::std::mem::size_of::<dai_node_MessageDemux>() - 1128usize];
    ["Alignment of dai_node_MessageDemux"]
        [::std::mem::align_of::<dai_node_MessageDemux>() - 8usize];
    ["Offset of field: dai_node_MessageDemux::input"]
        [::std::mem::offset_of!(dai_node_MessageDemux, input) - 448usize];
    ["Offset of field: dai_node_MessageDemux::outputs"]
        [::std::mem::offset_of!(dai_node_MessageDemux, outputs) - 944usize];
};
#[doc = " @brief MonoCamera node. For use with grayscale sensors."]
#[repr(C)]
pub struct dai_node_MonoCamera {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_MonoCameraProperties>,
    pub _base_1: dai_SourceNode,
    #[doc = " Initial control options to apply to sensor"]
    pub initialControl: dai_CameraControl,
    pub inputControl: dai_Node_Input,
    #[doc = " Input for mocking 'isp' functionality.\n Default queue is blocking with size 8"]
    pub mockIsp: dai_Node_Input,
    pub out: dai_Node_Output,
    pub raw: dai_Node_Output,
    pub frameEvent: dai_Node_Output,
}
pub const dai_node_MonoCamera_NAME: &[u8; 11] = b"MonoCamera\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_MonoCamera"][::std::mem::size_of::<dai_node_MonoCamera>() - 2120usize];
    ["Alignment of dai_node_MonoCamera"][::std::mem::align_of::<dai_node_MonoCamera>() - 8usize];
    ["Offset of field: dai_node_MonoCamera::initialControl"]
        [::std::mem::offset_of!(dai_node_MonoCamera, initialControl) - 456usize];
    ["Offset of field: dai_node_MonoCamera::inputControl"]
        [::std::mem::offset_of!(dai_node_MonoCamera, inputControl) - 648usize];
    ["Offset of field: dai_node_MonoCamera::mockIsp"]
        [::std::mem::offset_of!(dai_node_MonoCamera, mockIsp) - 1144usize];
    ["Offset of field: dai_node_MonoCamera::out"]
        [::std::mem::offset_of!(dai_node_MonoCamera, out) - 1640usize];
    ["Offset of field: dai_node_MonoCamera::raw"]
        [::std::mem::offset_of!(dai_node_MonoCamera, raw) - 1800usize];
    ["Offset of field: dai_node_MonoCamera::frameEvent"]
        [::std::mem::offset_of!(dai_node_MonoCamera, frameEvent) - 1960usize];
};
unsafe extern "C" {
    #[doc = " Specify which board socket to use\n @param boardSocket Board socket to use"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera14setBoardSocketENS_17CameraBoardSocketE"]
    pub fn dai_node_MonoCamera_setBoardSocket(
        this: *mut dai_node_MonoCamera,
        boardSocket: dai_CameraBoardSocket,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves which board socket to use\n @returns Board socket to use"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera14getBoardSocketEv"]
    pub fn dai_node_MonoCamera_getBoardSocket(
        this: *const dai_node_MonoCamera,
    ) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[doc = " Specify which camera to use by name\n @param name Name of the camera to use"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera9setCameraENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_MonoCamera_setCamera(this: *mut dai_node_MonoCamera, name: std_string);
}
unsafe extern "C" {
    #[doc = " Retrieves which camera to use by name\n @returns Name of the camera to use"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera9getCameraB5cxx11Ev"]
    pub fn dai_node_MonoCamera_getCamera(this: *const dai_node_MonoCamera) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera8setCamIdEl"]
    pub fn dai_node_MonoCamera_setCamId(this: *mut dai_node_MonoCamera, id: i64);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera8getCamIdEv"]
    pub fn dai_node_MonoCamera_getCamId(this: *const dai_node_MonoCamera) -> i64;
}
unsafe extern "C" {
    #[doc = " Set camera image orientation"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera19setImageOrientationENS_22CameraImageOrientationE"]
    pub fn dai_node_MonoCamera_setImageOrientation(
        this: *mut dai_node_MonoCamera,
        imageOrientation: dai_CameraImageOrientation,
    );
}
unsafe extern "C" {
    #[doc = " Get camera image orientation"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera19getImageOrientationEv"]
    pub fn dai_node_MonoCamera_getImageOrientation(
        this: *const dai_node_MonoCamera,
    ) -> dai_CameraImageOrientation;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera14setMockIspSizeEii"]
    pub fn dai_node_MonoCamera_setMockIspSize(
        this: *mut dai_node_MonoCamera,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set sensor resolution"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera13setResolutionENS_20MonoCameraProperties16SensorResolutionE"]
    pub fn dai_node_MonoCamera_setResolution(
        this: *mut dai_node_MonoCamera,
        resolution: dai_MonoCameraProperties_SensorResolution,
    );
}
unsafe extern "C" {
    #[doc = " Get sensor resolution"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera13getResolutionEv"]
    pub fn dai_node_MonoCamera_getResolution(
        this: *const dai_node_MonoCamera,
    ) -> dai_MonoCameraProperties_SensorResolution;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera19setFrameEventFilterERKSt6vectorINS_10FrameEventESaIS3_EE"]
    pub fn dai_node_MonoCamera_setFrameEventFilter(
        this: *mut dai_node_MonoCamera,
        events: *const std_vector,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera19getFrameEventFilterEv"]
    pub fn dai_node_MonoCamera_getFrameEventFilter(this: *const dai_node_MonoCamera) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Set rate at which camera should produce frames\n @param fps Rate in frames per second"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera6setFpsEf"]
    pub fn dai_node_MonoCamera_setFps(this: *mut dai_node_MonoCamera, fps: f32);
}
unsafe extern "C" {
    #[doc = " Isp 3A rate (auto focus, auto exposure, auto white balance, camera controls etc.).\n Default (0) matches the camera FPS, meaning that 3A is running on each frame.\n Reducing the rate of 3A reduces the CPU usage on CSS, but also increases the convergence rate of 3A.\n Note that camera controls will be processed at this rate. E.g. if camera is running at 30 fps, and camera control is sent at every frame,\n but 3A fps is set to 15, the camera control messages will be processed at 15 fps rate, which will lead to queueing.\n"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera11setIsp3aFpsEi"]
    pub fn dai_node_MonoCamera_setIsp3aFps(
        this: *mut dai_node_MonoCamera,
        isp3aFps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Get rate at which camera should produce frames\n @returns Rate in frames per second"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera6getFpsEv"]
    pub fn dai_node_MonoCamera_getFps(this: *const dai_node_MonoCamera) -> f32;
}
unsafe extern "C" {
    #[doc = " Get sensor resolution as size"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera17getResolutionSizeEv"]
    pub fn dai_node_MonoCamera_getResolutionSize(this: *const dai_node_MonoCamera) -> std_tuple;
}
unsafe extern "C" {
    #[doc = " Get sensor resolution width"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera18getResolutionWidthEv"]
    pub fn dai_node_MonoCamera_getResolutionWidth(
        this: *const dai_node_MonoCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get sensor resolution height"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera19getResolutionHeightEv"]
    pub fn dai_node_MonoCamera_getResolutionHeight(
        this: *const dai_node_MonoCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set number of frames in main (ISP output) pool"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera16setNumFramesPoolEi"]
    pub fn dai_node_MonoCamera_setNumFramesPool(
        this: *mut dai_node_MonoCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set number of frames in raw pool"]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera19setRawNumFramesPoolEi"]
    pub fn dai_node_MonoCamera_setRawNumFramesPool(
        this: *mut dai_node_MonoCamera,
        num: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Get number of frames in main (ISP output) pool"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera16getNumFramesPoolEv"]
    pub fn dai_node_MonoCamera_getNumFramesPool(
        this: *const dai_node_MonoCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get number of frames in raw pool"]
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera19getRawNumFramesPoolEv"]
    pub fn dai_node_MonoCamera_getRawNumFramesPool(
        this: *const dai_node_MonoCamera,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Configures whether the camera `raw` frames are saved as MIPI-packed to memory.\n The packed format is more efficient, consuming less memory on device, and less data\n to send to host: RAW10: 4 pixels saved on 5 bytes, RAW12: 2 pixels saved on 3 bytes.\n When packing is disabled (`false`), data is saved lsb-aligned, e.g. a RAW10 pixel\n will be stored as uint16, on bits 9..0: 0b0000'00pp'pppp'pppp.\n Default is auto: enabled for standard color/monochrome cameras where ISP can work\n with both packed/unpacked, but disabled for other cameras like ToF."]
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera18setRawOutputPackedEb"]
    pub fn dai_node_MonoCamera_setRawOutputPacked(this: *mut dai_node_MonoCamera, packed: bool);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10MonoCameraC1ESt10unique_ptrINS_20MonoCameraPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_MonoCamera_MonoCamera(this: *mut dai_node_MonoCamera, props: std_unique_ptr);
}
impl dai_node_MonoCamera {
    #[inline]
    pub unsafe fn setBoardSocket(&mut self, boardSocket: dai_CameraBoardSocket) {
        dai_node_MonoCamera_setBoardSocket(self, boardSocket)
    }
    #[inline]
    pub unsafe fn getBoardSocket(&self) -> dai_CameraBoardSocket {
        dai_node_MonoCamera_getBoardSocket(self)
    }
    #[inline]
    pub unsafe fn setCamera(&mut self, name: std_string) {
        dai_node_MonoCamera_setCamera(self, name)
    }
    #[inline]
    pub unsafe fn getCamera(&self) -> std_string {
        dai_node_MonoCamera_getCamera(self)
    }
    #[inline]
    pub unsafe fn setCamId(&mut self, id: i64) {
        dai_node_MonoCamera_setCamId(self, id)
    }
    #[inline]
    pub unsafe fn getCamId(&self) -> i64 {
        dai_node_MonoCamera_getCamId(self)
    }
    #[inline]
    pub unsafe fn setImageOrientation(&mut self, imageOrientation: dai_CameraImageOrientation) {
        dai_node_MonoCamera_setImageOrientation(self, imageOrientation)
    }
    #[inline]
    pub unsafe fn getImageOrientation(&self) -> dai_CameraImageOrientation {
        dai_node_MonoCamera_getImageOrientation(self)
    }
    #[inline]
    pub unsafe fn setMockIspSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_MonoCamera_setMockIspSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setResolution(&mut self, resolution: dai_MonoCameraProperties_SensorResolution) {
        dai_node_MonoCamera_setResolution(self, resolution)
    }
    #[inline]
    pub unsafe fn getResolution(&self) -> dai_MonoCameraProperties_SensorResolution {
        dai_node_MonoCamera_getResolution(self)
    }
    #[inline]
    pub unsafe fn setFrameEventFilter(&mut self, events: *const std_vector) {
        dai_node_MonoCamera_setFrameEventFilter(self, events)
    }
    #[inline]
    pub unsafe fn getFrameEventFilter(&self) -> std_vector {
        dai_node_MonoCamera_getFrameEventFilter(self)
    }
    #[inline]
    pub unsafe fn setFps(&mut self, fps: f32) {
        dai_node_MonoCamera_setFps(self, fps)
    }
    #[inline]
    pub unsafe fn setIsp3aFps(&mut self, isp3aFps: ::std::os::raw::c_int) {
        dai_node_MonoCamera_setIsp3aFps(self, isp3aFps)
    }
    #[inline]
    pub unsafe fn getFps(&self) -> f32 {
        dai_node_MonoCamera_getFps(self)
    }
    #[inline]
    pub unsafe fn getResolutionSize(&self) -> std_tuple {
        dai_node_MonoCamera_getResolutionSize(self)
    }
    #[inline]
    pub unsafe fn getResolutionWidth(&self) -> ::std::os::raw::c_int {
        dai_node_MonoCamera_getResolutionWidth(self)
    }
    #[inline]
    pub unsafe fn getResolutionHeight(&self) -> ::std::os::raw::c_int {
        dai_node_MonoCamera_getResolutionHeight(self)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_MonoCamera_setNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn setRawNumFramesPool(&mut self, num: ::std::os::raw::c_int) {
        dai_node_MonoCamera_setRawNumFramesPool(self, num)
    }
    #[inline]
    pub unsafe fn getNumFramesPool(&self) -> ::std::os::raw::c_int {
        dai_node_MonoCamera_getNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn getRawNumFramesPool(&self) -> ::std::os::raw::c_int {
        dai_node_MonoCamera_getRawNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn setRawOutputPacked(&mut self, packed: bool) {
        dai_node_MonoCamera_setRawOutputPacked(self, packed)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_MonoCamera_MonoCamera(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10MonoCamera13getPropertiesEv"]
    pub fn dai_node_MonoCamera_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 38usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node10MonoCamera12isSourceNodeEv"]
    pub fn dai_node_MonoCamera_isSourceNode(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_NK3dai4node10MonoCamera19getNodeRecordParamsEv"]
    pub fn dai_node_MonoCamera_getNodeRecordParams(
        this: *mut ::std::os::raw::c_void,
    ) -> dai_NodeRecordParams;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node10MonoCamera15getRecordOutputEv"]
    pub fn dai_node_MonoCamera_getRecordOutput(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut dai_Node_Output;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZThn448_N3dai4node10MonoCamera14getReplayInputEv"]
    pub fn dai_node_MonoCamera_getReplayInput(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut dai_Node_Input;
}
#[doc = " @brief ObjectTracker node. Performs object tracking using Kalman filter and hungarian algorithm."]
#[repr(C)]
pub struct dai_node_ObjectTracker {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ObjectTrackerProperties>,
    #[doc = " Input ImgFrame message on which tracking will be performed. RGBp, BGRp, NV12, YUV420p types are supported.\n Default queue is non-blocking with size 4."]
    pub inputTrackerFrame: dai_Node_Input,
    #[doc = " Input ImgFrame message on which object detection was performed.\n Default queue is non-blocking with size 4."]
    pub inputDetectionFrame: dai_Node_Input,
    #[doc = " Input message with image detection from neural network.\n Default queue is non-blocking with size 4."]
    pub inputDetections: dai_Node_Input,
    #[doc = " Input ObjectTrackerConfig message with ability to modify parameters at runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Outputs Tracklets message that carries object tracking results."]
    pub out: dai_Node_Output,
    #[doc = " Passthrough ImgFrame message on which tracking was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughTrackerFrame: dai_Node_Output,
    #[doc = " Passthrough ImgFrame message on which object detection was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughDetectionFrame: dai_Node_Output,
    #[doc = " Passthrough image detections message from neural network output.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughDetections: dai_Node_Output,
}
pub const dai_node_ObjectTracker_NAME: &[u8; 14] = b"ObjectTracker\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_ObjectTracker"][::std::mem::size_of::<dai_node_ObjectTracker>() - 3072usize];
    ["Alignment of dai_node_ObjectTracker"]
        [::std::mem::align_of::<dai_node_ObjectTracker>() - 8usize];
    ["Offset of field: dai_node_ObjectTracker::inputTrackerFrame"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, inputTrackerFrame) - 448usize];
    ["Offset of field: dai_node_ObjectTracker::inputDetectionFrame"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, inputDetectionFrame) - 944usize];
    ["Offset of field: dai_node_ObjectTracker::inputDetections"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, inputDetections) - 1440usize];
    ["Offset of field: dai_node_ObjectTracker::inputConfig"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, inputConfig) - 1936usize];
    ["Offset of field: dai_node_ObjectTracker::out"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, out) - 2432usize];
    ["Offset of field: dai_node_ObjectTracker::passthroughTrackerFrame"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, passthroughTrackerFrame) - 2592usize];
    ["Offset of field: dai_node_ObjectTracker::passthroughDetectionFrame"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, passthroughDetectionFrame) - 2752usize];
    ["Offset of field: dai_node_ObjectTracker::passthroughDetections"]
        [::std::mem::offset_of!(dai_node_ObjectTracker, passthroughDetections) - 2912usize];
};
unsafe extern "C" {
    #[doc = " Specify tracker threshold.\n @param threshold Above this threshold the detected objects will be tracked. Default 0, all image detections are tracked."]
    #[link_name = "\u{1}_ZN3dai4node13ObjectTracker19setTrackerThresholdEf"]
    pub fn dai_node_ObjectTracker_setTrackerThreshold(
        this: *mut dai_node_ObjectTracker,
        threshold: f32,
    );
}
unsafe extern "C" {
    #[doc = " Specify maximum number of object to track.\n @param maxObjectsToTrack Maximum number of object to track. Maximum 60 in case of SHORT_TERM_KCF, otherwise 1000."]
    #[link_name = "\u{1}_ZN3dai4node13ObjectTracker20setMaxObjectsToTrackEi"]
    pub fn dai_node_ObjectTracker_setMaxObjectsToTrack(
        this: *mut dai_node_ObjectTracker,
        maxObjectsToTrack: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify detection labels to track.\n @param labels Detection labels to track. Default every label is tracked from image detection network output."]
    #[link_name = "\u{1}_ZN3dai4node13ObjectTracker25setDetectionLabelsToTrackESt6vectorIjSaIjEE"]
    pub fn dai_node_ObjectTracker_setDetectionLabelsToTrack(
        this: *mut dai_node_ObjectTracker,
        labels: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Specify tracker type algorithm.\n @param type Tracker type."]
    #[link_name = "\u{1}_ZN3dai4node13ObjectTracker14setTrackerTypeENS_11TrackerTypeE"]
    pub fn dai_node_ObjectTracker_setTrackerType(
        this: *mut dai_node_ObjectTracker,
        type_: dai_TrackerType,
    );
}
unsafe extern "C" {
    #[doc = " Specify tracker ID assignment policy.\n @param type Tracker ID assignment policy."]
    #[link_name = "\u{1}_ZN3dai4node13ObjectTracker28setTrackerIdAssignmentPolicyENS_25TrackerIdAssignmentPolicyE"]
    pub fn dai_node_ObjectTracker_setTrackerIdAssignmentPolicy(
        this: *mut dai_node_ObjectTracker,
        type_: dai_TrackerIdAssignmentPolicy,
    );
}
unsafe extern "C" {
    #[doc = " Whether tracker should take into consideration class label for tracking."]
    #[link_name = "\u{1}_ZN3dai4node13ObjectTracker19setTrackingPerClassEb"]
    pub fn dai_node_ObjectTracker_setTrackingPerClass(
        this: *mut dai_node_ObjectTracker,
        trackingPerClass: bool,
    );
}
impl dai_node_ObjectTracker {
    #[inline]
    pub unsafe fn setTrackerThreshold(&mut self, threshold: f32) {
        dai_node_ObjectTracker_setTrackerThreshold(self, threshold)
    }
    #[inline]
    pub unsafe fn setMaxObjectsToTrack(&mut self, maxObjectsToTrack: ::std::os::raw::c_int) {
        dai_node_ObjectTracker_setMaxObjectsToTrack(self, maxObjectsToTrack)
    }
    #[inline]
    pub unsafe fn setDetectionLabelsToTrack(&mut self, labels: std_vector) {
        dai_node_ObjectTracker_setDetectionLabelsToTrack(self, labels)
    }
    #[inline]
    pub unsafe fn setTrackerType(&mut self, type_: dai_TrackerType) {
        dai_node_ObjectTracker_setTrackerType(self, type_)
    }
    #[inline]
    pub unsafe fn setTrackerIdAssignmentPolicy(&mut self, type_: dai_TrackerIdAssignmentPolicy) {
        dai_node_ObjectTracker_setTrackerIdAssignmentPolicy(self, type_)
    }
    #[inline]
    pub unsafe fn setTrackingPerClass(&mut self, trackingPerClass: bool) {
        dai_node_ObjectTracker_setTrackingPerClass(self, trackingPerClass)
    }
}
#[doc = " @brief PointCloud node. Computes point cloud from depth frames."]
#[repr(C)]
pub struct dai_node_PointCloud {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_PointCloudProperties>,
    #[doc = " Initial config to use when computing the point cloud."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input PointCloudConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input message with depth data used to create the point cloud.\n Default queue is non-blocking with size 4."]
    pub inputDepth: dai_Node_Input,
    #[doc = " Outputs PointCloudData message"]
    pub outputPointCloud: dai_Node_Output,
    #[doc = " Passthrough depth from which the point cloud was calculated.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughDepth: dai_Node_Output,
}
pub const dai_node_PointCloud_NAME: &[u8; 11] = b"PointCloud\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_PointCloud"][::std::mem::size_of::<dai_node_PointCloud>() - 1776usize];
    ["Alignment of dai_node_PointCloud"][::std::mem::align_of::<dai_node_PointCloud>() - 8usize];
    ["Offset of field: dai_node_PointCloud::initialConfig"]
        [::std::mem::offset_of!(dai_node_PointCloud, initialConfig) - 448usize];
    ["Offset of field: dai_node_PointCloud::inputConfig"]
        [::std::mem::offset_of!(dai_node_PointCloud, inputConfig) - 464usize];
    ["Offset of field: dai_node_PointCloud::inputDepth"]
        [::std::mem::offset_of!(dai_node_PointCloud, inputDepth) - 960usize];
    ["Offset of field: dai_node_PointCloud::outputPointCloud"]
        [::std::mem::offset_of!(dai_node_PointCloud, outputPointCloud) - 1456usize];
    ["Offset of field: dai_node_PointCloud::passthroughDepth"]
        [::std::mem::offset_of!(dai_node_PointCloud, passthroughDepth) - 1616usize];
};
unsafe extern "C" {
    #[doc = " Specify number of frames in pool.\n @param numFramesPool How many frames should the pool have"]
    #[link_name = "\u{1}_ZN3dai4node10PointCloud16setNumFramesPoolEi"]
    pub fn dai_node_PointCloud_setNumFramesPool(
        this: *mut dai_node_PointCloud,
        numFramesPool: ::std::os::raw::c_int,
    );
}
impl dai_node_PointCloud {
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, numFramesPool: ::std::os::raw::c_int) {
        dai_node_PointCloud_setNumFramesPool(self, numFramesPool)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10PointCloud13getPropertiesEv"]
    pub fn dai_node_PointCloud_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 19usize>;
}
#[doc = " @brief SPIIn node. Receives messages over SPI."]
#[repr(C)]
pub struct dai_node_SPIIn {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_SPIInProperties>,
    #[doc = " Outputs message of same type as send from host."]
    pub out: dai_Node_Output,
}
pub const dai_node_SPIIn_NAME: &[u8; 6] = b"SPIIn\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_SPIIn"][::std::mem::size_of::<dai_node_SPIIn>() - 608usize];
    ["Alignment of dai_node_SPIIn"][::std::mem::align_of::<dai_node_SPIIn>() - 8usize];
    ["Offset of field: dai_node_SPIIn::out"]
        [::std::mem::offset_of!(dai_node_SPIIn, out) - 448usize];
};
unsafe extern "C" {
    #[doc = " Specifies stream name over which the node will receive data\n\n @param name Stream name"]
    #[link_name = "\u{1}_ZN3dai4node5SPIIn13setStreamNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_SPIIn_setStreamName(this: *mut dai_node_SPIIn, name: *const std_string);
}
unsafe extern "C" {
    #[doc = " Specifies SPI Bus number to use\n @param id SPI Bus id"]
    #[link_name = "\u{1}_ZN3dai4node5SPIIn8setBusIdEi"]
    pub fn dai_node_SPIIn_setBusId(this: *mut dai_node_SPIIn, id: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[doc = " Set maximum message size it can receive\n @param maxDataSize Maximum size in bytes"]
    #[link_name = "\u{1}_ZN3dai4node5SPIIn14setMaxDataSizeEj"]
    pub fn dai_node_SPIIn_setMaxDataSize(
        this: *mut dai_node_SPIIn,
        maxDataSize: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[doc = " Set number of frames in pool for sending messages forward\n @param numFrames Maximum number of frames in pool"]
    #[link_name = "\u{1}_ZN3dai4node5SPIIn12setNumFramesEj"]
    pub fn dai_node_SPIIn_setNumFrames(
        this: *mut dai_node_SPIIn,
        numFrames: ::std::os::raw::c_uint,
    );
}
unsafe extern "C" {
    #[doc = " Get stream name"]
    #[link_name = "\u{1}_ZNK3dai4node5SPIIn13getStreamNameB5cxx11Ev"]
    pub fn dai_node_SPIIn_getStreamName(this: *const dai_node_SPIIn) -> std_string;
}
unsafe extern "C" {
    #[doc = " Get bus id"]
    #[link_name = "\u{1}_ZNK3dai4node5SPIIn8getBusIdEv"]
    pub fn dai_node_SPIIn_getBusId(this: *const dai_node_SPIIn) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get maximum messages size in bytes"]
    #[link_name = "\u{1}_ZNK3dai4node5SPIIn14getMaxDataSizeEv"]
    pub fn dai_node_SPIIn_getMaxDataSize(this: *const dai_node_SPIIn) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Get number of frames in pool"]
    #[link_name = "\u{1}_ZNK3dai4node5SPIIn12getNumFramesEv"]
    pub fn dai_node_SPIIn_getNumFrames(this: *const dai_node_SPIIn) -> ::std::os::raw::c_uint;
}
impl dai_node_SPIIn {
    #[inline]
    pub unsafe fn setStreamName(&mut self, name: *const std_string) {
        dai_node_SPIIn_setStreamName(self, name)
    }
    #[inline]
    pub unsafe fn setBusId(&mut self, id: ::std::os::raw::c_int) {
        dai_node_SPIIn_setBusId(self, id)
    }
    #[inline]
    pub unsafe fn setMaxDataSize(&mut self, maxDataSize: ::std::os::raw::c_uint) {
        dai_node_SPIIn_setMaxDataSize(self, maxDataSize)
    }
    #[inline]
    pub unsafe fn setNumFrames(&mut self, numFrames: ::std::os::raw::c_uint) {
        dai_node_SPIIn_setNumFrames(self, numFrames)
    }
    #[inline]
    pub unsafe fn getStreamName(&self) -> std_string {
        dai_node_SPIIn_getStreamName(self)
    }
    #[inline]
    pub unsafe fn getBusId(&self) -> ::std::os::raw::c_int {
        dai_node_SPIIn_getBusId(self)
    }
    #[inline]
    pub unsafe fn getMaxDataSize(&self) -> ::std::os::raw::c_uint {
        dai_node_SPIIn_getMaxDataSize(self)
    }
    #[inline]
    pub unsafe fn getNumFrames(&self) -> ::std::os::raw::c_uint {
        dai_node_SPIIn_getNumFrames(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node5SPIIn13buildInternalEv"]
    pub fn dai_node_SPIIn_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief SPIOut node. Sends messages over SPI."]
#[repr(C)]
pub struct dai_node_SPIOut {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_SPIOutProperties>,
    #[doc = " Input for any type of messages to be transferred over SPI stream\n Default queue is blocking with size 8"]
    pub input: dai_Node_Input,
}
pub const dai_node_SPIOut_NAME: &[u8; 7] = b"SPIOut\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_SPIOut"][::std::mem::size_of::<dai_node_SPIOut>() - 944usize];
    ["Alignment of dai_node_SPIOut"][::std::mem::align_of::<dai_node_SPIOut>() - 8usize];
    ["Offset of field: dai_node_SPIOut::input"]
        [::std::mem::offset_of!(dai_node_SPIOut, input) - 448usize];
};
#[repr(C)]
pub struct dai_node_Script {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ScriptProperties>,
    pub scriptPath: dai_Path,
    #[doc = " Inputs to Script node. Can be accessed using subscript operator (Eg: inputs['in1'])\n By default inputs are set to blocking with queue size 8"]
    pub inputs: dai_Node_InputMap,
    #[doc = " Outputs from Script node. Can be accessed subscript operator (Eg: outputs['out1'])"]
    pub outputs: dai_Node_OutputMap,
}
pub const dai_node_Script_NAME: &[u8; 7] = b"Script\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_Script"][::std::mem::size_of::<dai_node_Script>() - 864usize];
    ["Alignment of dai_node_Script"][::std::mem::align_of::<dai_node_Script>() - 8usize];
    ["Offset of field: dai_node_Script::scriptPath"]
        [::std::mem::offset_of!(dai_node_Script, scriptPath) - 448usize];
    ["Offset of field: dai_node_Script::inputs"]
        [::std::mem::offset_of!(dai_node_Script, inputs) - 480usize];
    ["Offset of field: dai_node_Script::outputs"]
        [::std::mem::offset_of!(dai_node_Script, outputs) - 680usize];
};
unsafe extern "C" {
    #[doc = " Specify local filesystem path to load the script\n @param path Filesystem path to load the script\n @param name Optionally set a name of this script, otherwise the name defaults to the path"]
    #[link_name = "\u{1}_ZN3dai4node6Script13setScriptPathERKNS_4PathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_Script_setScriptPath(
        this: *mut dai_node_Script,
        path: *const dai_Path,
        name: *const std_string,
    );
}
unsafe extern "C" {
    #[doc = " Sets script data to be interpreted\n @param script Script string to be interpreted\n @param name Optionally set a name of this script"]
    #[link_name = "\u{1}_ZN3dai4node6Script9setScriptERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_"]
    pub fn dai_node_Script_setScript(
        this: *mut dai_node_Script,
        script: *const std_string,
        name: *const std_string,
    );
}
unsafe extern "C" {
    #[doc = " Sets script data to be interpreted\n @param data Binary data that represents the script to be interpreted\n @param name Optionally set a name of this script"]
    #[link_name = "\u{1}_ZN3dai4node6Script9setScriptERKSt6vectorIhSaIhEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_Script_setScript1(
        this: *mut dai_node_Script,
        data: *const std_vector,
        name: *const std_string,
    );
}
unsafe extern "C" {
    #[doc = " @brief Get filesystem path from where script was loaded.\n\n @return dai::Path from where script was loaded, otherwise returns empty path"]
    #[link_name = "\u{1}_ZNK3dai4node6Script13getScriptPathEv"]
    pub fn dai_node_Script_getScriptPath(this: *const dai_node_Script) -> dai_Path;
}
unsafe extern "C" {
    #[doc = " @brief Get the script name in utf-8.\n\n When name set with setScript() or setScriptPath(), returns that name.\n When script loaded with setScriptPath() with name not provided, returns the utf-8 string of that path.\n Otherwise, returns \"<script>\"\n\n @return std::string of script name in utf-8"]
    #[link_name = "\u{1}_ZNK3dai4node6Script13getScriptNameB5cxx11Ev"]
    pub fn dai_node_Script_getScriptName(this: *const dai_node_Script) -> std_string;
}
unsafe extern "C" {
    #[doc = " Set on which processor the script should run\n @param type Processor type - Leon CSS or Leon MSS"]
    #[link_name = "\u{1}_ZN3dai4node6Script12setProcessorENS_13ProcessorTypeE"]
    pub fn dai_node_Script_setProcessor(this: *mut dai_node_Script, type_: dai_ProcessorType);
}
unsafe extern "C" {
    #[doc = " Get on which processor the script should run\n @returns Processor type - Leon CSS or Leon MSS"]
    #[link_name = "\u{1}_ZNK3dai4node6Script12getProcessorEv"]
    pub fn dai_node_Script_getProcessor(this: *const dai_node_Script) -> dai_ProcessorType;
}
impl dai_node_Script {
    #[inline]
    pub unsafe fn setScriptPath(&mut self, path: *const dai_Path, name: *const std_string) {
        dai_node_Script_setScriptPath(self, path, name)
    }
    #[inline]
    pub unsafe fn setScript(&mut self, script: *const std_string, name: *const std_string) {
        dai_node_Script_setScript(self, script, name)
    }
    #[inline]
    pub unsafe fn setScript1(&mut self, data: *const std_vector, name: *const std_string) {
        dai_node_Script_setScript1(self, data, name)
    }
    #[inline]
    pub unsafe fn getScriptPath(&self) -> dai_Path {
        dai_node_Script_getScriptPath(self)
    }
    #[inline]
    pub unsafe fn getScriptName(&self) -> std_string {
        dai_node_Script_getScriptName(self)
    }
    #[inline]
    pub unsafe fn setProcessor(&mut self, type_: dai_ProcessorType) {
        dai_node_Script_setProcessor(self, type_)
    }
    #[inline]
    pub unsafe fn getProcessor(&self) -> dai_ProcessorType {
        dai_node_Script_getProcessor(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node6Script13buildInternalEv"]
    pub fn dai_node_Script_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief ImageAlign node. Calculates spatial location data on a set of ROIs on depth map."]
#[repr(C)]
pub struct dai_node_ImageAlign {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ImageAlignProperties>,
    #[doc = " Initial config to use when calculating spatial location data."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input message.\n Default queue is non-blocking with size 4."]
    pub input: dai_Node_Input,
    #[doc = " Input align to message.\n Default queue is non-blocking with size 1."]
    pub inputAlignTo: dai_Node_Input,
    #[doc = " Outputs ImgFrame message that is aligned to inputAlignTo."]
    pub outputAligned: dai_Node_Output,
    #[doc = " Passthrough message on which the calculation was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughInput: dai_Node_Output,
}
pub const dai_node_ImageAlign_NAME: &[u8; 11] = b"ImageAlign\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_ImageAlign"][::std::mem::size_of::<dai_node_ImageAlign>() - 2272usize];
    ["Alignment of dai_node_ImageAlign"][::std::mem::align_of::<dai_node_ImageAlign>() - 8usize];
    ["Offset of field: dai_node_ImageAlign::initialConfig"]
        [::std::mem::offset_of!(dai_node_ImageAlign, initialConfig) - 448usize];
    ["Offset of field: dai_node_ImageAlign::inputConfig"]
        [::std::mem::offset_of!(dai_node_ImageAlign, inputConfig) - 464usize];
    ["Offset of field: dai_node_ImageAlign::input"]
        [::std::mem::offset_of!(dai_node_ImageAlign, input) - 960usize];
    ["Offset of field: dai_node_ImageAlign::inputAlignTo"]
        [::std::mem::offset_of!(dai_node_ImageAlign, inputAlignTo) - 1456usize];
    ["Offset of field: dai_node_ImageAlign::outputAligned"]
        [::std::mem::offset_of!(dai_node_ImageAlign, outputAligned) - 1952usize];
    ["Offset of field: dai_node_ImageAlign::passthroughInput"]
        [::std::mem::offset_of!(dai_node_ImageAlign, passthroughInput) - 2112usize];
};
unsafe extern "C" {
    #[doc = " Specify the output size of the aligned image"]
    #[link_name = "\u{1}_ZN3dai4node10ImageAlign13setOutputSizeEii"]
    pub fn dai_node_ImageAlign_setOutputSize(
        this: *mut dai_node_ImageAlign,
        alignWidth: ::std::os::raw::c_int,
        alignHeight: ::std::os::raw::c_int,
    ) -> *mut dai_node_ImageAlign;
}
unsafe extern "C" {
    #[doc = " Specify whether to keep aspect ratio when resizing"]
    #[link_name = "\u{1}_ZN3dai4node10ImageAlign21setOutKeepAspectRatioEb"]
    pub fn dai_node_ImageAlign_setOutKeepAspectRatio(
        this: *mut dai_node_ImageAlign,
        keep: bool,
    ) -> *mut dai_node_ImageAlign;
}
unsafe extern "C" {
    #[doc = " Specify interpolation method to use when resizing"]
    #[link_name = "\u{1}_ZN3dai4node10ImageAlign16setInterpolationENS_13InterpolationE"]
    pub fn dai_node_ImageAlign_setInterpolation(
        this: *mut dai_node_ImageAlign,
        interp: dai_Interpolation,
    ) -> *mut dai_node_ImageAlign;
}
unsafe extern "C" {
    #[doc = " Specify number of shaves to use for this node"]
    #[link_name = "\u{1}_ZN3dai4node10ImageAlign12setNumShavesEi"]
    pub fn dai_node_ImageAlign_setNumShaves(
        this: *mut dai_node_ImageAlign,
        numShaves: ::std::os::raw::c_int,
    ) -> *mut dai_node_ImageAlign;
}
unsafe extern "C" {
    #[doc = " Specify number of frames in the pool"]
    #[link_name = "\u{1}_ZN3dai4node10ImageAlign16setNumFramesPoolEi"]
    pub fn dai_node_ImageAlign_setNumFramesPool(
        this: *mut dai_node_ImageAlign,
        numFramesPool: ::std::os::raw::c_int,
    ) -> *mut dai_node_ImageAlign;
}
impl dai_node_ImageAlign {
    #[inline]
    pub unsafe fn setOutputSize(
        &mut self,
        alignWidth: ::std::os::raw::c_int,
        alignHeight: ::std::os::raw::c_int,
    ) -> *mut dai_node_ImageAlign {
        dai_node_ImageAlign_setOutputSize(self, alignWidth, alignHeight)
    }
    #[inline]
    pub unsafe fn setOutKeepAspectRatio(&mut self, keep: bool) -> *mut dai_node_ImageAlign {
        dai_node_ImageAlign_setOutKeepAspectRatio(self, keep)
    }
    #[inline]
    pub unsafe fn setInterpolation(
        &mut self,
        interp: dai_Interpolation,
    ) -> *mut dai_node_ImageAlign {
        dai_node_ImageAlign_setInterpolation(self, interp)
    }
    #[inline]
    pub unsafe fn setNumShaves(
        &mut self,
        numShaves: ::std::os::raw::c_int,
    ) -> *mut dai_node_ImageAlign {
        dai_node_ImageAlign_setNumShaves(self, numShaves)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(
        &mut self,
        numFramesPool: ::std::os::raw::c_int,
    ) -> *mut dai_node_ImageAlign {
        dai_node_ImageAlign_setNumFramesPool(self, numFramesPool)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node10ImageAlign13getPropertiesEv"]
    pub fn dai_node_ImageAlign_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 17usize>;
}
#[doc = " @brief StereoDepth node. Compute stereo disparity and depth from left-right image pair."]
#[repr(C)]
pub struct dai_node_StereoDepth {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_StereoDepthProperties>,
    pub presetMode: dai_node_StereoDepth_PresetMode,
    #[doc = " Initial config to use for StereoDepth."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input StereoDepthConfig message with ability to modify parameters in runtime."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input align to message.\n Default queue is non-blocking with size 1."]
    pub inputAlignTo: dai_Node_Input,
    #[doc = " Input for left ImgFrame of left-right pair"]
    pub left: dai_Node_Input,
    #[doc = " Input for right ImgFrame of left-right pair"]
    pub right: dai_Node_Input,
    #[doc = " Outputs ImgFrame message that carries RAW16 encoded (0..65535) depth data in depth units (millimeter by default).\n\n Non-determined / invalid depth values are set to 0"]
    pub depth: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries RAW8 / RAW16 encoded disparity data:\n RAW8 encoded (0..95) for standard mode;\n RAW8 encoded (0..190) for extended disparity mode;\n RAW16 encoded for subpixel disparity mode:\n - 0..760 for 3 fractional bits (by default)\n - 0..1520 for 4 fractional bits\n - 0..3040 for 5 fractional bits"]
    pub disparity: dai_Node_Output,
    #[doc = " Passthrough ImgFrame message from 'left' Input."]
    pub syncedLeft: dai_Node_Output,
    #[doc = " Passthrough ImgFrame message from 'right' Input."]
    pub syncedRight: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries RAW8 encoded (grayscale) rectified frame data."]
    pub rectifiedLeft: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries RAW8 encoded (grayscale) rectified frame data."]
    pub rectifiedRight: dai_Node_Output,
    #[doc = " Outputs StereoDepthConfig message that contains current stereo configuration."]
    pub outConfig: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries left-right check first iteration (before combining with second iteration) disparity map.\n Useful for debugging/fine tuning."]
    pub debugDispLrCheckIt1: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries left-right check second iteration (before combining with first iteration) disparity map.\n Useful for debugging/fine tuning."]
    pub debugDispLrCheckIt2: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries extended left-right check first iteration (downscaled frame, before combining with second iteration) disparity map.\n Useful for debugging/fine tuning."]
    pub debugExtDispLrCheckIt1: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries extended left-right check second iteration (downscaled frame, before combining with first iteration) disparity map.\n Useful for debugging/fine tuning."]
    pub debugExtDispLrCheckIt2: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries cost dump of disparity map.\n Useful for debugging/fine tuning."]
    pub debugDispCostDump: dai_Node_Output,
    #[doc = " Outputs ImgFrame message that carries RAW8 confidence map.\n Lower values mean lower confidence of the calculated disparity value.\n RGB alignment, left-right check or any postprocessing (e.g., median filter) is not performed on confidence map."]
    pub confidenceMap: dai_Node_Output,
}
#[doc = " Prefers accuracy over density. More invalid depth values, but less outliers.\n This mode does not turn on any post-processing and is light on resources."]
pub const dai_node_StereoDepth_PresetMode_FAST_ACCURACY: dai_node_StereoDepth_PresetMode = 0;
#[doc = " Prefers density over accuracy. Less invalid depth values, but more outliers.\n This mode does not turn on any post-processing and is light on resources."]
pub const dai_node_StereoDepth_PresetMode_FAST_DENSITY: dai_node_StereoDepth_PresetMode = 1;
#[doc = " Prefers density over accuracy. Less invalid depth values, but more outliers.\n This mode does not turn on any post-processing and is light on resources."]
pub const dai_node_StereoDepth_PresetMode_DEFAULT: dai_node_StereoDepth_PresetMode = 2;
#[doc = " Prefers density over accuracy. Less invalid depth values, but more outliers.\n This mode does not turn on any post-processing and is light on resources."]
pub const dai_node_StereoDepth_PresetMode_FACE: dai_node_StereoDepth_PresetMode = 3;
#[doc = " Prefers density over accuracy. Less invalid depth values, but more outliers.\n This mode does not turn on any post-processing and is light on resources."]
pub const dai_node_StereoDepth_PresetMode_HIGH_DETAIL: dai_node_StereoDepth_PresetMode = 4;
#[doc = " Prefers density over accuracy. Less invalid depth values, but more outliers.\n This mode does not turn on any post-processing and is light on resources."]
pub const dai_node_StereoDepth_PresetMode_ROBOTICS: dai_node_StereoDepth_PresetMode = 5;
#[doc = " Preset modes for stereo depth."]
pub type dai_node_StereoDepth_PresetMode = ::std::os::raw::c_uint;
#[doc = " Median filter config for disparity post-processing"]
pub use self::dai_StereoDepthConfig_MedianFilter as dai_node_StereoDepth_MedianFilter;
pub const dai_node_StereoDepth_NAME: &[u8; 12] = b"StereoDepth\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_StereoDepth"][::std::mem::size_of::<dai_node_StereoDepth>() - 4536usize];
    ["Alignment of dai_node_StereoDepth"][::std::mem::align_of::<dai_node_StereoDepth>() - 8usize];
    ["Offset of field: dai_node_StereoDepth::presetMode"]
        [::std::mem::offset_of!(dai_node_StereoDepth, presetMode) - 448usize];
    ["Offset of field: dai_node_StereoDepth::initialConfig"]
        [::std::mem::offset_of!(dai_node_StereoDepth, initialConfig) - 456usize];
    ["Offset of field: dai_node_StereoDepth::inputConfig"]
        [::std::mem::offset_of!(dai_node_StereoDepth, inputConfig) - 472usize];
    ["Offset of field: dai_node_StereoDepth::inputAlignTo"]
        [::std::mem::offset_of!(dai_node_StereoDepth, inputAlignTo) - 968usize];
    ["Offset of field: dai_node_StereoDepth::left"]
        [::std::mem::offset_of!(dai_node_StereoDepth, left) - 1464usize];
    ["Offset of field: dai_node_StereoDepth::right"]
        [::std::mem::offset_of!(dai_node_StereoDepth, right) - 1960usize];
    ["Offset of field: dai_node_StereoDepth::depth"]
        [::std::mem::offset_of!(dai_node_StereoDepth, depth) - 2456usize];
    ["Offset of field: dai_node_StereoDepth::disparity"]
        [::std::mem::offset_of!(dai_node_StereoDepth, disparity) - 2616usize];
    ["Offset of field: dai_node_StereoDepth::syncedLeft"]
        [::std::mem::offset_of!(dai_node_StereoDepth, syncedLeft) - 2776usize];
    ["Offset of field: dai_node_StereoDepth::syncedRight"]
        [::std::mem::offset_of!(dai_node_StereoDepth, syncedRight) - 2936usize];
    ["Offset of field: dai_node_StereoDepth::rectifiedLeft"]
        [::std::mem::offset_of!(dai_node_StereoDepth, rectifiedLeft) - 3096usize];
    ["Offset of field: dai_node_StereoDepth::rectifiedRight"]
        [::std::mem::offset_of!(dai_node_StereoDepth, rectifiedRight) - 3256usize];
    ["Offset of field: dai_node_StereoDepth::outConfig"]
        [::std::mem::offset_of!(dai_node_StereoDepth, outConfig) - 3416usize];
    ["Offset of field: dai_node_StereoDepth::debugDispLrCheckIt1"]
        [::std::mem::offset_of!(dai_node_StereoDepth, debugDispLrCheckIt1) - 3576usize];
    ["Offset of field: dai_node_StereoDepth::debugDispLrCheckIt2"]
        [::std::mem::offset_of!(dai_node_StereoDepth, debugDispLrCheckIt2) - 3736usize];
    ["Offset of field: dai_node_StereoDepth::debugExtDispLrCheckIt1"]
        [::std::mem::offset_of!(dai_node_StereoDepth, debugExtDispLrCheckIt1) - 3896usize];
    ["Offset of field: dai_node_StereoDepth::debugExtDispLrCheckIt2"]
        [::std::mem::offset_of!(dai_node_StereoDepth, debugExtDispLrCheckIt2) - 4056usize];
    ["Offset of field: dai_node_StereoDepth::debugDispCostDump"]
        [::std::mem::offset_of!(dai_node_StereoDepth, debugDispCostDump) - 4216usize];
    ["Offset of field: dai_node_StereoDepth::confidenceMap"]
        [::std::mem::offset_of!(dai_node_StereoDepth, confidenceMap) - 4376usize];
};
unsafe extern "C" {
    #[doc = " Create StereoDepth node. Note that this API is global and if used autocreated cameras can't be reused.\n @param autoCreateCameras If true, will create left and right nodes if they don't exist\n @param presetMode Preset mode for stereo depth"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth5buildEbNS1_10PresetModeESt4pairIiiE"]
    pub fn dai_node_StereoDepth_build(
        this: *mut dai_node_StereoDepth,
        autoCreateCameras: bool,
        presetMode: dai_node_StereoDepth_PresetMode,
        size: std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Specify local filesystem paths to the mesh calibration files for 'left' and 'right' inputs.\n\n When a mesh calibration is set, it overrides the camera intrinsics/extrinsics matrices.\n Overrides useHomographyRectification behavior.\n Mesh format: a sequence of (y,x) points as 'float' with coordinates from the input image\n to be mapped in the output. The mesh can be subsampled, configured by `setMeshStep`.\n\n With a 1280x800 resolution and the default (16,16) step, the required mesh size is:\n\n width: 1280 / 16 + 1 = 81\n\n height: 800 / 16 + 1 = 51"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth13loadMeshFilesERKNS_4PathES4_"]
    pub fn dai_node_StereoDepth_loadMeshFiles(
        this: *mut dai_node_StereoDepth,
        pathLeft: *const dai_Path,
        pathRight: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Specify mesh calibration data for 'left' and 'right' inputs, as vectors of bytes.\n Overrides useHomographyRectification behavior.\n See `loadMeshFiles` for the expected data format"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth12loadMeshDataERKSt6vectorIhSaIhEES6_"]
    pub fn dai_node_StereoDepth_loadMeshData(
        this: *mut dai_node_StereoDepth,
        dataLeft: *const std_vector,
        dataRight: *const std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Set the distance between mesh points. Default: (16, 16)"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth11setMeshStepEii"]
    pub fn dai_node_StereoDepth_setMeshStep(
        this: *mut dai_node_StereoDepth,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify input resolution size\n\n Optional if MonoCamera exists, otherwise necessary"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth18setInputResolutionEii"]
    pub fn dai_node_StereoDepth_setInputResolution(
        this: *mut dai_node_StereoDepth,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify input resolution size\n\n Optional if MonoCamera exists, otherwise necessary"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth18setInputResolutionESt5tupleIJiiEE"]
    pub fn dai_node_StereoDepth_setInputResolution1(
        this: *mut dai_node_StereoDepth,
        resolution: std_tuple,
    );
}
unsafe extern "C" {
    #[doc = " Specify disparity/depth output resolution size, implemented by scaling.\n\n Currently only applicable when aligning to RGB camera"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth13setOutputSizeEii"]
    pub fn dai_node_StereoDepth_setOutputSize(
        this: *mut dai_node_StereoDepth,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specifies whether the frames resized by `setOutputSize` should preserve aspect ratio,\n with potential cropping when enabled. Default `true`"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth24setOutputKeepAspectRatioEb"]
    pub fn dai_node_StereoDepth_setOutputKeepAspectRatio(
        this: *mut dai_node_StereoDepth,
        keep: bool,
    );
}
unsafe extern "C" {
    #[doc = " @param align Set the disparity/depth alignment: centered (between the 'left' and 'right' inputs),\n or from the perspective of a rectified output stream"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth13setDepthAlignENS_17StereoDepthConfig16AlgorithmControl10DepthAlignE"]
    pub fn dai_node_StereoDepth_setDepthAlign(
        this: *mut dai_node_StereoDepth,
        align: dai_StereoDepthProperties_DepthAlign,
    );
}
unsafe extern "C" {
    #[doc = " @param camera Set the camera from whose perspective the disparity/depth will be aligned"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth13setDepthAlignENS_17CameraBoardSocketE"]
    pub fn dai_node_StereoDepth_setDepthAlign1(
        this: *mut dai_node_StereoDepth,
        camera: dai_CameraBoardSocket,
    );
}
unsafe extern "C" {
    #[doc = " Rectify input images or not."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth16setRectificationEb"]
    pub fn dai_node_StereoDepth_setRectification(this: *mut dai_node_StereoDepth, enable: bool);
}
unsafe extern "C" {
    #[doc = " Computes and combines disparities in both L-R and R-L directions, and combine them.\n\n For better occlusion handling, discarding invalid disparity values"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth17setLeftRightCheckEb"]
    pub fn dai_node_StereoDepth_setLeftRightCheck(this: *mut dai_node_StereoDepth, enable: bool);
}
unsafe extern "C" {
    #[doc = " Computes disparity with sub-pixel interpolation (3 fractional bits by default).\n\n Suitable for long range. Currently incompatible with extended disparity"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth11setSubpixelEb"]
    pub fn dai_node_StereoDepth_setSubpixel(this: *mut dai_node_StereoDepth, enable: bool);
}
unsafe extern "C" {
    #[doc = " Number of fractional bits for subpixel mode.\n Default value: 3.\n Valid values: 3,4,5.\n Defines the number of fractional disparities: 2^x.\n Median filter postprocessing is supported only for 3 fractional bits."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth25setSubpixelFractionalBitsEi"]
    pub fn dai_node_StereoDepth_setSubpixelFractionalBits(
        this: *mut dai_node_StereoDepth,
        subpixelFractionalBits: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Disparity range increased from 0-95 to 0-190, combined from full resolution and downscaled images.\n\n Suitable for short range objects. Currently incompatible with sub-pixel disparity"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth20setExtendedDisparityEb"]
    pub fn dai_node_StereoDepth_setExtendedDisparity(this: *mut dai_node_StereoDepth, enable: bool);
}
unsafe extern "C" {
    #[doc = " Fill color for missing data at frame edges\n @param color Grayscale 0..255, or -1 to replicate pixels"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth23setRectifyEdgeFillColorEi"]
    pub fn dai_node_StereoDepth_setRectifyEdgeFillColor(
        this: *mut dai_node_StereoDepth,
        color: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Enable runtime stereo mode switch, e.g. from standard to LR-check.\n Note: when enabled resources allocated for worst case to enable switching to any mode."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth20setRuntimeModeSwitchEb"]
    pub fn dai_node_StereoDepth_setRuntimeModeSwitch(this: *mut dai_node_StereoDepth, enable: bool);
}
unsafe extern "C" {
    #[doc = " Specify number of frames in pool.\n @param numFramesPool How many frames should the pool have"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth16setNumFramesPoolEi"]
    pub fn dai_node_StereoDepth_setNumFramesPool(
        this: *mut dai_node_StereoDepth,
        numFramesPool: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify allocated hardware resources for stereo depth.\n Suitable only to increase post processing runtime.\n @param numShaves Number of shaves.\n @param numMemorySlices Number of memory slices."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth34setPostProcessingHardwareResourcesEii"]
    pub fn dai_node_StereoDepth_setPostProcessingHardwareResources(
        this: *mut dai_node_StereoDepth,
        numShaves: ::std::os::raw::c_int,
        numMemorySlices: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Sets a default preset based on specified option.\n @param mode Stereo depth preset mode"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth23setDefaultProfilePresetENS1_10PresetModeE"]
    pub fn dai_node_StereoDepth_setDefaultProfilePreset(
        this: *mut dai_node_StereoDepth,
        mode: dai_node_StereoDepth_PresetMode,
    );
}
unsafe extern "C" {
    #[doc = " Use 3x3 homography matrix for stereo rectification instead of sparse mesh generated on device.\n Default behaviour is AUTO, for lenses with FOV over 85 degrees sparse mesh is used, otherwise 3x3 homography.\n If custom mesh data is provided through loadMeshData or loadMeshFiles this option is ignored.\n @param useHomographyRectification true: 3x3 homography matrix generated from calibration data is used for stereo rectification, can't correct lens\n distortion.\n false: sparse mesh is generated on-device from calibration data with mesh step specified with setMeshStep (Default: (16, 16)), can correct lens\n distortion. Implementation for generating the mesh is same as opencv's initUndistortRectifyMap function. Only the first 8 distortion coefficients are\n used from calibration data."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth26useHomographyRectificationEb"]
    pub fn dai_node_StereoDepth_useHomographyRectification(
        this: *mut dai_node_StereoDepth,
        useHomographyRectification: bool,
    );
}
unsafe extern "C" {
    #[doc = " Equivalent to useHomographyRectification(!enableDistortionCorrection)"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth26enableDistortionCorrectionEb"]
    pub fn dai_node_StereoDepth_enableDistortionCorrection(
        this: *mut dai_node_StereoDepth,
        enableDistortionCorrection: bool,
    );
}
unsafe extern "C" {
    #[doc = " Whether to enable frame syncing inside stereo node or not. Suitable if inputs are known to be synced."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth12setFrameSyncEb"]
    pub fn dai_node_StereoDepth_setFrameSync(
        this: *mut dai_node_StereoDepth,
        enableFrameSync: bool,
    );
}
unsafe extern "C" {
    #[doc = " Override baseline from calibration.\n Used only in disparity to depth conversion.\n Units are centimeters."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth11setBaselineEf"]
    pub fn dai_node_StereoDepth_setBaseline(this: *mut dai_node_StereoDepth, baseline: f32);
}
unsafe extern "C" {
    #[doc = " Override focal length from calibration.\n Used only in disparity to depth conversion.\n Units are pixels."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth14setFocalLengthEf"]
    pub fn dai_node_StereoDepth_setFocalLength(this: *mut dai_node_StereoDepth, focalLength: f32);
}
unsafe extern "C" {
    #[doc = " Use baseline information for disparity to depth conversion from specs (design data) or from calibration.\n Default: true"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth37setDisparityToDepthUseSpecTranslationEb"]
    pub fn dai_node_StereoDepth_setDisparityToDepthUseSpecTranslation(
        this: *mut dai_node_StereoDepth,
        specTranslation: bool,
    );
}
unsafe extern "C" {
    #[doc = " Obtain rectification matrices using spec translation (design data) or from calibration in calculations.\n Should be used only for debugging.\n Default: false"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth34setRectificationUseSpecTranslationEb"]
    pub fn dai_node_StereoDepth_setRectificationUseSpecTranslation(
        this: *mut dai_node_StereoDepth,
        specTranslation: bool,
    );
}
unsafe extern "C" {
    #[doc = " Use baseline information for depth alignment from specs (design data) or from calibration.\n Default: true"]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth35setDepthAlignmentUseSpecTranslationEb"]
    pub fn dai_node_StereoDepth_setDepthAlignmentUseSpecTranslation(
        this: *mut dai_node_StereoDepth,
        specTranslation: bool,
    );
}
unsafe extern "C" {
    #[doc = " Free scaling parameter between 0 (when all the pixels in the undistorted image are valid)\n and 1 (when all the source image pixels are retained in the undistorted image).\n On some high distortion lenses, and/or due to rectification (image rotated) invalid areas may appear even with alpha=0,\n in these cases alpha < 0.0 helps removing invalid areas.\n See getOptimalNewCameraMatrix from opencv for more details."]
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth15setAlphaScalingEf"]
    pub fn dai_node_StereoDepth_setAlphaScaling(this: *mut dai_node_StereoDepth, alpha: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11StereoDepthC1ESt10unique_ptrINS_21StereoDepthPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_StereoDepth_StereoDepth(this: *mut dai_node_StereoDepth, props: std_unique_ptr);
}
impl dai_node_StereoDepth {
    #[inline]
    pub unsafe fn build(
        &mut self,
        autoCreateCameras: bool,
        presetMode: dai_node_StereoDepth_PresetMode,
        size: std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>,
    ) -> std_shared_ptr {
        dai_node_StereoDepth_build(self, autoCreateCameras, presetMode, size)
    }
    #[inline]
    pub unsafe fn loadMeshFiles(&mut self, pathLeft: *const dai_Path, pathRight: *const dai_Path) {
        dai_node_StereoDepth_loadMeshFiles(self, pathLeft, pathRight)
    }
    #[inline]
    pub unsafe fn loadMeshData(
        &mut self,
        dataLeft: *const std_vector,
        dataRight: *const std_vector,
    ) {
        dai_node_StereoDepth_loadMeshData(self, dataLeft, dataRight)
    }
    #[inline]
    pub unsafe fn setMeshStep(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_StereoDepth_setMeshStep(self, width, height)
    }
    #[inline]
    pub unsafe fn setInputResolution(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_StereoDepth_setInputResolution(self, width, height)
    }
    #[inline]
    pub unsafe fn setInputResolution1(&mut self, resolution: std_tuple) {
        dai_node_StereoDepth_setInputResolution1(self, resolution)
    }
    #[inline]
    pub unsafe fn setOutputSize(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_StereoDepth_setOutputSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setOutputKeepAspectRatio(&mut self, keep: bool) {
        dai_node_StereoDepth_setOutputKeepAspectRatio(self, keep)
    }
    #[inline]
    pub unsafe fn setDepthAlign(&mut self, align: dai_StereoDepthProperties_DepthAlign) {
        dai_node_StereoDepth_setDepthAlign(self, align)
    }
    #[inline]
    pub unsafe fn setDepthAlign1(&mut self, camera: dai_CameraBoardSocket) {
        dai_node_StereoDepth_setDepthAlign1(self, camera)
    }
    #[inline]
    pub unsafe fn setRectification(&mut self, enable: bool) {
        dai_node_StereoDepth_setRectification(self, enable)
    }
    #[inline]
    pub unsafe fn setLeftRightCheck(&mut self, enable: bool) {
        dai_node_StereoDepth_setLeftRightCheck(self, enable)
    }
    #[inline]
    pub unsafe fn setSubpixel(&mut self, enable: bool) {
        dai_node_StereoDepth_setSubpixel(self, enable)
    }
    #[inline]
    pub unsafe fn setSubpixelFractionalBits(
        &mut self,
        subpixelFractionalBits: ::std::os::raw::c_int,
    ) {
        dai_node_StereoDepth_setSubpixelFractionalBits(self, subpixelFractionalBits)
    }
    #[inline]
    pub unsafe fn setExtendedDisparity(&mut self, enable: bool) {
        dai_node_StereoDepth_setExtendedDisparity(self, enable)
    }
    #[inline]
    pub unsafe fn setRectifyEdgeFillColor(&mut self, color: ::std::os::raw::c_int) {
        dai_node_StereoDepth_setRectifyEdgeFillColor(self, color)
    }
    #[inline]
    pub unsafe fn setRuntimeModeSwitch(&mut self, enable: bool) {
        dai_node_StereoDepth_setRuntimeModeSwitch(self, enable)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, numFramesPool: ::std::os::raw::c_int) {
        dai_node_StereoDepth_setNumFramesPool(self, numFramesPool)
    }
    #[inline]
    pub unsafe fn setPostProcessingHardwareResources(
        &mut self,
        numShaves: ::std::os::raw::c_int,
        numMemorySlices: ::std::os::raw::c_int,
    ) {
        dai_node_StereoDepth_setPostProcessingHardwareResources(self, numShaves, numMemorySlices)
    }
    #[inline]
    pub unsafe fn setDefaultProfilePreset(&mut self, mode: dai_node_StereoDepth_PresetMode) {
        dai_node_StereoDepth_setDefaultProfilePreset(self, mode)
    }
    #[inline]
    pub unsafe fn useHomographyRectification(&mut self, useHomographyRectification: bool) {
        dai_node_StereoDepth_useHomographyRectification(self, useHomographyRectification)
    }
    #[inline]
    pub unsafe fn enableDistortionCorrection(&mut self, enableDistortionCorrection: bool) {
        dai_node_StereoDepth_enableDistortionCorrection(self, enableDistortionCorrection)
    }
    #[inline]
    pub unsafe fn setFrameSync(&mut self, enableFrameSync: bool) {
        dai_node_StereoDepth_setFrameSync(self, enableFrameSync)
    }
    #[inline]
    pub unsafe fn setBaseline(&mut self, baseline: f32) {
        dai_node_StereoDepth_setBaseline(self, baseline)
    }
    #[inline]
    pub unsafe fn setFocalLength(&mut self, focalLength: f32) {
        dai_node_StereoDepth_setFocalLength(self, focalLength)
    }
    #[inline]
    pub unsafe fn setDisparityToDepthUseSpecTranslation(&mut self, specTranslation: bool) {
        dai_node_StereoDepth_setDisparityToDepthUseSpecTranslation(self, specTranslation)
    }
    #[inline]
    pub unsafe fn setRectificationUseSpecTranslation(&mut self, specTranslation: bool) {
        dai_node_StereoDepth_setRectificationUseSpecTranslation(self, specTranslation)
    }
    #[inline]
    pub unsafe fn setDepthAlignmentUseSpecTranslation(&mut self, specTranslation: bool) {
        dai_node_StereoDepth_setDepthAlignmentUseSpecTranslation(self, specTranslation)
    }
    #[inline]
    pub unsafe fn setAlphaScaling(&mut self, alpha: f32) {
        dai_node_StereoDepth_setAlphaScaling(self, alpha)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_StereoDepth_StereoDepth(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node11StereoDepth13getPropertiesEv"]
    pub fn dai_node_StereoDepth_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 60usize>;
}
#[doc = " @brief SpatialDetectionNetwork node. Runs a neural inference on input image and calculates spatial location data."]
#[repr(C)]
pub struct dai_node_SpatialDetectionNetwork {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_SpatialDetectionNetworkProperties>,
    pub neuralNetwork: dai_Subnode,
    pub detectionParser: dai_Subnode,
    pub depthAlign: std_unique_ptr,
    #[doc = " Input message with data to be inferred upon\n Default queue is blocking with size 5"]
    pub input: *mut dai_Node_Input,
    #[doc = " Outputs unparsed inference results."]
    pub outNetwork: *mut dai_Node_Output,
    #[doc = " Passthrough message on which the inference was performed.\n\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthrough: *mut dai_Node_Output,
    #[doc = " Input message with depth data used to retrieve spatial information about detected object\n Default queue is non-blocking with size 4"]
    pub inputDepth: dai_Node_Input,
    #[doc = " Input message with image data used to retrieve image transformation from detected object\n Default queue is blocking with size 1"]
    pub inputImg: dai_Node_Input,
    #[doc = " Input message with input detections object\n Default queue is blocking with size 1"]
    pub inputDetections: dai_Node_Input,
    #[doc = " Outputs ImgDetections message that carries parsed detection results."]
    pub out: dai_Node_Output,
    #[doc = " Outputs mapping of detected bounding boxes relative to depth map\n Suitable for when displaying remapped bounding boxes on depth frame"]
    pub boundingBoxMapping: dai_Node_Output,
    #[doc = " Passthrough message for depth frame on which the spatial location calculation was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughDepth: dai_Node_Output,
    #[doc = " Output of SpatialLocationCalculator node, which is used internally by SpatialDetectionNetwork.\n Suitable when extra information is required from SpatialLocationCalculator node, e.g. minimum, maximum distance."]
    pub spatialLocationCalculatorOutput: dai_Node_Output,
}
pub const dai_node_SpatialDetectionNetwork_NAME: &[u8; 24] = b"SpatialDetectionNetwork\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_SpatialDetectionNetwork"]
        [::std::mem::size_of::<dai_node_SpatialDetectionNetwork>() - 2640usize];
    ["Alignment of dai_node_SpatialDetectionNetwork"]
        [::std::mem::align_of::<dai_node_SpatialDetectionNetwork>() - 8usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::neuralNetwork"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, neuralNetwork) - 448usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::detectionParser"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, detectionParser) - 464usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::depthAlign"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, depthAlign) - 480usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::input"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, input) - 488usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::outNetwork"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, outNetwork) - 496usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::passthrough"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, passthrough) - 504usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::inputDepth"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, inputDepth) - 512usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::inputImg"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, inputImg) - 1008usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::inputDetections"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, inputDetections) - 1504usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::out"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, out) - 2000usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::boundingBoxMapping"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, boundingBoxMapping) - 2160usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::passthroughDepth"]
        [::std::mem::offset_of!(dai_node_SpatialDetectionNetwork, passthroughDepth) - 2320usize];
    ["Offset of field: dai_node_SpatialDetectionNetwork::spatialLocationCalculatorOutput"][::std::mem::offset_of!(
        dai_node_SpatialDetectionNetwork,
        spatialLocationCalculatorOutput
    )
        - 2480usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork5buildERKSt10shared_ptrINS0_6CameraEERKS2_INS0_11StereoDepthEENS_18NNModelDescriptionESt8optionalIfE"]
    pub fn dai_node_SpatialDetectionNetwork_build(
        this: *mut dai_node_SpatialDetectionNetwork,
        inputRgb: *const std_shared_ptr,
        stereo: *const std_shared_ptr,
        modelDesc: dai_NNModelDescription,
        fps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork5buildERKSt10shared_ptrINS0_6CameraEERKS2_INS0_11StereoDepthEERKNS_9NNArchiveESt8optionalIfE"]
    pub fn dai_node_SpatialDetectionNetwork_build1(
        this: *mut dai_node_SpatialDetectionNetwork,
        inputRgb: *const std_shared_ptr,
        stereo: *const std_shared_ptr,
        nnArchive: *const dai_NNArchive,
        fps: std_optional,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node. If the archive's type is SUPERBLOB, use default number of shaves.\n\n @param nnArchive: NNArchive to set"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork12setNNArchiveERKNS_9NNArchiveE"]
    pub fn dai_node_SpatialDetectionNetwork_setNNArchive(
        this: *mut dai_node_SpatialDetectionNetwork,
        nnArchive: *const dai_NNArchive,
    );
}
unsafe extern "C" {
    #[doc = " @brief Download model from zoo and set it for this Node\n\n @param description: Model description to download\n @param useCached: Use cached model if available"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork15setFromModelZooENS_18NNModelDescriptionEb"]
    pub fn dai_node_SpatialDetectionNetwork_setFromModelZoo(
        this: *mut dai_node_SpatialDetectionNetwork,
        description: dai_NNModelDescription,
        useCached: bool,
    );
}
unsafe extern "C" {
    #[doc = " @brief Set NNArchive for this Node, throws if the archive's type is not SUPERBLOB\n\n @param nnArchive: NNArchive to set\n @param numShaves: Number of shaves to use"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork12setNNArchiveERKNS_9NNArchiveEi"]
    pub fn dai_node_SpatialDetectionNetwork_setNNArchive1(
        this: *mut dai_node_SpatialDetectionNetwork,
        nnArchive: *const dai_NNArchive,
        numShaves: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork11setBlobPathERKNS_4PathE"]
    pub fn dai_node_SpatialDetectionNetwork_setBlobPath(
        this: *mut dai_node_SpatialDetectionNetwork,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network blob into assets and use once pipeline is started.\n\n @param blob Network blob"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork7setBlobENS_8OpenVINO4BlobE"]
    pub fn dai_node_SpatialDetectionNetwork_setBlob(
        this: *mut dai_node_SpatialDetectionNetwork,
        blob: dai_OpenVINO_Blob,
    );
}
unsafe extern "C" {
    #[doc = " Same functionality as the setBlobPath(). Load network blob into assets and use once pipeline is started.\n\n @throws Error if file doesn't exist or isn't a valid network blob.\n @param path Path to network blob"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork7setBlobERKNS_4PathE"]
    pub fn dai_node_SpatialDetectionNetwork_setBlob1(
        this: *mut dai_node_SpatialDetectionNetwork,
        path: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Load network file into assets.\n @param modelPath Path to the model file."]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork12setModelPathERKNS_4PathE"]
    pub fn dai_node_SpatialDetectionNetwork_setModelPath(
        this: *mut dai_node_SpatialDetectionNetwork,
        modelPath: *const dai_Path,
    );
}
unsafe extern "C" {
    #[doc = " Specifies how many frames will be available in the pool\n @param numFrames How many frames will pool have"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork16setNumPoolFramesEi"]
    pub fn dai_node_SpatialDetectionNetwork_setNumPoolFrames(
        this: *mut dai_node_SpatialDetectionNetwork,
        numFrames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many threads should the node use to run the network.\n @param numThreads Number of threads to dedicate to this node"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork22setNumInferenceThreadsEi"]
    pub fn dai_node_SpatialDetectionNetwork_setNumInferenceThreads(
        this: *mut dai_node_SpatialDetectionNetwork,
        numThreads: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many Neural Compute Engines should a single thread use for inference\n @param numNCEPerThread Number of NCE per thread"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork27setNumNCEPerInferenceThreadEi"]
    pub fn dai_node_SpatialDetectionNetwork_setNumNCEPerInferenceThread(
        this: *mut dai_node_SpatialDetectionNetwork,
        numNCEPerThread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " How many Shaves should a single thread use for inference\n @param numShavesPerThread Number of shaves per thread"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork30setNumShavesPerInferenceThreadEi"]
    pub fn dai_node_SpatialDetectionNetwork_setNumShavesPerInferenceThread(
        this: *mut dai_node_SpatialDetectionNetwork,
        numShavesPerThread: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specifies backend to use\n @param backend String specifying backend to use"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork10setBackendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_node_SpatialDetectionNetwork_setBackend(
        this: *mut dai_node_SpatialDetectionNetwork,
        backend: std_string,
    );
}
unsafe extern "C" {
    #[doc = " Set backend properties\n @param backendProperties backend properties map"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork20setBackendPropertiesESt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_St4lessIS8_ESaISt4pairIKS8_S8_EEE"]
    pub fn dai_node_SpatialDetectionNetwork_setBackendProperties(
        this: *mut dai_node_SpatialDetectionNetwork,
        properties: std_map,
    );
}
unsafe extern "C" {
    #[doc = " How many inference threads will be used to run the network\n @returns Number of threads, 0, 1 or 2. Zero means AUTO"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork22getNumInferenceThreadsEv"]
    pub fn dai_node_SpatialDetectionNetwork_getNumInferenceThreads(
        this: *mut dai_node_SpatialDetectionNetwork,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Specifies confidence threshold at which to filter the rest of the detections.\n @param thresh Detection confidence must be greater than specified threshold to be added to the list"]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork22setConfidenceThresholdEf"]
    pub fn dai_node_SpatialDetectionNetwork_setConfidenceThreshold(
        this: *mut dai_node_SpatialDetectionNetwork,
        thresh: f32,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves threshold at which to filter the rest of the detections.\n @returns Detection confidence"]
    #[link_name = "\u{1}_ZNK3dai4node23SpatialDetectionNetwork22getConfidenceThresholdEv"]
    pub fn dai_node_SpatialDetectionNetwork_getConfidenceThreshold(
        this: *const dai_node_SpatialDetectionNetwork,
    ) -> f32;
}
unsafe extern "C" {
    #[doc = " Custom interface **/\n/**\n Specifies scale factor for detected bounding boxes.\n @param scaleFactor Scale factor must be in the interval (0,1]."]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork25setBoundingBoxScaleFactorEf"]
    pub fn dai_node_SpatialDetectionNetwork_setBoundingBoxScaleFactor(
        this: *mut dai_node_SpatialDetectionNetwork,
        scaleFactor: f32,
    );
}
unsafe extern "C" {
    #[doc = " Specifies lower threshold in depth units (millimeter by default) for depth values which will used to calculate spatial data\n @param lowerThreshold LowerThreshold must be in the interval [0,upperThreshold] and less than upperThreshold."]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork22setDepthLowerThresholdEj"]
    pub fn dai_node_SpatialDetectionNetwork_setDepthLowerThreshold(
        this: *mut dai_node_SpatialDetectionNetwork,
        lowerThreshold: u32,
    );
}
unsafe extern "C" {
    #[doc = " Specifies upper threshold in depth units (millimeter by default) for depth values which will used to calculate spatial data\n @param upperThreshold UpperThreshold must be in the interval (lowerThreshold,65535]."]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork22setDepthUpperThresholdEj"]
    pub fn dai_node_SpatialDetectionNetwork_setDepthUpperThreshold(
        this: *mut dai_node_SpatialDetectionNetwork,
        upperThreshold: u32,
    );
}
unsafe extern "C" {
    #[doc = " Specifies spatial location calculator algorithm: Average/Min/Max\n @param calculationAlgorithm Calculation algorithm."]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork30setSpatialCalculationAlgorithmENS_34SpatialLocationCalculatorAlgorithmE"]
    pub fn dai_node_SpatialDetectionNetwork_setSpatialCalculationAlgorithm(
        this: *mut dai_node_SpatialDetectionNetwork,
        calculationAlgorithm: dai_SpatialLocationCalculatorAlgorithm,
    );
}
unsafe extern "C" {
    #[doc = " Specifies spatial location calculator step size for depth calculation.\n Step size 1 means that every pixel is taken into calculation, size 2 means every second etc.\n @param stepSize Step size."]
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork29setSpatialCalculationStepSizeEi"]
    pub fn dai_node_SpatialDetectionNetwork_setSpatialCalculationStepSize(
        this: *mut dai_node_SpatialDetectionNetwork,
        stepSize: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Get classes labels"]
    #[link_name = "\u{1}_ZNK3dai4node23SpatialDetectionNetwork10getClassesB5cxx11Ev"]
    pub fn dai_node_SpatialDetectionNetwork_getClasses(
        this: *const dai_node_SpatialDetectionNetwork,
    ) -> std_optional;
}
impl dai_node_SpatialDetectionNetwork {
    #[inline]
    pub unsafe fn build(
        &mut self,
        inputRgb: *const std_shared_ptr,
        stereo: *const std_shared_ptr,
        modelDesc: dai_NNModelDescription,
        fps: std_optional,
    ) -> std_shared_ptr {
        dai_node_SpatialDetectionNetwork_build(self, inputRgb, stereo, modelDesc, fps)
    }
    #[inline]
    pub unsafe fn build1(
        &mut self,
        inputRgb: *const std_shared_ptr,
        stereo: *const std_shared_ptr,
        nnArchive: *const dai_NNArchive,
        fps: std_optional,
    ) -> std_shared_ptr {
        dai_node_SpatialDetectionNetwork_build1(self, inputRgb, stereo, nnArchive, fps)
    }
    #[inline]
    pub unsafe fn setNNArchive(&mut self, nnArchive: *const dai_NNArchive) {
        dai_node_SpatialDetectionNetwork_setNNArchive(self, nnArchive)
    }
    #[inline]
    pub unsafe fn setFromModelZoo(&mut self, description: dai_NNModelDescription, useCached: bool) {
        dai_node_SpatialDetectionNetwork_setFromModelZoo(self, description, useCached)
    }
    #[inline]
    pub unsafe fn setNNArchive1(
        &mut self,
        nnArchive: *const dai_NNArchive,
        numShaves: ::std::os::raw::c_int,
    ) {
        dai_node_SpatialDetectionNetwork_setNNArchive1(self, nnArchive, numShaves)
    }
    #[inline]
    pub unsafe fn setBlobPath(&mut self, path: *const dai_Path) {
        dai_node_SpatialDetectionNetwork_setBlobPath(self, path)
    }
    #[inline]
    pub unsafe fn setBlob(&mut self, blob: dai_OpenVINO_Blob) {
        dai_node_SpatialDetectionNetwork_setBlob(self, blob)
    }
    #[inline]
    pub unsafe fn setBlob1(&mut self, path: *const dai_Path) {
        dai_node_SpatialDetectionNetwork_setBlob1(self, path)
    }
    #[inline]
    pub unsafe fn setModelPath(&mut self, modelPath: *const dai_Path) {
        dai_node_SpatialDetectionNetwork_setModelPath(self, modelPath)
    }
    #[inline]
    pub unsafe fn setNumPoolFrames(&mut self, numFrames: ::std::os::raw::c_int) {
        dai_node_SpatialDetectionNetwork_setNumPoolFrames(self, numFrames)
    }
    #[inline]
    pub unsafe fn setNumInferenceThreads(&mut self, numThreads: ::std::os::raw::c_int) {
        dai_node_SpatialDetectionNetwork_setNumInferenceThreads(self, numThreads)
    }
    #[inline]
    pub unsafe fn setNumNCEPerInferenceThread(&mut self, numNCEPerThread: ::std::os::raw::c_int) {
        dai_node_SpatialDetectionNetwork_setNumNCEPerInferenceThread(self, numNCEPerThread)
    }
    #[inline]
    pub unsafe fn setNumShavesPerInferenceThread(
        &mut self,
        numShavesPerThread: ::std::os::raw::c_int,
    ) {
        dai_node_SpatialDetectionNetwork_setNumShavesPerInferenceThread(self, numShavesPerThread)
    }
    #[inline]
    pub unsafe fn setBackend(&mut self, backend: std_string) {
        dai_node_SpatialDetectionNetwork_setBackend(self, backend)
    }
    #[inline]
    pub unsafe fn setBackendProperties(&mut self, properties: std_map) {
        dai_node_SpatialDetectionNetwork_setBackendProperties(self, properties)
    }
    #[inline]
    pub unsafe fn getNumInferenceThreads(&mut self) -> ::std::os::raw::c_int {
        dai_node_SpatialDetectionNetwork_getNumInferenceThreads(self)
    }
    #[inline]
    pub unsafe fn setConfidenceThreshold(&mut self, thresh: f32) {
        dai_node_SpatialDetectionNetwork_setConfidenceThreshold(self, thresh)
    }
    #[inline]
    pub unsafe fn getConfidenceThreshold(&self) -> f32 {
        dai_node_SpatialDetectionNetwork_getConfidenceThreshold(self)
    }
    #[inline]
    pub unsafe fn setBoundingBoxScaleFactor(&mut self, scaleFactor: f32) {
        dai_node_SpatialDetectionNetwork_setBoundingBoxScaleFactor(self, scaleFactor)
    }
    #[inline]
    pub unsafe fn setDepthLowerThreshold(&mut self, lowerThreshold: u32) {
        dai_node_SpatialDetectionNetwork_setDepthLowerThreshold(self, lowerThreshold)
    }
    #[inline]
    pub unsafe fn setDepthUpperThreshold(&mut self, upperThreshold: u32) {
        dai_node_SpatialDetectionNetwork_setDepthUpperThreshold(self, upperThreshold)
    }
    #[inline]
    pub unsafe fn setSpatialCalculationAlgorithm(
        &mut self,
        calculationAlgorithm: dai_SpatialLocationCalculatorAlgorithm,
    ) {
        dai_node_SpatialDetectionNetwork_setSpatialCalculationAlgorithm(self, calculationAlgorithm)
    }
    #[inline]
    pub unsafe fn setSpatialCalculationStepSize(&mut self, stepSize: ::std::os::raw::c_int) {
        dai_node_SpatialDetectionNetwork_setSpatialCalculationStepSize(self, stepSize)
    }
    #[inline]
    pub unsafe fn getClasses(&self) -> std_optional {
        dai_node_SpatialDetectionNetwork_getClasses(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node23SpatialDetectionNetwork13buildInternalEv"]
    pub fn dai_node_SpatialDetectionNetwork_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief SpatialLocationCalculator node. Calculates spatial location data on a set of ROIs on depth map."]
#[repr(C)]
pub struct dai_node_SpatialLocationCalculator {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_SpatialLocationCalculatorProperties>,
    #[doc = " Initial config to use when calculating spatial location data."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input SpatialLocationCalculatorConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Input message with depth data used to retrieve spatial information about detected object.\n Default queue is non-blocking with size 4."]
    pub inputDepth: dai_Node_Input,
    #[doc = " Outputs SpatialLocationCalculatorData message that carries spatial location results."]
    pub out: dai_Node_Output,
    #[doc = " Passthrough message on which the calculation was performed.\n Suitable for when input queue is set to non-blocking behavior."]
    pub passthroughDepth: dai_Node_Output,
}
pub const dai_node_SpatialLocationCalculator_NAME: &[u8; 26] = b"SpatialLocationCalculator\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_SpatialLocationCalculator"]
        [::std::mem::size_of::<dai_node_SpatialLocationCalculator>() - 1776usize];
    ["Alignment of dai_node_SpatialLocationCalculator"]
        [::std::mem::align_of::<dai_node_SpatialLocationCalculator>() - 8usize];
    ["Offset of field: dai_node_SpatialLocationCalculator::initialConfig"]
        [::std::mem::offset_of!(dai_node_SpatialLocationCalculator, initialConfig) - 448usize];
    ["Offset of field: dai_node_SpatialLocationCalculator::inputConfig"]
        [::std::mem::offset_of!(dai_node_SpatialLocationCalculator, inputConfig) - 464usize];
    ["Offset of field: dai_node_SpatialLocationCalculator::inputDepth"]
        [::std::mem::offset_of!(dai_node_SpatialLocationCalculator, inputDepth) - 960usize];
    ["Offset of field: dai_node_SpatialLocationCalculator::out"]
        [::std::mem::offset_of!(dai_node_SpatialLocationCalculator, out) - 1456usize];
    ["Offset of field: dai_node_SpatialLocationCalculator::passthroughDepth"]
        [::std::mem::offset_of!(dai_node_SpatialLocationCalculator, passthroughDepth) - 1616usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node25SpatialLocationCalculatorC1ESt10unique_ptrINS_35SpatialLocationCalculatorPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_SpatialLocationCalculator_SpatialLocationCalculator(
        this: *mut dai_node_SpatialLocationCalculator,
        props: std_unique_ptr,
    );
}
impl dai_node_SpatialLocationCalculator {
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_SpatialLocationCalculator_SpatialLocationCalculator(
            __bindgen_tmp.as_mut_ptr(),
            props,
        );
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node25SpatialLocationCalculator13getPropertiesEv"]
    pub fn dai_node_SpatialLocationCalculator_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 12usize>;
}
#[doc = " @brief Sync node. Performs syncing between image frames"]
#[repr(C)]
pub struct dai_node_Sync {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_SyncProperties>,
    pub runOnHostVar: bool,
    #[doc = " A map of inputs"]
    pub inputs: dai_Node_InputMap,
    pub out: dai_Node_Output,
}
pub const dai_node_Sync_NAME: &[u8; 5] = b"Sync\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_Sync"][::std::mem::size_of::<dai_node_Sync>() - 816usize];
    ["Alignment of dai_node_Sync"][::std::mem::align_of::<dai_node_Sync>() - 8usize];
    ["Offset of field: dai_node_Sync::runOnHostVar"]
        [::std::mem::offset_of!(dai_node_Sync, runOnHostVar) - 448usize];
    ["Offset of field: dai_node_Sync::inputs"]
        [::std::mem::offset_of!(dai_node_Sync, inputs) - 456usize];
    ["Offset of field: dai_node_Sync::out"][::std::mem::offset_of!(dai_node_Sync, out) - 656usize];
};
unsafe extern "C" {
    #[doc = " Set the maximal interval between messages in the group\n @param syncThreshold Maximal interval between messages in the group"]
    #[link_name = "\u{1}_ZN3dai4node4Sync16setSyncThresholdENSt6chrono8durationIlSt5ratioILl1ELl1000000000EEEE"]
    pub fn dai_node_Sync_setSyncThreshold(
        this: *mut dai_node_Sync,
        syncThreshold: std_chrono_nanoseconds,
    );
}
unsafe extern "C" {
    #[doc = " Set the number of attempts to get the specified max interval between messages in the group\n @param syncAttempts Number of attempts to get the specified max interval between messages in the group:\n   - if syncAttempts = 0 then the node sends a message as soon at the group is filled\n   - if syncAttempts > 0 then the node will make syncAttemts attempts to synchronize before sending out a message\n   - if syncAttempts = -1 (default) then the node will only send a message if successfully synchronized"]
    #[link_name = "\u{1}_ZN3dai4node4Sync15setSyncAttemptsEi"]
    pub fn dai_node_Sync_setSyncAttempts(
        this: *mut dai_node_Sync,
        syncAttempts: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Gets the maximal interval between messages in the group in milliseconds"]
    #[link_name = "\u{1}_ZNK3dai4node4Sync16getSyncThresholdEv"]
    pub fn dai_node_Sync_getSyncThreshold(this: *const dai_node_Sync) -> std_chrono_nanoseconds;
}
unsafe extern "C" {
    #[doc = " Gets the number of sync attempts"]
    #[link_name = "\u{1}_ZNK3dai4node4Sync15getSyncAttemptsEv"]
    pub fn dai_node_Sync_getSyncAttempts(this: *const dai_node_Sync) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Specify whether to run on host or device\n By default, the node will run on device."]
    #[link_name = "\u{1}_ZN3dai4node4Sync12setRunOnHostEb"]
    pub fn dai_node_Sync_setRunOnHost(this: *mut dai_node_Sync, runOnHost: bool);
}
impl dai_node_Sync {
    #[inline]
    pub unsafe fn setSyncThreshold(&mut self, syncThreshold: std_chrono_nanoseconds) {
        dai_node_Sync_setSyncThreshold(self, syncThreshold)
    }
    #[inline]
    pub unsafe fn setSyncAttempts(&mut self, syncAttempts: ::std::os::raw::c_int) {
        dai_node_Sync_setSyncAttempts(self, syncAttempts)
    }
    #[inline]
    pub unsafe fn getSyncThreshold(&self) -> std_chrono_nanoseconds {
        dai_node_Sync_getSyncThreshold(self)
    }
    #[inline]
    pub unsafe fn getSyncAttempts(&self) -> ::std::os::raw::c_int {
        dai_node_Sync_getSyncAttempts(self)
    }
    #[inline]
    pub unsafe fn setRunOnHost(&mut self, runOnHost: bool) {
        dai_node_Sync_setRunOnHost(self, runOnHost)
    }
}
unsafe extern "C" {
    #[doc = " Check if the node is set to run on host"]
    #[link_name = "\u{1}_ZNK3dai4node4Sync9runOnHostEv"]
    pub fn dai_node_Sync_runOnHost(this: *mut ::std::os::raw::c_void) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4Sync3runEv"]
    pub fn dai_node_Sync_run(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief SystemLogger node. Send system information periodically."]
#[repr(C)]
pub struct dai_node_SystemLogger {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_SystemLoggerProperties>,
    #[doc = " Outputs SystemInformation[S3] message that carries various system information\n like memory and CPU usage, temperatures, ...\n For series 2 devices outputs SystemInformation message,\n for series 3 devices outputs SystemInformationS3 message"]
    pub out: dai_Node_Output,
}
pub const dai_node_SystemLogger_NAME: &[u8; 13] = b"SystemLogger\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_SystemLogger"][::std::mem::size_of::<dai_node_SystemLogger>() - 608usize];
    ["Alignment of dai_node_SystemLogger"]
        [::std::mem::align_of::<dai_node_SystemLogger>() - 8usize];
    ["Offset of field: dai_node_SystemLogger::out"]
        [::std::mem::offset_of!(dai_node_SystemLogger, out) - 448usize];
};
unsafe extern "C" {
    #[doc = " Specify logging rate, at which messages will be sent out\n @param hz Sending rate in hertz (messages per second)"]
    #[link_name = "\u{1}_ZN3dai4node12SystemLogger7setRateEf"]
    pub fn dai_node_SystemLogger_setRate(this: *mut dai_node_SystemLogger, hz: f32);
}
unsafe extern "C" {
    #[doc = " Gets logging rate, at which messages will be sent out"]
    #[link_name = "\u{1}_ZN3dai4node12SystemLogger7getRateEv"]
    pub fn dai_node_SystemLogger_getRate(this: *mut dai_node_SystemLogger) -> f32;
}
impl dai_node_SystemLogger {
    #[inline]
    pub unsafe fn setRate(&mut self, hz: f32) {
        dai_node_SystemLogger_setRate(self, hz)
    }
    #[inline]
    pub unsafe fn getRate(&mut self) -> f32 {
        dai_node_SystemLogger_getRate(self)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node12SystemLogger13buildInternalEv"]
    pub fn dai_node_SystemLogger_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief Thermal node."]
#[repr(C)]
pub struct dai_node_Thermal {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ThermalProperties>,
    #[doc = " Initial config to use for thermal sensor."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input ThermalConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    #[doc = " Outputs FP16 (degC) thermal image."]
    pub temperature: dai_Node_Output,
    #[doc = " Outputs YUV422i grayscale thermal image."]
    pub color: dai_Node_Output,
    pub isBuilt: bool,
}
pub const dai_node_Thermal_NAME: &[u8; 8] = b"Thermal\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_Thermal"][::std::mem::size_of::<dai_node_Thermal>() - 1288usize];
    ["Alignment of dai_node_Thermal"][::std::mem::align_of::<dai_node_Thermal>() - 8usize];
    ["Offset of field: dai_node_Thermal::initialConfig"]
        [::std::mem::offset_of!(dai_node_Thermal, initialConfig) - 448usize];
    ["Offset of field: dai_node_Thermal::inputConfig"]
        [::std::mem::offset_of!(dai_node_Thermal, inputConfig) - 464usize];
    ["Offset of field: dai_node_Thermal::temperature"]
        [::std::mem::offset_of!(dai_node_Thermal, temperature) - 960usize];
    ["Offset of field: dai_node_Thermal::color"]
        [::std::mem::offset_of!(dai_node_Thermal, color) - 1120usize];
    ["Offset of field: dai_node_Thermal::isBuilt"]
        [::std::mem::offset_of!(dai_node_Thermal, isBuilt) - 1280usize];
};
unsafe extern "C" {
    #[doc = " Build with a specific board socket and fps."]
    #[link_name = "\u{1}_ZN3dai4node7Thermal5buildENS_17CameraBoardSocketEf"]
    pub fn dai_node_Thermal_build(
        this: *mut dai_node_Thermal,
        boardSocket: dai_CameraBoardSocket,
        fps: f32,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Retrieves which board socket to use\n @returns Board socket to use"]
    #[link_name = "\u{1}_ZNK3dai4node7Thermal14getBoardSocketEv"]
    pub fn dai_node_Thermal_getBoardSocket(this: *const dai_node_Thermal) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node7Thermal6setFpsEf"]
    pub fn dai_node_Thermal_setFps(this: *mut dai_node_Thermal, fps: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node7ThermalC1ESt10unique_ptrINS_17ThermalPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_Thermal_Thermal(this: *mut dai_node_Thermal, props: std_unique_ptr);
}
impl dai_node_Thermal {
    #[inline]
    pub unsafe fn build(&mut self, boardSocket: dai_CameraBoardSocket, fps: f32) -> std_shared_ptr {
        dai_node_Thermal_build(self, boardSocket, fps)
    }
    #[inline]
    pub unsafe fn getBoardSocket(&self) -> dai_CameraBoardSocket {
        dai_node_Thermal_getBoardSocket(self)
    }
    #[inline]
    pub unsafe fn setFps(&mut self, fps: f32) {
        dai_node_Thermal_setFps(self, fps)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_Thermal_Thermal(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node7Thermal13getPropertiesEv"]
    pub fn dai_node_Thermal_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 21usize>;
}
#[doc = " @brief ToF node.\n Performs feature tracking and reidentification using motion estimation between 2 consecutive frames."]
#[repr(C)]
pub struct dai_node_ToF {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_ToFProperties>,
    #[doc = " Initial config to use for feature tracking."]
    pub initialConfig: std_shared_ptr,
    #[doc = " Input ToFConfig message with ability to modify parameters in runtime.\n Default queue is non-blocking with size 4."]
    pub inputConfig: dai_Node_Input,
    pub depth: dai_Node_Output,
    pub amplitude: dai_Node_Output,
    pub intensity: dai_Node_Output,
    pub phase: dai_Node_Output,
    pub isBuilt: bool,
    pub maxWidth: u32,
    pub maxHeight: u32,
}
pub const dai_node_ToF_NAME: &[u8; 4] = b"ToF\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_ToF"][::std::mem::size_of::<dai_node_ToF>() - 1616usize];
    ["Alignment of dai_node_ToF"][::std::mem::align_of::<dai_node_ToF>() - 8usize];
    ["Offset of field: dai_node_ToF::initialConfig"]
        [::std::mem::offset_of!(dai_node_ToF, initialConfig) - 448usize];
    ["Offset of field: dai_node_ToF::inputConfig"]
        [::std::mem::offset_of!(dai_node_ToF, inputConfig) - 464usize];
    ["Offset of field: dai_node_ToF::depth"]
        [::std::mem::offset_of!(dai_node_ToF, depth) - 960usize];
    ["Offset of field: dai_node_ToF::amplitude"]
        [::std::mem::offset_of!(dai_node_ToF, amplitude) - 1120usize];
    ["Offset of field: dai_node_ToF::intensity"]
        [::std::mem::offset_of!(dai_node_ToF, intensity) - 1280usize];
    ["Offset of field: dai_node_ToF::phase"]
        [::std::mem::offset_of!(dai_node_ToF, phase) - 1440usize];
    ["Offset of field: dai_node_ToF::isBuilt"]
        [::std::mem::offset_of!(dai_node_ToF, isBuilt) - 1600usize];
    ["Offset of field: dai_node_ToF::maxWidth"]
        [::std::mem::offset_of!(dai_node_ToF, maxWidth) - 1604usize];
    ["Offset of field: dai_node_ToF::maxHeight"]
        [::std::mem::offset_of!(dai_node_ToF, maxHeight) - 1608usize];
};
unsafe extern "C" {
    #[doc = " Build with a specific board socket"]
    #[link_name = "\u{1}_ZN3dai4node3ToF5buildENS_17CameraBoardSocketEf"]
    pub fn dai_node_ToF_build(
        this: *mut dai_node_ToF,
        boardSocket: dai_CameraBoardSocket,
        fps: f32,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Retrieves which board socket to use\n @returns Board socket to use"]
    #[link_name = "\u{1}_ZNK3dai4node3ToF14getBoardSocketEv"]
    pub fn dai_node_ToF_getBoardSocket(this: *const dai_node_ToF) -> dai_CameraBoardSocket;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node3ToFC1ESt10unique_ptrINS_13ToFPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_ToF_ToF(this: *mut dai_node_ToF, props: std_unique_ptr);
}
impl dai_node_ToF {
    #[inline]
    pub unsafe fn build(&mut self, boardSocket: dai_CameraBoardSocket, fps: f32) -> std_shared_ptr {
        dai_node_ToF_build(self, boardSocket, fps)
    }
    #[inline]
    pub unsafe fn getBoardSocket(&self) -> dai_CameraBoardSocket {
        dai_node_ToF_getBoardSocket(self)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_ToF_ToF(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node3ToF13getPropertiesEv"]
    pub fn dai_node_ToF_getProperties(
        this: *mut ::std::os::raw::c_void,
    ) -> *mut __BindgenOpaqueArray<u64, 23usize>;
}
#[doc = " @brief UVC (USB Video Class) node"]
#[repr(C)]
pub struct dai_node_UVC {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_UVCProperties>,
    #[doc = " Input for image frames to be streamed over UVC\n Default queue is blocking with size 8"]
    pub input: dai_Node_Input,
}
pub const dai_node_UVC_NAME: &[u8; 4] = b"UVC\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_UVC"][::std::mem::size_of::<dai_node_UVC>() - 944usize];
    ["Alignment of dai_node_UVC"][::std::mem::align_of::<dai_node_UVC>() - 8usize];
    ["Offset of field: dai_node_UVC::input"]
        [::std::mem::offset_of!(dai_node_UVC, input) - 448usize];
};
unsafe extern "C" {
    #[doc = " Set GPIO list <gpio_number, value> for GPIOs to set (on/off) at init"]
    #[link_name = "\u{1}_ZN3dai4node3UVC14setGpiosOnInitESt13unordered_mapIiiSt4hashIiESt8equal_toIiESaISt4pairIKiiEEE"]
    pub fn dai_node_UVC_setGpiosOnInit(this: *mut dai_node_UVC, list: std_unordered_map);
}
unsafe extern "C" {
    #[doc = " Set GPIO list <gpio_number, value> for GPIOs to set when streaming is enabled"]
    #[link_name = "\u{1}_ZN3dai4node3UVC18setGpiosOnStreamOnESt13unordered_mapIiiSt4hashIiESt8equal_toIiESaISt4pairIKiiEEE"]
    pub fn dai_node_UVC_setGpiosOnStreamOn(this: *mut dai_node_UVC, list: std_unordered_map);
}
unsafe extern "C" {
    #[doc = " Set GPIO list <gpio_number, value> for GPIOs to set when streaming is disabled"]
    #[link_name = "\u{1}_ZN3dai4node3UVC19setGpiosOnStreamOffESt13unordered_mapIiiSt4hashIiESt8equal_toIiESaISt4pairIKiiEEE"]
    pub fn dai_node_UVC_setGpiosOnStreamOff(this: *mut dai_node_UVC, list: std_unordered_map);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node3UVCC1ESt10unique_ptrINS_13UVCPropertiesESt14default_deleteIS3_EE"]
    pub fn dai_node_UVC_UVC(this: *mut dai_node_UVC, props: std_unique_ptr);
}
impl dai_node_UVC {
    #[inline]
    pub unsafe fn setGpiosOnInit(&mut self, list: std_unordered_map) {
        dai_node_UVC_setGpiosOnInit(self, list)
    }
    #[inline]
    pub unsafe fn setGpiosOnStreamOn(&mut self, list: std_unordered_map) {
        dai_node_UVC_setGpiosOnStreamOn(self, list)
    }
    #[inline]
    pub unsafe fn setGpiosOnStreamOff(&mut self, list: std_unordered_map) {
        dai_node_UVC_setGpiosOnStreamOff(self, list)
    }
    #[inline]
    pub unsafe fn new(props: std_unique_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_UVC_UVC(__bindgen_tmp.as_mut_ptr(), props);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " @brief VideoEncoder node. Encodes frames into MJPEG, H264 or H265."]
#[repr(C)]
pub struct dai_node_VideoEncoder {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_VideoEncoderProperties>,
    #[doc = " Input for NV12 ImgFrame to be encoded"]
    pub input: dai_Node_Input,
    #[doc = " Outputs ImgFrame message that carries BITSTREAM encoded (MJPEG, H264 or H265) frame data.\n Mutually exclusive with out."]
    pub bitstream: dai_Node_Output,
    #[doc = " Outputs EncodedFrame message that carries encoded (MJPEG, H264 or H265) frame data.\n Mutually exclusive with bitstream."]
    pub out: dai_Node_Output,
}
pub const dai_node_VideoEncoder_NAME: &[u8; 13] = b"VideoEncoder\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_VideoEncoder"][::std::mem::size_of::<dai_node_VideoEncoder>() - 1264usize];
    ["Alignment of dai_node_VideoEncoder"]
        [::std::mem::align_of::<dai_node_VideoEncoder>() - 8usize];
    ["Offset of field: dai_node_VideoEncoder::input"]
        [::std::mem::offset_of!(dai_node_VideoEncoder, input) - 448usize];
    ["Offset of field: dai_node_VideoEncoder::bitstream"]
        [::std::mem::offset_of!(dai_node_VideoEncoder, bitstream) - 944usize];
    ["Offset of field: dai_node_VideoEncoder::out"]
        [::std::mem::offset_of!(dai_node_VideoEncoder, out) - 1104usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder5buildERNS_4Node6OutputE"]
    pub fn dai_node_VideoEncoder_build(
        this: *mut dai_node_VideoEncoder,
        input: *mut dai_Node_Output,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " Sets a default preset based on specified frame rate and profile\n @param fps Frame rate in frames per second\n @param profile Encoding profile"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder23setDefaultProfilePresetEfNS_22VideoEncoderProperties7ProfileE"]
    pub fn dai_node_VideoEncoder_setDefaultProfilePreset(
        this: *mut dai_node_VideoEncoder,
        fps: f32,
        profile: dai_VideoEncoderProperties_Profile,
    );
}
unsafe extern "C" {
    #[doc = " Set number of frames in pool\n @param frames Number of pool frames"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder16setNumFramesPoolEi"]
    pub fn dai_node_VideoEncoder_setNumFramesPool(
        this: *mut dai_node_VideoEncoder,
        frames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Get number of frames in pool\n @returns Number of pool frames"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder16getNumFramesPoolEv"]
    pub fn dai_node_VideoEncoder_getNumFramesPool(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set rate control mode"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder18setRateControlModeENS_22VideoEncoderProperties15RateControlModeE"]
    pub fn dai_node_VideoEncoder_setRateControlMode(
        this: *mut dai_node_VideoEncoder,
        mode: dai_VideoEncoderProperties_RateControlMode,
    );
}
unsafe extern "C" {
    #[doc = " Set encoding profile"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder10setProfileENS_22VideoEncoderProperties7ProfileE"]
    pub fn dai_node_VideoEncoder_setProfile(
        this: *mut dai_node_VideoEncoder,
        profile: dai_VideoEncoderProperties_Profile,
    );
}
unsafe extern "C" {
    #[doc = " Set output bitrate in bps, for CBR rate control mode. 0 for auto (based on frame size and FPS)"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder10setBitrateEi"]
    pub fn dai_node_VideoEncoder_setBitrate(
        this: *mut dai_node_VideoEncoder,
        bitrate: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set output bitrate in kbps, for CBR rate control mode. 0 for auto (based on frame size and FPS)"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder14setBitrateKbpsEi"]
    pub fn dai_node_VideoEncoder_setBitrateKbps(
        this: *mut dai_node_VideoEncoder,
        bitrateKbps: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set keyframe frequency. Every Nth frame a keyframe is inserted.\n\n Applicable only to H264 and H265 profiles\n\n Examples:\n\n  - 30 FPS video, keyframe frequency: 30. Every 1s a keyframe will be inserted\n\n  - 60 FPS video, keyframe frequency: 180. Every 3s a keyframe will be inserted\n"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder20setKeyframeFrequencyEi"]
    pub fn dai_node_VideoEncoder_setKeyframeFrequency(
        this: *mut dai_node_VideoEncoder,
        freq: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set number of B frames to be inserted"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder13setNumBFramesEi"]
    pub fn dai_node_VideoEncoder_setNumBFrames(
        this: *mut dai_node_VideoEncoder,
        numBFrames: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set quality\n @param quality Value between 0-100%. Approximates quality"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder10setQualityEi"]
    pub fn dai_node_VideoEncoder_setQuality(
        this: *mut dai_node_VideoEncoder,
        quality: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set lossless mode. Applies only to [M]JPEG profile\n @param lossless True to enable lossless jpeg encoding, false otherwise"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder11setLosslessEb"]
    pub fn dai_node_VideoEncoder_setLossless(this: *mut dai_node_VideoEncoder, lossless: bool);
}
unsafe extern "C" {
    #[doc = " Sets expected frame rate\n @param frameRate Frame rate in frames per second"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder12setFrameRateEf"]
    pub fn dai_node_VideoEncoder_setFrameRate(this: *mut dai_node_VideoEncoder, frameRate: f32);
}
unsafe extern "C" {
    #[doc = " Specifies maximum output encoded frame size"]
    #[link_name = "\u{1}_ZN3dai4node12VideoEncoder21setMaxOutputFrameSizeEi"]
    pub fn dai_node_VideoEncoder_setMaxOutputFrameSize(
        this: *mut dai_node_VideoEncoder,
        maxFrameSize: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Get rate control mode"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder18getRateControlModeEv"]
    pub fn dai_node_VideoEncoder_getRateControlMode(
        this: *const dai_node_VideoEncoder,
    ) -> dai_VideoEncoderProperties_RateControlMode;
}
unsafe extern "C" {
    #[doc = " Get profile"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder10getProfileEv"]
    pub fn dai_node_VideoEncoder_getProfile(
        this: *const dai_node_VideoEncoder,
    ) -> dai_VideoEncoderProperties_Profile;
}
unsafe extern "C" {
    #[doc = " Get bitrate in bps"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder10getBitrateEv"]
    pub fn dai_node_VideoEncoder_getBitrate(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get bitrate in kbps"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder14getBitrateKbpsEv"]
    pub fn dai_node_VideoEncoder_getBitrateKbps(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get keyframe frequency"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder20getKeyframeFrequencyEv"]
    pub fn dai_node_VideoEncoder_getKeyframeFrequency(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get number of B frames"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder13getNumBFramesEv"]
    pub fn dai_node_VideoEncoder_getNumBFrames(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get quality"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder10getQualityEv"]
    pub fn dai_node_VideoEncoder_getQuality(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Get frame rate"]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder12getFrameRateEv"]
    pub fn dai_node_VideoEncoder_getFrameRate(this: *const dai_node_VideoEncoder) -> f32;
}
unsafe extern "C" {
    #[doc = " Get lossless mode. Applies only when using [M]JPEG profile."]
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder11getLosslessEv"]
    pub fn dai_node_VideoEncoder_getLossless(this: *const dai_node_VideoEncoder) -> bool;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai4node12VideoEncoder21getMaxOutputFrameSizeEv"]
    pub fn dai_node_VideoEncoder_getMaxOutputFrameSize(
        this: *const dai_node_VideoEncoder,
    ) -> ::std::os::raw::c_int;
}
impl dai_node_VideoEncoder {
    #[inline]
    pub unsafe fn build(&mut self, input: *mut dai_Node_Output) -> std_shared_ptr {
        dai_node_VideoEncoder_build(self, input)
    }
    #[inline]
    pub unsafe fn setDefaultProfilePreset(
        &mut self,
        fps: f32,
        profile: dai_VideoEncoderProperties_Profile,
    ) {
        dai_node_VideoEncoder_setDefaultProfilePreset(self, fps, profile)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, frames: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setNumFramesPool(self, frames)
    }
    #[inline]
    pub unsafe fn getNumFramesPool(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getNumFramesPool(self)
    }
    #[inline]
    pub unsafe fn setRateControlMode(&mut self, mode: dai_VideoEncoderProperties_RateControlMode) {
        dai_node_VideoEncoder_setRateControlMode(self, mode)
    }
    #[inline]
    pub unsafe fn setProfile(&mut self, profile: dai_VideoEncoderProperties_Profile) {
        dai_node_VideoEncoder_setProfile(self, profile)
    }
    #[inline]
    pub unsafe fn setBitrate(&mut self, bitrate: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setBitrate(self, bitrate)
    }
    #[inline]
    pub unsafe fn setBitrateKbps(&mut self, bitrateKbps: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setBitrateKbps(self, bitrateKbps)
    }
    #[inline]
    pub unsafe fn setKeyframeFrequency(&mut self, freq: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setKeyframeFrequency(self, freq)
    }
    #[inline]
    pub unsafe fn setNumBFrames(&mut self, numBFrames: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setNumBFrames(self, numBFrames)
    }
    #[inline]
    pub unsafe fn setQuality(&mut self, quality: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setQuality(self, quality)
    }
    #[inline]
    pub unsafe fn setLossless(&mut self, lossless: bool) {
        dai_node_VideoEncoder_setLossless(self, lossless)
    }
    #[inline]
    pub unsafe fn setFrameRate(&mut self, frameRate: f32) {
        dai_node_VideoEncoder_setFrameRate(self, frameRate)
    }
    #[inline]
    pub unsafe fn setMaxOutputFrameSize(&mut self, maxFrameSize: ::std::os::raw::c_int) {
        dai_node_VideoEncoder_setMaxOutputFrameSize(self, maxFrameSize)
    }
    #[inline]
    pub unsafe fn getRateControlMode(&self) -> dai_VideoEncoderProperties_RateControlMode {
        dai_node_VideoEncoder_getRateControlMode(self)
    }
    #[inline]
    pub unsafe fn getProfile(&self) -> dai_VideoEncoderProperties_Profile {
        dai_node_VideoEncoder_getProfile(self)
    }
    #[inline]
    pub unsafe fn getBitrate(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getBitrate(self)
    }
    #[inline]
    pub unsafe fn getBitrateKbps(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getBitrateKbps(self)
    }
    #[inline]
    pub unsafe fn getKeyframeFrequency(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getKeyframeFrequency(self)
    }
    #[inline]
    pub unsafe fn getNumBFrames(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getNumBFrames(self)
    }
    #[inline]
    pub unsafe fn getQuality(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getQuality(self)
    }
    #[inline]
    pub unsafe fn getFrameRate(&self) -> f32 {
        dai_node_VideoEncoder_getFrameRate(self)
    }
    #[inline]
    pub unsafe fn getLossless(&self) -> bool {
        dai_node_VideoEncoder_getLossless(self)
    }
    #[inline]
    pub unsafe fn getMaxOutputFrameSize(&self) -> ::std::os::raw::c_int {
        dai_node_VideoEncoder_getMaxOutputFrameSize(self)
    }
}
#[doc = " @brief Warp node. Capability to crop, resize, warp, ... incoming image frames"]
#[repr(C)]
pub struct dai_node_Warp {
    pub _base: dai_DeviceNodeCRTP<dai_DeviceNode, dai_WarpProperties>,
    #[doc = " Input image to be modified\n Default queue is blocking with size 8"]
    pub inputImage: dai_Node_Input,
    #[doc = " Outputs ImgFrame message that carries warped image."]
    pub out: dai_Node_Output,
}
pub const dai_node_Warp_NAME: &[u8; 5] = b"Warp\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_Warp"][::std::mem::size_of::<dai_node_Warp>() - 1104usize];
    ["Alignment of dai_node_Warp"][::std::mem::align_of::<dai_node_Warp>() - 8usize];
    ["Offset of field: dai_node_Warp::inputImage"]
        [::std::mem::offset_of!(dai_node_Warp, inputImage) - 448usize];
    ["Offset of field: dai_node_Warp::out"][::std::mem::offset_of!(dai_node_Warp, out) - 944usize];
};
unsafe extern "C" {
    #[doc = " Sets output frame size in pixels\n\n @param size width and height in pixels"]
    #[link_name = "\u{1}_ZN3dai4node4Warp13setOutputSizeESt5tupleIJiiEE"]
    pub fn dai_node_Warp_setOutputSize(this: *mut dai_node_Warp, size: std_tuple);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4Warp13setOutputSizeEii"]
    pub fn dai_node_Warp_setOutputSize1(
        this: *mut dai_node_Warp,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Set a custom warp mesh\n @param meshData 2D plane of mesh points, starting from top left to bottom right\n @param width Width of mesh\n @param height Height of mesh"]
    #[link_name = "\u{1}_ZN3dai4node4Warp11setWarpMeshERKSt6vectorINS_7Point2fESaIS3_EEii"]
    pub fn dai_node_Warp_setWarpMesh(
        this: *mut dai_node_Warp,
        meshData: *const std_vector,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4Warp11setWarpMeshERKSt6vectorISt4pairIffESaIS4_EEii"]
    pub fn dai_node_Warp_setWarpMesh1(
        this: *mut dai_node_Warp,
        meshData: *const std_vector,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify number of frames in pool.\n @param numFramesPool How many frames should the pool have"]
    #[link_name = "\u{1}_ZN3dai4node4Warp16setNumFramesPoolEi"]
    pub fn dai_node_Warp_setNumFramesPool(
        this: *mut dai_node_Warp,
        numFramesPool: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify maximum size of output image.\n @param maxFrameSize Maximum frame size in bytes"]
    #[link_name = "\u{1}_ZN3dai4node4Warp21setMaxOutputFrameSizeEi"]
    pub fn dai_node_Warp_setMaxOutputFrameSize(
        this: *mut dai_node_Warp,
        maxFrameSize: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Specify which hardware warp engines to use\n @param ids Which warp engines to use (0, 1, 2)"]
    #[link_name = "\u{1}_ZN3dai4node4Warp8setHwIdsESt6vectorIiSaIiEE"]
    pub fn dai_node_Warp_setHwIds(this: *mut dai_node_Warp, ids: std_vector);
}
unsafe extern "C" {
    #[doc = " Retrieve which hardware warp engines to use"]
    #[link_name = "\u{1}_ZNK3dai4node4Warp8getHwIdsEv"]
    pub fn dai_node_Warp_getHwIds(this: *const dai_node_Warp) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Specify which interpolation method to use\n @param interpolation type of interpolation"]
    #[link_name = "\u{1}_ZN3dai4node4Warp16setInterpolationENS_13InterpolationE"]
    pub fn dai_node_Warp_setInterpolation(
        this: *mut dai_node_Warp,
        interpolation: dai_Interpolation,
    );
}
unsafe extern "C" {
    #[doc = " Retrieve which interpolation method to use"]
    #[link_name = "\u{1}_ZNK3dai4node4Warp16getInterpolationEv"]
    pub fn dai_node_Warp_getInterpolation(this: *const dai_node_Warp) -> dai_Interpolation;
}
impl dai_node_Warp {
    #[inline]
    pub unsafe fn setOutputSize(&mut self, size: std_tuple) {
        dai_node_Warp_setOutputSize(self, size)
    }
    #[inline]
    pub unsafe fn setOutputSize1(
        &mut self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_Warp_setOutputSize1(self, width, height)
    }
    #[inline]
    pub unsafe fn setWarpMesh(
        &mut self,
        meshData: *const std_vector,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_Warp_setWarpMesh(self, meshData, width, height)
    }
    #[inline]
    pub unsafe fn setWarpMesh1(
        &mut self,
        meshData: *const std_vector,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        dai_node_Warp_setWarpMesh1(self, meshData, width, height)
    }
    #[inline]
    pub unsafe fn setNumFramesPool(&mut self, numFramesPool: ::std::os::raw::c_int) {
        dai_node_Warp_setNumFramesPool(self, numFramesPool)
    }
    #[inline]
    pub unsafe fn setMaxOutputFrameSize(&mut self, maxFrameSize: ::std::os::raw::c_int) {
        dai_node_Warp_setMaxOutputFrameSize(self, maxFrameSize)
    }
    #[inline]
    pub unsafe fn setHwIds(&mut self, ids: std_vector) {
        dai_node_Warp_setHwIds(self, ids)
    }
    #[inline]
    pub unsafe fn getHwIds(&self) -> std_vector {
        dai_node_Warp_getHwIds(self)
    }
    #[inline]
    pub unsafe fn setInterpolation(&mut self, interpolation: dai_Interpolation) {
        dai_node_Warp_setInterpolation(self, interpolation)
    }
    #[inline]
    pub unsafe fn getInterpolation(&self) -> dai_Interpolation {
        dai_node_Warp_getInterpolation(self)
    }
}
#[doc = " @brief RGBD node. Combines depth and color frames into a single point cloud."]
#[repr(C)]
pub struct dai_node_RGBD {
    pub _base: dai_NodeCRTP<dai_node_ThreadedHostNode>,
    pub sync: dai_Subnode,
    pub inputs: *mut dai_Node_InputMap,
    pub colorInputName: std_string,
    pub depthInputName: std_string,
    pub inColor: *mut dai_Node_Input,
    pub inDepth: *mut dai_Node_Input,
    #[doc = " Output point cloud."]
    pub pcl: dai_Node_Output,
    #[doc = " Output RGBD frames."]
    pub rgbd: dai_Node_Output,
    pub pimpl: dai_Pimpl,
    pub inSync: dai_Node_Input,
    pub initialized: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_node_RGBD_Impl {
    _unused: [u8; 0],
}
pub const dai_node_RGBD_NAME: &[u8; 5] = b"RGBD\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_RGBD"][::std::mem::size_of::<dai_node_RGBD>() - 1352usize];
    ["Alignment of dai_node_RGBD"][::std::mem::align_of::<dai_node_RGBD>() - 8usize];
    ["Offset of field: dai_node_RGBD::sync"]
        [::std::mem::offset_of!(dai_node_RGBD, sync) - 416usize];
    ["Offset of field: dai_node_RGBD::inputs"]
        [::std::mem::offset_of!(dai_node_RGBD, inputs) - 432usize];
    ["Offset of field: dai_node_RGBD::colorInputName"]
        [::std::mem::offset_of!(dai_node_RGBD, colorInputName) - 440usize];
    ["Offset of field: dai_node_RGBD::depthInputName"]
        [::std::mem::offset_of!(dai_node_RGBD, depthInputName) - 472usize];
    ["Offset of field: dai_node_RGBD::inColor"]
        [::std::mem::offset_of!(dai_node_RGBD, inColor) - 504usize];
    ["Offset of field: dai_node_RGBD::inDepth"]
        [::std::mem::offset_of!(dai_node_RGBD, inDepth) - 512usize];
    ["Offset of field: dai_node_RGBD::pcl"][::std::mem::offset_of!(dai_node_RGBD, pcl) - 520usize];
    ["Offset of field: dai_node_RGBD::rgbd"]
        [::std::mem::offset_of!(dai_node_RGBD, rgbd) - 680usize];
    ["Offset of field: dai_node_RGBD::pimpl"]
        [::std::mem::offset_of!(dai_node_RGBD, pimpl) - 840usize];
    ["Offset of field: dai_node_RGBD::inSync"]
        [::std::mem::offset_of!(dai_node_RGBD, inSync) - 848usize];
    ["Offset of field: dai_node_RGBD::initialized"]
        [::std::mem::offset_of!(dai_node_RGBD, initialized) - 1344usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4RGBD5buildEv"]
    pub fn dai_node_RGBD_build(this: *mut dai_node_RGBD) -> std_shared_ptr;
}
unsafe extern "C" {
    #[doc = " @brief Build RGBD node with specified size. Note that this API is global and if used autocreated cameras can't be reused.\n @param autocreate If true, will create color and depth nodes if they don't exist.\n @param size Size of the frames"]
    #[link_name = "\u{1}_ZN3dai4node4RGBD5buildEbNS0_11StereoDepth10PresetModeESt4pairIiiE"]
    pub fn dai_node_RGBD_build1(
        this: *mut dai_node_RGBD,
        autocreate: bool,
        mode: dai_node_StereoDepth_PresetMode,
        size: std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>,
    ) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4RGBD12setDepthUnitENS_17StereoDepthConfig16AlgorithmControl9DepthUnitE"]
    pub fn dai_node_RGBD_setDepthUnit(
        this: *mut dai_node_RGBD,
        depthUnit: dai_StereoDepthConfig_AlgorithmControl_DepthUnit,
    );
}
unsafe extern "C" {
    #[doc = " @brief Use single-threaded CPU for processing"]
    #[link_name = "\u{1}_ZN3dai4node4RGBD6useCPUEv"]
    pub fn dai_node_RGBD_useCPU(this: *mut dai_node_RGBD);
}
unsafe extern "C" {
    #[doc = " @brief Use multi-threaded CPU for processing\n @param numThreads Number of threads to use"]
    #[link_name = "\u{1}_ZN3dai4node4RGBD8useCPUMTEj"]
    pub fn dai_node_RGBD_useCPUMT(this: *mut dai_node_RGBD, numThreads: u32);
}
unsafe extern "C" {
    #[doc = " @brief Use GPU for processing (needs to be compiled with Kompute support)\n @param device GPU device index"]
    #[link_name = "\u{1}_ZN3dai4node4RGBD6useGPUEj"]
    pub fn dai_node_RGBD_useGPU(this: *mut dai_node_RGBD, device: u32);
}
unsafe extern "C" {
    #[doc = " @brief Print available GPU devices"]
    #[link_name = "\u{1}_ZN3dai4node4RGBD12printDevicesEv"]
    pub fn dai_node_RGBD_printDevices(this: *mut dai_node_RGBD);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4RGBDC1Ev"]
    pub fn dai_node_RGBD_RGBD(this: *mut dai_node_RGBD);
}
impl dai_node_RGBD {
    #[inline]
    pub unsafe fn build(&mut self) -> std_shared_ptr {
        dai_node_RGBD_build(self)
    }
    #[inline]
    pub unsafe fn build1(
        &mut self,
        autocreate: bool,
        mode: dai_node_StereoDepth_PresetMode,
        size: std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>,
    ) -> std_shared_ptr {
        dai_node_RGBD_build1(self, autocreate, mode, size)
    }
    #[inline]
    pub unsafe fn setDepthUnit(
        &mut self,
        depthUnit: dai_StereoDepthConfig_AlgorithmControl_DepthUnit,
    ) {
        dai_node_RGBD_setDepthUnit(self, depthUnit)
    }
    #[inline]
    pub unsafe fn useCPU(&mut self) {
        dai_node_RGBD_useCPU(self)
    }
    #[inline]
    pub unsafe fn useCPUMT(&mut self, numThreads: u32) {
        dai_node_RGBD_useCPUMT(self, numThreads)
    }
    #[inline]
    pub unsafe fn useGPU(&mut self, device: u32) {
        dai_node_RGBD_useGPU(self, device)
    }
    #[inline]
    pub unsafe fn printDevices(&mut self) {
        dai_node_RGBD_printDevices(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_node_RGBD_RGBD(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4RGBDD1Ev"]
    pub fn dai_node_RGBD_RGBD_destructor(this: *mut dai_node_RGBD);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node4RGBD13buildInternalEv"]
    pub fn dai_node_RGBD_buildInternal(this: *mut ::std::os::raw::c_void);
}
#[repr(C)]
pub struct dai_node_HostNode {
    pub _base: dai_node_ThreadedHostNode,
    pub syncOnHost: std_optional,
    pub sendProcessToPipeline: bool,
    pub sync: dai_Subnode,
    pub input: dai_Node_Input,
    pub inputs: *mut dai_Node_InputMap,
    pub out: dai_Node_Output,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_node_HostNode"][::std::mem::size_of::<dai_node_HostNode>() - 1104usize];
    ["Alignment of dai_node_HostNode"][::std::mem::align_of::<dai_node_HostNode>() - 8usize];
    ["Offset of field: dai_node_HostNode::syncOnHost"]
        [::std::mem::offset_of!(dai_node_HostNode, syncOnHost) - 416usize];
    ["Offset of field: dai_node_HostNode::sendProcessToPipeline"]
        [::std::mem::offset_of!(dai_node_HostNode, sendProcessToPipeline) - 418usize];
    ["Offset of field: dai_node_HostNode::sync"]
        [::std::mem::offset_of!(dai_node_HostNode, sync) - 424usize];
    ["Offset of field: dai_node_HostNode::input"]
        [::std::mem::offset_of!(dai_node_HostNode, input) - 440usize];
    ["Offset of field: dai_node_HostNode::inputs"]
        [::std::mem::offset_of!(dai_node_HostNode, inputs) - 936usize];
    ["Offset of field: dai_node_HostNode::out"]
        [::std::mem::offset_of!(dai_node_HostNode, out) - 944usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node8HostNode11buildStage1Ev"]
    pub fn dai_node_HostNode_buildStage1(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai4node8HostNode3runEv"]
    pub fn dai_node_HostNode_run(this: *mut ::std::os::raw::c_void);
}
#[doc = " @brief Custom node for host node. When creating a custom host node, inherit from this class!\n @tparam T Node type (same as the class you are creating)\n\n Example:\n @code{.cpp}\n class MyNode : public CustomNode<MyNode> {\n     std::shared_ptr<Buffer> processGroup(std::shared_ptr<dai::MessageGroup> in) override {\n         auto frame = in->get<dai::ImgFrame>(\"data\");\n         // process frame\n         // ...\n         return nullptr; // Don't return anything, just process\n     }\n };\n @endcode"]
pub type dai_node_CustomNode = dai_NodeCRTP<dai_node_HostNode>;
#[repr(C)]
pub struct dai_InputQueue {
    #[doc = " Pointer to InputQueueNode that does the actual communication between host and device"]
    pub inputQueueNode: std_shared_ptr,
}
#[repr(C)]
pub struct dai_InputQueue_InputQueueNode {
    pub _base: dai_node_ThreadedHostNode,
    pub input: dai_Node_Input,
    pub output: dai_Node_Output,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_InputQueue_InputQueueNode"]
        [::std::mem::size_of::<dai_InputQueue_InputQueueNode>() - 1072usize];
    ["Alignment of dai_InputQueue_InputQueueNode"]
        [::std::mem::align_of::<dai_InputQueue_InputQueueNode>() - 8usize];
    ["Offset of field: dai_InputQueue_InputQueueNode::input"]
        [::std::mem::offset_of!(dai_InputQueue_InputQueueNode, input) - 416usize];
    ["Offset of field: dai_InputQueue_InputQueueNode::output"]
        [::std::mem::offset_of!(dai_InputQueue_InputQueueNode, output) - 912usize];
};
unsafe extern "C" {
    #[doc = " Send message from host"]
    #[link_name = "\u{1}_ZN3dai10InputQueue14InputQueueNode4sendERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_InputQueue_InputQueueNode_send(
        this: *mut dai_InputQueue_InputQueueNode,
        msg: *const std_shared_ptr,
    );
}
unsafe extern "C" {
    #[doc = " Constructor"]
    #[link_name = "\u{1}_ZN3dai10InputQueue14InputQueueNodeC1Ejb"]
    pub fn dai_InputQueue_InputQueueNode_InputQueueNode(
        this: *mut dai_InputQueue_InputQueueNode,
        maxSize: ::std::os::raw::c_uint,
        blocking: bool,
    );
}
impl dai_InputQueue_InputQueueNode {
    #[inline]
    pub unsafe fn send(&mut self, msg: *const std_shared_ptr) {
        dai_InputQueue_InputQueueNode_send(self, msg)
    }
    #[inline]
    pub unsafe fn new(maxSize: ::std::os::raw::c_uint, blocking: bool) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_InputQueue_InputQueueNode_InputQueueNode(__bindgen_tmp.as_mut_ptr(), maxSize, blocking);
        __bindgen_tmp.assume_init()
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_InputQueue"][::std::mem::size_of::<dai_InputQueue>() - 16usize];
    ["Alignment of dai_InputQueue"][::std::mem::align_of::<dai_InputQueue>() - 8usize];
    ["Offset of field: dai_InputQueue::inputQueueNode"]
        [::std::mem::offset_of!(dai_InputQueue, inputQueueNode) - 0usize];
};
unsafe extern "C" {
    #[doc = " @brief Send a message to the connected input\n\n @param msg: Message to send"]
    #[link_name = "\u{1}_ZN3dai10InputQueue4sendERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_InputQueue_send(this: *mut dai_InputQueue, msg: *const std_shared_ptr);
}
impl dai_InputQueue {
    #[inline]
    pub unsafe fn send(&mut self, msg: *const std_shared_ptr) {
        dai_InputQueue_send(self, msg)
    }
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai10InputQueue14InputQueueNode3runEv"]
    pub fn dai_InputQueue_InputQueueNode_run(this: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai10InputQueue14InputQueueNode7getNameEv"]
    pub fn dai_InputQueue_InputQueueNode_getName(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[doc = " AprilTagConfig message."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_AprilTagConfig {
    pub _base: dai_Buffer,
    #[doc = " AprilTag family."]
    pub family: dai_AprilTagConfig_Family,
    #[doc = " Detection of quads can be done on a lower-resolution image,\n improving speed at a cost of pose accuracy and a slight\n decrease in detection rate. Decoding the binary payload is\n still done at full resolution."]
    pub quadDecimate: ::std::os::raw::c_int,
    #[doc = " What Gaussian blur should be applied to the segmented image.\n Parameter is the standard deviation in pixels.\n Very noisy images benefit from non-zero values (e.g. 0.8)."]
    pub quadSigma: f32,
    #[doc = " When non-zero, the edges of the each quad are adjusted to \"snap\n to\" strong gradients nearby. This is useful when decimation is\n employed, as it can increase the quality of the initial quad\n estimate substantially. Generally recommended to be on.\n Very computationally inexpensive. Option is ignored if quadDecimate = 1."]
    pub refineEdges: bool,
    #[doc = " How much sharpening should be done to decoded images? This\n can help decode small tags but may or may not help in odd\n lighting conditions or low light conditions.\n The default value is 0.25."]
    pub decodeSharpening: f32,
    #[doc = " Max number of error bits that should be corrected. Accepting large numbers of\n corrected errors leads to greatly increased false positive rates.\n As of this implementation, the detector cannot detect tags with\n a hamming distance greater than 2."]
    pub maxHammingDistance: ::std::os::raw::c_int,
    #[doc = " AprilTag quad threshold parameters."]
    pub quadThresholds: dai_AprilTagConfig_QuadThresholds,
}
pub const dai_AprilTagConfig_Family_TAG_36H11: dai_AprilTagConfig_Family = 0;
pub const dai_AprilTagConfig_Family_TAG_36H10: dai_AprilTagConfig_Family = 1;
pub const dai_AprilTagConfig_Family_TAG_25H9: dai_AprilTagConfig_Family = 2;
pub const dai_AprilTagConfig_Family_TAG_16H5: dai_AprilTagConfig_Family = 3;
pub const dai_AprilTagConfig_Family_TAG_CIR21H7: dai_AprilTagConfig_Family = 4;
pub const dai_AprilTagConfig_Family_TAG_STAND41H12: dai_AprilTagConfig_Family = 5;
#[doc = " Supported AprilTag families."]
pub type dai_AprilTagConfig_Family = ::std::os::raw::c_int;
#[doc = " AprilTag quad threshold parameters."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_AprilTagConfig_QuadThresholds {
    #[doc = " Reject quads containing too few pixels."]
    pub minClusterPixels: ::std::os::raw::c_int,
    #[doc = " How many corner candidates to consider when segmenting a group of pixels into a quad."]
    pub maxNmaxima: ::std::os::raw::c_int,
    #[doc = " Reject quads where pairs of edges have angles that are close to\n straight or close to 180 degrees. Zero means that no quads are\n rejected. (In degrees)."]
    pub criticalDegree: f32,
    #[doc = " When fitting lines to the contours, what is the maximum mean\n squared error allowed?  This is useful in rejecting contours\n that are far from being quad shaped; rejecting these quads \"early\"\n saves expensive decoding processing."]
    pub maxLineFitMse: f32,
    #[doc = " When we build our model of black & white pixels, we add an\n extra check that the white model must be (overall) brighter\n than the black model. How much brighter? (in pixel values: [0,255])."]
    pub minWhiteBlackDiff: ::std::os::raw::c_int,
    #[doc = " Should the thresholded image be deglitched? Only useful for very noisy images"]
    pub deglitch: bool,
}
pub type dai_AprilTagConfig_QuadThresholds_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AprilTagConfig_QuadThresholds"]
        [::std::mem::size_of::<dai_AprilTagConfig_QuadThresholds>() - 24usize];
    ["Alignment of dai_AprilTagConfig_QuadThresholds"]
        [::std::mem::align_of::<dai_AprilTagConfig_QuadThresholds>() - 4usize];
    ["Offset of field: dai_AprilTagConfig_QuadThresholds::minClusterPixels"]
        [::std::mem::offset_of!(dai_AprilTagConfig_QuadThresholds, minClusterPixels) - 0usize];
    ["Offset of field: dai_AprilTagConfig_QuadThresholds::maxNmaxima"]
        [::std::mem::offset_of!(dai_AprilTagConfig_QuadThresholds, maxNmaxima) - 4usize];
    ["Offset of field: dai_AprilTagConfig_QuadThresholds::criticalDegree"]
        [::std::mem::offset_of!(dai_AprilTagConfig_QuadThresholds, criticalDegree) - 8usize];
    ["Offset of field: dai_AprilTagConfig_QuadThresholds::maxLineFitMse"]
        [::std::mem::offset_of!(dai_AprilTagConfig_QuadThresholds, maxLineFitMse) - 12usize];
    ["Offset of field: dai_AprilTagConfig_QuadThresholds::minWhiteBlackDiff"]
        [::std::mem::offset_of!(dai_AprilTagConfig_QuadThresholds, minWhiteBlackDiff) - 16usize];
    ["Offset of field: dai_AprilTagConfig_QuadThresholds::deglitch"]
        [::std::mem::offset_of!(dai_AprilTagConfig_QuadThresholds, deglitch) - 20usize];
};
pub type dai_AprilTagConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AprilTagConfig"][::std::mem::size_of::<dai_AprilTagConfig>() - 112usize];
    ["Alignment of dai_AprilTagConfig"][::std::mem::align_of::<dai_AprilTagConfig>() - 8usize];
    ["Offset of field: dai_AprilTagConfig::family"]
        [::std::mem::offset_of!(dai_AprilTagConfig, family) - 64usize];
    ["Offset of field: dai_AprilTagConfig::quadDecimate"]
        [::std::mem::offset_of!(dai_AprilTagConfig, quadDecimate) - 68usize];
    ["Offset of field: dai_AprilTagConfig::quadSigma"]
        [::std::mem::offset_of!(dai_AprilTagConfig, quadSigma) - 72usize];
    ["Offset of field: dai_AprilTagConfig::refineEdges"]
        [::std::mem::offset_of!(dai_AprilTagConfig, refineEdges) - 76usize];
    ["Offset of field: dai_AprilTagConfig::decodeSharpening"]
        [::std::mem::offset_of!(dai_AprilTagConfig, decodeSharpening) - 80usize];
    ["Offset of field: dai_AprilTagConfig::maxHammingDistance"]
        [::std::mem::offset_of!(dai_AprilTagConfig, maxHammingDistance) - 84usize];
    ["Offset of field: dai_AprilTagConfig::quadThresholds"]
        [::std::mem::offset_of!(dai_AprilTagConfig, quadThresholds) - 88usize];
};
unsafe extern "C" {
    #[doc = " @param family AprilTag family"]
    #[link_name = "\u{1}_ZN3dai14AprilTagConfig9setFamilyENS0_6FamilyE"]
    pub fn dai_AprilTagConfig_setFamily(
        this: *mut dai_AprilTagConfig,
        family: dai_AprilTagConfig_Family,
    ) -> *mut dai_AprilTagConfig;
}
impl dai_AprilTagConfig {
    #[inline]
    pub unsafe fn setFamily(
        &mut self,
        family: dai_AprilTagConfig_Family,
    ) -> *mut dai_AprilTagConfig {
        dai_AprilTagConfig_setFamily(self, family)
    }
}
#[doc = " Specify properties for AprilTag"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_AprilTagProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub initialConfig: dai_AprilTagConfig,
    #[doc = " Whether to wait for config at 'inputConfig' IO"]
    pub inputConfigSync: bool,
    #[doc = " How many threads to use for AprilTag detection"]
    pub numThreads: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AprilTagProperties"][::std::mem::size_of::<dai_AprilTagProperties>() - 128usize];
    ["Alignment of dai_AprilTagProperties"]
        [::std::mem::align_of::<dai_AprilTagProperties>() - 8usize];
    ["Offset of field: dai_AprilTagProperties::initialConfig"]
        [::std::mem::offset_of!(dai_AprilTagProperties, initialConfig) - 8usize];
    ["Offset of field: dai_AprilTagProperties::inputConfigSync"]
        [::std::mem::offset_of!(dai_AprilTagProperties, inputConfigSync) - 120usize];
    ["Offset of field: dai_AprilTagProperties::numThreads"]
        [::std::mem::offset_of!(dai_AprilTagProperties, numThreads) - 124usize];
};
#[doc = " Specify benchmark properties (number of messages to send/receive)"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_BenchmarkInProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Specify how many messages to measure for each report"]
    pub reportEveryNMessages: u32,
    #[doc = " Specify whether the latenices are attached to the report individually"]
    pub attachLatencies: bool,
    #[doc = " Send the reports also as logger warnings"]
    pub logReportsAsWarnings: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BenchmarkInProperties"]
        [::std::mem::size_of::<dai_BenchmarkInProperties>() - 16usize];
    ["Alignment of dai_BenchmarkInProperties"]
        [::std::mem::align_of::<dai_BenchmarkInProperties>() - 8usize];
    ["Offset of field: dai_BenchmarkInProperties::reportEveryNMessages"]
        [::std::mem::offset_of!(dai_BenchmarkInProperties, reportEveryNMessages) - 8usize];
    ["Offset of field: dai_BenchmarkInProperties::attachLatencies"]
        [::std::mem::offset_of!(dai_BenchmarkInProperties, attachLatencies) - 12usize];
    ["Offset of field: dai_BenchmarkInProperties::logReportsAsWarnings"]
        [::std::mem::offset_of!(dai_BenchmarkInProperties, logReportsAsWarnings) - 13usize];
};
#[doc = " Specify benchmark properties (number of messages to send/receive)"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_BenchmarkOutProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Number of messages to send"]
    pub numMessages: ::std::os::raw::c_int,
    #[doc = " FPS for sending, 0 means as fast as possible"]
    pub fps: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BenchmarkOutProperties"]
        [::std::mem::size_of::<dai_BenchmarkOutProperties>() - 16usize];
    ["Alignment of dai_BenchmarkOutProperties"]
        [::std::mem::align_of::<dai_BenchmarkOutProperties>() - 8usize];
    ["Offset of field: dai_BenchmarkOutProperties::numMessages"]
        [::std::mem::offset_of!(dai_BenchmarkOutProperties, numMessages) - 8usize];
    ["Offset of field: dai_BenchmarkOutProperties::fps"]
        [::std::mem::offset_of!(dai_BenchmarkOutProperties, fps) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CapabilityRange {
    pub value: std_optional,
}
pub type dai_CapabilityRange_NOP__MEMBERS = nop_MemberList;
#[doc = " Keeps aspect ratio.\n Crops the image to get the correct output aspect ratio.\n Crops some FOV to match the required FOV, then scale. No potential NN accuracy decrease."]
pub const dai_ImgResizeMode_CROP: dai_ImgResizeMode = 0;
#[doc = " Doesn't keep aspect ratio.\n Squishes or streches the image to fill the required pixel area.\n Preserves full FOV, but frames are stretched to match the FOV, which might decrease NN accuracy."]
pub const dai_ImgResizeMode_STRETCH: dai_ImgResizeMode = 1;
#[doc = " Keeps aspect ratio.\n Envelop the image with a background color to get the corect output aspect ratio.\n Preserves full FOV by padding/letterboxing, but smaller frame means less features which might decrease NN accuracy."]
pub const dai_ImgResizeMode_LETTERBOX: dai_ImgResizeMode = 2;
pub type dai_ImgResizeMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct dai_ImgFrameCapability {
    pub _base: dai_CapabilityCRTP<dai_Capability>,
    pub size: dai_CapabilityRange,
    pub fps: dai_CapabilityRange,
    pub type_: std_optional,
    pub resizeMode: dai_ImgResizeMode,
    pub enableUndistortion: std_optional,
    pub pimpl: spimpl_impl_ptr,
}
pub type dai_ImgFrameCapability_NOP__MEMBERS = nop_MemberList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImgFrameCapability_Impl {
    _unused: [u8; 0],
}
pub const dai_ImgFrameCapability_NAME: &[u8; 14] = b"dai/img-frame\0";
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgFrameCapability"][::std::mem::size_of::<dai_ImgFrameCapability>() - 128usize];
    ["Alignment of dai_ImgFrameCapability"]
        [::std::mem::align_of::<dai_ImgFrameCapability>() - 8usize];
    ["Offset of field: dai_ImgFrameCapability::size"]
        [::std::mem::offset_of!(dai_ImgFrameCapability, size) - 8usize];
    ["Offset of field: dai_ImgFrameCapability::fps"]
        [::std::mem::offset_of!(dai_ImgFrameCapability, fps) - 48usize];
    ["Offset of field: dai_ImgFrameCapability::type_"]
        [::std::mem::offset_of!(dai_ImgFrameCapability, type_) - 88usize];
    ["Offset of field: dai_ImgFrameCapability::resizeMode"]
        [::std::mem::offset_of!(dai_ImgFrameCapability, resizeMode) - 96usize];
    ["Offset of field: dai_ImgFrameCapability::enableUndistortion"]
        [::std::mem::offset_of!(dai_ImgFrameCapability, enableUndistortion) - 100usize];
    ["Offset of field: dai_ImgFrameCapability::pimpl"]
        [::std::mem::offset_of!(dai_ImgFrameCapability, pimpl) - 104usize];
};
#[doc = " CameraControl message.\n Specifies various camera control commands like:\n\n  - Still capture\n\n  - Auto/manual focus\n\n  - Auto/manual white balance\n\n  - Auto/manual exposure\n\n  - Anti banding\n\n  - ...\n\n  By default the camera enables 3A, with auto-focus in `CONTINUOUS_VIDEO` mode,\n  auto-white-balance in `AUTO` mode, and auto-exposure with anti-banding for\n  50Hz mains frequency.\n"]
#[repr(C)]
pub struct dai_CameraControl {
    pub _base: dai_Buffer,
    pub cmdMask: u64,
    pub autoFocusMode: dai_CameraControl_AutoFocusMode,
    #[doc = " Lens/VCM position, range: 0..255. Used with `autoFocusMode = OFF`.\n With current IMX378 modules:\n - max 255: macro focus, at 8cm distance\n - infinite focus at about 120..130 (may vary from module to module)\n - lower values lead to out-of-focus (lens too close to the sensor array)"]
    pub lensPosition: u8,
    pub lensPositionRaw: f32,
    pub lensPosAutoInfinity: u8,
    pub lensPosAutoMacro: u8,
    pub expManual: dai_CameraControl_ManualExposureParams,
    pub aeRegion: dai_CameraControl_RegionParams,
    pub afRegion: dai_CameraControl_RegionParams,
    pub awbMode: dai_CameraControl_AutoWhiteBalanceMode,
    pub sceneMode: dai_CameraControl_SceneMode,
    pub antiBandingMode: dai_CameraControl_AntiBandingMode,
    pub captureIntent: dai_CameraControl_CaptureIntent,
    pub controlMode: dai_CameraControl_ControlMode,
    pub effectMode: dai_CameraControl_EffectMode,
    pub frameSyncMode: dai_CameraControl_FrameSyncMode,
    pub strobeConfig: dai_CameraControl_StrobeConfig,
    pub strobeTimings: dai_CameraControl_StrobeTimings,
    pub aeMaxExposureTimeUs: u32,
    pub aeLockMode: bool,
    pub awbLockMode: bool,
    pub expCompensation: i8,
    pub brightness: i8,
    pub contrast: i8,
    pub saturation: i8,
    pub sharpness: u8,
    pub lumaDenoise: u8,
    pub chromaDenoise: u8,
    pub wbColorTemp: u16,
    pub lowPowerNumFramesBurst: u8,
    pub lowPowerNumFramesDiscard: u8,
    pub enableHdr: bool,
    pub miscControls: std_vector,
}
pub const dai_CameraControl_Command_START_STREAM: dai_CameraControl_Command = 1;
pub const dai_CameraControl_Command_STOP_STREAM: dai_CameraControl_Command = 2;
pub const dai_CameraControl_Command_STILL_CAPTURE: dai_CameraControl_Command = 3;
pub const dai_CameraControl_Command_MOVE_LENS: dai_CameraControl_Command = 4;
pub const dai_CameraControl_Command_AF_TRIGGER: dai_CameraControl_Command = 5;
pub const dai_CameraControl_Command_AE_MANUAL: dai_CameraControl_Command = 6;
pub const dai_CameraControl_Command_AE_AUTO: dai_CameraControl_Command = 7;
pub const dai_CameraControl_Command_AWB_MODE: dai_CameraControl_Command = 8;
pub const dai_CameraControl_Command_SCENE_MODE: dai_CameraControl_Command = 9;
pub const dai_CameraControl_Command_ANTIBANDING_MODE: dai_CameraControl_Command = 10;
pub const dai_CameraControl_Command_EXPOSURE_COMPENSATION: dai_CameraControl_Command = 11;
pub const dai_CameraControl_Command_AE_LOCK: dai_CameraControl_Command = 13;
pub const dai_CameraControl_Command_AE_TARGET_FPS_RANGE: dai_CameraControl_Command = 14;
pub const dai_CameraControl_Command_AWB_LOCK: dai_CameraControl_Command = 16;
pub const dai_CameraControl_Command_CAPTURE_INTENT: dai_CameraControl_Command = 17;
pub const dai_CameraControl_Command_CONTROL_MODE: dai_CameraControl_Command = 18;
pub const dai_CameraControl_Command_FRAME_DURATION: dai_CameraControl_Command = 21;
pub const dai_CameraControl_Command_SENSITIVITY: dai_CameraControl_Command = 23;
pub const dai_CameraControl_Command_EFFECT_MODE: dai_CameraControl_Command = 24;
pub const dai_CameraControl_Command_AF_MODE: dai_CameraControl_Command = 26;
pub const dai_CameraControl_Command_NOISE_REDUCTION_STRENGTH: dai_CameraControl_Command = 27;
pub const dai_CameraControl_Command_SATURATION: dai_CameraControl_Command = 28;
pub const dai_CameraControl_Command_BRIGHTNESS: dai_CameraControl_Command = 31;
pub const dai_CameraControl_Command_STREAM_FORMAT: dai_CameraControl_Command = 33;
pub const dai_CameraControl_Command_RESOLUTION: dai_CameraControl_Command = 34;
pub const dai_CameraControl_Command_SHARPNESS: dai_CameraControl_Command = 35;
pub const dai_CameraControl_Command_CUSTOM_USECASE: dai_CameraControl_Command = 40;
pub const dai_CameraControl_Command_CUSTOM_CAPT_MODE: dai_CameraControl_Command = 41;
pub const dai_CameraControl_Command_CUSTOM_EXP_BRACKETS: dai_CameraControl_Command = 42;
pub const dai_CameraControl_Command_CUSTOM_CAPTURE: dai_CameraControl_Command = 43;
pub const dai_CameraControl_Command_CONTRAST: dai_CameraControl_Command = 44;
pub const dai_CameraControl_Command_AE_REGION: dai_CameraControl_Command = 45;
pub const dai_CameraControl_Command_AF_REGION: dai_CameraControl_Command = 46;
pub const dai_CameraControl_Command_LUMA_DENOISE: dai_CameraControl_Command = 47;
pub const dai_CameraControl_Command_CHROMA_DENOISE: dai_CameraControl_Command = 48;
pub const dai_CameraControl_Command_WB_COLOR_TEMP: dai_CameraControl_Command = 49;
pub const dai_CameraControl_Command_EXTERNAL_TRIGGER: dai_CameraControl_Command = 50;
pub const dai_CameraControl_Command_AF_LENS_RANGE: dai_CameraControl_Command = 51;
pub const dai_CameraControl_Command_FRAME_SYNC: dai_CameraControl_Command = 52;
pub const dai_CameraControl_Command_STROBE_CONFIG: dai_CameraControl_Command = 53;
pub const dai_CameraControl_Command_STROBE_TIMINGS: dai_CameraControl_Command = 54;
pub const dai_CameraControl_Command_MOVE_LENS_RAW: dai_CameraControl_Command = 55;
pub const dai_CameraControl_Command_HDR: dai_CameraControl_Command = 56;
pub type dai_CameraControl_Command = u8;
#[doc = " Autofocus disabled. Suitable for manual focus"]
pub const dai_CameraControl_AutoFocusMode_OFF: dai_CameraControl_AutoFocusMode = 0;
#[doc = " Basic automatic focus mode. In this mode, the lens does not move unless the autofocus trigger action is called."]
pub const dai_CameraControl_AutoFocusMode_AUTO: dai_CameraControl_AutoFocusMode = 1;
#[doc = " Close-up focusing mode - this mode is optimized for focusing on objects very close to the camera."]
pub const dai_CameraControl_AutoFocusMode_MACRO: dai_CameraControl_AutoFocusMode = 2;
#[doc = " In this mode, the AF algorithm modifies the lens position continually to attempt to provide a constantly-in-focus image stream.\n The focusing behavior should be suitable for good quality video recording; typically this means slower focus movement and no overshoots."]
pub const dai_CameraControl_AutoFocusMode_CONTINUOUS_VIDEO: dai_CameraControl_AutoFocusMode = 3;
#[doc = " In this mode, the AF algorithm modifies the lens position continually to attempt to provide a constantly-in-focus image stream.\n The focusing behavior should be suitable for still image capture; typically this means focusing as fast as possible"]
pub const dai_CameraControl_AutoFocusMode_CONTINUOUS_PICTURE: dai_CameraControl_AutoFocusMode = 4;
#[doc = " Extended depth of field (digital focus) mode. The camera device will produce images with an extended depth of field automatically.\n AF triggers are ignored."]
pub const dai_CameraControl_AutoFocusMode_EDOF: dai_CameraControl_AutoFocusMode = 5;
pub type dai_CameraControl_AutoFocusMode = u8;
#[doc = " The camera device's auto-white balance routine is disabled."]
pub const dai_CameraControl_AutoWhiteBalanceMode_OFF: dai_CameraControl_AutoWhiteBalanceMode = 0;
#[doc = " The camera device's auto-white balance routine is active."]
pub const dai_CameraControl_AutoWhiteBalanceMode_AUTO: dai_CameraControl_AutoWhiteBalanceMode = 1;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses incandescent light as the assumed scene illumination for white\n balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_INCANDESCENT:
    dai_CameraControl_AutoWhiteBalanceMode = 2;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses fluorescent light as the assumed scene illumination for white\n balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_FLUORESCENT:
    dai_CameraControl_AutoWhiteBalanceMode = 3;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses warm fluorescent light as the assumed scene illumination for white\n balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_WARM_FLUORESCENT:
    dai_CameraControl_AutoWhiteBalanceMode = 4;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses daylight light as the assumed scene illumination for white\n balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_DAYLIGHT: dai_CameraControl_AutoWhiteBalanceMode =
    5;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses cloudy daylight light as the assumed scene illumination for white\n balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_CLOUDY_DAYLIGHT:
    dai_CameraControl_AutoWhiteBalanceMode = 6;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses twilight light as the assumed scene illumination for white\n balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_TWILIGHT: dai_CameraControl_AutoWhiteBalanceMode =
    7;
#[doc = " The camera device's auto-white balance routine is disabled; the camera device uses shade light as the assumed scene illumination for white balance."]
pub const dai_CameraControl_AutoWhiteBalanceMode_SHADE: dai_CameraControl_AutoWhiteBalanceMode = 8;
pub type dai_CameraControl_AutoWhiteBalanceMode = u8;
#[doc = " Indicates that no scene modes are set for a given capture request."]
pub const dai_CameraControl_SceneMode_UNSUPPORTED: dai_CameraControl_SceneMode = 0;
#[doc = " If face detection support exists, use face detection data for auto-focus, auto-white balance, and auto-exposure routines."]
pub const dai_CameraControl_SceneMode_FACE_PRIORITY: dai_CameraControl_SceneMode = 1;
#[doc = " Optimized for photos of quickly moving objects. Similar to SPORTS scene mode."]
pub const dai_CameraControl_SceneMode_ACTION: dai_CameraControl_SceneMode = 2;
#[doc = " Optimized for still photos of people."]
pub const dai_CameraControl_SceneMode_PORTRAIT: dai_CameraControl_SceneMode = 3;
#[doc = " Optimized for photos of distant macroscopic objects."]
pub const dai_CameraControl_SceneMode_LANDSCAPE: dai_CameraControl_SceneMode = 4;
#[doc = " Optimized for low-light settings."]
pub const dai_CameraControl_SceneMode_NIGHT: dai_CameraControl_SceneMode = 5;
#[doc = " Optimized for still photos of people in low-light settings."]
pub const dai_CameraControl_SceneMode_NIGHT_PORTRAIT: dai_CameraControl_SceneMode = 6;
#[doc = " Optimized for dim, indoor settings where flash must remain off."]
pub const dai_CameraControl_SceneMode_THEATRE: dai_CameraControl_SceneMode = 7;
#[doc = " Optimized for bright, outdoor beach settings."]
pub const dai_CameraControl_SceneMode_BEACH: dai_CameraControl_SceneMode = 8;
#[doc = " Optimized for bright, outdoor settings containing snow."]
pub const dai_CameraControl_SceneMode_SNOW: dai_CameraControl_SceneMode = 9;
#[doc = " Optimized for scenes of the setting sun."]
pub const dai_CameraControl_SceneMode_SUNSET: dai_CameraControl_SceneMode = 10;
#[doc = " Optimized to avoid blurry photos due to small amounts of device motion (for example: due to hand shake)."]
pub const dai_CameraControl_SceneMode_STEADYPHOTO: dai_CameraControl_SceneMode = 11;
#[doc = " Optimized for nighttime photos of fireworks."]
pub const dai_CameraControl_SceneMode_FIREWORKS: dai_CameraControl_SceneMode = 12;
#[doc = " Optimized for photos of quickly moving people."]
pub const dai_CameraControl_SceneMode_SPORTS: dai_CameraControl_SceneMode = 13;
#[doc = " Optimized for dim, indoor settings with multiple moving people."]
pub const dai_CameraControl_SceneMode_PARTY: dai_CameraControl_SceneMode = 14;
#[doc = " Optimized for dim settings where the main light source is a candle."]
pub const dai_CameraControl_SceneMode_CANDLELIGHT: dai_CameraControl_SceneMode = 15;
#[doc = " Optimized for accurately capturing a photo of barcode for use by camera applications that wish to read the barcode value."]
pub const dai_CameraControl_SceneMode_BARCODE: dai_CameraControl_SceneMode = 16;
pub type dai_CameraControl_SceneMode = u8;
#[doc = " The camera device will not adjust exposure duration to avoid banding problems."]
pub const dai_CameraControl_AntiBandingMode_OFF: dai_CameraControl_AntiBandingMode = 0;
#[doc = " The camera device will adjust exposure duration to avoid banding problems with 50Hz illumination sources."]
pub const dai_CameraControl_AntiBandingMode_MAINS_50_HZ: dai_CameraControl_AntiBandingMode = 1;
#[doc = " The camera device will adjust exposure duration to avoid banding problems with 60Hz illumination sources."]
pub const dai_CameraControl_AntiBandingMode_MAINS_60_HZ: dai_CameraControl_AntiBandingMode = 2;
#[doc = " The camera device will automatically adapt its antibanding routine to the current illumination condition. This is the default mode if AUTO is\n available on given camera device."]
pub const dai_CameraControl_AntiBandingMode_AUTO: dai_CameraControl_AntiBandingMode = 3;
pub type dai_CameraControl_AntiBandingMode = u8;
#[doc = " The goal of this request doesn't fall into the other categories. The camera device will default to preview-like behavior."]
pub const dai_CameraControl_CaptureIntent_CUSTOM: dai_CameraControl_CaptureIntent = 0;
#[doc = " This request is for a preview-like use case."]
pub const dai_CameraControl_CaptureIntent_PREVIEW: dai_CameraControl_CaptureIntent = 1;
#[doc = " This request is for a still capture-type use case."]
pub const dai_CameraControl_CaptureIntent_STILL_CAPTURE: dai_CameraControl_CaptureIntent = 2;
#[doc = " This request is for a video recording use case."]
pub const dai_CameraControl_CaptureIntent_VIDEO_RECORD: dai_CameraControl_CaptureIntent = 3;
#[doc = " This request is for a video snapshot (still image while recording video) use case.\n The camera device should take the highest-quality image possible (given the other settings)\n without disrupting the frame rate of video recording."]
pub const dai_CameraControl_CaptureIntent_VIDEO_SNAPSHOT: dai_CameraControl_CaptureIntent = 4;
#[doc = " This request is for a ZSL usecase; the application will stream full-resolution images and reprocess one or several later for a final capture."]
pub const dai_CameraControl_CaptureIntent_ZERO_SHUTTER_LAG: dai_CameraControl_CaptureIntent = 5;
pub type dai_CameraControl_CaptureIntent = u8;
#[doc = " Full application control of pipeline. All control by the device's metering and focusing (3A) routines is disabled."]
pub const dai_CameraControl_ControlMode_OFF: dai_CameraControl_ControlMode = 0;
#[doc = " Use settings for each individual 3A routine. Manual control of capture parameters is disabled."]
pub const dai_CameraControl_ControlMode_AUTO: dai_CameraControl_ControlMode = 1;
#[doc = " Use a specific scene mode. Enabling this disables Auto-Exposure, AWB and AF controls;"]
pub const dai_CameraControl_ControlMode_USE_SCENE_MODE: dai_CameraControl_ControlMode = 2;
pub type dai_CameraControl_ControlMode = u8;
#[doc = "  No color effect will be applied."]
pub const dai_CameraControl_EffectMode_OFF: dai_CameraControl_EffectMode = 0;
#[doc = " A \"monocolor\" effect where the image is mapped into a single color. This will typically be grayscale."]
pub const dai_CameraControl_EffectMode_MONO: dai_CameraControl_EffectMode = 1;
#[doc = " A \"photo-negative\" effect where the image's colors are inverted."]
pub const dai_CameraControl_EffectMode_NEGATIVE: dai_CameraControl_EffectMode = 2;
#[doc = " A \"solarisation\" effect (Sabattier effect) where the image is wholly or partially reversed in tone."]
pub const dai_CameraControl_EffectMode_SOLARIZE: dai_CameraControl_EffectMode = 3;
#[doc = " A \"sepia\" effect where the image is mapped into warm gray, red, and brown tones."]
pub const dai_CameraControl_EffectMode_SEPIA: dai_CameraControl_EffectMode = 4;
#[doc = " A \"posterization\" effect where the image uses discrete regions of tone rather than a continuous gradient of tones."]
pub const dai_CameraControl_EffectMode_POSTERIZE: dai_CameraControl_EffectMode = 5;
#[doc = " A \"whiteboard\" effect where the image is typically displayed as regions of white, with black or grey details."]
pub const dai_CameraControl_EffectMode_WHITEBOARD: dai_CameraControl_EffectMode = 6;
#[doc = " A \"blackboard\" effect where the image is typically displayed as regions of black, with white or grey details."]
pub const dai_CameraControl_EffectMode_BLACKBOARD: dai_CameraControl_EffectMode = 7;
#[doc = " An \"aqua\" effect where a blue hue is added to the image."]
pub const dai_CameraControl_EffectMode_AQUA: dai_CameraControl_EffectMode = 8;
pub type dai_CameraControl_EffectMode = u8;
pub const dai_CameraControl_FrameSyncMode_OFF: dai_CameraControl_FrameSyncMode = 0;
pub const dai_CameraControl_FrameSyncMode_OUTPUT: dai_CameraControl_FrameSyncMode = 1;
pub const dai_CameraControl_FrameSyncMode_INPUT: dai_CameraControl_FrameSyncMode = 2;
pub type dai_CameraControl_FrameSyncMode = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CameraControl_ManualExposureParams {
    pub exposureTimeUs: u32,
    pub sensitivityIso: u32,
    pub frameDurationUs: u32,
}
pub type dai_CameraControl_ManualExposureParams_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraControl_ManualExposureParams"]
        [::std::mem::size_of::<dai_CameraControl_ManualExposureParams>() - 12usize];
    ["Alignment of dai_CameraControl_ManualExposureParams"]
        [::std::mem::align_of::<dai_CameraControl_ManualExposureParams>() - 4usize];
    ["Offset of field: dai_CameraControl_ManualExposureParams::exposureTimeUs"]
        [::std::mem::offset_of!(dai_CameraControl_ManualExposureParams, exposureTimeUs) - 0usize];
    ["Offset of field: dai_CameraControl_ManualExposureParams::sensitivityIso"]
        [::std::mem::offset_of!(dai_CameraControl_ManualExposureParams, sensitivityIso) - 4usize];
    ["Offset of field: dai_CameraControl_ManualExposureParams::frameDurationUs"]
        [::std::mem::offset_of!(dai_CameraControl_ManualExposureParams, frameDurationUs) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CameraControl_RegionParams {
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
    pub priority: u32,
}
pub type dai_CameraControl_RegionParams_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraControl_RegionParams"]
        [::std::mem::size_of::<dai_CameraControl_RegionParams>() - 12usize];
    ["Alignment of dai_CameraControl_RegionParams"]
        [::std::mem::align_of::<dai_CameraControl_RegionParams>() - 4usize];
    ["Offset of field: dai_CameraControl_RegionParams::x"]
        [::std::mem::offset_of!(dai_CameraControl_RegionParams, x) - 0usize];
    ["Offset of field: dai_CameraControl_RegionParams::y"]
        [::std::mem::offset_of!(dai_CameraControl_RegionParams, y) - 2usize];
    ["Offset of field: dai_CameraControl_RegionParams::width"]
        [::std::mem::offset_of!(dai_CameraControl_RegionParams, width) - 4usize];
    ["Offset of field: dai_CameraControl_RegionParams::height"]
        [::std::mem::offset_of!(dai_CameraControl_RegionParams, height) - 6usize];
    ["Offset of field: dai_CameraControl_RegionParams::priority"]
        [::std::mem::offset_of!(dai_CameraControl_RegionParams, priority) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CameraControl_StrobeTimings {
    #[doc = " Start offset in microseconds, relative to exposure window"]
    pub exposureBeginOffsetUs: i32,
    #[doc = " End offset in microseconds, relative to exposure window"]
    pub exposureEndOffsetUs: i32,
    #[doc = " Fixed duration in microseconds. If set (non-zero), overrides `exposureEndOffsetUs`"]
    pub durationUs: u32,
}
pub type dai_CameraControl_StrobeTimings_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraControl_StrobeTimings"]
        [::std::mem::size_of::<dai_CameraControl_StrobeTimings>() - 12usize];
    ["Alignment of dai_CameraControl_StrobeTimings"]
        [::std::mem::align_of::<dai_CameraControl_StrobeTimings>() - 4usize];
    ["Offset of field: dai_CameraControl_StrobeTimings::exposureBeginOffsetUs"]
        [::std::mem::offset_of!(dai_CameraControl_StrobeTimings, exposureBeginOffsetUs) - 0usize];
    ["Offset of field: dai_CameraControl_StrobeTimings::exposureEndOffsetUs"]
        [::std::mem::offset_of!(dai_CameraControl_StrobeTimings, exposureEndOffsetUs) - 4usize];
    ["Offset of field: dai_CameraControl_StrobeTimings::durationUs"]
        [::std::mem::offset_of!(dai_CameraControl_StrobeTimings, durationUs) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_CameraControl_StrobeConfig {
    #[doc = " Enable strobe output"]
    pub enable: u8,
    #[doc = " 1 for normal polarity (high-active), 0 otherwise"]
    pub activeLevel: u8,
    #[doc = " GPIO number to drive, or -1 if sensor driven"]
    pub gpioNumber: i8,
}
pub type dai_CameraControl_StrobeConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraControl_StrobeConfig"]
        [::std::mem::size_of::<dai_CameraControl_StrobeConfig>() - 3usize];
    ["Alignment of dai_CameraControl_StrobeConfig"]
        [::std::mem::align_of::<dai_CameraControl_StrobeConfig>() - 1usize];
    ["Offset of field: dai_CameraControl_StrobeConfig::enable"]
        [::std::mem::offset_of!(dai_CameraControl_StrobeConfig, enable) - 0usize];
    ["Offset of field: dai_CameraControl_StrobeConfig::activeLevel"]
        [::std::mem::offset_of!(dai_CameraControl_StrobeConfig, activeLevel) - 1usize];
    ["Offset of field: dai_CameraControl_StrobeConfig::gpioNumber"]
        [::std::mem::offset_of!(dai_CameraControl_StrobeConfig, gpioNumber) - 2usize];
};
pub type dai_CameraControl_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraControl"][::std::mem::size_of::<dai_CameraControl>() - 192usize];
    ["Alignment of dai_CameraControl"][::std::mem::align_of::<dai_CameraControl>() - 8usize];
    ["Offset of field: dai_CameraControl::cmdMask"]
        [::std::mem::offset_of!(dai_CameraControl, cmdMask) - 64usize];
    ["Offset of field: dai_CameraControl::autoFocusMode"]
        [::std::mem::offset_of!(dai_CameraControl, autoFocusMode) - 72usize];
    ["Offset of field: dai_CameraControl::lensPosition"]
        [::std::mem::offset_of!(dai_CameraControl, lensPosition) - 73usize];
    ["Offset of field: dai_CameraControl::lensPositionRaw"]
        [::std::mem::offset_of!(dai_CameraControl, lensPositionRaw) - 76usize];
    ["Offset of field: dai_CameraControl::lensPosAutoInfinity"]
        [::std::mem::offset_of!(dai_CameraControl, lensPosAutoInfinity) - 80usize];
    ["Offset of field: dai_CameraControl::lensPosAutoMacro"]
        [::std::mem::offset_of!(dai_CameraControl, lensPosAutoMacro) - 81usize];
    ["Offset of field: dai_CameraControl::expManual"]
        [::std::mem::offset_of!(dai_CameraControl, expManual) - 84usize];
    ["Offset of field: dai_CameraControl::aeRegion"]
        [::std::mem::offset_of!(dai_CameraControl, aeRegion) - 96usize];
    ["Offset of field: dai_CameraControl::afRegion"]
        [::std::mem::offset_of!(dai_CameraControl, afRegion) - 108usize];
    ["Offset of field: dai_CameraControl::awbMode"]
        [::std::mem::offset_of!(dai_CameraControl, awbMode) - 120usize];
    ["Offset of field: dai_CameraControl::sceneMode"]
        [::std::mem::offset_of!(dai_CameraControl, sceneMode) - 121usize];
    ["Offset of field: dai_CameraControl::antiBandingMode"]
        [::std::mem::offset_of!(dai_CameraControl, antiBandingMode) - 122usize];
    ["Offset of field: dai_CameraControl::captureIntent"]
        [::std::mem::offset_of!(dai_CameraControl, captureIntent) - 123usize];
    ["Offset of field: dai_CameraControl::controlMode"]
        [::std::mem::offset_of!(dai_CameraControl, controlMode) - 124usize];
    ["Offset of field: dai_CameraControl::effectMode"]
        [::std::mem::offset_of!(dai_CameraControl, effectMode) - 125usize];
    ["Offset of field: dai_CameraControl::frameSyncMode"]
        [::std::mem::offset_of!(dai_CameraControl, frameSyncMode) - 126usize];
    ["Offset of field: dai_CameraControl::strobeConfig"]
        [::std::mem::offset_of!(dai_CameraControl, strobeConfig) - 127usize];
    ["Offset of field: dai_CameraControl::strobeTimings"]
        [::std::mem::offset_of!(dai_CameraControl, strobeTimings) - 132usize];
    ["Offset of field: dai_CameraControl::aeMaxExposureTimeUs"]
        [::std::mem::offset_of!(dai_CameraControl, aeMaxExposureTimeUs) - 144usize];
    ["Offset of field: dai_CameraControl::aeLockMode"]
        [::std::mem::offset_of!(dai_CameraControl, aeLockMode) - 148usize];
    ["Offset of field: dai_CameraControl::awbLockMode"]
        [::std::mem::offset_of!(dai_CameraControl, awbLockMode) - 149usize];
    ["Offset of field: dai_CameraControl::expCompensation"]
        [::std::mem::offset_of!(dai_CameraControl, expCompensation) - 150usize];
    ["Offset of field: dai_CameraControl::brightness"]
        [::std::mem::offset_of!(dai_CameraControl, brightness) - 151usize];
    ["Offset of field: dai_CameraControl::contrast"]
        [::std::mem::offset_of!(dai_CameraControl, contrast) - 152usize];
    ["Offset of field: dai_CameraControl::saturation"]
        [::std::mem::offset_of!(dai_CameraControl, saturation) - 153usize];
    ["Offset of field: dai_CameraControl::sharpness"]
        [::std::mem::offset_of!(dai_CameraControl, sharpness) - 154usize];
    ["Offset of field: dai_CameraControl::lumaDenoise"]
        [::std::mem::offset_of!(dai_CameraControl, lumaDenoise) - 155usize];
    ["Offset of field: dai_CameraControl::chromaDenoise"]
        [::std::mem::offset_of!(dai_CameraControl, chromaDenoise) - 156usize];
    ["Offset of field: dai_CameraControl::wbColorTemp"]
        [::std::mem::offset_of!(dai_CameraControl, wbColorTemp) - 158usize];
    ["Offset of field: dai_CameraControl::lowPowerNumFramesBurst"]
        [::std::mem::offset_of!(dai_CameraControl, lowPowerNumFramesBurst) - 160usize];
    ["Offset of field: dai_CameraControl::lowPowerNumFramesDiscard"]
        [::std::mem::offset_of!(dai_CameraControl, lowPowerNumFramesDiscard) - 161usize];
    ["Offset of field: dai_CameraControl::enableHdr"]
        [::std::mem::offset_of!(dai_CameraControl, enableHdr) - 162usize];
    ["Offset of field: dai_CameraControl::miscControls"]
        [::std::mem::offset_of!(dai_CameraControl, miscControls) - 168usize];
};
unsafe extern "C" {
    #[doc = " Set a command to capture a still image"]
    #[link_name = "\u{1}_ZN3dai13CameraControl15setCaptureStillEb"]
    pub fn dai_CameraControl_setCaptureStill(
        this: *mut dai_CameraControl,
        capture: bool,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to start streaming"]
    #[link_name = "\u{1}_ZN3dai13CameraControl17setStartStreamingEv"]
    pub fn dai_CameraControl_setStartStreaming(
        this: *mut dai_CameraControl,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to stop streaming"]
    #[link_name = "\u{1}_ZN3dai13CameraControl16setStopStreamingEv"]
    pub fn dai_CameraControl_setStopStreaming(
        this: *mut dai_CameraControl,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to enable external trigger snapshot mode\n\n A rising edge on the sensor FSIN pin will make it capture a sequence of\n `numFramesBurst` frames. First `numFramesDiscard` will be skipped as\n configured (can be set to 0 as well), as they may have degraded quality"]
    #[link_name = "\u{1}_ZN3dai13CameraControl18setExternalTriggerEii"]
    pub fn dai_CameraControl_setExternalTrigger(
        this: *mut dai_CameraControl,
        numFramesBurst: ::std::os::raw::c_int,
        numFramesDiscard: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set the frame sync mode for continuous streaming operation mode,\n translating to how the camera pin FSIN/FSYNC is used: input/output/disabled"]
    #[link_name = "\u{1}_ZN3dai13CameraControl16setFrameSyncModeENS0_13FrameSyncModeE"]
    pub fn dai_CameraControl_setFrameSyncMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_FrameSyncMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Enable STROBE output on sensor pin, optionally configuring the polarity.\n Note: for many sensors the polarity is high-active and not configurable"]
    #[link_name = "\u{1}_ZN3dai13CameraControl15setStrobeSensorEi"]
    pub fn dai_CameraControl_setStrobeSensor(
        this: *mut dai_CameraControl,
        activeLevel: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Enable STROBE output driven by a MyriadX GPIO, optionally configuring the polarity\n This normally requires a FSIN/FSYNC/trigger input for MyriadX (usually GPIO 41),\n to generate timings"]
    #[link_name = "\u{1}_ZN3dai13CameraControl17setStrobeExternalEii"]
    pub fn dai_CameraControl_setStrobeExternal(
        this: *mut dai_CameraControl,
        gpioNumber: ::std::os::raw::c_int,
        activeLevel: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Disable STROBE output"]
    #[link_name = "\u{1}_ZN3dai13CameraControl16setStrobeDisableEv"]
    pub fn dai_CameraControl_setStrobeDisable(
        this: *mut dai_CameraControl,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify autofocus mode. Default `CONTINUOUS_VIDEO`"]
    #[link_name = "\u{1}_ZN3dai13CameraControl16setAutoFocusModeENS0_13AutoFocusModeE"]
    pub fn dai_CameraControl_setAutoFocusMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_AutoFocusMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to trigger autofocus"]
    #[link_name = "\u{1}_ZN3dai13CameraControl19setAutoFocusTriggerEv"]
    pub fn dai_CameraControl_setAutoFocusTrigger(
        this: *mut dai_CameraControl,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set autofocus lens range, `infinityPosition < macroPosition`, valid values `0..255`.\n May help to improve autofocus in case the lens adjustment is not typical/tuned"]
    #[link_name = "\u{1}_ZN3dai13CameraControl21setAutoFocusLensRangeEii"]
    pub fn dai_CameraControl_setAutoFocusLensRange(
        this: *mut dai_CameraControl,
        infinityPosition: ::std::os::raw::c_int,
        macroPosition: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify focus region in pixels.\n Note: the region should be mapped to the configured sensor resolution, before ISP scaling\n @param startX X coordinate of top left corner of region\n @param startY Y coordinate of top left corner of region\n @param width Region width\n @param height Region height"]
    #[link_name = "\u{1}_ZN3dai13CameraControl18setAutoFocusRegionEtttt"]
    pub fn dai_CameraControl_setAutoFocusRegion(
        this: *mut dai_CameraControl,
        startX: u16,
        startY: u16,
        width: u16,
        height: u16,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify manual focus position\n @param lensPosition specify lens position 0..255"]
    #[link_name = "\u{1}_ZN3dai13CameraControl14setManualFocusEh"]
    pub fn dai_CameraControl_setManualFocus(
        this: *mut dai_CameraControl,
        lensPosition: u8,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify manual focus position (more precise control).\n\n @param lensPositionRaw specify lens position 0.0f .. 1.0f\n @return CameraControl&"]
    #[link_name = "\u{1}_ZN3dai13CameraControl17setManualFocusRawEf"]
    pub fn dai_CameraControl_setManualFocusRaw(
        this: *mut dai_CameraControl,
        lensPositionRaw: f32,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to enable auto exposure"]
    #[link_name = "\u{1}_ZN3dai13CameraControl21setAutoExposureEnableEv"]
    pub fn dai_CameraControl_setAutoExposureEnable(
        this: *mut dai_CameraControl,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify lock auto exposure\n @param lock Auto exposure lock mode enabled or disabled"]
    #[link_name = "\u{1}_ZN3dai13CameraControl19setAutoExposureLockEb"]
    pub fn dai_CameraControl_setAutoExposureLock(
        this: *mut dai_CameraControl,
        lock: bool,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify auto exposure region in pixels.\n Note: the region should be mapped to the configured sensor resolution, before ISP scaling\n @param startX X coordinate of top left corner of region\n @param startY Y coordinate of top left corner of region\n @param width Region width\n @param height Region height"]
    #[link_name = "\u{1}_ZN3dai13CameraControl21setAutoExposureRegionEtttt"]
    pub fn dai_CameraControl_setAutoExposureRegion(
        this: *mut dai_CameraControl,
        startX: u16,
        startY: u16,
        width: u16,
        height: u16,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify auto exposure compensation\n @param compensation Compensation value between -9..9, default 0"]
    #[link_name = "\u{1}_ZN3dai13CameraControl27setAutoExposureCompensationEi"]
    pub fn dai_CameraControl_setAutoExposureCompensation(
        this: *mut dai_CameraControl,
        compensation: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify the maximum exposure time limit for auto-exposure. By default\n the AE algorithm prioritizes increasing exposure over ISO, up to around frame-time\n (subject to further limits imposed by anti-banding)\n @param maxExposureTimeUs Maximum exposure time in microseconds"]
    #[link_name = "\u{1}_ZN3dai13CameraControl20setAutoExposureLimitEj"]
    pub fn dai_CameraControl_setAutoExposureLimit(
        this: *mut dai_CameraControl,
        maxExposureTimeUs: u32,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify the maximum exposure time limit for auto-exposure. By default\n the AE algorithm prioritizes increasing exposure over ISO, up to around frame-time\n (subject to further limits imposed by anti-banding)\n @param maxExposureTime Maximum exposure time"]
    #[link_name = "\u{1}_ZN3dai13CameraControl20setAutoExposureLimitENSt6chrono8durationIlSt5ratioILl1ELl1000000EEEE"]
    pub fn dai_CameraControl_setAutoExposureLimit1(
        this: *mut dai_CameraControl,
        maxExposureTime: std_chrono_microseconds,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify anti-banding mode. Anti-banding / anti-flicker\n works in auto-exposure mode, by controlling the exposure time to be applied\n in multiples of half the mains period, for example in multiple of 10ms\n for 50Hz (period 20ms) AC-powered illumination sources.\n\n If the scene would be too bright for the smallest exposure step\n (10ms in the example, with ISO at a minimum of 100), anti-banding is not effective.\n\n @param mode Anti-banding mode to use. Default: `MAINS_50_HZ`"]
    #[link_name = "\u{1}_ZN3dai13CameraControl18setAntiBandingModeENS0_15AntiBandingModeE"]
    pub fn dai_CameraControl_setAntiBandingMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_AntiBandingMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to manually specify exposure\n @param exposureTimeUs Exposure time in microseconds\n @param sensitivityIso Sensitivity as ISO value, usual range 100..1600"]
    #[link_name = "\u{1}_ZN3dai13CameraControl17setManualExposureEjj"]
    pub fn dai_CameraControl_setManualExposure(
        this: *mut dai_CameraControl,
        exposureTimeUs: u32,
        sensitivityIso: u32,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to manually specify exposure\n @param exposureTime Exposure time\n @param sensitivityIso Sensitivity as ISO value, usual range 100..1600"]
    #[link_name = "\u{1}_ZN3dai13CameraControl17setManualExposureENSt6chrono8durationIlSt5ratioILl1ELl1000000EEEEj"]
    pub fn dai_CameraControl_setManualExposure1(
        this: *mut dai_CameraControl,
        exposureTime: std_chrono_microseconds,
        sensitivityIso: u32,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify auto white balance mode\n @param mode Auto white balance mode to use. Default `AUTO`"]
    #[link_name = "\u{1}_ZN3dai13CameraControl23setAutoWhiteBalanceModeENS0_20AutoWhiteBalanceModeE"]
    pub fn dai_CameraControl_setAutoWhiteBalanceMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_AutoWhiteBalanceMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify auto white balance lock\n @param lock Auto white balance lock mode enabled or disabled"]
    #[link_name = "\u{1}_ZN3dai13CameraControl23setAutoWhiteBalanceLockEb"]
    pub fn dai_CameraControl_setAutoWhiteBalanceLock(
        this: *mut dai_CameraControl,
        lock: bool,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to manually specify white-balance color correction\n @param colorTemperatureK Light source color temperature in kelvins, range 1000..12000"]
    #[link_name = "\u{1}_ZN3dai13CameraControl21setManualWhiteBalanceEi"]
    pub fn dai_CameraControl_setManualWhiteBalance(
        this: *mut dai_CameraControl,
        colorTemperatureK: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to adjust image brightness\n @param value Brightness, range -10..10, default 0"]
    #[link_name = "\u{1}_ZN3dai13CameraControl13setBrightnessEi"]
    pub fn dai_CameraControl_setBrightness(
        this: *mut dai_CameraControl,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to adjust image contrast\n @param value Contrast, range -10..10, default 0"]
    #[link_name = "\u{1}_ZN3dai13CameraControl11setContrastEi"]
    pub fn dai_CameraControl_setContrast(
        this: *mut dai_CameraControl,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to adjust image saturation\n @param value Saturation, range -10..10, default 0"]
    #[link_name = "\u{1}_ZN3dai13CameraControl13setSaturationEi"]
    pub fn dai_CameraControl_setSaturation(
        this: *mut dai_CameraControl,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to adjust image sharpness\n @param value Sharpness, range 0..4, default 1"]
    #[link_name = "\u{1}_ZN3dai13CameraControl12setSharpnessEi"]
    pub fn dai_CameraControl_setSharpness(
        this: *mut dai_CameraControl,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to adjust luma denoise amount\n @param value Luma denoise amount, range 0..4, default 1"]
    #[link_name = "\u{1}_ZN3dai13CameraControl14setLumaDenoiseEi"]
    pub fn dai_CameraControl_setLumaDenoise(
        this: *mut dai_CameraControl,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to adjust chroma denoise amount\n @param value Chroma denoise amount, range 0..4, default 1"]
    #[link_name = "\u{1}_ZN3dai13CameraControl16setChromaDenoiseEi"]
    pub fn dai_CameraControl_setChromaDenoise(
        this: *mut dai_CameraControl,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify scene mode\n @param mode Scene mode"]
    #[link_name = "\u{1}_ZN3dai13CameraControl12setSceneModeENS0_9SceneModeE"]
    pub fn dai_CameraControl_setSceneMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_SceneMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify effect mode\n @param mode Effect mode"]
    #[link_name = "\u{1}_ZN3dai13CameraControl13setEffectModeENS0_10EffectModeE"]
    pub fn dai_CameraControl_setEffectMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_EffectMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a miscellaneous control. The controls set by this function get appended\n to a list, processed after the standard controls\n @param control Control name\n @param value Value as a string"]
    #[link_name = "\u{1}_ZN3dai13CameraControl7setMiscENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_"]
    pub fn dai_CameraControl_setMisc(
        this: *mut dai_CameraControl,
        control: std_string,
        value: std_string,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a miscellaneous control. The controls set by this function get appended\n to a list, processed after the standard controls\n @param control Control name\n @param value Value as an integer number"]
    #[link_name = "\u{1}_ZN3dai13CameraControl7setMiscENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi"]
    pub fn dai_CameraControl_setMisc1(
        this: *mut dai_CameraControl,
        control: std_string,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a miscellaneous control. The controls set by this function get appended\n to a list, processed after the standard controls\n @param control Control name\n @param value Value as a floating point number"]
    #[link_name = "\u{1}_ZN3dai13CameraControl7setMiscENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEf"]
    pub fn dai_CameraControl_setMisc2(
        this: *mut dai_CameraControl,
        control: std_string,
        value: f32,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Clear the list of miscellaneous controls set by `setControl`"]
    #[link_name = "\u{1}_ZN3dai13CameraControl17clearMiscControlsEv"]
    pub fn dai_CameraControl_clearMiscControls(this: *mut dai_CameraControl);
}
unsafe extern "C" {
    #[doc = " Get the list of miscellaneous controls set by `setControl`\n @returns A list of <key, value> pairs as strings"]
    #[link_name = "\u{1}_ZN3dai13CameraControl15getMiscControlsB5cxx11Ev"]
    pub fn dai_CameraControl_getMiscControls(this: *mut dai_CameraControl) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Set a command to specify control mode\n @param mode Control mode"]
    #[link_name = "\u{1}_ZN3dai13CameraControl14setControlModeENS0_11ControlModeE"]
    pub fn dai_CameraControl_setControlMode(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_ControlMode,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Whether or not to enable HDR (High Dynamic Range) mode\n @param enable True to enable HDR mode, false to disable"]
    #[link_name = "\u{1}_ZN3dai13CameraControl6setHdrEb"]
    pub fn dai_CameraControl_setHdr(
        this: *mut dai_CameraControl,
        enable: bool,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Set a command to specify capture intent mode\n @param mode Capture intent mode"]
    #[link_name = "\u{1}_ZN3dai13CameraControl16setCaptureIntentENS0_13CaptureIntentE"]
    pub fn dai_CameraControl_setCaptureIntent(
        this: *mut dai_CameraControl,
        mode: dai_CameraControl_CaptureIntent,
    ) -> *mut dai_CameraControl;
}
unsafe extern "C" {
    #[doc = " Check whether command to capture a still is set\n @returns True if capture still command is set"]
    #[link_name = "\u{1}_ZNK3dai13CameraControl15getCaptureStillEv"]
    pub fn dai_CameraControl_getCaptureStill(this: *const dai_CameraControl) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves exposure time"]
    #[link_name = "\u{1}_ZNK3dai13CameraControl15getExposureTimeEv"]
    pub fn dai_CameraControl_getExposureTime(
        this: *const dai_CameraControl,
    ) -> std_chrono_microseconds;
}
unsafe extern "C" {
    #[doc = " Retrieves sensitivity, as an ISO value"]
    #[link_name = "\u{1}_ZNK3dai13CameraControl14getSensitivityEv"]
    pub fn dai_CameraControl_getSensitivity(
        this: *const dai_CameraControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves lens position, range 0..255. Returns -1 if not available"]
    #[link_name = "\u{1}_ZNK3dai13CameraControl15getLensPositionEv"]
    pub fn dai_CameraControl_getLensPosition(
        this: *const dai_CameraControl,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Whether or not HDR (High Dynamic Range) mode is enabled\n @returns True if HDR mode is enabled, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai13CameraControl6getHdrEv"]
    pub fn dai_CameraControl_getHdr(this: *const dai_CameraControl) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves lens position, range 0.0f..1.0f."]
    #[link_name = "\u{1}_ZNK3dai13CameraControl18getLensPositionRawEv"]
    pub fn dai_CameraControl_getLensPositionRaw(this: *const dai_CameraControl) -> f32;
}
impl dai_CameraControl {
    #[inline]
    pub unsafe fn setCaptureStill(&mut self, capture: bool) -> *mut dai_CameraControl {
        dai_CameraControl_setCaptureStill(self, capture)
    }
    #[inline]
    pub unsafe fn setStartStreaming(&mut self) -> *mut dai_CameraControl {
        dai_CameraControl_setStartStreaming(self)
    }
    #[inline]
    pub unsafe fn setStopStreaming(&mut self) -> *mut dai_CameraControl {
        dai_CameraControl_setStopStreaming(self)
    }
    #[inline]
    pub unsafe fn setExternalTrigger(
        &mut self,
        numFramesBurst: ::std::os::raw::c_int,
        numFramesDiscard: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setExternalTrigger(self, numFramesBurst, numFramesDiscard)
    }
    #[inline]
    pub unsafe fn setFrameSyncMode(
        &mut self,
        mode: dai_CameraControl_FrameSyncMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setFrameSyncMode(self, mode)
    }
    #[inline]
    pub unsafe fn setStrobeSensor(
        &mut self,
        activeLevel: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setStrobeSensor(self, activeLevel)
    }
    #[inline]
    pub unsafe fn setStrobeExternal(
        &mut self,
        gpioNumber: ::std::os::raw::c_int,
        activeLevel: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setStrobeExternal(self, gpioNumber, activeLevel)
    }
    #[inline]
    pub unsafe fn setStrobeDisable(&mut self) -> *mut dai_CameraControl {
        dai_CameraControl_setStrobeDisable(self)
    }
    #[inline]
    pub unsafe fn setAutoFocusMode(
        &mut self,
        mode: dai_CameraControl_AutoFocusMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoFocusMode(self, mode)
    }
    #[inline]
    pub unsafe fn setAutoFocusTrigger(&mut self) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoFocusTrigger(self)
    }
    #[inline]
    pub unsafe fn setAutoFocusLensRange(
        &mut self,
        infinityPosition: ::std::os::raw::c_int,
        macroPosition: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoFocusLensRange(self, infinityPosition, macroPosition)
    }
    #[inline]
    pub unsafe fn setAutoFocusRegion(
        &mut self,
        startX: u16,
        startY: u16,
        width: u16,
        height: u16,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoFocusRegion(self, startX, startY, width, height)
    }
    #[inline]
    pub unsafe fn setManualFocus(&mut self, lensPosition: u8) -> *mut dai_CameraControl {
        dai_CameraControl_setManualFocus(self, lensPosition)
    }
    #[inline]
    pub unsafe fn setManualFocusRaw(&mut self, lensPositionRaw: f32) -> *mut dai_CameraControl {
        dai_CameraControl_setManualFocusRaw(self, lensPositionRaw)
    }
    #[inline]
    pub unsafe fn setAutoExposureEnable(&mut self) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoExposureEnable(self)
    }
    #[inline]
    pub unsafe fn setAutoExposureLock(&mut self, lock: bool) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoExposureLock(self, lock)
    }
    #[inline]
    pub unsafe fn setAutoExposureRegion(
        &mut self,
        startX: u16,
        startY: u16,
        width: u16,
        height: u16,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoExposureRegion(self, startX, startY, width, height)
    }
    #[inline]
    pub unsafe fn setAutoExposureCompensation(
        &mut self,
        compensation: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoExposureCompensation(self, compensation)
    }
    #[inline]
    pub unsafe fn setAutoExposureLimit(
        &mut self,
        maxExposureTimeUs: u32,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoExposureLimit(self, maxExposureTimeUs)
    }
    #[inline]
    pub unsafe fn setAutoExposureLimit1(
        &mut self,
        maxExposureTime: std_chrono_microseconds,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoExposureLimit1(self, maxExposureTime)
    }
    #[inline]
    pub unsafe fn setAntiBandingMode(
        &mut self,
        mode: dai_CameraControl_AntiBandingMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAntiBandingMode(self, mode)
    }
    #[inline]
    pub unsafe fn setManualExposure(
        &mut self,
        exposureTimeUs: u32,
        sensitivityIso: u32,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setManualExposure(self, exposureTimeUs, sensitivityIso)
    }
    #[inline]
    pub unsafe fn setManualExposure1(
        &mut self,
        exposureTime: std_chrono_microseconds,
        sensitivityIso: u32,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setManualExposure1(self, exposureTime, sensitivityIso)
    }
    #[inline]
    pub unsafe fn setAutoWhiteBalanceMode(
        &mut self,
        mode: dai_CameraControl_AutoWhiteBalanceMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoWhiteBalanceMode(self, mode)
    }
    #[inline]
    pub unsafe fn setAutoWhiteBalanceLock(&mut self, lock: bool) -> *mut dai_CameraControl {
        dai_CameraControl_setAutoWhiteBalanceLock(self, lock)
    }
    #[inline]
    pub unsafe fn setManualWhiteBalance(
        &mut self,
        colorTemperatureK: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setManualWhiteBalance(self, colorTemperatureK)
    }
    #[inline]
    pub unsafe fn setBrightness(&mut self, value: ::std::os::raw::c_int) -> *mut dai_CameraControl {
        dai_CameraControl_setBrightness(self, value)
    }
    #[inline]
    pub unsafe fn setContrast(&mut self, value: ::std::os::raw::c_int) -> *mut dai_CameraControl {
        dai_CameraControl_setContrast(self, value)
    }
    #[inline]
    pub unsafe fn setSaturation(&mut self, value: ::std::os::raw::c_int) -> *mut dai_CameraControl {
        dai_CameraControl_setSaturation(self, value)
    }
    #[inline]
    pub unsafe fn setSharpness(&mut self, value: ::std::os::raw::c_int) -> *mut dai_CameraControl {
        dai_CameraControl_setSharpness(self, value)
    }
    #[inline]
    pub unsafe fn setLumaDenoise(
        &mut self,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setLumaDenoise(self, value)
    }
    #[inline]
    pub unsafe fn setChromaDenoise(
        &mut self,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setChromaDenoise(self, value)
    }
    #[inline]
    pub unsafe fn setSceneMode(
        &mut self,
        mode: dai_CameraControl_SceneMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setSceneMode(self, mode)
    }
    #[inline]
    pub unsafe fn setEffectMode(
        &mut self,
        mode: dai_CameraControl_EffectMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setEffectMode(self, mode)
    }
    #[inline]
    pub unsafe fn setMisc(
        &mut self,
        control: std_string,
        value: std_string,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setMisc(self, control, value)
    }
    #[inline]
    pub unsafe fn setMisc1(
        &mut self,
        control: std_string,
        value: ::std::os::raw::c_int,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setMisc1(self, control, value)
    }
    #[inline]
    pub unsafe fn setMisc2(&mut self, control: std_string, value: f32) -> *mut dai_CameraControl {
        dai_CameraControl_setMisc2(self, control, value)
    }
    #[inline]
    pub unsafe fn clearMiscControls(&mut self) {
        dai_CameraControl_clearMiscControls(self)
    }
    #[inline]
    pub unsafe fn getMiscControls(&mut self) -> std_vector {
        dai_CameraControl_getMiscControls(self)
    }
    #[inline]
    pub unsafe fn setControlMode(
        &mut self,
        mode: dai_CameraControl_ControlMode,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setControlMode(self, mode)
    }
    #[inline]
    pub unsafe fn setHdr(&mut self, enable: bool) -> *mut dai_CameraControl {
        dai_CameraControl_setHdr(self, enable)
    }
    #[inline]
    pub unsafe fn setCaptureIntent(
        &mut self,
        mode: dai_CameraControl_CaptureIntent,
    ) -> *mut dai_CameraControl {
        dai_CameraControl_setCaptureIntent(self, mode)
    }
    #[inline]
    pub unsafe fn getCaptureStill(&self) -> bool {
        dai_CameraControl_getCaptureStill(self)
    }
    #[inline]
    pub unsafe fn getExposureTime(&self) -> std_chrono_microseconds {
        dai_CameraControl_getExposureTime(self)
    }
    #[inline]
    pub unsafe fn getSensitivity(&self) -> ::std::os::raw::c_int {
        dai_CameraControl_getSensitivity(self)
    }
    #[inline]
    pub unsafe fn getLensPosition(&self) -> ::std::os::raw::c_int {
        dai_CameraControl_getLensPosition(self)
    }
    #[inline]
    pub unsafe fn getHdr(&self) -> bool {
        dai_CameraControl_getHdr(self)
    }
    #[inline]
    pub unsafe fn getLensPositionRaw(&self) -> f32 {
        dai_CameraControl_getLensPositionRaw(self)
    }
}
#[doc = "  Specify properties for ColorCamera such as camera ID, ..."]
#[repr(C)]
pub struct dai_CameraProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub outputRequests: std_vector,
    #[doc = " Initial controls applied to ColorCamera node"]
    pub initialControl: dai_CameraControl,
    #[doc = " Which socket will color camera use"]
    pub boardSocket: dai_CameraBoardSocket,
    #[doc = " Which camera name will color camera use"]
    pub cameraName: std_string,
    #[doc = " Camera sensor image orientation / pixel readout"]
    pub imageOrientation: dai_CameraImageOrientation,
    #[doc = " Select the camera sensor width"]
    pub resolutionWidth: i32,
    #[doc = " Select the camera sensor height"]
    pub resolutionHeight: i32,
    #[doc = " Select the mock isp width. Overrides resolutionWidth/height if mockIsp is connected."]
    pub mockIspWidth: i32,
    #[doc = " Select the mock isp height. Overrides resolutionWidth/height if mockIsp is connected."]
    pub mockIspHeight: i32,
    #[doc = " Select the mock isp fps. Overrides fps if mockIsp is connected."]
    pub mockIspFps: f32,
    #[doc = " Camera sensor FPS"]
    pub fps: f32,
    #[doc = " Isp 3A rate (auto focus, auto exposure, auto white balance, camera controls etc.).\n Default (0) matches the camera FPS, meaning that 3A is running on each frame.\n Reducing the rate of 3A reduces the CPU usage on CSS, but also increases the convergence rate of 3A.\n Note that camera controls will be processed at this rate. E.g. if camera is running at 30 fps, and camera control is sent at every frame,\n but 3A fps is set to 15, the camera control messages will be processed at 15 fps rate, which will lead to queueing.\n"]
    pub isp3aFps: ::std::os::raw::c_int,
    #[doc = " Pool sizes"]
    pub numFramesPoolRaw: ::std::os::raw::c_int,
    pub numFramesPoolIsp: ::std::os::raw::c_int,
    pub numFramesPoolVideo: ::std::os::raw::c_int,
    pub numFramesPoolPreview: ::std::os::raw::c_int,
    pub numFramesPoolStill: ::std::os::raw::c_int,
}
pub const dai_CameraProperties_AUTO: ::std::os::raw::c_int = -1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_CameraProperties"][::std::mem::size_of::<dai_CameraProperties>() - 320usize];
    ["Alignment of dai_CameraProperties"][::std::mem::align_of::<dai_CameraProperties>() - 8usize];
    ["Offset of field: dai_CameraProperties::outputRequests"]
        [::std::mem::offset_of!(dai_CameraProperties, outputRequests) - 8usize];
    ["Offset of field: dai_CameraProperties::initialControl"]
        [::std::mem::offset_of!(dai_CameraProperties, initialControl) - 32usize];
    ["Offset of field: dai_CameraProperties::boardSocket"]
        [::std::mem::offset_of!(dai_CameraProperties, boardSocket) - 224usize];
    ["Offset of field: dai_CameraProperties::cameraName"]
        [::std::mem::offset_of!(dai_CameraProperties, cameraName) - 232usize];
    ["Offset of field: dai_CameraProperties::imageOrientation"]
        [::std::mem::offset_of!(dai_CameraProperties, imageOrientation) - 264usize];
    ["Offset of field: dai_CameraProperties::resolutionWidth"]
        [::std::mem::offset_of!(dai_CameraProperties, resolutionWidth) - 268usize];
    ["Offset of field: dai_CameraProperties::resolutionHeight"]
        [::std::mem::offset_of!(dai_CameraProperties, resolutionHeight) - 272usize];
    ["Offset of field: dai_CameraProperties::mockIspWidth"]
        [::std::mem::offset_of!(dai_CameraProperties, mockIspWidth) - 276usize];
    ["Offset of field: dai_CameraProperties::mockIspHeight"]
        [::std::mem::offset_of!(dai_CameraProperties, mockIspHeight) - 280usize];
    ["Offset of field: dai_CameraProperties::mockIspFps"]
        [::std::mem::offset_of!(dai_CameraProperties, mockIspFps) - 284usize];
    ["Offset of field: dai_CameraProperties::fps"]
        [::std::mem::offset_of!(dai_CameraProperties, fps) - 288usize];
    ["Offset of field: dai_CameraProperties::isp3aFps"]
        [::std::mem::offset_of!(dai_CameraProperties, isp3aFps) - 292usize];
    ["Offset of field: dai_CameraProperties::numFramesPoolRaw"]
        [::std::mem::offset_of!(dai_CameraProperties, numFramesPoolRaw) - 296usize];
    ["Offset of field: dai_CameraProperties::numFramesPoolIsp"]
        [::std::mem::offset_of!(dai_CameraProperties, numFramesPoolIsp) - 300usize];
    ["Offset of field: dai_CameraProperties::numFramesPoolVideo"]
        [::std::mem::offset_of!(dai_CameraProperties, numFramesPoolVideo) - 304usize];
    ["Offset of field: dai_CameraProperties::numFramesPoolPreview"]
        [::std::mem::offset_of!(dai_CameraProperties, numFramesPoolPreview) - 308usize];
    ["Offset of field: dai_CameraProperties::numFramesPoolStill"]
        [::std::mem::offset_of!(dai_CameraProperties, numFramesPoolStill) - 312usize];
};
#[doc = "  Specify properties for ColorCamera such as camera ID, ..."]
#[repr(C)]
pub struct dai_ColorCameraProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub initialControl: dai_CameraControl,
    #[doc = " Which socket will color camera use"]
    pub boardSocket: dai_CameraBoardSocket,
    #[doc = " Which camera name will color camera use"]
    pub cameraName: std_string,
    #[doc = " Camera sensor image orientation / pixel readout"]
    pub imageOrientation: dai_CameraImageOrientation,
    #[doc = " Frame type"]
    pub previewType: dai_ImgFrame_Type,
    #[doc = " Preview frame output height"]
    pub previewHeight: u32,
    #[doc = " Preview frame output width"]
    pub previewWidth: u32,
    #[doc = " Preview frame output width"]
    pub videoWidth: i32,
    #[doc = " Preview frame output height"]
    pub videoHeight: i32,
    #[doc = " Preview frame output width"]
    pub stillWidth: i32,
    #[doc = " Preview frame output height"]
    pub stillHeight: i32,
    #[doc = " Select the mock isp width. Overrides resolutionWidth/height if mockIsp is connected."]
    pub mockIspWidth: i32,
    #[doc = " Select the mock isp height. Overrides resolutionWidth/height if mockIsp is connected."]
    pub mockIspHeight: i32,
    #[doc = " Select the camera sensor resolution"]
    pub resolution: dai_ColorCameraProperties_SensorResolution,
    #[doc = " Camera sensor FPS"]
    pub fps: f32,
    #[doc = " Isp 3A rate (auto focus, auto exposure, auto white balance, camera controls etc.).\n Default (0) matches the camera FPS, meaning that 3A is running on each frame.\n Reducing the rate of 3A reduces the CPU usage on CSS, but also increases the convergence rate of 3A.\n Note that camera controls will be processed at this rate. E.g. if camera is running at 30 fps, and camera control is sent at every frame,\n but 3A fps is set to 15, the camera control messages will be processed at 15 fps rate, which will lead to queueing.\n"]
    pub isp3aFps: ::std::os::raw::c_int,
    #[doc = " Initial sensor crop, -1 signifies center crop"]
    pub sensorCropX: f32,
    pub sensorCropY: f32,
    #[doc = " Whether to keep aspect ratio of input (video size) or not"]
    pub previewKeepAspectRatio: bool,
    #[doc = " Configure scaling for `isp` output."]
    pub ispScale: dai_ColorCameraProperties_IspScale,
    #[doc = " Pool sizes"]
    pub numFramesPoolRaw: ::std::os::raw::c_int,
    pub numFramesPoolIsp: ::std::os::raw::c_int,
    pub numFramesPoolVideo: ::std::os::raw::c_int,
    pub numFramesPoolPreview: ::std::os::raw::c_int,
    pub numFramesPoolStill: ::std::os::raw::c_int,
    pub warpMeshSource: dai_ColorCameraProperties_WarpMeshSource,
    pub warpMeshUri: std_string,
    pub warpMeshWidth: ::std::os::raw::c_int,
    pub warpMeshHeight: ::std::os::raw::c_int,
    pub calibAlpha: f32,
    pub warpMeshStepWidth: ::std::os::raw::c_int,
    pub warpMeshStepHeight: ::std::os::raw::c_int,
    pub eventFilter: std_vector,
    #[doc = " Configures whether the camera `raw` frames are saved as MIPI-packed to memory.\n The packed format is more efficient, consuming less memory on device, and less data\n to send to host: RAW10: 4 pixels saved on 5 bytes, RAW12: 2 pixels saved on 3 bytes.\n When packing is disabled (`false`), data is saved lsb-aligned, e.g. a RAW10 pixel\n will be stored as uint16, on bits 9..0: 0b0000'00pp'pppp'pppp.\n Default is auto: enabled for standard color/monochrome cameras where ISP can work\n with both packed/unpacked, but disabled for other cameras like ToF."]
    pub rawPacked: std_optional,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ColorCameraProperties_IspScale {
    pub horizNumerator: i32,
    pub horizDenominator: i32,
    pub vertNumerator: i32,
    pub vertDenominator: i32,
}
pub type dai_ColorCameraProperties_IspScale_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ColorCameraProperties_IspScale"]
        [::std::mem::size_of::<dai_ColorCameraProperties_IspScale>() - 16usize];
    ["Alignment of dai_ColorCameraProperties_IspScale"]
        [::std::mem::align_of::<dai_ColorCameraProperties_IspScale>() - 4usize];
    ["Offset of field: dai_ColorCameraProperties_IspScale::horizNumerator"]
        [::std::mem::offset_of!(dai_ColorCameraProperties_IspScale, horizNumerator) - 0usize];
    ["Offset of field: dai_ColorCameraProperties_IspScale::horizDenominator"]
        [::std::mem::offset_of!(dai_ColorCameraProperties_IspScale, horizDenominator) - 4usize];
    ["Offset of field: dai_ColorCameraProperties_IspScale::vertNumerator"]
        [::std::mem::offset_of!(dai_ColorCameraProperties_IspScale, vertNumerator) - 8usize];
    ["Offset of field: dai_ColorCameraProperties_IspScale::vertDenominator"]
        [::std::mem::offset_of!(dai_ColorCameraProperties_IspScale, vertDenominator) - 12usize];
};
#[doc = " 1920 × 1080"]
pub const dai_ColorCameraProperties_SensorResolution_THE_1080_P:
    dai_ColorCameraProperties_SensorResolution = 0;
#[doc = " 3840 × 2160"]
pub const dai_ColorCameraProperties_SensorResolution_THE_4_K:
    dai_ColorCameraProperties_SensorResolution = 1;
#[doc = " 4056 × 3040"]
pub const dai_ColorCameraProperties_SensorResolution_THE_12_MP:
    dai_ColorCameraProperties_SensorResolution = 2;
#[doc = " 4208 × 3120"]
pub const dai_ColorCameraProperties_SensorResolution_THE_13_MP:
    dai_ColorCameraProperties_SensorResolution = 3;
#[doc = " 1280 × 720"]
pub const dai_ColorCameraProperties_SensorResolution_THE_720_P:
    dai_ColorCameraProperties_SensorResolution = 4;
#[doc = " 1280 × 800"]
pub const dai_ColorCameraProperties_SensorResolution_THE_800_P:
    dai_ColorCameraProperties_SensorResolution = 5;
#[doc = " 1920 × 1200"]
pub const dai_ColorCameraProperties_SensorResolution_THE_1200_P:
    dai_ColorCameraProperties_SensorResolution = 6;
#[doc = " 2592 × 1944"]
pub const dai_ColorCameraProperties_SensorResolution_THE_5_MP:
    dai_ColorCameraProperties_SensorResolution = 7;
#[doc = " 4000 × 3000"]
pub const dai_ColorCameraProperties_SensorResolution_THE_4000X3000:
    dai_ColorCameraProperties_SensorResolution = 8;
#[doc = " 5312 × 6000"]
pub const dai_ColorCameraProperties_SensorResolution_THE_5312X6000:
    dai_ColorCameraProperties_SensorResolution = 9;
#[doc = " 8000 × 6000"]
pub const dai_ColorCameraProperties_SensorResolution_THE_48_MP:
    dai_ColorCameraProperties_SensorResolution = 10;
#[doc = " 240 x 180"]
pub const dai_ColorCameraProperties_SensorResolution_THE_240X180:
    dai_ColorCameraProperties_SensorResolution = 11;
#[doc = " 1280 x 962"]
pub const dai_ColorCameraProperties_SensorResolution_THE_1280X962:
    dai_ColorCameraProperties_SensorResolution = 12;
#[doc = " 2000 × 1500"]
pub const dai_ColorCameraProperties_SensorResolution_THE_2000X1500:
    dai_ColorCameraProperties_SensorResolution = 13;
#[doc = " 2028 × 1520"]
pub const dai_ColorCameraProperties_SensorResolution_THE_2028X1520:
    dai_ColorCameraProperties_SensorResolution = 14;
#[doc = " 2104 × 1560"]
pub const dai_ColorCameraProperties_SensorResolution_THE_2104X1560:
    dai_ColorCameraProperties_SensorResolution = 15;
#[doc = " 1440 × 1080"]
pub const dai_ColorCameraProperties_SensorResolution_THE_1440X1080:
    dai_ColorCameraProperties_SensorResolution = 16;
#[doc = " 1352 × 1012"]
pub const dai_ColorCameraProperties_SensorResolution_THE_1352X1012:
    dai_ColorCameraProperties_SensorResolution = 17;
#[doc = " 2024 × 1520"]
pub const dai_ColorCameraProperties_SensorResolution_THE_2024X1520:
    dai_ColorCameraProperties_SensorResolution = 18;
#[doc = " Select the camera sensor resolution"]
pub type dai_ColorCameraProperties_SensorResolution = i32;
pub const dai_ColorCameraProperties_ColorOrder_BGR: dai_ColorCameraProperties_ColorOrder = 0;
pub const dai_ColorCameraProperties_ColorOrder_RGB: dai_ColorCameraProperties_ColorOrder = 1;
#[doc = " For 24 bit color these can be either RGB or BGR"]
pub type dai_ColorCameraProperties_ColorOrder = i32;
pub const dai_ColorCameraProperties_WarpMeshSource_AUTO: dai_ColorCameraProperties_WarpMeshSource =
    -1;
pub const dai_ColorCameraProperties_WarpMeshSource_NONE: dai_ColorCameraProperties_WarpMeshSource =
    0;
pub const dai_ColorCameraProperties_WarpMeshSource_CALIBRATION:
    dai_ColorCameraProperties_WarpMeshSource = 1;
pub const dai_ColorCameraProperties_WarpMeshSource_URI: dai_ColorCameraProperties_WarpMeshSource =
    2;
#[doc = " Warp mesh source"]
pub type dai_ColorCameraProperties_WarpMeshSource = ::std::os::raw::c_int;
pub const dai_ColorCameraProperties_AUTO: ::std::os::raw::c_int = -1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ColorCameraProperties"]
        [::std::mem::size_of::<dai_ColorCameraProperties>() - 432usize];
    ["Alignment of dai_ColorCameraProperties"]
        [::std::mem::align_of::<dai_ColorCameraProperties>() - 8usize];
    ["Offset of field: dai_ColorCameraProperties::initialControl"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, initialControl) - 8usize];
    ["Offset of field: dai_ColorCameraProperties::boardSocket"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, boardSocket) - 200usize];
    ["Offset of field: dai_ColorCameraProperties::cameraName"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, cameraName) - 208usize];
    ["Offset of field: dai_ColorCameraProperties::imageOrientation"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, imageOrientation) - 240usize];
    ["Offset of field: dai_ColorCameraProperties::previewType"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, previewType) - 244usize];
    ["Offset of field: dai_ColorCameraProperties::previewHeight"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, previewHeight) - 248usize];
    ["Offset of field: dai_ColorCameraProperties::previewWidth"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, previewWidth) - 252usize];
    ["Offset of field: dai_ColorCameraProperties::videoWidth"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, videoWidth) - 256usize];
    ["Offset of field: dai_ColorCameraProperties::videoHeight"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, videoHeight) - 260usize];
    ["Offset of field: dai_ColorCameraProperties::stillWidth"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, stillWidth) - 264usize];
    ["Offset of field: dai_ColorCameraProperties::stillHeight"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, stillHeight) - 268usize];
    ["Offset of field: dai_ColorCameraProperties::mockIspWidth"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, mockIspWidth) - 272usize];
    ["Offset of field: dai_ColorCameraProperties::mockIspHeight"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, mockIspHeight) - 276usize];
    ["Offset of field: dai_ColorCameraProperties::resolution"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, resolution) - 280usize];
    ["Offset of field: dai_ColorCameraProperties::fps"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, fps) - 284usize];
    ["Offset of field: dai_ColorCameraProperties::isp3aFps"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, isp3aFps) - 288usize];
    ["Offset of field: dai_ColorCameraProperties::sensorCropX"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, sensorCropX) - 292usize];
    ["Offset of field: dai_ColorCameraProperties::sensorCropY"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, sensorCropY) - 296usize];
    ["Offset of field: dai_ColorCameraProperties::previewKeepAspectRatio"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, previewKeepAspectRatio) - 300usize];
    ["Offset of field: dai_ColorCameraProperties::ispScale"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, ispScale) - 304usize];
    ["Offset of field: dai_ColorCameraProperties::numFramesPoolRaw"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, numFramesPoolRaw) - 320usize];
    ["Offset of field: dai_ColorCameraProperties::numFramesPoolIsp"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, numFramesPoolIsp) - 324usize];
    ["Offset of field: dai_ColorCameraProperties::numFramesPoolVideo"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, numFramesPoolVideo) - 328usize];
    ["Offset of field: dai_ColorCameraProperties::numFramesPoolPreview"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, numFramesPoolPreview) - 332usize];
    ["Offset of field: dai_ColorCameraProperties::numFramesPoolStill"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, numFramesPoolStill) - 336usize];
    ["Offset of field: dai_ColorCameraProperties::warpMeshSource"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, warpMeshSource) - 340usize];
    ["Offset of field: dai_ColorCameraProperties::warpMeshUri"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, warpMeshUri) - 344usize];
    ["Offset of field: dai_ColorCameraProperties::warpMeshWidth"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, warpMeshWidth) - 376usize];
    ["Offset of field: dai_ColorCameraProperties::warpMeshHeight"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, warpMeshHeight) - 380usize];
    ["Offset of field: dai_ColorCameraProperties::calibAlpha"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, calibAlpha) - 384usize];
    ["Offset of field: dai_ColorCameraProperties::warpMeshStepWidth"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, warpMeshStepWidth) - 388usize];
    ["Offset of field: dai_ColorCameraProperties::warpMeshStepHeight"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, warpMeshStepHeight) - 392usize];
    ["Offset of field: dai_ColorCameraProperties::eventFilter"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, eventFilter) - 400usize];
    ["Offset of field: dai_ColorCameraProperties::rawPacked"]
        [::std::mem::offset_of!(dai_ColorCameraProperties, rawPacked) - 424usize];
};
#[repr(C)]
pub struct dai_SlugComponents {
    pub teamName: std_string,
    pub modelSlug: std_string,
    pub modelVariantSlug: std_string,
    pub modelRef: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SlugComponents"][::std::mem::size_of::<dai_SlugComponents>() - 128usize];
    ["Alignment of dai_SlugComponents"][::std::mem::align_of::<dai_SlugComponents>() - 8usize];
    ["Offset of field: dai_SlugComponents::teamName"]
        [::std::mem::offset_of!(dai_SlugComponents, teamName) - 0usize];
    ["Offset of field: dai_SlugComponents::modelSlug"]
        [::std::mem::offset_of!(dai_SlugComponents, modelSlug) - 32usize];
    ["Offset of field: dai_SlugComponents::modelVariantSlug"]
        [::std::mem::offset_of!(dai_SlugComponents, modelVariantSlug) - 64usize];
    ["Offset of field: dai_SlugComponents::modelRef"]
        [::std::mem::offset_of!(dai_SlugComponents, modelRef) - 96usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai14SlugComponents5mergeB5cxx11Ev"]
    pub fn dai_SlugComponents_merge(this: *const dai_SlugComponents) -> std_string;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14SlugComponents5splitERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_SlugComponents_split(slug: *const std_string) -> dai_SlugComponents;
}
impl dai_SlugComponents {
    #[inline]
    pub unsafe fn merge(&self) -> std_string {
        dai_SlugComponents_merge(self)
    }
    #[inline]
    pub unsafe fn split(slug: *const std_string) -> dai_SlugComponents {
        dai_SlugComponents_split(slug)
    }
}
#[repr(C)]
pub struct dai_NNModelDescription {
    #[doc = " Model slug = REQUIRED parameter"]
    pub model: std_string,
    #[doc = " Hardware platform - RVC2, RVC3, RVC4, ... = REQUIRED parameter"]
    pub platform: std_string,
    #[doc = " Optimization level = OPTIONAL parameter"]
    pub optimizationLevel: std_string,
    #[doc = " Compression level = OPTIONAL parameter"]
    pub compressionLevel: std_string,
    #[doc = " SNPE version = OPTIONAL parameter"]
    pub snpeVersion: std_string,
    #[doc = " modelPrecisionType = OPTIONAL parameter"]
    pub modelPrecisionType: std_string,
    #[doc = " Name of the entry in the global metadata file"]
    pub globalMetadataEntryName: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NNModelDescription"][::std::mem::size_of::<dai_NNModelDescription>() - 224usize];
    ["Alignment of dai_NNModelDescription"]
        [::std::mem::align_of::<dai_NNModelDescription>() - 8usize];
    ["Offset of field: dai_NNModelDescription::model"]
        [::std::mem::offset_of!(dai_NNModelDescription, model) - 0usize];
    ["Offset of field: dai_NNModelDescription::platform"]
        [::std::mem::offset_of!(dai_NNModelDescription, platform) - 32usize];
    ["Offset of field: dai_NNModelDescription::optimizationLevel"]
        [::std::mem::offset_of!(dai_NNModelDescription, optimizationLevel) - 64usize];
    ["Offset of field: dai_NNModelDescription::compressionLevel"]
        [::std::mem::offset_of!(dai_NNModelDescription, compressionLevel) - 96usize];
    ["Offset of field: dai_NNModelDescription::snpeVersion"]
        [::std::mem::offset_of!(dai_NNModelDescription, snpeVersion) - 128usize];
    ["Offset of field: dai_NNModelDescription::modelPrecisionType"]
        [::std::mem::offset_of!(dai_NNModelDescription, modelPrecisionType) - 160usize];
    ["Offset of field: dai_NNModelDescription::globalMetadataEntryName"]
        [::std::mem::offset_of!(dai_NNModelDescription, globalMetadataEntryName) - 192usize];
};
unsafe extern "C" {
    #[doc = " @brief Initialize NNModelDescription from yaml file\n        If modelName is a relative path (e.g. ./yolo.yaml), it is used as is.\n        If modelName is a full path (e.g. /home/user/models/yolo.yaml), it is used as is.\n        If modelName is a model name (e.g. yolo) or a model yaml file (e.g. yolo.yaml),\n        the function will use modelsPath if provided or the DEPTHAI_ZOO_MODELS_PATH environment variable and use a path made by combining the modelsPath\n        and the model name to the yaml file. For instance, yolo -> ./depthai_models/yolo.yaml (if modelsPath or DEPTHAI_ZOO_MODELS_PATH are\n ./depthai_models)\n\n @param modelName: model name or yaml file path\n @param modelsPath: Path to the models folder, use environment variable DEPTHAI_ZOO_MODELS_PATH if not provided\n @return NNModelDescription"]
    #[link_name = "\u{1}_ZN3dai18NNModelDescription12fromYamlFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_"]
    pub fn dai_NNModelDescription_fromYamlFile(
        modelName: *const std_string,
        modelsPath: *const std_string,
    ) -> dai_NNModelDescription;
}
unsafe extern "C" {
    #[doc = " @brief Save NNModelDescription to yaml file\n\n @param yamlPath: Path to yaml file"]
    #[link_name = "\u{1}_ZNK3dai18NNModelDescription14saveToYamlFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_NNModelDescription_saveToYamlFile(
        this: *const dai_NNModelDescription,
        yamlPath: *const std_string,
    );
}
unsafe extern "C" {
    #[doc = " @brief Check if the model description is valid (contains all required fields)\n\n @return bool: True if the model description is valid, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai18NNModelDescription5checkEv"]
    pub fn dai_NNModelDescription_check(this: *const dai_NNModelDescription) -> bool;
}
unsafe extern "C" {
    #[doc = " @brief Convert NNModelDescription to string for printing purposes. This can be used for debugging.\n\n @return std::string: String representation"]
    #[link_name = "\u{1}_ZNK3dai18NNModelDescription8toStringB5cxx11Ev"]
    pub fn dai_NNModelDescription_toString(this: *const dai_NNModelDescription) -> std_string;
}
impl dai_NNModelDescription {
    #[inline]
    pub unsafe fn fromYamlFile(
        modelName: *const std_string,
        modelsPath: *const std_string,
    ) -> dai_NNModelDescription {
        dai_NNModelDescription_fromYamlFile(modelName, modelsPath)
    }
    #[inline]
    pub unsafe fn saveToYamlFile(&self, yamlPath: *const std_string) {
        dai_NNModelDescription_saveToYamlFile(self, yamlPath)
    }
    #[inline]
    pub unsafe fn check(&self) -> bool {
        dai_NNModelDescription_check(self)
    }
    #[inline]
    pub unsafe fn toString(&self) -> std_string {
        dai_NNModelDescription_toString(self)
    }
}
unsafe extern "C" {
    #[doc = " @brief Get model from model zoo\n\n @param modelDescription: Model description\n @param useCached: Use cached model if present, default is true\n @param cacheDirectory: Cache directory where the cached models are stored, default is \"\". If cacheDirectory is set to \"\", this function checks the\n DEPTHAI_ZOO_CACHE_PATH environment variable and uses that if set, otherwise the default value is used (see getDefaultCachePath).\n @param apiKey: API key for the model zoo, default is \"\". If apiKey is set to \"\", this function checks the DEPTHAI_ZOO_API_KEY environment variable and uses\n that if set. Otherwise, no API key is used.\n @param progressFormat: Format to use for progress output (possible values: pretty, json, none), default is \"pretty\"\n @return std::string: Path to the model in cache"]
    #[link_name = "\u{1}_ZN3dai15getModelFromZooERKNS_18NNModelDescriptionEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_"]
    pub fn dai_getModelFromZoo(
        modelDescription: *const dai_NNModelDescription,
        useCached: bool,
        cacheDirectory: *const std_string,
        apiKey: *const std_string,
        progressFormat: *const std_string,
    ) -> std_string;
}
unsafe extern "C" {
    #[doc = " @brief Helper function allowing one to download all models specified in yaml files in the given path and store them in the cache directory\n\n @param path: Path to the directory containing yaml files\n @param cacheDirectory: Cache directory where the cached models are stored, default is \"\". If cacheDirectory is set to \"\", this function checks the\n DEPTHAI_ZOO_CACHE_PATH environment variable and uses that if set, otherwise the default is used (see getDefaultCachePath).\n @param apiKey: API key for the model zoo, default is \"\". If apiKey is set to \"\", this function checks the DEPTHAI_ZOO_API_KEY environment variable and uses\n that if set. Otherwise, no API key is used.\n @param progressFormat: Format to use for progress output (possible values: pretty, json, none), default is \"pretty\"\n @return bool: True if all models were downloaded successfully, false otherwise"]
    #[link_name = "\u{1}_ZN3dai21downloadModelsFromZooERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_"]
    pub fn dai_downloadModelsFromZoo(
        path: *const std_string,
        cacheDirectory: *const std_string,
        apiKey: *const std_string,
        progressFormat: *const std_string,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " @brief Set the health endpoint (for internet check)\n\n @param endpoint"]
    #[link_name = "\u{1}_ZN3dai8modelzoo17setHealthEndpointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_modelzoo_setHealthEndpoint(endpoint: *const std_string);
}
unsafe extern "C" {
    #[doc = " @brief Set the download endpoint (for model querying)\n\n @param endpoint"]
    #[link_name = "\u{1}_ZN3dai8modelzoo19setDownloadEndpointERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_modelzoo_setDownloadEndpoint(endpoint: *const std_string);
}
unsafe extern "C" {
    #[doc = " @brief Set the default cache path (where models are cached)\n\n @param path"]
    #[link_name = "\u{1}_ZN3dai8modelzoo19setDefaultCachePathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_modelzoo_setDefaultCachePath(path: *const std_string);
}
unsafe extern "C" {
    #[doc = " @brief Set the default models path (where yaml files are stored)\n\n @param path"]
    #[link_name = "\u{1}_ZN3dai8modelzoo20setDefaultModelsPathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_modelzoo_setDefaultModelsPath(path: *const std_string);
}
unsafe extern "C" {
    #[doc = " @brief Get the health endpoint (for internet check)"]
    #[link_name = "\u{1}_ZN3dai8modelzoo17getHealthEndpointB5cxx11Ev"]
    pub fn dai_modelzoo_getHealthEndpoint() -> std_string;
}
unsafe extern "C" {
    #[doc = " @brief Get the download endpoint (for model querying)"]
    #[link_name = "\u{1}_ZN3dai8modelzoo19getDownloadEndpointB5cxx11Ev"]
    pub fn dai_modelzoo_getDownloadEndpoint() -> std_string;
}
unsafe extern "C" {
    #[doc = " @brief Get the default cache path (where models are cached)"]
    #[link_name = "\u{1}_ZN3dai8modelzoo19getDefaultCachePathB5cxx11Ev"]
    pub fn dai_modelzoo_getDefaultCachePath() -> std_string;
}
unsafe extern "C" {
    #[doc = " @brief Get the default models path (where yaml files are stored)"]
    #[link_name = "\u{1}_ZN3dai8modelzoo20getDefaultModelsPathB5cxx11Ev"]
    pub fn dai_modelzoo_getDefaultModelsPath() -> std_string;
}
#[doc = " @brief A dummy property struct for the DeviceNodeGroup node to comply with the DeviceNode API\n"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_DeviceNodeGroupProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub dummy: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceNodeGroupProperties"]
        [::std::mem::size_of::<dai_DeviceNodeGroupProperties>() - 16usize];
    ["Alignment of dai_DeviceNodeGroupProperties"]
        [::std::mem::align_of::<dai_DeviceNodeGroupProperties>() - 8usize];
    ["Offset of field: dai_DeviceNodeGroupProperties::dummy"]
        [::std::mem::offset_of!(dai_DeviceNodeGroupProperties, dummy) - 8usize];
};
#[repr(C)]
pub struct dai_DeviceNodeGroup {
    pub _base: dai_DeviceNode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DeviceNodeGroup"][::std::mem::size_of::<dai_DeviceNodeGroup>() - 440usize];
    ["Alignment of dai_DeviceNodeGroup"][::std::mem::align_of::<dai_DeviceNodeGroup>() - 8usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai15DeviceNodeGroup11setLogLevelENS_8LogLevelE"]
    pub fn dai_DeviceNodeGroup_setLogLevel(this: *mut ::std::os::raw::c_void, level: dai_LogLevel);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai15DeviceNodeGroup11getLogLevelEv"]
    pub fn dai_DeviceNodeGroup_getLogLevel(this: *mut ::std::os::raw::c_void) -> dai_LogLevel;
}
#[repr(C)]
pub struct dai_Subnode {
    pub node: std_shared_ptr,
}
pub const dai_model_ModelType_BLOB: dai_model_ModelType = 0;
pub const dai_model_ModelType_SUPERBLOB: dai_model_ModelType = 1;
pub const dai_model_ModelType_DLC: dai_model_ModelType = 2;
pub const dai_model_ModelType_NNARCHIVE: dai_model_ModelType = 3;
pub const dai_model_ModelType_OTHER: dai_model_ModelType = 4;
#[doc = " @brief Neural network model type"]
pub type dai_model_ModelType = ::std::os::raw::c_int;
unsafe extern "C" {
    #[doc = " @brief Read model type from model path\n\n @param modelPath Path to model\n @return ModelType"]
    #[link_name = "\u{1}_ZN3dai5model13readModelTypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_model_readModelType(modelPath: *const std_string) -> dai_model_ModelType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_NNArchiveEntry {
    pub _address: u8,
}
#[doc = " Try to guess the file format from the file extension.\n .json -> RAW_FS\n everything else use libarchive to guess the format\n supported formats are: https://github.com/libarchive/libarchive?tab=readme-ov-file#supported-formats"]
pub const dai_NNArchiveEntry_Compression_AUTO: dai_NNArchiveEntry_Compression = 0;
#[doc = " The entry isn't compressed. Access it directly on the filesystem."]
pub const dai_NNArchiveEntry_Compression_RAW_FS: dai_NNArchiveEntry_Compression = 1;
#[doc = " Force libarchive to treat the file as .tar"]
pub const dai_NNArchiveEntry_Compression_TAR: dai_NNArchiveEntry_Compression = 2;
#[doc = " Force libarchive to treat the file as .tar.gz"]
pub const dai_NNArchiveEntry_Compression_TAR_GZ: dai_NNArchiveEntry_Compression = 3;
#[doc = " Force libarchive to treat the file as .tar.xz"]
pub const dai_NNArchiveEntry_Compression_TAR_XZ: dai_NNArchiveEntry_Compression = 4;
pub type dai_NNArchiveEntry_Compression = u8;
pub const dai_NNArchiveEntry_Seek_SET: dai_NNArchiveEntry_Seek = 0;
pub const dai_NNArchiveEntry_Seek_CUR: dai_NNArchiveEntry_Seek = 1;
pub const dai_NNArchiveEntry_Seek_END: dai_NNArchiveEntry_Seek = 2;
#[doc = " Check stdio.h SEEK_SET, SEEK_CUR, SEEK_END for meaning."]
pub type dai_NNArchiveEntry_Seek = u8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NNArchiveEntry"][::std::mem::size_of::<dai_NNArchiveEntry>() - 1usize];
    ["Alignment of dai_NNArchiveEntry"][::std::mem::align_of::<dai_NNArchiveEntry>() - 1usize];
};
#[doc = " Metadata of the parser.\n\n Metadata for the object detection head.\n\n @type classes: list\n @ivar classes: Names of object classes detected by the model.\n @type n_classes: int\n @ivar n_classes: Number of object classes detected by the model.\n @type iou_threshold: float\n @ivar iou_threshold: Non-max supression threshold limiting boxes\n intersection.\n @type conf_threshold: float\n @ivar conf_threshold: Confidence score threshold above which a\n detected object is considered valid.\n @type max_det: int\n @ivar max_det: Maximum detections per image.\n @type anchors: list\n @ivar anchors: Predefined bounding boxes of different sizes and\n aspect ratios. The innermost lists are length 2 tuples of box\n sizes. The middle lists are anchors for each output. The outmost\n lists go from smallest to largest output.\n\n Metadata for the classification head.\n\n @type classes: list\n @ivar classes: Names of object classes classified by the model.\n @type n_classes: int\n @ivar n_classes: Number of object classes classified by the model.\n @type is_softmax: bool\n @ivar is_softmax: True, if output is already softmaxed\n\n Metadata for the SSD object detection head.\n\n @type boxes_outputs: str\n @ivar boxes_outputs: Output name corresponding to predicted bounding\n box coordinates.\n @type scores_outputs: str\n @ivar scores_outputs: Output name corresponding to predicted\n bounding box confidence scores.\n\n Metadata for the segmentation head.\n\n @type classes: list\n @ivar classes: Names of object classes segmented by the model.\n @type n_classes: int\n @ivar n_classes: Number of object classes segmented by the model.\n @type is_softmax: bool\n @ivar is_softmax: True, if output is already softmaxed\n\n Metadata for the YOLO head.\n\n @type yolo_outputs: list\n @ivar yolo_outputs: A list of output names for each of the different\n YOLO grid sizes.\n @type mask_outputs: list | None\n @ivar mask_outputs: A list of output names for each mask output.\n @type protos_outputs: str | None\n @ivar protos_outputs: Output name for the protos.\n @type keypoints_outputs: list | None\n @ivar keypoints_outputs: A list of output names for the keypoints.\n @type angles_outputs: list | None\n @ivar angles_outputs: A list of output names for the angles.\n @type subtype: str\n @ivar subtype: YOLO family decoding subtype (e.g. yolov5, yolov6,\n yolov7 etc.)\n @type n_prototypes: int | None\n @ivar n_prototypes: Number of prototypes per bbox in YOLO instance\n segmnetation.\n @type n_keypoints: int | None\n @ivar n_keypoints: Number of keypoints per bbox in YOLO keypoint\n detection.\n @type is_softmax: bool | None\n @ivar is_softmax: True, if output is already softmaxed in YOLO\n instance segmentation\n\n Metadata for the basic head. It allows you to specify additional\n fields.\n\n @type postprocessor_path: str | None\n @ivar postprocessor_path: Path to the postprocessor."]
#[repr(C)]
pub struct dai_nn_archive_v1_Metadata {
    #[doc = " Predefined bounding boxes of different sizes and aspect ratios. The innermost lists are\n length 2 tuples of box sizes. The middle lists are anchors for each output. The outmost\n lists go from smallest to largest output."]
    pub anchors: std_optional,
    #[doc = " Names of object classes recognized by the model."]
    pub classes: std_optional,
    #[doc = " Confidence score threshold above which a detected object is considered valid."]
    pub confThreshold: std_optional,
    #[doc = " Non-max supression threshold limiting boxes intersection."]
    pub iouThreshold: std_optional,
    #[doc = " Maximum detections per image."]
    pub maxDet: std_optional,
    #[doc = " Number of object classes recognized by the model."]
    pub nClasses: std_optional,
    #[doc = " Path to the postprocessor."]
    pub postprocessorPath: std_optional,
    #[doc = " True, if output is already softmaxed.\n\n True, if output is already softmaxed in YOLO instance segmentation."]
    pub isSoftmax: std_optional,
    #[doc = " Output name corresponding to predicted bounding box coordinates."]
    pub boxesOutputs: std_optional,
    #[doc = " Output name corresponding to predicted bounding box confidence scores."]
    pub scoresOutputs: std_optional,
    #[doc = " A list of output names for the angles."]
    pub anglesOutputs: std_optional,
    #[doc = " A list of output names for the keypoints."]
    pub keypointsOutputs: std_optional,
    #[doc = " A list of output names for each mask output."]
    pub maskOutputs: std_optional,
    #[doc = " Number of keypoints per bbox in YOLO keypoint detection."]
    pub nKeypoints: std_optional,
    #[doc = " Number of prototypes per bbox in YOLO instance segmnetation."]
    pub nPrototypes: std_optional,
    #[doc = " Output name for the protos."]
    pub protosOutputs: std_optional,
    #[doc = " YOLO family decoding subtype (e.g. yolov5, yolov6, yolov7 etc.)."]
    pub subtype: std_optional,
    #[doc = " A list of output names for each of the different YOLO grid sizes."]
    pub yoloOutputs: std_optional,
    #[doc = " Additional parameters"]
    pub extraParams: nlohmann_json,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_Metadata"]
        [::std::mem::size_of::<dai_nn_archive_v1_Metadata>() - 512usize];
    ["Alignment of dai_nn_archive_v1_Metadata"]
        [::std::mem::align_of::<dai_nn_archive_v1_Metadata>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::anchors"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, anchors) - 0usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::classes"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, classes) - 32usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::confThreshold"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, confThreshold) - 64usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::iouThreshold"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, iouThreshold) - 80usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::maxDet"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, maxDet) - 96usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::nClasses"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, nClasses) - 112usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::postprocessorPath"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, postprocessorPath) - 128usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::isSoftmax"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, isSoftmax) - 168usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::boxesOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, boxesOutputs) - 176usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::scoresOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, scoresOutputs) - 216usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::anglesOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, anglesOutputs) - 256usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::keypointsOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, keypointsOutputs) - 288usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::maskOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, maskOutputs) - 320usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::nKeypoints"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, nKeypoints) - 352usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::nPrototypes"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, nPrototypes) - 368usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::protosOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, protosOutputs) - 384usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::subtype"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, subtype) - 424usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::yoloOutputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, yoloOutputs) - 464usize];
    ["Offset of field: dai_nn_archive_v1_Metadata::extraParams"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Metadata, extraParams) - 496usize];
};
#[doc = " Represents head of a model.\n\n @type name: str | None\n @ivar name: Optional name of the head.\n @type parser: str\n @ivar parser: Name of the parser responsible for processing the\n models output.\n @type outputs: List[str] | None\n @ivar outputs: Specify which outputs are fed into the parser. If\n None, all outputs are fed.\n @type metadata: C{HeadMetadata} | C{HeadObjectDetectionMetadata} |\n C{HeadClassificationMetadata} |\n C{HeadObjectDetectionSSDMetadata} | C{HeadSegmentationMetadata}\n | C{HeadYOLOMetadata}\n @ivar metadata: Metadata of the parser."]
#[repr(C)]
pub struct dai_nn_archive_v1_Head {
    #[doc = " Metadata of the parser."]
    pub metadata: dai_nn_archive_v1_Metadata,
    #[doc = " Optional name of the head."]
    pub name: std_optional,
    #[doc = " Specify which outputs are fed into the parser. If None, all outputs are fed."]
    pub outputs: std_optional,
    #[doc = " Name of the parser responsible for processing the models output."]
    pub parser: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_Head"][::std::mem::size_of::<dai_nn_archive_v1_Head>() - 616usize];
    ["Alignment of dai_nn_archive_v1_Head"]
        [::std::mem::align_of::<dai_nn_archive_v1_Head>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_Head::metadata"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Head, metadata) - 0usize];
    ["Offset of field: dai_nn_archive_v1_Head::name"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Head, name) - 512usize];
    ["Offset of field: dai_nn_archive_v1_Head::outputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Head, outputs) - 552usize];
    ["Offset of field: dai_nn_archive_v1_Head::parser"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Head, parser) - 584usize];
};
#[doc = " Preprocessing steps applied to the input data.\n\n Represents preprocessing operations applied to the input data.\n\n @type mean: list | None\n @ivar mean: Mean values in channel order. Order depends on the order\n in which the model was trained on.\n @type scale: list | None\n @ivar scale: Standardization values in channel order. Order depends\n on the order in which the model was trained on.\n @type reverse_channels: bool | None\n @ivar reverse_channels: If True input to the model is RGB else BGR.\n @type interleaved_to_planar: bool | None\n @ivar interleaved_to_planar: If True input to the model is\n interleaved (NHWC) else planar (NCHW).\n @type dai_type: str | None\n @ivar dai_type: DepthAI input type which is read by DepthAI to\n automatically setup the pipeline."]
#[repr(C)]
pub struct dai_nn_archive_v1_PreprocessingBlock {
    #[doc = " DepthAI input type which is read by DepthAI to automatically setup the pipeline."]
    pub daiType: std_optional,
    #[doc = " If True input to the model is interleaved (NHWC) else planar (NCHW)."]
    pub interleavedToPlanar: std_optional,
    #[doc = " Mean values in channel order. Order depends on the order in which the model was trained\n on."]
    pub mean: std_optional,
    #[doc = " If True input to the model is RGB else BGR."]
    pub reverseChannels: std_optional,
    #[doc = " Standardization values in channel order. Order depends on the order in which the model\n was trained on."]
    pub scale: std_optional,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_PreprocessingBlock"]
        [::std::mem::size_of::<dai_nn_archive_v1_PreprocessingBlock>() - 120usize];
    ["Alignment of dai_nn_archive_v1_PreprocessingBlock"]
        [::std::mem::align_of::<dai_nn_archive_v1_PreprocessingBlock>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_PreprocessingBlock::daiType"]
        [::std::mem::offset_of!(dai_nn_archive_v1_PreprocessingBlock, daiType) - 0usize];
    ["Offset of field: dai_nn_archive_v1_PreprocessingBlock::interleavedToPlanar"][::std::mem::offset_of!(
        dai_nn_archive_v1_PreprocessingBlock,
        interleavedToPlanar
    ) - 40usize];
    ["Offset of field: dai_nn_archive_v1_PreprocessingBlock::mean"]
        [::std::mem::offset_of!(dai_nn_archive_v1_PreprocessingBlock, mean) - 48usize];
    ["Offset of field: dai_nn_archive_v1_PreprocessingBlock::reverseChannels"]
        [::std::mem::offset_of!(dai_nn_archive_v1_PreprocessingBlock, reverseChannels) - 80usize];
    ["Offset of field: dai_nn_archive_v1_PreprocessingBlock::scale"]
        [::std::mem::offset_of!(dai_nn_archive_v1_PreprocessingBlock, scale) - 88usize];
};
pub type dai_nn_archive_v1_DataType = ::std::os::raw::c_int;
pub type dai_nn_archive_v1_InputType = ::std::os::raw::c_int;
#[doc = " Represents input stream of a model.\n\n @type name: str\n @ivar name: Name of the input layer.\n\n @type dtype: DataType\n @ivar dtype: Data type of the input data (e.g., 'float32').\n\n @type input_type: InputType\n @ivar input_type: Type of input data (e.g., 'image').\n\n @type shape: list\n @ivar shape: Shape of the input data as a list of integers (e.g. [H,W], [H,W,C],\n [N,H,W,C], ...).\n\n @type layout: str\n @ivar layout: Lettercode interpretation of the input data dimensions (e.g., 'NCHW').\n\n @type preprocessing: PreprocessingBlock\n @ivar preprocessing: Preprocessing steps applied to the input data."]
#[repr(C)]
pub struct dai_nn_archive_v1_Input {
    #[doc = " Data type of the input data (e.g., 'float32')."]
    pub dtype: dai_nn_archive_v1_DataType,
    #[doc = " Type of input data (e.g., 'image')."]
    pub inputType: dai_nn_archive_v1_InputType,
    #[doc = " Lettercode interpretation of the input data dimensions (e.g., 'NCHW')"]
    pub layout: std_optional,
    #[doc = " Name of the input layer."]
    pub name: std_string,
    #[doc = " Preprocessing steps applied to the input data."]
    pub preprocessing: dai_nn_archive_v1_PreprocessingBlock,
    #[doc = " Shape of the input data as a list of integers (e.g. [H,W], [H,W,C], [N,H,W,C], ...)."]
    pub shape: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_Input"]
        [::std::mem::size_of::<dai_nn_archive_v1_Input>() - 224usize];
    ["Alignment of dai_nn_archive_v1_Input"]
        [::std::mem::align_of::<dai_nn_archive_v1_Input>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_Input::dtype"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Input, dtype) - 0usize];
    ["Offset of field: dai_nn_archive_v1_Input::inputType"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Input, inputType) - 4usize];
    ["Offset of field: dai_nn_archive_v1_Input::layout"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Input, layout) - 8usize];
    ["Offset of field: dai_nn_archive_v1_Input::name"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Input, name) - 48usize];
    ["Offset of field: dai_nn_archive_v1_Input::preprocessing"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Input, preprocessing) - 80usize];
    ["Offset of field: dai_nn_archive_v1_Input::shape"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Input, shape) - 200usize];
};
#[doc = " Metadata object defining the model metadata.\n\n Represents metadata of a model.\n\n @type name: str\n @ivar name: Name of the model.\n @type path: str\n @ivar path: Relative path to the model executable."]
#[repr(C)]
pub struct dai_nn_archive_v1_MetadataClass {
    #[doc = " Name of the model."]
    pub name: std_string,
    #[doc = " Relative path to the model executable."]
    pub path: std_string,
    #[doc = " Precision of the model weights."]
    pub precision: std_optional,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_MetadataClass"]
        [::std::mem::size_of::<dai_nn_archive_v1_MetadataClass>() - 72usize];
    ["Alignment of dai_nn_archive_v1_MetadataClass"]
        [::std::mem::align_of::<dai_nn_archive_v1_MetadataClass>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_MetadataClass::name"]
        [::std::mem::offset_of!(dai_nn_archive_v1_MetadataClass, name) - 0usize];
    ["Offset of field: dai_nn_archive_v1_MetadataClass::path"]
        [::std::mem::offset_of!(dai_nn_archive_v1_MetadataClass, path) - 32usize];
    ["Offset of field: dai_nn_archive_v1_MetadataClass::precision"]
        [::std::mem::offset_of!(dai_nn_archive_v1_MetadataClass, precision) - 64usize];
};
#[doc = " Represents output stream of a model.\n\n @type name: str\n @ivar name: Name of the output layer.\n @type dtype: DataType\n @ivar dtype: Data type of the output data (e.g., 'float32')."]
#[repr(C)]
pub struct dai_nn_archive_v1_Output {
    #[doc = " Data type of the output data (e.g., 'float32')."]
    pub dtype: dai_nn_archive_v1_DataType,
    #[doc = " List of letters describing the output layout (e.g. 'NC')."]
    pub layout: std_optional,
    #[doc = " Name of the output layer."]
    pub name: std_string,
    #[doc = " Shape of the output as a list of integers (e.g. [1, 1000])."]
    pub shape: std_optional,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_Output"]
        [::std::mem::size_of::<dai_nn_archive_v1_Output>() - 112usize];
    ["Alignment of dai_nn_archive_v1_Output"]
        [::std::mem::align_of::<dai_nn_archive_v1_Output>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_Output::dtype"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Output, dtype) - 0usize];
    ["Offset of field: dai_nn_archive_v1_Output::layout"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Output, layout) - 8usize];
    ["Offset of field: dai_nn_archive_v1_Output::name"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Output, name) - 48usize];
    ["Offset of field: dai_nn_archive_v1_Output::shape"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Output, shape) - 80usize];
};
#[doc = " A Model object representing the neural network used in the archive.\n\n Class defining a single-stage model config scheme.\n\n @type metadata: Metadata\n @ivar metadata: Metadata object defining the model metadata.\n @type inputs: list\n @ivar inputs: List of Input objects defining the model inputs.\n @type outputs: list\n @ivar outputs: List of Output objects defining the model outputs.\n @type heads: list\n @ivar heads: List of Head objects defining the model heads. If not\n defined, we assume a raw output."]
#[repr(C)]
pub struct dai_nn_archive_v1_Model {
    #[doc = " List of Head objects defining the model heads. If not defined, we assume a raw output."]
    pub heads: std_optional,
    #[doc = " List of Input objects defining the model inputs."]
    pub inputs: std_vector,
    #[doc = " Metadata object defining the model metadata."]
    pub metadata: dai_nn_archive_v1_MetadataClass,
    #[doc = " List of Output objects defining the model outputs."]
    pub outputs: std_vector,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_Model"]
        [::std::mem::size_of::<dai_nn_archive_v1_Model>() - 152usize];
    ["Alignment of dai_nn_archive_v1_Model"]
        [::std::mem::align_of::<dai_nn_archive_v1_Model>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_Model::heads"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Model, heads) - 0usize];
    ["Offset of field: dai_nn_archive_v1_Model::inputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Model, inputs) - 32usize];
    ["Offset of field: dai_nn_archive_v1_Model::metadata"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Model, metadata) - 56usize];
    ["Offset of field: dai_nn_archive_v1_Model::outputs"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Model, outputs) - 128usize];
};
#[doc = " The main class of the multi/single-stage model config scheme\n (multi- stage models consists of interconnected single-stage\n models).\n\n @type config_version: str\n @ivar config_version: String representing config schema version in\n format 'x.y' where x is major version and y is minor version\n @type model: Model\n @ivar model: A Model object representing the neural network used in\n the archive."]
#[repr(C)]
pub struct dai_nn_archive_v1_Config {
    #[doc = " String representing config schema version in format 'x.y' where x is major version and y\n is minor version."]
    pub configVersion: std_optional,
    #[doc = " A Model object representing the neural network used in the archive."]
    pub model: dai_nn_archive_v1_Model,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_nn_archive_v1_Config"]
        [::std::mem::size_of::<dai_nn_archive_v1_Config>() - 192usize];
    ["Alignment of dai_nn_archive_v1_Config"]
        [::std::mem::align_of::<dai_nn_archive_v1_Config>() - 8usize];
    ["Offset of field: dai_nn_archive_v1_Config::configVersion"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Config, configVersion) - 0usize];
    ["Offset of field: dai_nn_archive_v1_Config::model"]
        [::std::mem::offset_of!(dai_nn_archive_v1_Config, model) - 40usize];
};
pub const dai_NNArchiveConfigVersion_V1: dai_NNArchiveConfigVersion = 0;
pub type dai_NNArchiveConfigVersion = ::std::os::raw::c_int;
pub type dai_NNArchiveConfig = std_variant;
#[repr(C)]
pub struct dai_NNArchiveVersionedConfig {
    pub version: dai_NNArchiveConfigVersion,
    pub config: dai_NNArchiveConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NNArchiveVersionedConfig"]
        [::std::mem::size_of::<dai_NNArchiveVersionedConfig>() - 208usize];
    ["Alignment of dai_NNArchiveVersionedConfig"]
        [::std::mem::align_of::<dai_NNArchiveVersionedConfig>() - 8usize];
    ["Offset of field: dai_NNArchiveVersionedConfig::version"]
        [::std::mem::offset_of!(dai_NNArchiveVersionedConfig, version) - 0usize];
    ["Offset of field: dai_NNArchiveVersionedConfig::config"]
        [::std::mem::offset_of!(dai_NNArchiveVersionedConfig, config) - 8usize];
};
unsafe extern "C" {
    #[doc = " @data Should point to a whole compressed NNArchive read to memory if compression is not set to RAW_FS.\n If compression is set to RAW_FS, then this should point to just the config.json file read to memory."]
    #[link_name = "\u{1}_ZN3dai24NNArchiveVersionedConfigC1ERKSt6vectorIhSaIhEENS_14NNArchiveEntry11CompressionE"]
    pub fn dai_NNArchiveVersionedConfig_NNArchiveVersionedConfig(
        this: *mut dai_NNArchiveVersionedConfig,
        data: *const std_vector,
        compression: dai_NNArchiveEntry_Compression,
    );
}
unsafe extern "C" {
    #[doc = " @path Should point to:\n 1) if compression is set to RAW_FS: to just the config.json file.\n 2) if compression is set to AUTO: to whole compressed NNArchive or just the config.json file which must end in .json .\n 3) else: to whole compressed NNArchive.\n see NNArchive class for parameter explanation"]
    #[link_name = "\u{1}_ZN3dai24NNArchiveVersionedConfigC1ERKNS_4PathENS_14NNArchiveEntry11CompressionE"]
    pub fn dai_NNArchiveVersionedConfig_NNArchiveVersionedConfig1(
        this: *mut dai_NNArchiveVersionedConfig,
        path: *const dai_Path,
        compression: dai_NNArchiveEntry_Compression,
    );
}
unsafe extern "C" {
    #[doc = "  Returned data should be just the config.json if compression == RAW_FS or the whole NNArchive otherwise\n see NNArchive class for parameter explanation"]
    #[link_name = "\u{1}_ZN3dai24NNArchiveVersionedConfigC1ERKSt8functionIFivEERKS1_IFSt10shared_ptrISt6vectorIhSaIhEEEvEERKS1_IFllNS_14NNArchiveEntry4SeekEEERKS1_IFllEES5_NSF_11CompressionE"]
    pub fn dai_NNArchiveVersionedConfig_NNArchiveVersionedConfig2(
        this: *mut dai_NNArchiveVersionedConfig,
        openCallback: *const std_function,
        readCallback: *const std_function,
        seekCallback: *const std_function,
        skipCallback: *const std_function,
        closeCallback: *const std_function,
        compression: dai_NNArchiveEntry_Compression,
    );
}
impl dai_NNArchiveVersionedConfig {
    #[inline]
    pub unsafe fn new(
        data: *const std_vector,
        compression: dai_NNArchiveEntry_Compression,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_NNArchiveVersionedConfig_NNArchiveVersionedConfig(
            __bindgen_tmp.as_mut_ptr(),
            data,
            compression,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(path: *const dai_Path, compression: dai_NNArchiveEntry_Compression) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_NNArchiveVersionedConfig_NNArchiveVersionedConfig1(
            __bindgen_tmp.as_mut_ptr(),
            path,
            compression,
        );
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(
        openCallback: *const std_function,
        readCallback: *const std_function,
        seekCallback: *const std_function,
        skipCallback: *const std_function,
        closeCallback: *const std_function,
        compression: dai_NNArchiveEntry_Compression,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_NNArchiveVersionedConfig_NNArchiveVersionedConfig2(
            __bindgen_tmp.as_mut_ptr(),
            openCallback,
            readCallback,
            seekCallback,
            skipCallback,
            closeCallback,
            compression,
        );
        __bindgen_tmp.assume_init()
    }
}
#[repr(C)]
pub struct dai_NNArchiveOptions {
    pub compression_: dai_NNArchiveEntry_Compression,
    pub extractFolder_: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NNArchiveOptions"][::std::mem::size_of::<dai_NNArchiveOptions>() - 40usize];
    ["Alignment of dai_NNArchiveOptions"][::std::mem::align_of::<dai_NNArchiveOptions>() - 8usize];
    ["Offset of field: dai_NNArchiveOptions::compression_"]
        [::std::mem::offset_of!(dai_NNArchiveOptions, compression_) - 0usize];
    ["Offset of field: dai_NNArchiveOptions::extractFolder_"]
        [::std::mem::offset_of!(dai_NNArchiveOptions, extractFolder_) - 8usize];
};
#[repr(C)]
pub struct dai_NNArchive {
    pub modelType: dai_model_ModelType,
    pub archiveOptions: dai_NNArchiveOptions,
    pub archiveVersionedConfigPtr: std_shared_ptr,
    pub blobPtr: std_shared_ptr,
    pub superblobPtr: std_shared_ptr,
    pub unpackedModelPath: std_string,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NNArchive"][::std::mem::size_of::<dai_NNArchive>() - 128usize];
    ["Alignment of dai_NNArchive"][::std::mem::align_of::<dai_NNArchive>() - 8usize];
    ["Offset of field: dai_NNArchive::modelType"]
        [::std::mem::offset_of!(dai_NNArchive, modelType) - 0usize];
    ["Offset of field: dai_NNArchive::archiveOptions"]
        [::std::mem::offset_of!(dai_NNArchive, archiveOptions) - 8usize];
    ["Offset of field: dai_NNArchive::archiveVersionedConfigPtr"]
        [::std::mem::offset_of!(dai_NNArchive, archiveVersionedConfigPtr) - 48usize];
    ["Offset of field: dai_NNArchive::blobPtr"]
        [::std::mem::offset_of!(dai_NNArchive, blobPtr) - 64usize];
    ["Offset of field: dai_NNArchive::superblobPtr"]
        [::std::mem::offset_of!(dai_NNArchive, superblobPtr) - 80usize];
    ["Offset of field: dai_NNArchive::unpackedModelPath"]
        [::std::mem::offset_of!(dai_NNArchive, unpackedModelPath) - 96usize];
};
unsafe extern "C" {
    #[doc = " @brief Return a SuperVINO::Blob from the archive if getModelType() returns BLOB, nothing otherwise\n\n @return std::optional<OpenVINO::Blob>: Model blob"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive7getBlobEv"]
    pub fn dai_NNArchive_getBlob(this: *const dai_NNArchive) -> std_optional;
}
unsafe extern "C" {
    #[doc = " @brief Return a SuperVINO::SuperBlob from the archive if getModelType() returns SUPERBLOB, nothing otherwise\n\n @return std::optional<OpenVINO::SuperBlob>: Model superblob"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive12getSuperBlobEv"]
    pub fn dai_NNArchive_getSuperBlob(this: *const dai_NNArchive) -> std_optional;
}
unsafe extern "C" {
    #[doc = " @brief Return a path to the model inside the archive if getModelType() returns OTHER or DLC, nothing otherwise\n\n @return std::optional<std::string>: Model path"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive12getModelPathB5cxx11Ev"]
    pub fn dai_NNArchive_getModelPath(this: *const dai_NNArchive) -> std_optional;
}
unsafe extern "C" {
    #[doc = " @brief Get NNArchive config wrapper\n\n @return NNArchiveVersionedConfig: Archive config"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive18getVersionedConfigEv"]
    pub fn dai_NNArchive_getVersionedConfig(
        this: *const dai_NNArchive,
    ) -> *const dai_NNArchiveVersionedConfig;
}
unsafe extern "C" {
    #[doc = " @brief Get inputSize of the model\n @param index: Index of input\n @note this function is only valid for models with NCHW and NHWC input formats\n @return std::vector<std::pair<int, int>>: inputSize"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive12getInputSizeEj"]
    pub fn dai_NNArchive_getInputSize(this: *const dai_NNArchive, index: u32) -> std_optional;
}
unsafe extern "C" {
    #[doc = " @brief Get inputWidth of the model\n @param index: Index of input\n @return int: inputWidth"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive13getInputWidthEj"]
    pub fn dai_NNArchive_getInputWidth(this: *const dai_NNArchive, index: u32) -> std_optional;
}
unsafe extern "C" {
    #[doc = " @brief Get inputHeight of the model\n @param index: Index of input\n @return int: inputHeight"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive14getInputHeightEj"]
    pub fn dai_NNArchive_getInputHeight(this: *const dai_NNArchive, index: u32) -> std_optional;
}
unsafe extern "C" {
    #[doc = " @brief Get supported platforms\n\n @return std::vector<dai::Platform>: Supported platforms"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive21getSupportedPlatformsEv"]
    pub fn dai_NNArchive_getSupportedPlatforms(this: *const dai_NNArchive) -> std_vector;
}
unsafe extern "C" {
    #[doc = " @brief Get type of model contained in NNArchive\n\n @return model::ModelType: type of model in archive"]
    #[link_name = "\u{1}_ZNK3dai9NNArchive12getModelTypeEv"]
    pub fn dai_NNArchive_getModelType(this: *const dai_NNArchive) -> dai_model_ModelType;
}
unsafe extern "C" {
    #[doc = " @brief Construct a new NNArchive object - a container holding a model and its configuration\n\n @param archivePath: Path to the archive file\n @param options: Archive options such as compression, number of shaves, etc. See NNArchiveOptions."]
    #[link_name = "\u{1}_ZN3dai9NNArchiveC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS_16NNArchiveOptionsE"]
    pub fn dai_NNArchive_NNArchive(
        this: *mut dai_NNArchive,
        archivePath: *const std_string,
        options: dai_NNArchiveOptions,
    );
}
impl dai_NNArchive {
    #[inline]
    pub unsafe fn getBlob(&self) -> std_optional {
        dai_NNArchive_getBlob(self)
    }
    #[inline]
    pub unsafe fn getSuperBlob(&self) -> std_optional {
        dai_NNArchive_getSuperBlob(self)
    }
    #[inline]
    pub unsafe fn getModelPath(&self) -> std_optional {
        dai_NNArchive_getModelPath(self)
    }
    #[inline]
    pub unsafe fn getVersionedConfig(&self) -> *const dai_NNArchiveVersionedConfig {
        dai_NNArchive_getVersionedConfig(self)
    }
    #[inline]
    pub unsafe fn getInputSize(&self, index: u32) -> std_optional {
        dai_NNArchive_getInputSize(self, index)
    }
    #[inline]
    pub unsafe fn getInputWidth(&self, index: u32) -> std_optional {
        dai_NNArchive_getInputWidth(self, index)
    }
    #[inline]
    pub unsafe fn getInputHeight(&self, index: u32) -> std_optional {
        dai_NNArchive_getInputHeight(self, index)
    }
    #[inline]
    pub unsafe fn getSupportedPlatforms(&self) -> std_vector {
        dai_NNArchive_getSupportedPlatforms(self)
    }
    #[inline]
    pub unsafe fn getModelType(&self) -> dai_model_ModelType {
        dai_NNArchive_getModelType(self)
    }
    #[inline]
    pub unsafe fn new(archivePath: *const std_string, options: dai_NNArchiveOptions) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_NNArchive_NNArchive(__bindgen_tmp.as_mut_ptr(), archivePath, options);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " DetectionParserOptions\n\n Specifies how to parse output of detection networks"]
#[repr(C)]
pub struct dai_DetectionParserOptions {
    #[doc = " Generic Neural Network properties"]
    pub nnFamily: DetectionNetworkType,
    pub subtype: std_string,
    pub confidenceThreshold: f32,
    #[doc = " YOLO specific network properties"]
    pub classes: ::std::os::raw::c_int,
    pub classNames: std_optional,
    pub coordinates: ::std::os::raw::c_int,
    pub anchors: std_vector,
    pub anchorMasks: std_map,
    #[doc = " see YoloDetectionNetwork::setAnchors() for format"]
    pub anchorsV2: std_vector,
    pub iouThreshold: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DetectionParserOptions"]
        [::std::mem::size_of::<dai_DetectionParserOptions>() - 192usize];
    ["Alignment of dai_DetectionParserOptions"]
        [::std::mem::align_of::<dai_DetectionParserOptions>() - 8usize];
    ["Offset of field: dai_DetectionParserOptions::nnFamily"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, nnFamily) - 0usize];
    ["Offset of field: dai_DetectionParserOptions::subtype"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, subtype) - 8usize];
    ["Offset of field: dai_DetectionParserOptions::confidenceThreshold"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, confidenceThreshold) - 40usize];
    ["Offset of field: dai_DetectionParserOptions::classes"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, classes) - 44usize];
    ["Offset of field: dai_DetectionParserOptions::classNames"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, classNames) - 48usize];
    ["Offset of field: dai_DetectionParserOptions::coordinates"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, coordinates) - 80usize];
    ["Offset of field: dai_DetectionParserOptions::anchors"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, anchors) - 88usize];
    ["Offset of field: dai_DetectionParserOptions::anchorMasks"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, anchorMasks) - 112usize];
    ["Offset of field: dai_DetectionParserOptions::anchorsV2"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, anchorsV2) - 160usize];
    ["Offset of field: dai_DetectionParserOptions::iouThreshold"]
        [::std::mem::offset_of!(dai_DetectionParserOptions, iouThreshold) - 184usize];
};
#[doc = " Specify properties for DetectionParser"]
#[repr(C)]
pub struct dai_DetectionParserProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Network inputs"]
    pub networkInputs: std_unordered_map,
    #[doc = " Options for parser"]
    pub parser: dai_DetectionParserOptions,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_DetectionParserProperties"]
        [::std::mem::size_of::<dai_DetectionParserProperties>() - 264usize];
    ["Alignment of dai_DetectionParserProperties"]
        [::std::mem::align_of::<dai_DetectionParserProperties>() - 8usize];
    ["Offset of field: dai_DetectionParserProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_DetectionParserProperties, numFramesPool) - 8usize];
    ["Offset of field: dai_DetectionParserProperties::networkInputs"]
        [::std::mem::offset_of!(dai_DetectionParserProperties, networkInputs) - 16usize];
    ["Offset of field: dai_DetectionParserProperties::parser"]
        [::std::mem::offset_of!(dai_DetectionParserProperties, parser) - 72usize];
};
#[doc = " Specify properties for NeuralNetwork such as blob path, ..."]
#[repr(C)]
pub struct dai_NeuralNetworkProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub modelSource: dai_NeuralNetworkProperties_ModelSource,
    #[doc = " Blob binary size in bytes"]
    pub blobSize: std_optional,
    #[doc = " Uri which points to blob"]
    pub blobUri: std_string,
    #[doc = " Uri which points to the model description"]
    pub modelUri: std_string,
    #[doc = " Number of available output tensors in pool"]
    pub numFrames: ::std::os::raw::c_uint,
    #[doc = " Number of threads to create for running inference. 0 = auto"]
    pub numThreads: ::std::os::raw::c_uint,
    #[doc = " Number of NCE (Neural Compute Engine) per inference thread. 0 = auto"]
    pub numNCEPerThread: ::std::os::raw::c_uint,
    #[doc = " Number of Shaves per inference thread. 0 = auto"]
    pub numShavesPerThread: ::std::os::raw::c_uint,
    #[doc = " Specify which backend is used. \"\" = auto"]
    pub backend: std_string,
    #[doc = " Specify backend properties"]
    pub backendProperties: std_map,
}
pub const dai_NeuralNetworkProperties_ModelSource_BLOB: dai_NeuralNetworkProperties_ModelSource = 0;
pub const dai_NeuralNetworkProperties_ModelSource_CUSTOM_MODEL:
    dai_NeuralNetworkProperties_ModelSource = 1;
#[doc = " Specify where the node should source the model"]
pub type dai_NeuralNetworkProperties_ModelSource = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NeuralNetworkProperties"]
        [::std::mem::size_of::<dai_NeuralNetworkProperties>() - 184usize];
    ["Alignment of dai_NeuralNetworkProperties"]
        [::std::mem::align_of::<dai_NeuralNetworkProperties>() - 8usize];
    ["Offset of field: dai_NeuralNetworkProperties::modelSource"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, modelSource) - 8usize];
    ["Offset of field: dai_NeuralNetworkProperties::blobSize"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, blobSize) - 12usize];
    ["Offset of field: dai_NeuralNetworkProperties::blobUri"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, blobUri) - 24usize];
    ["Offset of field: dai_NeuralNetworkProperties::modelUri"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, modelUri) - 56usize];
    ["Offset of field: dai_NeuralNetworkProperties::numFrames"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, numFrames) - 88usize];
    ["Offset of field: dai_NeuralNetworkProperties::numThreads"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, numThreads) - 92usize];
    ["Offset of field: dai_NeuralNetworkProperties::numNCEPerThread"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, numNCEPerThread) - 96usize];
    ["Offset of field: dai_NeuralNetworkProperties::numShavesPerThread"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, numShavesPerThread) - 100usize];
    ["Offset of field: dai_NeuralNetworkProperties::backend"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, backend) - 104usize];
    ["Offset of field: dai_NeuralNetworkProperties::backendProperties"]
        [::std::mem::offset_of!(dai_NeuralNetworkProperties, backendProperties) - 136usize];
};
#[doc = " EdgeDetectorConfig message. Carries sobel edge filter config."]
#[repr(C)]
pub struct dai_EdgeDetectorConfig {
    pub _base: dai_Buffer,
    pub config: dai_EdgeDetectorConfig_EdgeDetectorConfigData,
}
#[repr(C)]
pub struct dai_EdgeDetectorConfig_EdgeDetectorConfigData {
    #[doc = " Used for horizontal gradient computation in 3x3 Sobel filter\n Format - 3x3 matrix, 2nd column must be 0\n Default - +1 0 -1; +2 0 -2; +1 0 -1"]
    pub sobelFilterHorizontalKernel: std_vector,
    #[doc = " Used for vertical gradient computation in 3x3 Sobel filter\n Format - 3x3 matrix, 2nd row must be 0\n Default - +1 +2 +1; 0 0 0; -1 -2 -1"]
    pub sobelFilterVerticalKernel: std_vector,
}
pub type dai_EdgeDetectorConfig_EdgeDetectorConfigData_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_EdgeDetectorConfig_EdgeDetectorConfigData"]
        [::std::mem::size_of::<dai_EdgeDetectorConfig_EdgeDetectorConfigData>() - 48usize];
    ["Alignment of dai_EdgeDetectorConfig_EdgeDetectorConfigData"]
        [::std::mem::align_of::<dai_EdgeDetectorConfig_EdgeDetectorConfigData>() - 8usize];
    ["Offset of field: dai_EdgeDetectorConfig_EdgeDetectorConfigData::sobelFilterHorizontalKernel"]
        [::std::mem::offset_of!(
            dai_EdgeDetectorConfig_EdgeDetectorConfigData,
            sobelFilterHorizontalKernel
        ) - 0usize];
    ["Offset of field: dai_EdgeDetectorConfig_EdgeDetectorConfigData::sobelFilterVerticalKernel"][::std::mem::offset_of!(
        dai_EdgeDetectorConfig_EdgeDetectorConfigData,
        sobelFilterVerticalKernel
    )
        - 24usize];
};
pub type dai_EdgeDetectorConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_EdgeDetectorConfig"][::std::mem::size_of::<dai_EdgeDetectorConfig>() - 112usize];
    ["Alignment of dai_EdgeDetectorConfig"]
        [::std::mem::align_of::<dai_EdgeDetectorConfig>() - 8usize];
    ["Offset of field: dai_EdgeDetectorConfig::config"]
        [::std::mem::offset_of!(dai_EdgeDetectorConfig, config) - 64usize];
};
unsafe extern "C" {
    #[doc = " Set sobel filter horizontal and vertical 3x3 kernels\n @param horizontalKernel Used for horizontal gradient computation in 3x3 Sobel filter\n @param verticalKernel Used for vertical gradient computation in 3x3 Sobel filter"]
    #[link_name = "\u{1}_ZN3dai18EdgeDetectorConfig21setSobelFilterKernelsERKSt6vectorIS1_IiSaIiEESaIS3_EES7_"]
    pub fn dai_EdgeDetectorConfig_setSobelFilterKernels(
        this: *mut dai_EdgeDetectorConfig,
        horizontalKernel: *const std_vector,
        verticalKernel: *const std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Retrieve configuration data for EdgeDetector\n @returns EdgeDetectorConfigData: sobel filter horizontal and vertical 3x3 kernels"]
    #[link_name = "\u{1}_ZNK3dai18EdgeDetectorConfig13getConfigDataEv"]
    pub fn dai_EdgeDetectorConfig_getConfigData(
        this: *const dai_EdgeDetectorConfig,
    ) -> dai_EdgeDetectorConfig_EdgeDetectorConfigData;
}
impl dai_EdgeDetectorConfig {
    #[inline]
    pub unsafe fn setSobelFilterKernels(
        &mut self,
        horizontalKernel: *const std_vector,
        verticalKernel: *const std_vector,
    ) {
        dai_EdgeDetectorConfig_setSobelFilterKernels(self, horizontalKernel, verticalKernel)
    }
    #[inline]
    pub unsafe fn getConfigData(&self) -> dai_EdgeDetectorConfig_EdgeDetectorConfigData {
        dai_EdgeDetectorConfig_getConfigData(self)
    }
}
#[doc = " Specify properties for EdgeDetector"]
#[repr(C)]
pub struct dai_EdgeDetectorProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Initial edge detector config"]
    pub initialConfig: dai_EdgeDetectorConfig,
    #[doc = " Maximum output frame size in bytes (eg: 300x300 BGR image -> 300*300*3 bytes)"]
    pub outputFrameSize: ::std::os::raw::c_int,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_EdgeDetectorProperties"]
        [::std::mem::size_of::<dai_EdgeDetectorProperties>() - 128usize];
    ["Alignment of dai_EdgeDetectorProperties"]
        [::std::mem::align_of::<dai_EdgeDetectorProperties>() - 8usize];
    ["Offset of field: dai_EdgeDetectorProperties::initialConfig"]
        [::std::mem::offset_of!(dai_EdgeDetectorProperties, initialConfig) - 8usize];
    ["Offset of field: dai_EdgeDetectorProperties::outputFrameSize"]
        [::std::mem::offset_of!(dai_EdgeDetectorProperties, outputFrameSize) - 120usize];
    ["Offset of field: dai_EdgeDetectorProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_EdgeDetectorProperties, numFramesPool) - 124usize];
};
#[doc = " FeatureTrackerConfig message. Carries config for feature tracking algorithm"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_FeatureTrackerConfig {
    pub _base: dai_Buffer,
    #[doc = " Corner detector configuration.\n Used for feature detection."]
    pub cornerDetector: dai_FeatureTrackerConfig_CornerDetector,
    #[doc = " Motion estimator configuration.\n Used for feature reidentification between current and previous features."]
    pub motionEstimator: dai_FeatureTrackerConfig_MotionEstimator,
    #[doc = " FeatureMaintainer configuration.\n Used for feature maintaining."]
    pub featureMaintainer: dai_FeatureTrackerConfig_FeatureMaintainer,
}
#[doc = " Corner detector configuration structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_FeatureTrackerConfig_CornerDetector {
    #[doc = " Corner detector algorithm type."]
    pub type_: dai_FeatureTrackerConfig_CornerDetector_Type,
    #[doc = " Ensures distributed feature detection across the image.\n Image is divided into horizontal and vertical cells,\n each cell has a target feature count = numTargetFeatures / cellGridDimension.\n Each cell has its own feature threshold.\n A value of 4 means that the image is divided into 4x4 cells of equal width/height.\n Maximum 4, minimum 1."]
    pub cellGridDimension: ::std::os::raw::c_int,
    #[doc = " Target number of features to detect.\n Maximum number of features is determined at runtime based on algorithm type."]
    pub numTargetFeatures: ::std::os::raw::c_int,
    #[doc = " Hard limit for the maximum number of features that can be detected.\n 0 means auto, will be set to the maximum value based on memory constraints."]
    pub numMaxFeatures: ::std::os::raw::c_int,
    #[doc = " Enable 3x3 Sobel operator to smoothen the image whose gradient is to be computed.\n If disabled, a simple 1D row/column differentiator is used for gradient."]
    pub enableSobel: bool,
    #[doc = " Enable sorting detected features based on their score or not."]
    pub enableSorting: bool,
    #[doc = " Threshold settings.\n These are advanced settings, suitable for debugging/special cases."]
    pub thresholds: dai_FeatureTrackerConfig_CornerDetector_Thresholds,
}
#[doc = " Harris corner detector."]
pub const dai_FeatureTrackerConfig_CornerDetector_Type_HARRIS:
    dai_FeatureTrackerConfig_CornerDetector_Type = 0;
#[doc = " Shi-Thomasi corner detector."]
pub const dai_FeatureTrackerConfig_CornerDetector_Type_SHI_THOMASI:
    dai_FeatureTrackerConfig_CornerDetector_Type = 1;
pub type dai_FeatureTrackerConfig_CornerDetector_Type = ::std::os::raw::c_int;
#[doc = " Threshold settings structure for corner detector."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_FeatureTrackerConfig_CornerDetector_Thresholds {
    #[doc = " Minimum strength of a feature which will be detected.\n 0 means automatic threshold update. Recommended so the tracker can adapt to different scenes/textures.\n Each cell has its own threshold.\n Empirical value."]
    pub initialValue: f32,
    #[doc = " Minimum limit for threshold.\n Applicable when automatic threshold update is enabled.\n 0 means auto, 6000000 for HARRIS, 1200 for SHI_THOMASI.\n Empirical value."]
    pub min: f32,
    #[doc = " Maximum limit for threshold.\n Applicable when automatic threshold update is enabled.\n 0 means auto.\n Empirical value."]
    pub max: f32,
    #[doc = " When detected number of features exceeds the maximum in a cell threshold is lowered\n by multiplying its value with this factor."]
    pub decreaseFactor: f32,
    #[doc = " When detected number of features doesn't exceed the maximum in a cell, threshold is increased\n by multiplying its value with this factor."]
    pub increaseFactor: f32,
}
pub type dai_FeatureTrackerConfig_CornerDetector_Thresholds_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerConfig_CornerDetector_Thresholds"]
        [::std::mem::size_of::<dai_FeatureTrackerConfig_CornerDetector_Thresholds>() - 20usize];
    ["Alignment of dai_FeatureTrackerConfig_CornerDetector_Thresholds"]
        [::std::mem::align_of::<dai_FeatureTrackerConfig_CornerDetector_Thresholds>() - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector_Thresholds::initialValue"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_CornerDetector_Thresholds,
        initialValue
    )
        - 0usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector_Thresholds::min"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector_Thresholds, min) - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector_Thresholds::max"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector_Thresholds, max) - 8usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector_Thresholds::decreaseFactor"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_CornerDetector_Thresholds,
        decreaseFactor
    )
        - 12usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector_Thresholds::increaseFactor"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_CornerDetector_Thresholds,
        increaseFactor
    )
        - 16usize];
};
pub type dai_FeatureTrackerConfig_CornerDetector_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerConfig_CornerDetector"]
        [::std::mem::size_of::<dai_FeatureTrackerConfig_CornerDetector>() - 40usize];
    ["Alignment of dai_FeatureTrackerConfig_CornerDetector"]
        [::std::mem::align_of::<dai_FeatureTrackerConfig_CornerDetector>() - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::type_"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector, type_) - 0usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::cellGridDimension"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_CornerDetector,
        cellGridDimension
    ) - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::numTargetFeatures"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_CornerDetector,
        numTargetFeatures
    ) - 8usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::numMaxFeatures"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector, numMaxFeatures) - 12usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::enableSobel"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector, enableSobel) - 16usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::enableSorting"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector, enableSorting) - 17usize];
    ["Offset of field: dai_FeatureTrackerConfig_CornerDetector::thresholds"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_CornerDetector, thresholds) - 20usize];
};
#[doc = " Used for feature reidentification between current and previous features."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_FeatureTrackerConfig_MotionEstimator {
    #[doc = " Enable motion estimation or not."]
    pub enable: bool,
    #[doc = " Motion estimator algorithm type."]
    pub type_: dai_FeatureTrackerConfig_MotionEstimator_Type,
    #[doc = " Optical flow configuration.\n Takes effect only if MotionEstimator algorithm type set to LUCAS_KANADE_OPTICAL_FLOW."]
    pub opticalFlow: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
}
#[doc = " Using the pyramidal Lucas-Kanade optical flow method."]
pub const dai_FeatureTrackerConfig_MotionEstimator_Type_LUCAS_KANADE_OPTICAL_FLOW:
    dai_FeatureTrackerConfig_MotionEstimator_Type = 0;
#[doc = " Using a dense motion estimation hardware block (Block matcher)."]
pub const dai_FeatureTrackerConfig_MotionEstimator_Type_HW_MOTION_ESTIMATION:
    dai_FeatureTrackerConfig_MotionEstimator_Type = 1;
pub type dai_FeatureTrackerConfig_MotionEstimator_Type = ::std::os::raw::c_int;
#[doc = " Optical flow configuration structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow {
    #[doc = " Number of pyramid levels, only for optical flow.\n AUTO means it's decided based on input resolution: 3 if image width <= 640, else 4.\n Valid values are either 3/4 for VGA, 4 for 720p and above."]
    pub pyramidLevels: ::std::os::raw::c_int,
    #[doc = " Image patch width used to track features.\n Must be an odd number, maximum 9.\n N means the algorithm will be able to track motion at most (N-1)/2 pixels in a direction per pyramid level.\n Increasing this number increases runtime"]
    pub searchWindowWidth: ::std::os::raw::c_int,
    #[doc = " Image patch height used to track features.\n Must be an odd number, maximum 9.\n N means the algorithm will be able to track motion at most (N-1)/2 pixels in a direction per pyramid level.\n Increasing this number increases runtime"]
    pub searchWindowHeight: ::std::os::raw::c_int,
    #[doc = " Feature tracking termination criteria.\n Optical flow will refine the feature position on each pyramid level until\n the displacement between two refinements is smaller than this value.\n Decreasing this number increases runtime."]
    pub epsilon: f32,
    #[doc = " Feature tracking termination criteria. Optical flow will refine the feature position maximum this many times\n on each pyramid level. If the Epsilon criteria described in the previous chapter is not met after this number\n of iterations, the algorithm will continue with the current calculated value.\n Increasing this number increases runtime."]
    pub maxIterations: ::std::os::raw::c_int,
}
pub type dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow"]
        [::std::mem::size_of::<dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow>() - 20usize];
    ["Alignment of dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow"]
        [::std::mem::align_of::<dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow>() - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow::pyramidLevels"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
        pyramidLevels
    )
        - 0usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow::searchWindowWidth"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
        searchWindowWidth
    )
        - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow::searchWindowHeight"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
        searchWindowHeight
    )
        - 8usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow::epsilon"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
        epsilon
    ) - 12usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow::maxIterations"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
        maxIterations
    )
        - 16usize];
};
pub type dai_FeatureTrackerConfig_MotionEstimator_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerConfig_MotionEstimator"]
        [::std::mem::size_of::<dai_FeatureTrackerConfig_MotionEstimator>() - 28usize];
    ["Alignment of dai_FeatureTrackerConfig_MotionEstimator"]
        [::std::mem::align_of::<dai_FeatureTrackerConfig_MotionEstimator>() - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator::enable"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_MotionEstimator, enable) - 0usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator::type_"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_MotionEstimator, type_) - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_MotionEstimator::opticalFlow"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_MotionEstimator, opticalFlow) - 8usize];
};
#[doc = " FeatureMaintainer configuration structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_FeatureTrackerConfig_FeatureMaintainer {
    #[doc = " Enable feature maintaining or not."]
    pub enable: bool,
    #[doc = " Used to filter out detected feature points that are too close.\n Requires sorting enabled in detector.\n Unit of measurement is squared euclidean distance in pixels."]
    pub minimumDistanceBetweenFeatures: f32,
    #[doc = " Optical flow measures the tracking error for every feature.\n If the point can’t be tracked or it’s out of the image it will set this error to a maximum value.\n This threshold defines the level where the tracking accuracy is considered too bad to keep the point."]
    pub lostFeatureErrorThreshold: f32,
    #[doc = " Once a feature was detected and we started tracking it, we need to update its Harris score on each image.\n This is needed because a feature point can disappear, or it can become too weak to be tracked. This\n threshold defines the point where such a feature must be dropped.\n As the goal of the algorithm is to provide longer tracks, we try to add strong points and track them until\n they are absolutely untrackable. This is why, this value is usually smaller than the detection threshold."]
    pub trackedFeatureThreshold: f32,
}
pub type dai_FeatureTrackerConfig_FeatureMaintainer_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerConfig_FeatureMaintainer"]
        [::std::mem::size_of::<dai_FeatureTrackerConfig_FeatureMaintainer>() - 16usize];
    ["Alignment of dai_FeatureTrackerConfig_FeatureMaintainer"]
        [::std::mem::align_of::<dai_FeatureTrackerConfig_FeatureMaintainer>() - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_FeatureMaintainer::enable"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig_FeatureMaintainer, enable) - 0usize];
    ["Offset of field: dai_FeatureTrackerConfig_FeatureMaintainer::minimumDistanceBetweenFeatures"]
        [::std::mem::offset_of!(
            dai_FeatureTrackerConfig_FeatureMaintainer,
            minimumDistanceBetweenFeatures
        ) - 4usize];
    ["Offset of field: dai_FeatureTrackerConfig_FeatureMaintainer::lostFeatureErrorThreshold"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_FeatureMaintainer,
        lostFeatureErrorThreshold
    )
        - 8usize];
    ["Offset of field: dai_FeatureTrackerConfig_FeatureMaintainer::trackedFeatureThreshold"][::std::mem::offset_of!(
        dai_FeatureTrackerConfig_FeatureMaintainer,
        trackedFeatureThreshold
    )
        - 12usize];
};
pub type dai_FeatureTrackerConfig_NOP__MEMBERS = nop_MemberList;
pub const dai_FeatureTrackerConfig_AUTO: ::std::os::raw::c_int = 0;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerConfig"]
        [::std::mem::size_of::<dai_FeatureTrackerConfig>() - 152usize];
    ["Alignment of dai_FeatureTrackerConfig"]
        [::std::mem::align_of::<dai_FeatureTrackerConfig>() - 8usize];
    ["Offset of field: dai_FeatureTrackerConfig::cornerDetector"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig, cornerDetector) - 64usize];
    ["Offset of field: dai_FeatureTrackerConfig::motionEstimator"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig, motionEstimator) - 104usize];
    ["Offset of field: dai_FeatureTrackerConfig::featureMaintainer"]
        [::std::mem::offset_of!(dai_FeatureTrackerConfig, featureMaintainer) - 132usize];
};
unsafe extern "C" {
    #[doc = " Set corner detector algorithm type.\n @param cornerDetector Corner detector type, HARRIS or SHI_THOMASI"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig17setCornerDetectorENS0_14CornerDetector4TypeE"]
    pub fn dai_FeatureTrackerConfig_setCornerDetector(
        this: *mut dai_FeatureTrackerConfig,
        cornerDetector: dai_FeatureTrackerConfig_CornerDetector_Type,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set corner detector full configuration.\n @param config Corner detector configuration"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig17setCornerDetectorENS0_14CornerDetectorE"]
    pub fn dai_FeatureTrackerConfig_setCornerDetector1(
        this: *mut dai_FeatureTrackerConfig,
        config: dai_FeatureTrackerConfig_CornerDetector,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set optical flow as motion estimation algorithm type."]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig14setOpticalFlowEv"]
    pub fn dai_FeatureTrackerConfig_setOpticalFlow(
        this: *mut dai_FeatureTrackerConfig,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set optical flow full configuration.\n @param config Optical flow configuration"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig14setOpticalFlowENS0_15MotionEstimator11OpticalFlowE"]
    pub fn dai_FeatureTrackerConfig_setOpticalFlow1(
        this: *mut dai_FeatureTrackerConfig,
        config: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set hardware accelerated motion estimation using block matching.\n Faster than optical flow (software implementation) but might not be as accurate."]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig21setHwMotionEstimationEv"]
    pub fn dai_FeatureTrackerConfig_setHwMotionEstimation(
        this: *mut dai_FeatureTrackerConfig,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set number of target features to detect.\n @param numTargetFeatures Number of features"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig20setNumTargetFeaturesEi"]
    pub fn dai_FeatureTrackerConfig_setNumTargetFeatures(
        this: *mut dai_FeatureTrackerConfig,
        numTargetFeatures: ::std::os::raw::c_int,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Enable or disable motion estimator.\n @param enable"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig18setMotionEstimatorEb"]
    pub fn dai_FeatureTrackerConfig_setMotionEstimator(
        this: *mut dai_FeatureTrackerConfig,
        enable: bool,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set motion estimator full configuration.\n @param config Motion estimator configuration"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig18setMotionEstimatorENS0_15MotionEstimatorE"]
    pub fn dai_FeatureTrackerConfig_setMotionEstimator1(
        this: *mut dai_FeatureTrackerConfig,
        config: dai_FeatureTrackerConfig_MotionEstimator,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Enable or disable feature maintainer.\n @param enable"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig20setFeatureMaintainerEb"]
    pub fn dai_FeatureTrackerConfig_setFeatureMaintainer(
        this: *mut dai_FeatureTrackerConfig,
        enable: bool,
    ) -> *mut dai_FeatureTrackerConfig;
}
unsafe extern "C" {
    #[doc = " Set feature maintainer full configuration.\n @param config feature maintainer configuration"]
    #[link_name = "\u{1}_ZN3dai20FeatureTrackerConfig20setFeatureMaintainerENS0_17FeatureMaintainerE"]
    pub fn dai_FeatureTrackerConfig_setFeatureMaintainer1(
        this: *mut dai_FeatureTrackerConfig,
        config: dai_FeatureTrackerConfig_FeatureMaintainer,
    ) -> *mut dai_FeatureTrackerConfig;
}
impl dai_FeatureTrackerConfig {
    #[inline]
    pub unsafe fn setCornerDetector(
        &mut self,
        cornerDetector: dai_FeatureTrackerConfig_CornerDetector_Type,
    ) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setCornerDetector(self, cornerDetector)
    }
    #[inline]
    pub unsafe fn setCornerDetector1(
        &mut self,
        config: dai_FeatureTrackerConfig_CornerDetector,
    ) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setCornerDetector1(self, config)
    }
    #[inline]
    pub unsafe fn setOpticalFlow(&mut self) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setOpticalFlow(self)
    }
    #[inline]
    pub unsafe fn setOpticalFlow1(
        &mut self,
        config: dai_FeatureTrackerConfig_MotionEstimator_OpticalFlow,
    ) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setOpticalFlow1(self, config)
    }
    #[inline]
    pub unsafe fn setHwMotionEstimation(&mut self) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setHwMotionEstimation(self)
    }
    #[inline]
    pub unsafe fn setNumTargetFeatures(
        &mut self,
        numTargetFeatures: ::std::os::raw::c_int,
    ) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setNumTargetFeatures(self, numTargetFeatures)
    }
    #[inline]
    pub unsafe fn setMotionEstimator(&mut self, enable: bool) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setMotionEstimator(self, enable)
    }
    #[inline]
    pub unsafe fn setMotionEstimator1(
        &mut self,
        config: dai_FeatureTrackerConfig_MotionEstimator,
    ) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setMotionEstimator1(self, config)
    }
    #[inline]
    pub unsafe fn setFeatureMaintainer(&mut self, enable: bool) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setFeatureMaintainer(self, enable)
    }
    #[inline]
    pub unsafe fn setFeatureMaintainer1(
        &mut self,
        config: dai_FeatureTrackerConfig_FeatureMaintainer,
    ) -> *mut dai_FeatureTrackerConfig {
        dai_FeatureTrackerConfig_setFeatureMaintainer1(self, config)
    }
}
#[doc = " Specify properties for FeatureTracker"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_FeatureTrackerProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Initial feature tracker config"]
    pub initialConfig: dai_FeatureTrackerConfig,
    #[doc = " Number of shaves reserved for feature tracking.\n Optical flow can use 1 or 2 shaves, while for corner detection only 1 is enough.\n Hardware motion estimation doesn't require shaves.\n Maximum 2, minimum 1."]
    pub numShaves: ::std::os::raw::c_int,
    #[doc = " Number of memory slices reserved for feature tracking.\n Optical flow can use 1 or 2 memory slices, while for corner detection only 1 is enough.\n Maximum number of features depends on the number of allocated memory slices.\n Hardware motion estimation doesn't require memory slices.\n Maximum 2, minimum 1."]
    pub numMemorySlices: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FeatureTrackerProperties"]
        [::std::mem::size_of::<dai_FeatureTrackerProperties>() - 168usize];
    ["Alignment of dai_FeatureTrackerProperties"]
        [::std::mem::align_of::<dai_FeatureTrackerProperties>() - 8usize];
    ["Offset of field: dai_FeatureTrackerProperties::initialConfig"]
        [::std::mem::offset_of!(dai_FeatureTrackerProperties, initialConfig) - 8usize];
    ["Offset of field: dai_FeatureTrackerProperties::numShaves"]
        [::std::mem::offset_of!(dai_FeatureTrackerProperties, numShaves) - 160usize];
    ["Offset of field: dai_FeatureTrackerProperties::numMemorySlices"]
        [::std::mem::offset_of!(dai_FeatureTrackerProperties, numMemorySlices) - 164usize];
};
#[doc = " Section 2.1.1\n\n Acceleration of the device without any postprocessing, straight from the sensor.\n Units are [m/s^2]"]
pub const dai_IMUSensor_ACCELEROMETER_RAW: dai_IMUSensor = 20;
#[doc = " Section 2.1.1\n\n Acceleration of the device including gravity.\n Units are [m/s^2]"]
pub const dai_IMUSensor_ACCELEROMETER: dai_IMUSensor = 1;
#[doc = " Section 2.1.1\n\n Acceleration of the device with gravity removed.\n Units are [m/s^2]"]
pub const dai_IMUSensor_LINEAR_ACCELERATION: dai_IMUSensor = 4;
#[doc = " Section 2.1.1\n\n Gravity.\n Units are [m/s^2]"]
pub const dai_IMUSensor_GRAVITY: dai_IMUSensor = 6;
#[doc = " Section 2.1.2\n\n The angular velocity of the device without any postprocessing, straight from the sensor.\n Units are [rad/s]"]
pub const dai_IMUSensor_GYROSCOPE_RAW: dai_IMUSensor = 21;
#[doc = " Section 2.1.2\n\n The angular velocity of the device.\n Units are [rad/s]"]
pub const dai_IMUSensor_GYROSCOPE_CALIBRATED: dai_IMUSensor = 2;
#[doc = " Section 2.1.2\n\n Angular velocity without bias compensation.\n Units are [rad/s]"]
pub const dai_IMUSensor_GYROSCOPE_UNCALIBRATED: dai_IMUSensor = 7;
#[doc = " Section 2.1.3\n\n Magnetic field measurement without any postprocessing, straight from the sensor.\n Units are [uTesla]"]
pub const dai_IMUSensor_MAGNETOMETER_RAW: dai_IMUSensor = 22;
#[doc = " Section 2.1.3\n\n The fully calibrated magnetic field measurement.\n Units are [uTesla]"]
pub const dai_IMUSensor_MAGNETOMETER_CALIBRATED: dai_IMUSensor = 3;
#[doc = " Section 2.1.3\n\n The magnetic field measurement without hard-iron offset applied.\n Units are [uTesla]"]
pub const dai_IMUSensor_MAGNETOMETER_UNCALIBRATED: dai_IMUSensor = 15;
#[doc = " Section 2.2\n\n The rotation vector provides an orientation output that is expressed as a quaternion referenced to magnetic north\n and gravity. It is produced by fusing the outputs of the accelerometer, gyroscope and magnetometer. The rotation\n vector is the most accurate orientation estimate available. The magnetometer provides correction in yaw to\n reduce drift and the gyroscope enables the most responsive performance."]
pub const dai_IMUSensor_ROTATION_VECTOR: dai_IMUSensor = 5;
#[doc = " Section 2.2\n\n The game rotation vector is an orientation output that is expressed as a quaternion with no specific reference for\n heading, while roll and pitch are referenced against gravity. It is produced by fusing the outputs of the\n accelerometer and the gyroscope (i.e. no magnetometer). The game rotation vector does not use the\n magnetometer to correct the gyroscopes drift in yaw. This is a deliberate omission (as specified by Google) to\n allow gaming applications to use a smoother representation of the orientation without the jumps that an\n instantaneous correction provided by a magnetic field update could provide. Long term the output will likely drift in\n yaw due to the characteristics of gyroscopes, but this is seen as preferable for this output versus a corrected output."]
pub const dai_IMUSensor_GAME_ROTATION_VECTOR: dai_IMUSensor = 8;
#[doc = " Section 2.2\n\n The geomagnetic rotation vector is an orientation output that is expressed as a quaternion referenced to magnetic\n north and gravity. It is produced by fusing the outputs of the accelerometer and magnetometer. The gyroscope is\n specifically excluded in order to produce a rotation vector output using less power than is required to produce the\n rotation vector of section 2.2.4. The consequences of removing the gyroscope are:\n Less responsive output since the highly dynamic outputs of the gyroscope are not used\n More errors in the presence of varying magnetic fields."]
pub const dai_IMUSensor_GEOMAGNETIC_ROTATION_VECTOR: dai_IMUSensor = 9;
#[doc = " Section 2.2\n\n Estimates of the magnetic field and the roll/pitch of the device can create a potential correction in the rotation\n vector produced. For applications (typically augmented or virtual reality applications) where a sudden jump can be\n disturbing, the output is adjusted to prevent these jumps in a manner that takes account of the velocity of the\n sensor system."]
pub const dai_IMUSensor_ARVR_STABILIZED_ROTATION_VECTOR: dai_IMUSensor = 40;
#[doc = " Section 2.2\n\n While the magnetometer is removed from the calculation of the game rotation vector, the accelerometer itself can\n create a potential correction in the rotation vector produced (i.e. the estimate of gravity changes). For applications\n (typically augmented or virtual reality applications) where a sudden jump can be disturbing, the output is adjusted\n to prevent these jumps in a manner that takes account of the velocity of the sensor system. This process is called\n AR/VR stabilization."]
pub const dai_IMUSensor_ARVR_STABILIZED_GAME_ROTATION_VECTOR: dai_IMUSensor = 41;
#[doc = " Available IMU sensors.\n More details about each sensor can be found in the datasheet:\n\n https://www.ceva-dsp.com/wp-content/uploads/2019/10/BNO080_085-Datasheet.pdf"]
pub type dai_IMUSensor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUSensorConfig {
    pub sensitivityEnabled: bool,
    #[doc = "< @brief Change reports relative (vs absolute)"]
    pub sensitivityRelative: bool,
    #[doc = "< @brief Report-on-change threshold"]
    pub changeSensitivity: u16,
    pub reportRate: u32,
    pub sensorId: dai_IMUSensor,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUSensorConfig"][::std::mem::size_of::<dai_IMUSensorConfig>() - 12usize];
    ["Alignment of dai_IMUSensorConfig"][::std::mem::align_of::<dai_IMUSensorConfig>() - 4usize];
    ["Offset of field: dai_IMUSensorConfig::sensitivityEnabled"]
        [::std::mem::offset_of!(dai_IMUSensorConfig, sensitivityEnabled) - 0usize];
    ["Offset of field: dai_IMUSensorConfig::sensitivityRelative"]
        [::std::mem::offset_of!(dai_IMUSensorConfig, sensitivityRelative) - 1usize];
    ["Offset of field: dai_IMUSensorConfig::changeSensitivity"]
        [::std::mem::offset_of!(dai_IMUSensorConfig, changeSensitivity) - 2usize];
    ["Offset of field: dai_IMUSensorConfig::reportRate"]
        [::std::mem::offset_of!(dai_IMUSensorConfig, reportRate) - 4usize];
    ["Offset of field: dai_IMUSensorConfig::sensorId"]
        [::std::mem::offset_of!(dai_IMUSensorConfig, sensorId) - 8usize];
};
#[repr(C)]
pub struct dai_IMUProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub imuSensors: std_vector,
    pub batchReportThreshold: ::std::os::raw::c_int,
    pub maxBatchReports: ::std::os::raw::c_int,
    pub enableFirmwareUpdate: std_optional,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUProperties"][::std::mem::size_of::<dai_IMUProperties>() - 48usize];
    ["Alignment of dai_IMUProperties"][::std::mem::align_of::<dai_IMUProperties>() - 8usize];
    ["Offset of field: dai_IMUProperties::imuSensors"]
        [::std::mem::offset_of!(dai_IMUProperties, imuSensors) - 8usize];
    ["Offset of field: dai_IMUProperties::batchReportThreshold"]
        [::std::mem::offset_of!(dai_IMUProperties, batchReportThreshold) - 32usize];
    ["Offset of field: dai_IMUProperties::maxBatchReports"]
        [::std::mem::offset_of!(dai_IMUProperties, maxBatchReports) - 36usize];
    ["Offset of field: dai_IMUProperties::enableFirmwareUpdate"]
        [::std::mem::offset_of!(dai_IMUProperties, enableFirmwareUpdate) - 40usize];
};
pub const dai_Colormap_NONE: dai_Colormap = 0;
pub const dai_Colormap_TURBO: dai_Colormap = 1;
pub const dai_Colormap_JET: dai_Colormap = 2;
pub const dai_Colormap_STEREO_TURBO: dai_Colormap = 3;
pub const dai_Colormap_STEREO_JET: dai_Colormap = 4;
#[doc = " Camera sensor type"]
pub type dai_Colormap = i32;
#[repr(C)]
pub struct dai_OpBase__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct dai_OpBase {
    pub vtable_: *const dai_OpBase__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_OpBase"][::std::mem::size_of::<dai_OpBase>() - 8usize];
    ["Alignment of dai_OpBase"][::std::mem::align_of::<dai_OpBase>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Translate {
    pub _base: dai_OpBase,
    pub offsetX: f32,
    pub offsetY: f32,
    pub normalized: bool,
}
pub type dai_Translate_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Translate"][::std::mem::size_of::<dai_Translate>() - 24usize];
    ["Alignment of dai_Translate"][::std::mem::align_of::<dai_Translate>() - 8usize];
    ["Offset of field: dai_Translate::offsetX"]
        [::std::mem::offset_of!(dai_Translate, offsetX) - 8usize];
    ["Offset of field: dai_Translate::offsetY"]
        [::std::mem::offset_of!(dai_Translate, offsetY) - 12usize];
    ["Offset of field: dai_Translate::normalized"]
        [::std::mem::offset_of!(dai_Translate, normalized) - 16usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Rotate {
    pub _base: dai_OpBase,
    pub angle: f32,
    pub center: bool,
    pub offsetX: f32,
    pub offsetY: f32,
    pub normalized: bool,
}
pub type dai_Rotate_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Rotate"][::std::mem::size_of::<dai_Rotate>() - 32usize];
    ["Alignment of dai_Rotate"][::std::mem::align_of::<dai_Rotate>() - 8usize];
    ["Offset of field: dai_Rotate::angle"][::std::mem::offset_of!(dai_Rotate, angle) - 8usize];
    ["Offset of field: dai_Rotate::center"][::std::mem::offset_of!(dai_Rotate, center) - 12usize];
    ["Offset of field: dai_Rotate::offsetX"][::std::mem::offset_of!(dai_Rotate, offsetX) - 16usize];
    ["Offset of field: dai_Rotate::offsetY"][::std::mem::offset_of!(dai_Rotate, offsetY) - 20usize];
    ["Offset of field: dai_Rotate::normalized"]
        [::std::mem::offset_of!(dai_Rotate, normalized) - 24usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Resize {
    pub _base: dai_OpBase,
    pub width: f32,
    pub height: f32,
    pub normalized: bool,
    pub mode: dai_Resize_Mode,
}
pub const dai_Resize_Mode_VALUE: dai_Resize_Mode = 0;
pub const dai_Resize_Mode_FIT: dai_Resize_Mode = 1;
pub const dai_Resize_Mode_FILL: dai_Resize_Mode = 2;
pub type dai_Resize_Mode = ::std::os::raw::c_uint;
pub type dai_Resize_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Resize"][::std::mem::size_of::<dai_Resize>() - 24usize];
    ["Alignment of dai_Resize"][::std::mem::align_of::<dai_Resize>() - 8usize];
    ["Offset of field: dai_Resize::width"][::std::mem::offset_of!(dai_Resize, width) - 8usize];
    ["Offset of field: dai_Resize::height"][::std::mem::offset_of!(dai_Resize, height) - 12usize];
    ["Offset of field: dai_Resize::normalized"]
        [::std::mem::offset_of!(dai_Resize, normalized) - 16usize];
    ["Offset of field: dai_Resize::mode"][::std::mem::offset_of!(dai_Resize, mode) - 20usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Flip {
    pub _base: dai_OpBase,
    pub direction: dai_Flip_Direction,
    pub center: bool,
}
pub const dai_Flip_Direction_HORIZONTAL: dai_Flip_Direction = 0;
pub const dai_Flip_Direction_VERTICAL: dai_Flip_Direction = 1;
pub type dai_Flip_Direction = ::std::os::raw::c_uint;
pub type dai_Flip_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Flip"][::std::mem::size_of::<dai_Flip>() - 16usize];
    ["Alignment of dai_Flip"][::std::mem::align_of::<dai_Flip>() - 8usize];
    ["Offset of field: dai_Flip::direction"][::std::mem::offset_of!(dai_Flip, direction) - 8usize];
    ["Offset of field: dai_Flip::center"][::std::mem::offset_of!(dai_Flip, center) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Affine {
    pub _base: dai_OpBase,
    pub matrix: __BindgenOpaqueArray<u32, 4usize>,
}
pub type dai_Affine_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Affine"][::std::mem::size_of::<dai_Affine>() - 24usize];
    ["Alignment of dai_Affine"][::std::mem::align_of::<dai_Affine>() - 8usize];
    ["Offset of field: dai_Affine::matrix"][::std::mem::offset_of!(dai_Affine, matrix) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Perspective {
    pub _base: dai_OpBase,
    pub matrix: __BindgenOpaqueArray<u32, 9usize>,
}
pub type dai_Perspective_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Perspective"][::std::mem::size_of::<dai_Perspective>() - 48usize];
    ["Alignment of dai_Perspective"][::std::mem::align_of::<dai_Perspective>() - 8usize];
    ["Offset of field: dai_Perspective::matrix"]
        [::std::mem::offset_of!(dai_Perspective, matrix) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_FourPoints {
    pub _base: dai_OpBase,
    pub src: __BindgenOpaqueArray<u32, 12usize>,
    pub dst: __BindgenOpaqueArray<u32, 12usize>,
    pub normalized: bool,
}
pub type dai_FourPoints_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_FourPoints"][::std::mem::size_of::<dai_FourPoints>() - 112usize];
    ["Alignment of dai_FourPoints"][::std::mem::align_of::<dai_FourPoints>() - 8usize];
    ["Offset of field: dai_FourPoints::src"][::std::mem::offset_of!(dai_FourPoints, src) - 8usize];
    ["Offset of field: dai_FourPoints::dst"][::std::mem::offset_of!(dai_FourPoints, dst) - 56usize];
    ["Offset of field: dai_FourPoints::normalized"]
        [::std::mem::offset_of!(dai_FourPoints, normalized) - 104usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_Crop {
    pub _base: dai_OpBase,
    pub width: f32,
    pub height: f32,
    pub normalized: bool,
    pub center: bool,
}
pub type dai_Crop_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Crop"][::std::mem::size_of::<dai_Crop>() - 24usize];
    ["Alignment of dai_Crop"][::std::mem::align_of::<dai_Crop>() - 8usize];
    ["Offset of field: dai_Crop::width"][::std::mem::offset_of!(dai_Crop, width) - 8usize];
    ["Offset of field: dai_Crop::height"][::std::mem::offset_of!(dai_Crop, height) - 12usize];
    ["Offset of field: dai_Crop::normalized"]
        [::std::mem::offset_of!(dai_Crop, normalized) - 16usize];
    ["Offset of field: dai_Crop::center"][::std::mem::offset_of!(dai_Crop, center) - 17usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct dai_ManipOp {
    pub op: std_variant,
}
pub type dai_ManipOp_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ManipOp"][::std::mem::size_of::<dai_ManipOp>() - 120usize];
    ["Alignment of dai_ManipOp"][::std::mem::align_of::<dai_ManipOp>() - 8usize];
    ["Offset of field: dai_ManipOp::op"][::std::mem::offset_of!(dai_ManipOp, op) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImageManipOpsEnums {
    pub _address: u8,
}
pub const dai_ImageManipOpsEnums_Background_COLOR: dai_ImageManipOpsEnums_Background = 0;
pub type dai_ImageManipOpsEnums_Background = u8;
pub const dai_ImageManipOpsEnums_ResizeMode_NONE: dai_ImageManipOpsEnums_ResizeMode = 0;
pub const dai_ImageManipOpsEnums_ResizeMode_STRETCH: dai_ImageManipOpsEnums_ResizeMode = 1;
pub const dai_ImageManipOpsEnums_ResizeMode_LETTERBOX: dai_ImageManipOpsEnums_ResizeMode = 2;
pub const dai_ImageManipOpsEnums_ResizeMode_CENTER_CROP: dai_ImageManipOpsEnums_ResizeMode = 3;
pub type dai_ImageManipOpsEnums_ResizeMode = u8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImageManipOpsEnums"][::std::mem::size_of::<dai_ImageManipOpsEnums>() - 1usize];
    ["Alignment of dai_ImageManipOpsEnums"]
        [::std::mem::align_of::<dai_ImageManipOpsEnums>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ImageManipOpsBase<C> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<C>>,
    pub outputWidth: u32,
    pub outputHeight: u32,
    pub center: bool,
    pub resizeMode: dai_ImageManipOpsEnums_ResizeMode,
    pub background: dai_ImageManipOpsEnums_Background,
    pub backgroundR: u32,
    pub backgroundG: u32,
    pub backgroundB: u32,
    pub colormap: dai_Colormap,
    pub undistort: bool,
    pub operations: C,
}
pub type dai_ImageManipOpsBase_NOP__MEMBERS = nop_MemberList;
#[doc = " ImageManipConfig message. Specifies image manipulation options like:\n\n  - Crop\n\n  - Resize\n\n  - Warp\n\n  - ..."]
#[repr(C)]
pub struct dai_ImageManipConfig {
    pub _base: dai_Buffer,
    pub base: dai_ImageManipOpsBase<dai_ImageManipConfig_Container>,
    pub outputFrameType: dai_ImgFrame_Type,
    pub reusePreviousImage: bool,
    pub skipCurrentImage: bool,
}
pub type dai_ImageManipConfig_Container = std_vector;
pub use self::dai_ImageManipOpsEnums_ResizeMode as dai_ImageManipConfig_ResizeMode;
pub type dai_ImageManipConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImageManipConfig"][::std::mem::size_of::<dai_ImageManipConfig>() - 128usize];
    ["Alignment of dai_ImageManipConfig"][::std::mem::align_of::<dai_ImageManipConfig>() - 8usize];
    ["Offset of field: dai_ImageManipConfig::base"]
        [::std::mem::offset_of!(dai_ImageManipConfig, base) - 64usize];
    ["Offset of field: dai_ImageManipConfig::outputFrameType"]
        [::std::mem::offset_of!(dai_ImageManipConfig, outputFrameType) - 120usize];
    ["Offset of field: dai_ImageManipConfig::reusePreviousImage"]
        [::std::mem::offset_of!(dai_ImageManipConfig, reusePreviousImage) - 124usize];
    ["Offset of field: dai_ImageManipConfig::skipCurrentImage"]
        [::std::mem::offset_of!(dai_ImageManipConfig, skipCurrentImage) - 125usize];
};
unsafe extern "C" {
    #[doc = " Removes all operations from the list (does not affect output configuration)"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig8clearOpsEv"]
    pub fn dai_ImageManipConfig_clearOps(
        this: *mut dai_ImageManipConfig,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Crops the image to the specified rectangle\n @param x X coordinate of the top-left corner\n @param y Y coordinate of the top-left corner\n @param w Width of the rectangle\n @param h Height of the rectangle"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig7addCropEjjjj"]
    pub fn dai_ImageManipConfig_addCrop(
        this: *mut dai_ImageManipConfig,
        x: u32,
        y: u32,
        w: u32,
        h: u32,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Crops the image to the specified rectangle\n @param rect Rect to crop\n @param normalizedCoords If true, the coordinates are normalized to range [0, 1] where 1 maps to the width/height of the image"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig7addCropENS_4RectEb"]
    pub fn dai_ImageManipConfig_addCrop1(
        this: *mut dai_ImageManipConfig,
        rect: dai_Rect,
        normalizedCoords: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Crops the image to the specified (rotated) rectangle\n @param rect RotatedRect to crop\n @param normalizedCoords If true, the coordinates are normalized to range [0, 1] where 1 maps to the width/height of the image"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig18addCropRotatedRectENS_11RotatedRectEb"]
    pub fn dai_ImageManipConfig_addCropRotatedRect(
        this: *mut dai_ImageManipConfig,
        rotatedRect: dai_RotatedRect,
        normalizedCoords: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Rescales the image using the specified factors\n @param scaleX Scale factor for the X axis\n @param scaleY Scale factor for the Y axis. If not specified, scaleY is set to the same value as scaleX"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig8addScaleEff"]
    pub fn dai_ImageManipConfig_addScale(
        this: *mut dai_ImageManipConfig,
        scaleX: f32,
        scaleY: f32,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Rotates the image around its center by the specified angle in degrees\n @param angle Angle in radians"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig12addRotateDegEf"]
    pub fn dai_ImageManipConfig_addRotateDeg(
        this: *mut dai_ImageManipConfig,
        angle: f32,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Rotates the image around the specified point by the specified angle in degrees\n @param angle Angle in radians\n @param center Center of the rotation using normalized coordinates"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig12addRotateDegEfNS_7Point2fE"]
    pub fn dai_ImageManipConfig_addRotateDeg1(
        this: *mut dai_ImageManipConfig,
        angle: f32,
        center: dai_Point2f,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Flips the image horizontally"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig17addFlipHorizontalEv"]
    pub fn dai_ImageManipConfig_addFlipHorizontal(
        this: *mut dai_ImageManipConfig,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Flips the image vertically"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig15addFlipVerticalEv"]
    pub fn dai_ImageManipConfig_addFlipVertical(
        this: *mut dai_ImageManipConfig,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Applies an affine transformation to the image\n @param matrix an array containing a 2x2 matrix representing the affine transformation"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig18addTransformAffineESt5arrayIfLm4EE"]
    pub fn dai_ImageManipConfig_addTransformAffine(
        this: *mut dai_ImageManipConfig,
        matrix: __BindgenOpaqueArray<u32, 4usize>,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Applies a perspective transformation to the image\n @param matrix an array containing a 3x3 matrix representing the perspective transformation"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig23addTransformPerspectiveESt5arrayIfLm9EE"]
    pub fn dai_ImageManipConfig_addTransformPerspective(
        this: *mut dai_ImageManipConfig,
        matrix: __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Applies a perspective transformation to the image\n @param src Source points\n @param dst Destination points\n @param normalizedCoords If true, the coordinates are normalized to range [0, 1] where 1 maps to the width/height of the image"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig22addTransformFourPointsESt5arrayINS_7Point2fELm4EES3_b"]
    pub fn dai_ImageManipConfig_addTransformFourPoints(
        this: *mut dai_ImageManipConfig,
        src: __BindgenOpaqueArray<u32, 12usize>,
        dst: __BindgenOpaqueArray<u32, 12usize>,
        normalizedCoords: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Sets the output size of the image\n @param w Width of the output image\n @param h Height of the output image\n @param mode Resize mode. NONE - no resize, STRETCH - stretch to fit, LETTERBOX - keep aspect ratio and pad with background color, CENTER_CROP - keep\n aspect ratio and crop"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig13setOutputSizeEjjNS_18ImageManipOpsEnums10ResizeModeE"]
    pub fn dai_ImageManipConfig_setOutputSize(
        this: *mut dai_ImageManipConfig,
        w: u32,
        h: u32,
        mode: dai_ImageManipConfig_ResizeMode,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Centers the content in the output image without resizing\n @param c True to center the content, false otherwise"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig15setOutputCenterEb"]
    pub fn dai_ImageManipConfig_setOutputCenter(
        this: *mut dai_ImageManipConfig,
        c: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Sets the colormap to be applied to a grayscale image\n @param colormap Colormap type to be applied"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig11setColormapENS_8ColormapE"]
    pub fn dai_ImageManipConfig_setColormap(
        this: *mut dai_ImageManipConfig,
        colormap: dai_Colormap,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Sets the rgb background color of the output image\n @param red Red component of the background color\n @param green Green component of the background color\n @param blue Blue component of the background color"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig18setBackgroundColorEjjj"]
    pub fn dai_ImageManipConfig_setBackgroundColor(
        this: *mut dai_ImageManipConfig,
        red: u32,
        green: u32,
        blue: u32,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Sets the grayscale background color of the output image\n @param val Grayscale value of the background color"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig18setBackgroundColorEj"]
    pub fn dai_ImageManipConfig_setBackgroundColor1(
        this: *mut dai_ImageManipConfig,
        val: u32,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Sets the frame type of the output image\n @param frameType Frame type of the output image"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig12setFrameTypeENS_8ImgFrame4TypeE"]
    pub fn dai_ImageManipConfig_setFrameType(
        this: *mut dai_ImageManipConfig,
        frameType: dai_ImgFrame_Type,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Sets the undistort flag"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig12setUndistortEb"]
    pub fn dai_ImageManipConfig_setUndistort(
        this: *mut dai_ImageManipConfig,
        undistort: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Gets the undistort flag\n @returns True if undistort is enabled, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai16ImageManipConfig12getUndistortEv"]
    pub fn dai_ImageManipConfig_getUndistort(this: *const dai_ImageManipConfig) -> bool;
}
unsafe extern "C" {
    #[doc = " Instruct ImageManip to not remove current image from its queue and use the same for next message.\n @param reuse True to enable reuse, false otherwise"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig21setReusePreviousImageEb"]
    pub fn dai_ImageManipConfig_setReusePreviousImage(
        this: *mut dai_ImageManipConfig,
        reuse: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Instructs ImageManip to skip current image and wait for next in queue.\n @param skip True to skip current image, false otherwise"]
    #[link_name = "\u{1}_ZN3dai16ImageManipConfig19setSkipCurrentImageEb"]
    pub fn dai_ImageManipConfig_setSkipCurrentImage(
        this: *mut dai_ImageManipConfig,
        skip: bool,
    ) -> *mut dai_ImageManipConfig;
}
unsafe extern "C" {
    #[doc = " Instruct ImageManip to not remove current image from its queue and use the same for next message.\n @returns True to enable reuse, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai16ImageManipConfig21getReusePreviousImageEv"]
    pub fn dai_ImageManipConfig_getReusePreviousImage(this: *const dai_ImageManipConfig) -> bool;
}
unsafe extern "C" {
    #[doc = " Instructs ImageManip to skip current image and wait for next in queue.\n @returns True to skip current image, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai16ImageManipConfig19getSkipCurrentImageEv"]
    pub fn dai_ImageManipConfig_getSkipCurrentImage(this: *const dai_ImageManipConfig) -> bool;
}
impl dai_ImageManipConfig {
    #[inline]
    pub unsafe fn clearOps(&mut self) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_clearOps(self)
    }
    #[inline]
    pub unsafe fn addCrop(&mut self, x: u32, y: u32, w: u32, h: u32) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addCrop(self, x, y, w, h)
    }
    #[inline]
    pub unsafe fn addCrop1(
        &mut self,
        rect: dai_Rect,
        normalizedCoords: bool,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addCrop1(self, rect, normalizedCoords)
    }
    #[inline]
    pub unsafe fn addCropRotatedRect(
        &mut self,
        rotatedRect: dai_RotatedRect,
        normalizedCoords: bool,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addCropRotatedRect(self, rotatedRect, normalizedCoords)
    }
    #[inline]
    pub unsafe fn addScale(&mut self, scaleX: f32, scaleY: f32) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addScale(self, scaleX, scaleY)
    }
    #[inline]
    pub unsafe fn addRotateDeg(&mut self, angle: f32) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addRotateDeg(self, angle)
    }
    #[inline]
    pub unsafe fn addRotateDeg1(
        &mut self,
        angle: f32,
        center: dai_Point2f,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addRotateDeg1(self, angle, center)
    }
    #[inline]
    pub unsafe fn addFlipHorizontal(&mut self) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addFlipHorizontal(self)
    }
    #[inline]
    pub unsafe fn addFlipVertical(&mut self) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addFlipVertical(self)
    }
    #[inline]
    pub unsafe fn addTransformAffine(
        &mut self,
        matrix: __BindgenOpaqueArray<u32, 4usize>,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addTransformAffine(self, matrix)
    }
    #[inline]
    pub unsafe fn addTransformPerspective(
        &mut self,
        matrix: __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addTransformPerspective(self, matrix)
    }
    #[inline]
    pub unsafe fn addTransformFourPoints(
        &mut self,
        src: __BindgenOpaqueArray<u32, 12usize>,
        dst: __BindgenOpaqueArray<u32, 12usize>,
        normalizedCoords: bool,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_addTransformFourPoints(self, src, dst, normalizedCoords)
    }
    #[inline]
    pub unsafe fn setOutputSize(
        &mut self,
        w: u32,
        h: u32,
        mode: dai_ImageManipConfig_ResizeMode,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setOutputSize(self, w, h, mode)
    }
    #[inline]
    pub unsafe fn setOutputCenter(&mut self, c: bool) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setOutputCenter(self, c)
    }
    #[inline]
    pub unsafe fn setColormap(&mut self, colormap: dai_Colormap) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setColormap(self, colormap)
    }
    #[inline]
    pub unsafe fn setBackgroundColor(
        &mut self,
        red: u32,
        green: u32,
        blue: u32,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setBackgroundColor(self, red, green, blue)
    }
    #[inline]
    pub unsafe fn setBackgroundColor1(&mut self, val: u32) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setBackgroundColor1(self, val)
    }
    #[inline]
    pub unsafe fn setFrameType(
        &mut self,
        frameType: dai_ImgFrame_Type,
    ) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setFrameType(self, frameType)
    }
    #[inline]
    pub unsafe fn setUndistort(&mut self, undistort: bool) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setUndistort(self, undistort)
    }
    #[inline]
    pub unsafe fn getUndistort(&self) -> bool {
        dai_ImageManipConfig_getUndistort(self)
    }
    #[inline]
    pub unsafe fn setReusePreviousImage(&mut self, reuse: bool) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setReusePreviousImage(self, reuse)
    }
    #[inline]
    pub unsafe fn setSkipCurrentImage(&mut self, skip: bool) -> *mut dai_ImageManipConfig {
        dai_ImageManipConfig_setSkipCurrentImage(self, skip)
    }
    #[inline]
    pub unsafe fn getReusePreviousImage(&self) -> bool {
        dai_ImageManipConfig_getReusePreviousImage(self)
    }
    #[inline]
    pub unsafe fn getSkipCurrentImage(&self) -> bool {
        dai_ImageManipConfig_getSkipCurrentImage(self)
    }
}
#[doc = " Specify properties for ImageManip"]
#[repr(C)]
pub struct dai_ImageManipProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Initial configuration for ImageManip node"]
    pub initialConfig: dai_ImageManipConfig,
    #[doc = " Maximum output frame size in bytes (eg: 300x300 BGR image -> 300*300*3 bytes)"]
    pub outputFrameSize: ::std::os::raw::c_int,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Using HW backend can cause some unexpected behavior when using multiple ImageManip nodes in series"]
    pub backend: dai_ImageManipProperties_Backend,
    pub performanceMode: dai_ImageManipProperties_PerformanceMode,
}
pub const dai_ImageManipProperties_Backend_CPU: dai_ImageManipProperties_Backend = 0;
pub const dai_ImageManipProperties_Backend_HW: dai_ImageManipProperties_Backend = 1;
#[doc = " Enable hardware accelerated image manipulation if set to HW. Only applied on RVC4.\n This can cause some unexpected behavior when using multiple ImageManip nodes in series.\n Currently, the only operation affected is downscaling."]
pub type dai_ImageManipProperties_Backend = u8;
pub const dai_ImageManipProperties_PerformanceMode_PERFORMANCE:
    dai_ImageManipProperties_PerformanceMode = 0;
pub const dai_ImageManipProperties_PerformanceMode_BALANCED:
    dai_ImageManipProperties_PerformanceMode = 1;
pub const dai_ImageManipProperties_PerformanceMode_LOW_POWER:
    dai_ImageManipProperties_PerformanceMode = 2;
#[doc = " Set performance mode for ImageManip with a tradeoff between performance and power consumption. Only applied on RVC4.\n This only affects scaling NV12 and GRAY images.\n  - PERFORMANCE: High performance, high power consumption. Uses the OpenCV backend.\n  - BALANCED: Balanced performance and power consumption. Uses the FastCV backend configured for high performance where possible with a fallback to\n OpenCV.\n  - LOW_POWER: Low performance, low power consumption. Uses the FastCV backend configured for low power where possible with a fallback to OpenCV."]
pub type dai_ImageManipProperties_PerformanceMode = u8;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImageManipProperties"]
        [::std::mem::size_of::<dai_ImageManipProperties>() - 152usize];
    ["Alignment of dai_ImageManipProperties"]
        [::std::mem::align_of::<dai_ImageManipProperties>() - 8usize];
    ["Offset of field: dai_ImageManipProperties::initialConfig"]
        [::std::mem::offset_of!(dai_ImageManipProperties, initialConfig) - 8usize];
    ["Offset of field: dai_ImageManipProperties::outputFrameSize"]
        [::std::mem::offset_of!(dai_ImageManipProperties, outputFrameSize) - 136usize];
    ["Offset of field: dai_ImageManipProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_ImageManipProperties, numFramesPool) - 140usize];
    ["Offset of field: dai_ImageManipProperties::backend"]
        [::std::mem::offset_of!(dai_ImageManipProperties, backend) - 144usize];
    ["Offset of field: dai_ImageManipProperties::performanceMode"]
        [::std::mem::offset_of!(dai_ImageManipProperties, performanceMode) - 145usize];
};
#[doc = " MessageDemux does not have any properties to set"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_MessageDemuxProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub dummy: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_MessageDemuxProperties"]
        [::std::mem::size_of::<dai_MessageDemuxProperties>() - 16usize];
    ["Alignment of dai_MessageDemuxProperties"]
        [::std::mem::align_of::<dai_MessageDemuxProperties>() - 8usize];
    ["Offset of field: dai_MessageDemuxProperties::dummy"]
        [::std::mem::offset_of!(dai_MessageDemuxProperties, dummy) - 8usize];
};
#[doc = " Specify properties for MonoCamera such as camera ID, ..."]
#[repr(C)]
pub struct dai_MonoCameraProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub initialControl: dai_CameraControl,
    #[doc = " Which socket will mono camera use"]
    pub boardSocket: dai_CameraBoardSocket,
    #[doc = " Which camera name will mono camera use"]
    pub cameraName: std_string,
    #[doc = " Camera sensor image orientation / pixel readout"]
    pub imageOrientation: dai_CameraImageOrientation,
    #[doc = " Select the camera sensor resolution"]
    pub resolution: dai_MonoCameraProperties_SensorResolution,
    #[doc = " Select the mock isp width. Overrides resolutionWidth/height if mockIsp is connected."]
    pub mockIspWidth: i32,
    #[doc = " Select the mock isp height. Overrides resolutionWidth/height if mockIsp is connected."]
    pub mockIspHeight: i32,
    #[doc = " Camera sensor FPS"]
    pub fps: f32,
    #[doc = " Isp 3A rate (auto focus, auto exposure, auto white balance, camera controls etc.).\n Default (0) matches the camera FPS, meaning that 3A is running on each frame.\n Reducing the rate of 3A reduces the CPU usage on CSS, but also increases the convergence rate of 3A.\n Note that camera controls will be processed at this rate. E.g. if camera is running at 30 fps, and camera control is sent at every frame,\n but 3A fps is set to 15, the camera control messages will be processed at 15 fps rate, which will lead to queueing.\n"]
    pub isp3aFps: ::std::os::raw::c_int,
    #[doc = " Frame pool size for the main output, ISP processed"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Frame pool size for the `raw` output"]
    pub numFramesPoolRaw: ::std::os::raw::c_int,
    #[doc = " List of events to receive, the rest will be ignored"]
    pub eventFilter: std_vector,
    #[doc = " Configures whether the camera `raw` frames are saved as MIPI-packed to memory.\n The packed format is more efficient, consuming less memory on device, and less data\n to send to host: RAW10: 4 pixels saved on 5 bytes, RAW12: 2 pixels saved on 3 bytes.\n When packing is disabled (`false`), data is saved lsb-aligned, e.g. a RAW10 pixel\n will be stored as uint16, on bits 9..0: 0b0000'00pp'pppp'pppp.\n Default is auto: enabled for standard color/monochrome cameras where ISP can work\n with both packed/unpacked, but disabled for other cameras like ToF."]
    pub rawPacked: std_optional,
}
pub const dai_MonoCameraProperties_SensorResolution_THE_720_P:
    dai_MonoCameraProperties_SensorResolution = 0;
pub const dai_MonoCameraProperties_SensorResolution_THE_800_P:
    dai_MonoCameraProperties_SensorResolution = 1;
pub const dai_MonoCameraProperties_SensorResolution_THE_400_P:
    dai_MonoCameraProperties_SensorResolution = 2;
pub const dai_MonoCameraProperties_SensorResolution_THE_480_P:
    dai_MonoCameraProperties_SensorResolution = 3;
pub const dai_MonoCameraProperties_SensorResolution_THE_1200_P:
    dai_MonoCameraProperties_SensorResolution = 4;
pub const dai_MonoCameraProperties_SensorResolution_THE_4000X3000:
    dai_MonoCameraProperties_SensorResolution = 5;
pub const dai_MonoCameraProperties_SensorResolution_THE_4224X3136:
    dai_MonoCameraProperties_SensorResolution = 6;
#[doc = " Select the camera sensor resolution: 1280×720, 1280×800, 640×400, 640×480, 1920×1200, ..."]
pub type dai_MonoCameraProperties_SensorResolution = i32;
pub const dai_MonoCameraProperties_AUTO: ::std::os::raw::c_int = -1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_MonoCameraProperties"]
        [::std::mem::size_of::<dai_MonoCameraProperties>() - 304usize];
    ["Alignment of dai_MonoCameraProperties"]
        [::std::mem::align_of::<dai_MonoCameraProperties>() - 8usize];
    ["Offset of field: dai_MonoCameraProperties::initialControl"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, initialControl) - 8usize];
    ["Offset of field: dai_MonoCameraProperties::boardSocket"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, boardSocket) - 200usize];
    ["Offset of field: dai_MonoCameraProperties::cameraName"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, cameraName) - 208usize];
    ["Offset of field: dai_MonoCameraProperties::imageOrientation"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, imageOrientation) - 240usize];
    ["Offset of field: dai_MonoCameraProperties::resolution"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, resolution) - 244usize];
    ["Offset of field: dai_MonoCameraProperties::mockIspWidth"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, mockIspWidth) - 248usize];
    ["Offset of field: dai_MonoCameraProperties::mockIspHeight"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, mockIspHeight) - 252usize];
    ["Offset of field: dai_MonoCameraProperties::fps"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, fps) - 256usize];
    ["Offset of field: dai_MonoCameraProperties::isp3aFps"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, isp3aFps) - 260usize];
    ["Offset of field: dai_MonoCameraProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, numFramesPool) - 264usize];
    ["Offset of field: dai_MonoCameraProperties::numFramesPoolRaw"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, numFramesPoolRaw) - 268usize];
    ["Offset of field: dai_MonoCameraProperties::eventFilter"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, eventFilter) - 272usize];
    ["Offset of field: dai_MonoCameraProperties::rawPacked"]
        [::std::mem::offset_of!(dai_MonoCameraProperties, rawPacked) - 296usize];
};
#[repr(C)]
pub struct dai_ImgDetection {
    pub label: u32,
    pub labelName: std_string,
    pub confidence: f32,
    pub xmin: f32,
    pub ymin: f32,
    pub xmax: f32,
    pub ymax: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgDetection"][::std::mem::size_of::<dai_ImgDetection>() - 64usize];
    ["Alignment of dai_ImgDetection"][::std::mem::align_of::<dai_ImgDetection>() - 8usize];
    ["Offset of field: dai_ImgDetection::label"]
        [::std::mem::offset_of!(dai_ImgDetection, label) - 0usize];
    ["Offset of field: dai_ImgDetection::labelName"]
        [::std::mem::offset_of!(dai_ImgDetection, labelName) - 8usize];
    ["Offset of field: dai_ImgDetection::confidence"]
        [::std::mem::offset_of!(dai_ImgDetection, confidence) - 40usize];
    ["Offset of field: dai_ImgDetection::xmin"]
        [::std::mem::offset_of!(dai_ImgDetection, xmin) - 44usize];
    ["Offset of field: dai_ImgDetection::ymin"]
        [::std::mem::offset_of!(dai_ImgDetection, ymin) - 48usize];
    ["Offset of field: dai_ImgDetection::xmax"]
        [::std::mem::offset_of!(dai_ImgDetection, xmax) - 52usize];
    ["Offset of field: dai_ImgDetection::ymax"]
        [::std::mem::offset_of!(dai_ImgDetection, ymax) - 56usize];
};
#[doc = " ImgDetections message. Carries normalized detection results"]
#[repr(C)]
pub struct dai_ImgDetections {
    pub _base: dai_Buffer,
    pub _base_1: dai_ProtoSerializable,
    #[doc = " Detections"]
    pub detections: std_vector,
    pub transformation: std_optional,
}
pub type dai_ImgDetections_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImgDetections"][::std::mem::size_of::<dai_ImgDetections>() - 400usize];
    ["Alignment of dai_ImgDetections"][::std::mem::align_of::<dai_ImgDetections>() - 8usize];
    ["Offset of field: dai_ImgDetections::detections"]
        [::std::mem::offset_of!(dai_ImgDetections, detections) - 72usize];
    ["Offset of field: dai_ImgDetections::transformation"]
        [::std::mem::offset_of!(dai_ImgDetections, transformation) - 96usize];
};
#[doc = " Tracklet structure\n\n Contains tracklets from object tracker output."]
#[repr(C)]
pub struct dai_Tracklet {
    #[doc = " Tracked region of interest."]
    pub roi: dai_Rect,
    #[doc = " Tracklet's ID."]
    pub id: ::std::os::raw::c_int,
    #[doc = " Tracklet's label ID."]
    pub label: ::std::os::raw::c_int,
    #[doc = " Number of frames it is being tracked for."]
    pub age: ::std::os::raw::c_int,
    #[doc = " Status of tracklet."]
    pub status: dai_Tracklet_TrackingStatus,
    #[doc = " Image detection that is tracked."]
    pub srcImgDetection: dai_ImgDetection,
    #[doc = " Spatial coordinates of tracklet."]
    pub spatialCoordinates: dai_Point3f,
}
#[doc = "< The object is newly added."]
pub const dai_Tracklet_TrackingStatus_NEW: dai_Tracklet_TrackingStatus = 0;
#[doc = "< The object is being tracked."]
pub const dai_Tracklet_TrackingStatus_TRACKED: dai_Tracklet_TrackingStatus = 1;
#[doc = "< The object gets lost now. The object can be tracked again automatically(long term tracking) or by specifying detected object manually(short\nterm and zero term tracking)."]
pub const dai_Tracklet_TrackingStatus_LOST: dai_Tracklet_TrackingStatus = 2;
#[doc = "< The object is removed."]
pub const dai_Tracklet_TrackingStatus_REMOVED: dai_Tracklet_TrackingStatus = 3;
pub type dai_Tracklet_TrackingStatus = ::std::os::raw::c_int;
pub type dai_Tracklet_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Tracklet"][::std::mem::size_of::<dai_Tracklet>() - 120usize];
    ["Alignment of dai_Tracklet"][::std::mem::align_of::<dai_Tracklet>() - 8usize];
    ["Offset of field: dai_Tracklet::roi"][::std::mem::offset_of!(dai_Tracklet, roi) - 0usize];
    ["Offset of field: dai_Tracklet::id"][::std::mem::offset_of!(dai_Tracklet, id) - 20usize];
    ["Offset of field: dai_Tracklet::label"][::std::mem::offset_of!(dai_Tracklet, label) - 24usize];
    ["Offset of field: dai_Tracklet::age"][::std::mem::offset_of!(dai_Tracklet, age) - 28usize];
    ["Offset of field: dai_Tracklet::status"]
        [::std::mem::offset_of!(dai_Tracklet, status) - 32usize];
    ["Offset of field: dai_Tracklet::srcImgDetection"]
        [::std::mem::offset_of!(dai_Tracklet, srcImgDetection) - 40usize];
    ["Offset of field: dai_Tracklet::spatialCoordinates"]
        [::std::mem::offset_of!(dai_Tracklet, spatialCoordinates) - 104usize];
};
#[doc = " Tracklets message. Carries object tracking information."]
#[repr(C)]
pub struct dai_Tracklets {
    pub _base: dai_Buffer,
    #[doc = " Retrieve data for Tracklets.\n @returns Vector of object tracker data, carrying tracking information."]
    pub tracklets: std_vector,
}
pub type dai_Tracklets_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Tracklets"][::std::mem::size_of::<dai_Tracklets>() - 88usize];
    ["Alignment of dai_Tracklets"][::std::mem::align_of::<dai_Tracklets>() - 8usize];
    ["Offset of field: dai_Tracklets::tracklets"]
        [::std::mem::offset_of!(dai_Tracklets, tracklets) - 64usize];
};
#[doc = " Kernelized Correlation Filter tracking"]
pub const dai_TrackerType_SHORT_TERM_KCF: dai_TrackerType = 1;
#[doc = " Short term tracking without using image data"]
pub const dai_TrackerType_SHORT_TERM_IMAGELESS: dai_TrackerType = 3;
#[doc = " Ability to track the objects without accessing image data."]
pub const dai_TrackerType_ZERO_TERM_IMAGELESS: dai_TrackerType = 5;
#[doc = " Tracking using image data too."]
pub const dai_TrackerType_ZERO_TERM_COLOR_HISTOGRAM: dai_TrackerType = 6;
pub type dai_TrackerType = ::std::os::raw::c_int;
#[doc = " Always take a new, unique ID"]
pub const dai_TrackerIdAssignmentPolicy_UNIQUE_ID: dai_TrackerIdAssignmentPolicy = 0;
#[doc = " Take the smallest available ID"]
pub const dai_TrackerIdAssignmentPolicy_SMALLEST_ID: dai_TrackerIdAssignmentPolicy = 1;
pub type dai_TrackerIdAssignmentPolicy = ::std::os::raw::c_int;
#[doc = " Specify properties for ObjectTracker"]
#[repr(C)]
pub struct dai_ObjectTrackerProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Confidence threshold for tracklets.\n Above this threshold detections will be tracked.\n Default 0, all detections are tracked."]
    pub trackerThreshold: f32,
    #[doc = " Maximum number of objects to track.\n Maximum 60 for SHORT_TERM_KCF, maximum 1000 for other tracking methods.\n Default 60."]
    pub maxObjectsToTrack: ::std::os::raw::c_int,
    #[doc = " Which detections labels to track.\n Default all labels are tracked."]
    pub detectionLabelsToTrack: std_vector,
    #[doc = " Tracking method."]
    pub trackerType: dai_TrackerType,
    #[doc = " New ID assignment policy."]
    pub trackerIdAssignmentPolicy: dai_TrackerIdAssignmentPolicy,
    #[doc = " Whether tracker should take into consideration class label for tracking."]
    pub trackingPerClass: bool,
    #[doc = " Occlusion ratio threshold. Used to filter out overlapping tracklets."]
    pub occlusionRatioThreshold: f32,
    #[doc = " Tracklet lifespan in number of frames. Number of frames after which a LOST tracklet is removed."]
    pub trackletMaxLifespan: u32,
    #[doc = " Tracklet birth threshold. Minimum consecutive tracked frames required to consider a tracklet as a new instance."]
    pub trackletBirthThreshold: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ObjectTrackerProperties"]
        [::std::mem::size_of::<dai_ObjectTrackerProperties>() - 64usize];
    ["Alignment of dai_ObjectTrackerProperties"]
        [::std::mem::align_of::<dai_ObjectTrackerProperties>() - 8usize];
    ["Offset of field: dai_ObjectTrackerProperties::trackerThreshold"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, trackerThreshold) - 8usize];
    ["Offset of field: dai_ObjectTrackerProperties::maxObjectsToTrack"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, maxObjectsToTrack) - 12usize];
    ["Offset of field: dai_ObjectTrackerProperties::detectionLabelsToTrack"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, detectionLabelsToTrack) - 16usize];
    ["Offset of field: dai_ObjectTrackerProperties::trackerType"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, trackerType) - 40usize];
    ["Offset of field: dai_ObjectTrackerProperties::trackerIdAssignmentPolicy"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, trackerIdAssignmentPolicy) - 44usize];
    ["Offset of field: dai_ObjectTrackerProperties::trackingPerClass"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, trackingPerClass) - 48usize];
    ["Offset of field: dai_ObjectTrackerProperties::occlusionRatioThreshold"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, occlusionRatioThreshold) - 52usize];
    ["Offset of field: dai_ObjectTrackerProperties::trackletMaxLifespan"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, trackletMaxLifespan) - 56usize];
    ["Offset of field: dai_ObjectTrackerProperties::trackletBirthThreshold"]
        [::std::mem::offset_of!(dai_ObjectTrackerProperties, trackletBirthThreshold) - 60usize];
};
#[doc = " PointCloudConfig message. Carries ROI (region of interest) and threshold for depth calculation"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_PointCloudConfig {
    pub _base: dai_Buffer,
    pub sparse: bool,
    pub transformationMatrix: __BindgenOpaqueArray<u32, 16usize>,
}
pub type dai_PointCloudConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_PointCloudConfig"][::std::mem::size_of::<dai_PointCloudConfig>() - 136usize];
    ["Alignment of dai_PointCloudConfig"][::std::mem::align_of::<dai_PointCloudConfig>() - 8usize];
    ["Offset of field: dai_PointCloudConfig::sparse"]
        [::std::mem::offset_of!(dai_PointCloudConfig, sparse) - 64usize];
    ["Offset of field: dai_PointCloudConfig::transformationMatrix"]
        [::std::mem::offset_of!(dai_PointCloudConfig, transformationMatrix) - 68usize];
};
unsafe extern "C" {
    #[doc = " Retrieve sparse point cloud calculation status.\n @returns true if sparse point cloud calculation is enabled, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai16PointCloudConfig9getSparseEv"]
    pub fn dai_PointCloudConfig_getSparse(this: *const dai_PointCloudConfig) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieve transformation matrix for point cloud calculation.\n @returns 4x4 transformation matrix"]
    #[link_name = "\u{1}_ZNK3dai16PointCloudConfig23getTransformationMatrixEv"]
    pub fn dai_PointCloudConfig_getTransformationMatrix(
        this: *const dai_PointCloudConfig,
    ) -> __BindgenOpaqueArray<u32, 16usize>;
}
unsafe extern "C" {
    #[doc = " Enable or disable sparse point cloud calculation.\n @param enable"]
    #[link_name = "\u{1}_ZN3dai16PointCloudConfig9setSparseEb"]
    pub fn dai_PointCloudConfig_setSparse(
        this: *mut dai_PointCloudConfig,
        enable: bool,
    ) -> *mut dai_PointCloudConfig;
}
unsafe extern "C" {
    #[doc = " Set 4x4 transformation matrix for point cloud calculation. Default is an identity matrix.\n @param transformationMatrix"]
    #[link_name = "\u{1}_ZN3dai16PointCloudConfig23setTransformationMatrixERKSt5arrayIS1_IfLm4EELm4EE"]
    pub fn dai_PointCloudConfig_setTransformationMatrix(
        this: *mut dai_PointCloudConfig,
        transformationMatrix: *const __BindgenOpaqueArray<u32, 16usize>,
    ) -> *mut dai_PointCloudConfig;
}
unsafe extern "C" {
    #[doc = " Set 3x3 transformation matrix for point cloud calculation. Default is an identity matrix.\n @param transformationMatrix"]
    #[link_name = "\u{1}_ZN3dai16PointCloudConfig23setTransformationMatrixERKSt5arrayIS1_IfLm3EELm3EE"]
    pub fn dai_PointCloudConfig_setTransformationMatrix1(
        this: *mut dai_PointCloudConfig,
        transformationMatrix: *const __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_PointCloudConfig;
}
impl dai_PointCloudConfig {
    #[inline]
    pub unsafe fn getSparse(&self) -> bool {
        dai_PointCloudConfig_getSparse(self)
    }
    #[inline]
    pub unsafe fn getTransformationMatrix(&self) -> __BindgenOpaqueArray<u32, 16usize> {
        dai_PointCloudConfig_getTransformationMatrix(self)
    }
    #[inline]
    pub unsafe fn setSparse(&mut self, enable: bool) -> *mut dai_PointCloudConfig {
        dai_PointCloudConfig_setSparse(self, enable)
    }
    #[inline]
    pub unsafe fn setTransformationMatrix(
        &mut self,
        transformationMatrix: *const __BindgenOpaqueArray<u32, 16usize>,
    ) -> *mut dai_PointCloudConfig {
        dai_PointCloudConfig_setTransformationMatrix(self, transformationMatrix)
    }
    #[inline]
    pub unsafe fn setTransformationMatrix1(
        &mut self,
        transformationMatrix: *const __BindgenOpaqueArray<u32, 9usize>,
    ) -> *mut dai_PointCloudConfig {
        dai_PointCloudConfig_setTransformationMatrix1(self, transformationMatrix)
    }
}
#[doc = " Specify properties for PointCloud"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_PointCloudProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub initialConfig: dai_PointCloudConfig,
    pub numFramesPool: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_PointCloudProperties"]
        [::std::mem::size_of::<dai_PointCloudProperties>() - 152usize];
    ["Alignment of dai_PointCloudProperties"]
        [::std::mem::align_of::<dai_PointCloudProperties>() - 8usize];
    ["Offset of field: dai_PointCloudProperties::initialConfig"]
        [::std::mem::offset_of!(dai_PointCloudProperties, initialConfig) - 8usize];
    ["Offset of field: dai_PointCloudProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_PointCloudProperties, numFramesPool) - 144usize];
};
#[doc = " Properties for SPIIn node"]
#[repr(C)]
pub struct dai_SPIInProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Name of stream"]
    pub streamName: std_string,
    #[doc = " SPI bus to use"]
    pub busId: ::std::os::raw::c_int,
    #[doc = " Maximum input data size"]
    pub maxDataSize: ::std::os::raw::c_uint,
    #[doc = " Number of frames in pool"]
    pub numFrames: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SPIInProperties"][::std::mem::size_of::<dai_SPIInProperties>() - 56usize];
    ["Alignment of dai_SPIInProperties"][::std::mem::align_of::<dai_SPIInProperties>() - 8usize];
    ["Offset of field: dai_SPIInProperties::streamName"]
        [::std::mem::offset_of!(dai_SPIInProperties, streamName) - 8usize];
    ["Offset of field: dai_SPIInProperties::busId"]
        [::std::mem::offset_of!(dai_SPIInProperties, busId) - 40usize];
    ["Offset of field: dai_SPIInProperties::maxDataSize"]
        [::std::mem::offset_of!(dai_SPIInProperties, maxDataSize) - 44usize];
    ["Offset of field: dai_SPIInProperties::numFrames"]
        [::std::mem::offset_of!(dai_SPIInProperties, numFrames) - 48usize];
};
#[doc = " Specify properties for SPIOut node"]
#[repr(C)]
pub struct dai_SPIOutProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Name of stream"]
    pub streamName: std_string,
    #[doc = " SPI bus to use"]
    pub busId: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SPIOutProperties"][::std::mem::size_of::<dai_SPIOutProperties>() - 48usize];
    ["Alignment of dai_SPIOutProperties"][::std::mem::align_of::<dai_SPIOutProperties>() - 8usize];
    ["Offset of field: dai_SPIOutProperties::streamName"]
        [::std::mem::offset_of!(dai_SPIOutProperties, streamName) - 8usize];
    ["Offset of field: dai_SPIOutProperties::busId"]
        [::std::mem::offset_of!(dai_SPIOutProperties, busId) - 40usize];
};
#[doc = " Specify ScriptProperties options such as script uri, script name, ..."]
#[repr(C)]
pub struct dai_ScriptProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Uri which points to actual script"]
    pub scriptUri: std_string,
    #[doc = " Name of script"]
    pub scriptName: std_string,
    #[doc = " Which processor should execute the script"]
    pub processor: dai_ProcessorType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ScriptProperties"][::std::mem::size_of::<dai_ScriptProperties>() - 80usize];
    ["Alignment of dai_ScriptProperties"][::std::mem::align_of::<dai_ScriptProperties>() - 8usize];
    ["Offset of field: dai_ScriptProperties::scriptUri"]
        [::std::mem::offset_of!(dai_ScriptProperties, scriptUri) - 8usize];
    ["Offset of field: dai_ScriptProperties::scriptName"]
        [::std::mem::offset_of!(dai_ScriptProperties, scriptName) - 40usize];
    ["Offset of field: dai_ScriptProperties::processor"]
        [::std::mem::offset_of!(dai_ScriptProperties, processor) - 72usize];
};
pub const dai_Interpolation_AUTO: dai_Interpolation = -1;
pub const dai_Interpolation_BILINEAR: dai_Interpolation = 0;
pub const dai_Interpolation_BICUBIC: dai_Interpolation = 1;
pub const dai_Interpolation_NEAREST_NEIGHBOR: dai_Interpolation = 2;
pub const dai_Interpolation_BYPASS: dai_Interpolation = 2;
pub const dai_Interpolation_DEFAULT: dai_Interpolation = 1;
pub const dai_Interpolation_DEFAULT_DISPARITY_DEPTH: dai_Interpolation = 2;
#[doc = " Interpolation type"]
pub type dai_Interpolation = ::std::os::raw::c_int;
#[doc = " ImageAlignConfig configuration structure"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_ImageAlignConfig {
    pub _base: dai_Buffer,
    #[doc = " Optional static depth plane to align to, in depth units, by default millimeters"]
    pub staticDepthPlane: u16,
}
pub type dai_ImageAlignConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImageAlignConfig"][::std::mem::size_of::<dai_ImageAlignConfig>() - 72usize];
    ["Alignment of dai_ImageAlignConfig"][::std::mem::align_of::<dai_ImageAlignConfig>() - 8usize];
    ["Offset of field: dai_ImageAlignConfig::staticDepthPlane"]
        [::std::mem::offset_of!(dai_ImageAlignConfig, staticDepthPlane) - 64usize];
};
#[doc = " Specify properties for ImageAlign"]
#[repr(C)]
pub struct dai_ImageAlignProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub initialConfig: dai_ImageAlignConfig,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Optional output width"]
    pub alignWidth: ::std::os::raw::c_int,
    #[doc = " Optional output height"]
    pub alignHeight: ::std::os::raw::c_int,
    #[doc = " Warp HW IDs to use, if empty, use auto/default"]
    pub warpHwIds: std_vector,
    #[doc = " Interpolation type to use"]
    pub interpolation: dai_ImageAlignProperties_Interpolation,
    #[doc = " Whether to keep aspect ratio of the input or not"]
    pub outKeepAspectRatio: bool,
    #[doc = " Number of shaves reserved."]
    pub numShaves: ::std::os::raw::c_int,
}
#[doc = " Interpolation type"]
pub use self::dai_Interpolation as dai_ImageAlignProperties_Interpolation;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ImageAlignProperties"]
        [::std::mem::size_of::<dai_ImageAlignProperties>() - 136usize];
    ["Alignment of dai_ImageAlignProperties"]
        [::std::mem::align_of::<dai_ImageAlignProperties>() - 8usize];
    ["Offset of field: dai_ImageAlignProperties::initialConfig"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, initialConfig) - 8usize];
    ["Offset of field: dai_ImageAlignProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, numFramesPool) - 80usize];
    ["Offset of field: dai_ImageAlignProperties::alignWidth"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, alignWidth) - 84usize];
    ["Offset of field: dai_ImageAlignProperties::alignHeight"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, alignHeight) - 88usize];
    ["Offset of field: dai_ImageAlignProperties::warpHwIds"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, warpHwIds) - 96usize];
    ["Offset of field: dai_ImageAlignProperties::interpolation"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, interpolation) - 120usize];
    ["Offset of field: dai_ImageAlignProperties::outKeepAspectRatio"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, outKeepAspectRatio) - 124usize];
    ["Offset of field: dai_ImageAlignProperties::numShaves"]
        [::std::mem::offset_of!(dai_ImageAlignProperties, numShaves) - 128usize];
};
#[doc = " StereoDepthConfig message."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_StereoDepthConfig {
    pub _base: dai_Buffer,
    #[doc = " Controls the flow of stereo algorithm - left-right check, subpixel etc."]
    pub algorithmControl: dai_StereoDepthConfig_AlgorithmControl,
    #[doc = " Controls the postprocessing of disparity and/or depth map."]
    pub postProcessing: dai_StereoDepthConfig_PostProcessing,
    #[doc = " Census transform settings."]
    pub censusTransform: dai_StereoDepthConfig_CensusTransform,
    #[doc = " Cost matching settings."]
    pub costMatching: dai_StereoDepthConfig_CostMatching,
    #[doc = " Cost aggregation settings."]
    pub costAggregation: dai_StereoDepthConfig_CostAggregation,
    #[doc = " Confidence metrics settings."]
    pub confidenceMetrics: dai_StereoDepthConfig_ConfidenceMetrics,
    pub filtersBackend: dai_ProcessorType,
}
pub const dai_StereoDepthConfig_MedianFilter_MEDIAN_OFF: dai_StereoDepthConfig_MedianFilter = 0;
pub const dai_StereoDepthConfig_MedianFilter_KERNEL_3x3: dai_StereoDepthConfig_MedianFilter = 3;
pub const dai_StereoDepthConfig_MedianFilter_KERNEL_5x5: dai_StereoDepthConfig_MedianFilter = 5;
pub const dai_StereoDepthConfig_MedianFilter_KERNEL_7x7: dai_StereoDepthConfig_MedianFilter = 7;
#[doc = " Median filter config for disparity post-processing"]
pub type dai_StereoDepthConfig_MedianFilter = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_AlgorithmControl {
    #[doc = " Set the disparity/depth alignment to the perspective of a rectified output, or center it"]
    pub depthAlign: dai_StereoDepthConfig_AlgorithmControl_DepthAlign,
    #[doc = " Measurement unit for depth data.\n Depth data is integer value, multiple of depth unit."]
    pub depthUnit: dai_StereoDepthConfig_AlgorithmControl_DepthUnit,
    #[doc = " Custom depth unit multiplier, if custom depth unit is enabled, relative to 1 meter.\n A multiplier of 1000 effectively means depth unit in millimeter."]
    pub customDepthUnitMultiplier: f32,
    #[doc = " Computes and combines disparities in both L-R and R-L directions, and combine them.\n For better occlusion handling"]
    pub enableLeftRightCheck: bool,
    #[doc = " Enables software left right check. Applicable to RVC4 only."]
    pub enableSwLeftRightCheck: bool,
    #[doc = " Disparity range increased from 95 to 190, combined from full resolution and downscaled images.\n Suitable for short range objects"]
    pub enableExtended: bool,
    #[doc = " Computes disparity with sub-pixel interpolation (5 fractional bits), suitable for long range"]
    pub enableSubpixel: bool,
    #[doc = " Left-right check threshold for left-right, right-left disparity map combine, 0..128\n Used only when left-right check mode is enabled.\n Defines the maximum difference between the confidence of pixels from left-right and right-left confidence maps"]
    pub leftRightCheckThreshold: ::std::os::raw::c_int,
    #[doc = " Number of fractional bits for subpixel mode\n\n Valid values: 3,4,5\n\n Defines the number of fractional disparities: 2^x\n\n Median filter postprocessing is supported only for 3 fractional bits"]
    pub subpixelFractionalBits: ::std::os::raw::c_int,
    #[doc = " Shift input frame by a number of pixels to increase minimum depth.\n For example shifting by 48 will change effective disparity search range from (0,95] to [48,143].\n An alternative approach to reducing the minZ.\n We normally only recommend doing this when it is known that there will be no objects\n farther away than MaxZ, such as having a depth camera mounted above a table\n pointing down at the table surface."]
    pub disparityShift: ::std::os::raw::c_int,
    pub centerAlignmentShiftFactor: std_optional,
    #[doc = " Invalidate X amount of pixels at the edge of disparity frame.\n For right and center alignment X pixels will be invalidated from the right edge,\n for left alignment from the left edge."]
    pub numInvalidateEdgePixels: ::std::os::raw::c_int,
}
pub const dai_StereoDepthConfig_AlgorithmControl_DepthAlign_RECTIFIED_RIGHT:
    dai_StereoDepthConfig_AlgorithmControl_DepthAlign = 0;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthAlign_RECTIFIED_LEFT:
    dai_StereoDepthConfig_AlgorithmControl_DepthAlign = 1;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthAlign_CENTER:
    dai_StereoDepthConfig_AlgorithmControl_DepthAlign = 2;
#[doc = " Align the disparity/depth to the perspective of a rectified output, or center it"]
pub type dai_StereoDepthConfig_AlgorithmControl_DepthAlign = i32;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthUnit_METER:
    dai_StereoDepthConfig_AlgorithmControl_DepthUnit = 0;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthUnit_CENTIMETER:
    dai_StereoDepthConfig_AlgorithmControl_DepthUnit = 1;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthUnit_MILLIMETER:
    dai_StereoDepthConfig_AlgorithmControl_DepthUnit = 2;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthUnit_INCH:
    dai_StereoDepthConfig_AlgorithmControl_DepthUnit = 3;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthUnit_FOOT:
    dai_StereoDepthConfig_AlgorithmControl_DepthUnit = 4;
pub const dai_StereoDepthConfig_AlgorithmControl_DepthUnit_CUSTOM:
    dai_StereoDepthConfig_AlgorithmControl_DepthUnit = 5;
#[doc = " Measurement unit for depth data"]
pub type dai_StereoDepthConfig_AlgorithmControl_DepthUnit = i32;
pub type dai_StereoDepthConfig_AlgorithmControl_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_AlgorithmControl"]
        [::std::mem::size_of::<dai_StereoDepthConfig_AlgorithmControl>() - 40usize];
    ["Alignment of dai_StereoDepthConfig_AlgorithmControl"]
        [::std::mem::align_of::<dai_StereoDepthConfig_AlgorithmControl>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::depthAlign"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_AlgorithmControl, depthAlign) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::depthUnit"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_AlgorithmControl, depthUnit) - 4usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::customDepthUnitMultiplier"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        customDepthUnitMultiplier
    )
        - 8usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::enableLeftRightCheck"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        enableLeftRightCheck
    ) - 12usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::enableSwLeftRightCheck"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        enableSwLeftRightCheck
    )
        - 13usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::enableExtended"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_AlgorithmControl, enableExtended) - 14usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::enableSubpixel"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_AlgorithmControl, enableSubpixel) - 15usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::leftRightCheckThreshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        leftRightCheckThreshold
    )
        - 16usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::subpixelFractionalBits"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        subpixelFractionalBits
    )
        - 20usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::disparityShift"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_AlgorithmControl, disparityShift) - 24usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::centerAlignmentShiftFactor"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        centerAlignmentShiftFactor
    )
        - 28usize];
    ["Offset of field: dai_StereoDepthConfig_AlgorithmControl::numInvalidateEdgePixels"][::std::mem::offset_of!(
        dai_StereoDepthConfig_AlgorithmControl,
        numInvalidateEdgePixels
    )
        - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_ConfidenceMetrics {
    #[doc = " Weight used with occlusion estimation to generate final confidence map.\n Valid range is [0,32]"]
    pub occlusionConfidenceWeight: u8,
    #[doc = " Weight used with local neighborhood motion vector variance estimation to generate final confidence map.\n Valid range is [0,32]."]
    pub motionVectorConfidenceWeight: u8,
    #[doc = " Threshold offset for MV variance in confidence generation. A value of 0 allows most variance.\n Valid range is [0,3]."]
    pub motionVectorConfidenceThreshold: u8,
    #[doc = " Weight used with flatness estimation to generate final confidence map.\n Valid range is [0,32]."]
    pub flatnessConfidenceWeight: u8,
    #[doc = " Threshold for flatness check in SGM block.\n Valid range is [1,7]."]
    pub flatnessConfidenceThreshold: u8,
    #[doc = " Flag to indicate whether final confidence value will be overidden by flatness value.\n Valid range is {true,false}."]
    pub flatnessOverride: bool,
}
pub type dai_StereoDepthConfig_ConfidenceMetrics_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_ConfidenceMetrics"]
        [::std::mem::size_of::<dai_StereoDepthConfig_ConfidenceMetrics>() - 6usize];
    ["Alignment of dai_StereoDepthConfig_ConfidenceMetrics"]
        [::std::mem::align_of::<dai_StereoDepthConfig_ConfidenceMetrics>() - 1usize];
    ["Offset of field: dai_StereoDepthConfig_ConfidenceMetrics::occlusionConfidenceWeight"][::std::mem::offset_of!(
        dai_StereoDepthConfig_ConfidenceMetrics,
        occlusionConfidenceWeight
    )
        - 0usize];
    ["Offset of field: dai_StereoDepthConfig_ConfidenceMetrics::motionVectorConfidenceWeight"][::std::mem::offset_of!(
        dai_StereoDepthConfig_ConfidenceMetrics,
        motionVectorConfidenceWeight
    )
        - 1usize];
    ["Offset of field: dai_StereoDepthConfig_ConfidenceMetrics::motionVectorConfidenceThreshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_ConfidenceMetrics,
        motionVectorConfidenceThreshold
    )
        - 2usize];
    ["Offset of field: dai_StereoDepthConfig_ConfidenceMetrics::flatnessConfidenceWeight"][::std::mem::offset_of!(
        dai_StereoDepthConfig_ConfidenceMetrics,
        flatnessConfidenceWeight
    )
        - 3usize];
    ["Offset of field: dai_StereoDepthConfig_ConfidenceMetrics::flatnessConfidenceThreshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_ConfidenceMetrics,
        flatnessConfidenceThreshold
    )
        - 4usize];
    ["Offset of field: dai_StereoDepthConfig_ConfidenceMetrics::flatnessOverride"][::std::mem::offset_of!(
        dai_StereoDepthConfig_ConfidenceMetrics,
        flatnessOverride
    ) - 5usize];
};
#[doc = " Post-processing filters, all the filters are applied in disparity domain."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing {
    #[doc = " Order of filters to be applied if filtering is enabled."]
    pub filteringOrder: __BindgenOpaqueArray<u32, 5usize>,
    #[doc = " Set kernel size for disparity/depth median filtering, or disable"]
    pub median: dai_StereoDepthConfig_MedianFilter,
    #[doc = " Sigma value for bilateral filter. 0 means disabled.\n A larger value of the parameter means that farther colors within the pixel neighborhood will be mixed together."]
    pub bilateralSigmaValue: ::std::os::raw::c_short,
    #[doc = " Edge-preserving filtering: This type of filter will smooth the depth noise while attempting to preserve edges."]
    pub spatialFilter: dai_StereoDepthConfig_PostProcessing_SpatialFilter,
    #[doc = " Temporal filtering with optional persistence."]
    pub temporalFilter: dai_StereoDepthConfig_PostProcessing_TemporalFilter,
    #[doc = " Threshold filtering.\n Filters out distances outside of a given interval."]
    pub thresholdFilter: dai_StereoDepthConfig_PostProcessing_ThresholdFilter,
    #[doc = " Brightness filtering.\n If input frame pixel is too dark or too bright, disparity will be invalidated.\n The idea is that for too dark/too bright pixels we have low confidence,\n since that area was under/over exposed and details were lost."]
    pub brightnessFilter: dai_StereoDepthConfig_PostProcessing_BrightnessFilter,
    #[doc = " Speckle filtering.\n Removes speckle noise."]
    pub speckleFilter: dai_StereoDepthConfig_PostProcessing_SpeckleFilter,
    #[doc = " Decimation filter.\n Reduces disparity/depth map x/y complexity, reducing runtime complexity for other filters."]
    pub decimationFilter: dai_StereoDepthConfig_PostProcessing_DecimationFilter,
    pub holeFilling: dai_StereoDepthConfig_PostProcessing_HoleFilling,
    pub adaptiveMedianFilter: dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter,
}
pub const dai_StereoDepthConfig_PostProcessing_Filter_NONE:
    dai_StereoDepthConfig_PostProcessing_Filter = 0;
pub const dai_StereoDepthConfig_PostProcessing_Filter_DECIMATION:
    dai_StereoDepthConfig_PostProcessing_Filter = 1;
pub const dai_StereoDepthConfig_PostProcessing_Filter_SPECKLE:
    dai_StereoDepthConfig_PostProcessing_Filter = 2;
pub const dai_StereoDepthConfig_PostProcessing_Filter_MEDIAN:
    dai_StereoDepthConfig_PostProcessing_Filter = 3;
pub const dai_StereoDepthConfig_PostProcessing_Filter_SPATIAL:
    dai_StereoDepthConfig_PostProcessing_Filter = 4;
pub const dai_StereoDepthConfig_PostProcessing_Filter_TEMPORAL:
    dai_StereoDepthConfig_PostProcessing_Filter = 5;
pub const dai_StereoDepthConfig_PostProcessing_Filter_FILTER_COUNT:
    dai_StereoDepthConfig_PostProcessing_Filter = 5;
pub type dai_StereoDepthConfig_PostProcessing_Filter = i32;
#[doc = " 1D edge-preserving spatial filter using high-order domain transform."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_SpatialFilter {
    #[doc = " Whether to enable or disable the filter."]
    pub enable: bool,
    #[doc = " An in-place heuristic symmetric hole-filling mode applied horizontally during the filter passes.\n Intended to rectify minor artefacts with minimal performance impact.\n Search radius for hole filling."]
    pub holeFillingRadius: ::std::os::raw::c_uchar,
    #[doc = " The Alpha factor in an exponential moving average with Alpha=1 - no filter. Alpha = 0 - infinite filter.\n Determines the amount of smoothing."]
    pub alpha: f32,
    #[doc = " Step-size boundary. Establishes the threshold used to preserve \"edges\".\n If the disparity value between neighboring pixels exceed the disparity threshold set by this delta parameter,\n then filtering will be temporarily disabled.\n Default value 0 means auto: 3 disparity integer levels.\n In case of subpixel mode it's 3*number of subpixel levels."]
    pub delta: ::std::os::raw::c_int,
    #[doc = " Number of iterations over the image in both horizontal and vertical direction."]
    pub numIterations: ::std::os::raw::c_int,
}
pub type dai_StereoDepthConfig_PostProcessing_SpatialFilter_NOP__MEMBERS = nop_MemberList;
pub const dai_StereoDepthConfig_PostProcessing_SpatialFilter_DEFAULT_DELTA_VALUE:
    ::std::os::raw::c_int = 3;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_SpatialFilter"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_SpatialFilter>() - 16usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_SpatialFilter"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_SpatialFilter>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpatialFilter::enable"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpatialFilter,
        enable
    ) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpatialFilter::holeFillingRadius"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpatialFilter,
        holeFillingRadius
    )
        - 1usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpatialFilter::alpha"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpatialFilter,
        alpha
    ) - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpatialFilter::delta"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpatialFilter,
        delta
    ) - 8usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpatialFilter::numIterations"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpatialFilter,
        numIterations
    )
        - 12usize];
};
#[doc = " Temporal filtering with optional persistence."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_TemporalFilter {
    #[doc = " Whether to enable or disable the filter."]
    pub enable: bool,
    #[doc = " Persistency mode.\n If the current disparity/depth value is invalid, it will be replaced by an older value, based on persistency mode."]
    pub persistencyMode: dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode,
    #[doc = " The Alpha factor in an exponential moving average with Alpha=1 - no filter. Alpha = 0 - infinite filter.\n Determines the extent of the temporal history that should be averaged."]
    pub alpha: f32,
    #[doc = " Step-size boundary. Establishes the threshold used to preserve surfaces (edges).\n If the disparity value between neighboring pixels exceed the disparity threshold set by this delta parameter,\n then filtering will be temporarily disabled.\n Default value 0 means auto: 3 disparity integer levels.\n In case of subpixel mode it's 3*number of subpixel levels."]
    pub delta: ::std::os::raw::c_int,
}
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_PERSISTENCY_OFF:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 0;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_8_OUT_OF_8:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 1;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_2_IN_LAST_3:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 2;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_2_IN_LAST_4:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 3;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_2_OUT_OF_8:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 4;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_1_IN_LAST_2:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 5;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_1_IN_LAST_5:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 6;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_VALID_1_IN_LAST_8:
    dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 7;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode_PERSISTENCY_INDEFINITELY : dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = 8 ;
#[doc = " Persistency algorithm type."]
pub type dai_StereoDepthConfig_PostProcessing_TemporalFilter_PersistencyMode = i32;
pub type dai_StereoDepthConfig_PostProcessing_TemporalFilter_NOP__MEMBERS = nop_MemberList;
pub const dai_StereoDepthConfig_PostProcessing_TemporalFilter_DEFAULT_DELTA_VALUE:
    ::std::os::raw::c_int = 3;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_TemporalFilter"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_TemporalFilter>() - 16usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_TemporalFilter"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_TemporalFilter>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_TemporalFilter::enable"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_TemporalFilter,
        enable
    ) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_TemporalFilter::persistencyMode"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_TemporalFilter,
        persistencyMode
    )
        - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_TemporalFilter::alpha"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_TemporalFilter,
        alpha
    ) - 8usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_TemporalFilter::delta"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_TemporalFilter,
        delta
    ) - 12usize];
};
#[doc = " Threshold filtering.\n Filters out distances outside of a given interval."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_ThresholdFilter {
    #[doc = " Minimum range in depth units.\n Depth values under this value are invalidated."]
    pub minRange: ::std::os::raw::c_int,
    #[doc = " Maximum range in depth units.\n Depth values over this value are invalidated."]
    pub maxRange: ::std::os::raw::c_int,
}
pub type dai_StereoDepthConfig_PostProcessing_ThresholdFilter_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_ThresholdFilter"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_ThresholdFilter>() - 8usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_ThresholdFilter"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_ThresholdFilter>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_ThresholdFilter::minRange"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_ThresholdFilter,
        minRange
    ) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_ThresholdFilter::maxRange"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_ThresholdFilter,
        maxRange
    ) - 4usize];
};
#[doc = " Brightness filtering.\n If input frame pixel is too dark or too bright, disparity will be invalidated.\n The idea is that for too dark/too bright pixels we have low confidence,\n since that area was under/over exposed and details were lost."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_BrightnessFilter {
    #[doc = " Minimum pixel brightness.\n If input pixel is less or equal than this value the depth value is invalidated."]
    pub minBrightness: ::std::os::raw::c_int,
    #[doc = " Maximum range in depth units.\n If input pixel is less or equal than this value the depth value is invalidated."]
    pub maxBrightness: ::std::os::raw::c_int,
}
pub type dai_StereoDepthConfig_PostProcessing_BrightnessFilter_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_BrightnessFilter"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_BrightnessFilter>() - 8usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_BrightnessFilter"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_BrightnessFilter>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_BrightnessFilter::minBrightness"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_BrightnessFilter,
        minBrightness
    )
        - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_BrightnessFilter::maxBrightness"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_BrightnessFilter,
        maxBrightness
    )
        - 4usize];
};
#[doc = " Speckle filtering.\n Removes speckle noise."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_SpeckleFilter {
    #[doc = " Whether to enable or disable the filter."]
    pub enable: bool,
    #[doc = " Speckle search range."]
    pub speckleRange: ::std::os::raw::c_uint,
    #[doc = " Maximum difference between neighbor disparity pixels to put them into the same blob.\n Units in disparity integer levels."]
    pub differenceThreshold: ::std::os::raw::c_uint,
}
pub type dai_StereoDepthConfig_PostProcessing_SpeckleFilter_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_SpeckleFilter"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_SpeckleFilter>() - 12usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_SpeckleFilter"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_SpeckleFilter>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpeckleFilter::enable"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpeckleFilter,
        enable
    ) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpeckleFilter::speckleRange"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpeckleFilter,
        speckleRange
    )
        - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_SpeckleFilter::differenceThreshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_SpeckleFilter,
        differenceThreshold
    )
        - 8usize];
};
#[doc = " Decimation filter.\n Reduces the depth scene complexity. The filter runs on kernel sizes [2x2] to [8x8] pixels."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_DecimationFilter {
    #[doc = " Decimation factor.\n Valid values are 1,2,3,4.\n Disparity/depth map x/y resolution will be decimated with this value."]
    pub decimationFactor: ::std::os::raw::c_uint,
    #[doc = " Decimation algorithm type."]
    pub decimationMode: dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode,
}
pub const dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode_PIXEL_SKIPPING:
    dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode = 0;
pub const dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode_NON_ZERO_MEDIAN:
    dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode = 1;
pub const dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode_NON_ZERO_MEAN:
    dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode = 2;
#[doc = " Decimation algorithm type."]
pub type dai_StereoDepthConfig_PostProcessing_DecimationFilter_DecimationMode = i32;
pub type dai_StereoDepthConfig_PostProcessing_DecimationFilter_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_DecimationFilter"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_DecimationFilter>() - 8usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_DecimationFilter"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_DecimationFilter>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_DecimationFilter::decimationFactor"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_DecimationFilter,
        decimationFactor
    )
        - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_DecimationFilter::decimationMode"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_DecimationFilter,
        decimationMode
    )
        - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_HoleFilling {
    #[doc = " Flag to enable post-processing hole-filling."]
    pub enable: bool,
    #[doc = " Pixels with confidence higher than this value are used to calculate an average disparity per superpixel.\n Valid range is [1,255]"]
    pub highConfidenceThreshold: u8,
    #[doc = " Pixels with confidence below this value will be filled with the average disparity of their corresponding superpixel.\n Valid range is [1,255]."]
    pub fillConfidenceThreshold: u8,
    #[doc = "    Represents the required percentange of pixels with confidence value\n    above nHighConfThresh that are used to calculate average disparity per\n    superpixel, where 1 means 50% or half, 2 means 25% or a quarter and 3\n    means 12.5% or an eighth. If the required number of pixels are not\n    found, the holes will not be filled."]
    pub minValidDisparity: u8,
    #[doc = " If enabled, sets to 0 the disparity of pixels with confidence below\n nFillConfThresh, which did not pass nMinValidPixels criteria.\n Valid range is {true, false}."]
    pub invalidateDisparities: bool,
}
pub type dai_StereoDepthConfig_PostProcessing_HoleFilling_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_HoleFilling"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing_HoleFilling>() - 5usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_HoleFilling"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing_HoleFilling>() - 1usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_HoleFilling::enable"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing_HoleFilling, enable) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_HoleFilling::highConfidenceThreshold"]
        [::std::mem::offset_of!(
            dai_StereoDepthConfig_PostProcessing_HoleFilling,
            highConfidenceThreshold
        ) - 1usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_HoleFilling::fillConfidenceThreshold"]
        [::std::mem::offset_of!(
            dai_StereoDepthConfig_PostProcessing_HoleFilling,
            fillConfidenceThreshold
        ) - 2usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_HoleFilling::minValidDisparity"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_HoleFilling,
        minValidDisparity
    )
        - 3usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_HoleFilling::invalidateDisparities"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_HoleFilling,
        invalidateDisparities
    )
        - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter {
    #[doc = " Flag to enable adaptive median filtering for a final pass of filtering on low confidence pixels."]
    pub enable: bool,
    #[doc = " Confidence threshold for adaptive median filtering.\n Should be less than nFillConfThresh value used in evaDfsHoleFillConfig.\n Valid range is [0,255]."]
    pub confidenceThreshold: u8,
}
pub type dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter"][::std::mem::size_of::<
        dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter,
    >() - 2usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter"][::std::mem::align_of::<
        dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter,
    >() - 1usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter::enable"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter,
        enable
    )
        - 0usize];
    [
        "Offset of field: dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter::confidenceThreshold",
    ][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing_AdaptiveMedianFilter,
        confidenceThreshold
    ) - 1usize];
};
pub type dai_StereoDepthConfig_PostProcessing_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_PostProcessing"]
        [::std::mem::size_of::<dai_StereoDepthConfig_PostProcessing>() - 104usize];
    ["Alignment of dai_StereoDepthConfig_PostProcessing"]
        [::std::mem::align_of::<dai_StereoDepthConfig_PostProcessing>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::filteringOrder"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, filteringOrder) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::median"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, median) - 20usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::bilateralSigmaValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing,
        bilateralSigmaValue
    ) - 24usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::spatialFilter"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, spatialFilter) - 28usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::temporalFilter"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, temporalFilter) - 44usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::thresholdFilter"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, thresholdFilter) - 60usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::brightnessFilter"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, brightnessFilter) - 68usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::speckleFilter"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, speckleFilter) - 76usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::decimationFilter"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, decimationFilter) - 88usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::holeFilling"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_PostProcessing, holeFilling) - 96usize];
    ["Offset of field: dai_StereoDepthConfig_PostProcessing::adaptiveMedianFilter"][::std::mem::offset_of!(
        dai_StereoDepthConfig_PostProcessing,
        adaptiveMedianFilter
    ) - 101usize];
};
#[doc = " The basic cost function used by the Stereo Accelerator for matching the left and right images is the Census\n Transform. It works on a block of pixels and computes a bit vector which represents the structure of the\n image in that block.\n There are two types of Census Transform based on how the middle pixel is used:\n Classic Approach and Modified Census. The comparisons that are made between pixels can be or not thresholded.\n In some cases a mask can be applied to filter out only specific bits from the entire bit stream.\n All these approaches are:\n Classic Approach: Uses middle pixel to compare against all its neighbors over a defined window. Each\n comparison results in a new bit, that is 0 if central pixel is smaller, or 1 if is it bigger than its neighbor.\n Modified Census Transform: same as classic Census Transform, but instead of comparing central pixel\n with its neighbors, the window mean will be compared with each pixel over the window.\n Thresholding Census Transform: same as classic Census Transform, but it is not enough that a\n neighbor pixel to be bigger than the central pixel, it must be significant bigger (based on a threshold).\n Census Transform with Mask: same as classic Census Transform, but in this case not all of the pixel from\n the support window are part of the binary descriptor. We use a ma sk “M” to define which pixels are part\n of the binary descriptor (1), and which pixels should be skipped (0)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_CensusTransform {
    #[doc = " Census transform kernel size."]
    pub kernelSize: dai_StereoDepthConfig_CensusTransform_KernelSize,
    #[doc = " Census transform mask, default - auto, mask is set based on resolution and kernel size.\n Disabled for 400p input resolution.\n Enabled for 720p.\n 0XA82415 for 5x5 census transform kernel.\n 0XAA02A8154055 for 7x7 census transform kernel.\n 0X2AA00AA805540155 for 7x9 census transform kernel.\n Empirical values."]
    pub kernelMask: u64,
    #[doc = " If enabled, each pixel in the window is compared with the mean window value instead of the central pixel."]
    pub enableMeanMode: bool,
    #[doc = " Census transform comparison threshold value."]
    pub threshold: u32,
    #[doc = " Used to reduce small fixed levels of noise across all luminance values\n in the current image.\n Valid range is [0,127]. Default value is 0."]
    pub noiseThresholdOffset: i8,
    #[doc = " Used to reduce noise values that increase with luminance in the\n current image.\n Valid range is [-128,127]. Default value is 0."]
    pub noiseThresholdScale: i8,
}
pub const dai_StereoDepthConfig_CensusTransform_KernelSize_AUTO:
    dai_StereoDepthConfig_CensusTransform_KernelSize = -1;
pub const dai_StereoDepthConfig_CensusTransform_KernelSize_KERNEL_5x5:
    dai_StereoDepthConfig_CensusTransform_KernelSize = 0;
pub const dai_StereoDepthConfig_CensusTransform_KernelSize_KERNEL_7x7:
    dai_StereoDepthConfig_CensusTransform_KernelSize = 1;
pub const dai_StereoDepthConfig_CensusTransform_KernelSize_KERNEL_7x9:
    dai_StereoDepthConfig_CensusTransform_KernelSize = 2;
#[doc = " Census transform kernel size possible values."]
pub type dai_StereoDepthConfig_CensusTransform_KernelSize = ::std::os::raw::c_int;
pub type dai_StereoDepthConfig_CensusTransform_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_CensusTransform"]
        [::std::mem::size_of::<dai_StereoDepthConfig_CensusTransform>() - 32usize];
    ["Alignment of dai_StereoDepthConfig_CensusTransform"]
        [::std::mem::align_of::<dai_StereoDepthConfig_CensusTransform>() - 8usize];
    ["Offset of field: dai_StereoDepthConfig_CensusTransform::kernelSize"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CensusTransform, kernelSize) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_CensusTransform::kernelMask"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CensusTransform, kernelMask) - 8usize];
    ["Offset of field: dai_StereoDepthConfig_CensusTransform::enableMeanMode"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CensusTransform, enableMeanMode) - 16usize];
    ["Offset of field: dai_StereoDepthConfig_CensusTransform::threshold"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CensusTransform, threshold) - 20usize];
    ["Offset of field: dai_StereoDepthConfig_CensusTransform::noiseThresholdOffset"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CensusTransform,
        noiseThresholdOffset
    ) - 24usize];
    ["Offset of field: dai_StereoDepthConfig_CensusTransform::noiseThresholdScale"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CensusTransform,
        noiseThresholdScale
    ) - 25usize];
};
#[doc = " The matching cost is way of measuring the similarity of image locations in stereo correspondence\n algorithm. Based on the configuration parameters and based on the descriptor type, a linear equation\n is applied to computing the cost for each candidate disparity at each pixel."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_CostMatching {
    #[doc = " Disparity search range, default 96 pixels."]
    pub disparityWidth: dai_StereoDepthConfig_CostMatching_DisparityWidth,
    #[doc = " Disparity companding using sparse matching.\n Matching pixel by pixel for N disparities.\n Matching every 2nd pixel for M disparitites.\n Matching every 4th pixel for T disparities.\n In case of 96 disparities: N=48, M=32, T=16.\n This way the search range is extended to 176 disparities, by sparse matching.\n Note: when enabling this flag only depth map will be affected, disparity map is not."]
    pub enableCompanding: bool,
    #[doc = " Used only for debug purposes, SW postprocessing handled only invalid value of 0 properly."]
    pub invalidDisparityValue: u8,
    #[doc = " Disparities with confidence value over this threshold are accepted."]
    pub confidenceThreshold: u8,
    #[doc = " Enable software confidence thresholding. Applicable to RVC4 only."]
    pub enableSwConfidenceThresholding: bool,
    #[doc = " Cost calculation linear equation parameters."]
    pub linearEquationParameters: dai_StereoDepthConfig_CostMatching_LinearEquationParameters,
}
pub const dai_StereoDepthConfig_CostMatching_DisparityWidth_DISPARITY_64:
    dai_StereoDepthConfig_CostMatching_DisparityWidth = 0;
pub const dai_StereoDepthConfig_CostMatching_DisparityWidth_DISPARITY_96:
    dai_StereoDepthConfig_CostMatching_DisparityWidth = 1;
#[doc = " Disparity search range: 64 or 96 pixels are supported by the HW."]
pub type dai_StereoDepthConfig_CostMatching_DisparityWidth = ::std::os::raw::c_uint;
#[doc = " The linear equation applied for computing the cost is:\n COMB_COST = α*AD + β*(CTC<<3).\n CLAMP(COMB_COST >> 5, threshold).\n Where AD is the Absolute Difference between 2 pixels values.\n CTC is the Census Transform Cost between 2 pixels, based on Hamming distance (xor).\n The α and β parameters are subject to fine tuning by the user."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_CostMatching_LinearEquationParameters {
    pub alpha: u8,
    pub beta: u8,
    pub threshold: u8,
}
pub type dai_StereoDepthConfig_CostMatching_LinearEquationParameters_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_CostMatching_LinearEquationParameters"][::std::mem::size_of::<
        dai_StereoDepthConfig_CostMatching_LinearEquationParameters,
    >() - 3usize];
    ["Alignment of dai_StereoDepthConfig_CostMatching_LinearEquationParameters"]
        [::std::mem::align_of::<dai_StereoDepthConfig_CostMatching_LinearEquationParameters>()
            - 1usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching_LinearEquationParameters::alpha"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostMatching_LinearEquationParameters,
        alpha
    )
        - 0usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching_LinearEquationParameters::beta"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostMatching_LinearEquationParameters,
        beta
    )
        - 1usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching_LinearEquationParameters::threshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostMatching_LinearEquationParameters,
        threshold
    )
        - 2usize];
};
pub type dai_StereoDepthConfig_CostMatching_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_CostMatching"]
        [::std::mem::size_of::<dai_StereoDepthConfig_CostMatching>() - 12usize];
    ["Alignment of dai_StereoDepthConfig_CostMatching"]
        [::std::mem::align_of::<dai_StereoDepthConfig_CostMatching>() - 4usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching::disparityWidth"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CostMatching, disparityWidth) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching::enableCompanding"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CostMatching, enableCompanding) - 4usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching::invalidDisparityValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostMatching,
        invalidDisparityValue
    ) - 5usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching::confidenceThreshold"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CostMatching, confidenceThreshold) - 6usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching::enableSwConfidenceThresholding"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostMatching,
        enableSwConfidenceThresholding
    )
        - 7usize];
    ["Offset of field: dai_StereoDepthConfig_CostMatching::linearEquationParameters"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostMatching,
        linearEquationParameters
    ) - 8usize];
};
#[doc = " Cost Aggregation is based on Semi Global Block Matching (SGBM). This algorithm uses a semi global\n technique to aggregate the cost map. Ultimately the idea is to build inertia into the stereo algorithm. If\n a pixel has very little texture information, then odds are the correct disparity for this pixel is close to\n that of the previous pixel considered. This means that we get improved results in areas with low\n texture."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_CostAggregation {
    #[doc = " Cost calculation linear equation parameters."]
    pub divisionFactor: u8,
    #[doc = " Horizontal P1 penalty cost parameter."]
    pub horizontalPenaltyCostP1: u16,
    #[doc = " Horizontal P2 penalty cost parameter."]
    pub horizontalPenaltyCostP2: u16,
    #[doc = " Vertical P1 penalty cost parameter."]
    pub verticalPenaltyCostP1: u16,
    #[doc = " Vertical P2 penalty cost parameter."]
    pub verticalPenaltyCostP2: u16,
    pub p1Config: dai_StereoDepthConfig_CostAggregation_P1Config,
    pub p2Config: dai_StereoDepthConfig_CostAggregation_P2Config,
}
#[doc = " Structure for adaptive P1 penalty configuration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_CostAggregation_P1Config {
    #[doc = " Used to disable/enable adaptive penalty."]
    pub enableAdaptive: bool,
    #[doc = " Used as the default penalty value when nAdapEnable is disabled.\n A bigger value enforces higher smoothness and reduced noise at the cost of lower edge accuracy.\n This value must be smaller than P2 default penalty.\n Valid range is [10,50]."]
    pub defaultValue: u8,
    #[doc = " Penalty value on edges when nAdapEnable is enabled.\n A smaller penalty value permits higher change in disparity.\n This value must be smaller than or equal to P2 edge penalty.\n Valid range is [10,50]."]
    pub edgeValue: u8,
    #[doc = " Penalty value on low texture regions when nAdapEnable is enabled.\n A smaller penalty value permits higher change in disparity.\n This value must be smaller than or equal to P2 smoothness penalty.\n Valid range is [10,50]."]
    pub smoothValue: u8,
    #[doc = " Threshold value on edges when nAdapEnable is enabled.\n A bigger value permits higher neighboring feature dissimilarity tolerance.\n This value is shared with P2 penalty configuration.\n Valid range is [8,16]."]
    pub edgeThreshold: u8,
    #[doc = " Threshold value on low texture regions when nAdapEnable is enabled.\n A bigger value permits higher neighboring feature dissimilarity tolerance.\n This value is shared with P2 penalty configuration.\n Valid range is [2,12]."]
    pub smoothThreshold: u8,
}
pub type dai_StereoDepthConfig_CostAggregation_P1Config_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_CostAggregation_P1Config"]
        [::std::mem::size_of::<dai_StereoDepthConfig_CostAggregation_P1Config>() - 6usize];
    ["Alignment of dai_StereoDepthConfig_CostAggregation_P1Config"]
        [::std::mem::align_of::<dai_StereoDepthConfig_CostAggregation_P1Config>() - 1usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P1Config::enableAdaptive"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P1Config,
        enableAdaptive
    ) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P1Config::defaultValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P1Config,
        defaultValue
    ) - 1usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P1Config::edgeValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P1Config,
        edgeValue
    ) - 2usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P1Config::smoothValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P1Config,
        smoothValue
    ) - 3usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P1Config::edgeThreshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P1Config,
        edgeThreshold
    ) - 4usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P1Config::smoothThreshold"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P1Config,
        smoothThreshold
    )
        - 5usize];
};
#[doc = " Structure for adaptive P2 penalty configuration."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_StereoDepthConfig_CostAggregation_P2Config {
    #[doc = " Used to disable/enable adaptive penalty."]
    pub enableAdaptive: bool,
    #[doc = " Used as the default penalty value when nAdapEnable is disabled.\n A bigger value enforces higher smoothness and reduced noise at the cost of lower edge accuracy.\n This value must be larger than P1 default penalty.\n Valid range is [20,100]."]
    pub defaultValue: u8,
    #[doc = " Penalty value on edges when nAdapEnable is enabled.\n A smaller penalty value permits higher change in disparity.\n This value must be larger than or equal to P1 edge penalty.\n Valid range is [20,100]."]
    pub edgeValue: u8,
    #[doc = " Penalty value on low texture regions when nAdapEnable is enabled.\n A smaller penalty value permits higher change in disparity.\n This value must be larger than or equal to P1 smoothness penalty.\n Valid range is [20,100]."]
    pub smoothValue: u8,
}
pub type dai_StereoDepthConfig_CostAggregation_P2Config_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_CostAggregation_P2Config"]
        [::std::mem::size_of::<dai_StereoDepthConfig_CostAggregation_P2Config>() - 4usize];
    ["Alignment of dai_StereoDepthConfig_CostAggregation_P2Config"]
        [::std::mem::align_of::<dai_StereoDepthConfig_CostAggregation_P2Config>() - 1usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P2Config::enableAdaptive"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P2Config,
        enableAdaptive
    ) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P2Config::defaultValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P2Config,
        defaultValue
    ) - 1usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P2Config::edgeValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P2Config,
        edgeValue
    ) - 2usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation_P2Config::smoothValue"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation_P2Config,
        smoothValue
    ) - 3usize];
};
pub type dai_StereoDepthConfig_CostAggregation_NOP__MEMBERS = nop_MemberList;
pub const dai_StereoDepthConfig_CostAggregation_defaultPenaltyP1: ::std::os::raw::c_int = 250;
pub const dai_StereoDepthConfig_CostAggregation_defaultPenaltyP2: ::std::os::raw::c_int = 500;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig_CostAggregation"]
        [::std::mem::size_of::<dai_StereoDepthConfig_CostAggregation>() - 20usize];
    ["Alignment of dai_StereoDepthConfig_CostAggregation"]
        [::std::mem::align_of::<dai_StereoDepthConfig_CostAggregation>() - 2usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::divisionFactor"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CostAggregation, divisionFactor) - 0usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::horizontalPenaltyCostP1"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation,
        horizontalPenaltyCostP1
    ) - 2usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::horizontalPenaltyCostP2"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation,
        horizontalPenaltyCostP2
    ) - 4usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::verticalPenaltyCostP1"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation,
        verticalPenaltyCostP1
    ) - 6usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::verticalPenaltyCostP2"][::std::mem::offset_of!(
        dai_StereoDepthConfig_CostAggregation,
        verticalPenaltyCostP2
    ) - 8usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::p1Config"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CostAggregation, p1Config) - 10usize];
    ["Offset of field: dai_StereoDepthConfig_CostAggregation::p2Config"]
        [::std::mem::offset_of!(dai_StereoDepthConfig_CostAggregation, p2Config) - 16usize];
};
pub type dai_StereoDepthConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthConfig"][::std::mem::size_of::<dai_StereoDepthConfig>() - 288usize];
    ["Alignment of dai_StereoDepthConfig"]
        [::std::mem::align_of::<dai_StereoDepthConfig>() - 8usize];
    ["Offset of field: dai_StereoDepthConfig::algorithmControl"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, algorithmControl) - 64usize];
    ["Offset of field: dai_StereoDepthConfig::postProcessing"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, postProcessing) - 104usize];
    ["Offset of field: dai_StereoDepthConfig::censusTransform"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, censusTransform) - 208usize];
    ["Offset of field: dai_StereoDepthConfig::costMatching"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, costMatching) - 240usize];
    ["Offset of field: dai_StereoDepthConfig::costAggregation"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, costAggregation) - 252usize];
    ["Offset of field: dai_StereoDepthConfig::confidenceMetrics"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, confidenceMetrics) - 272usize];
    ["Offset of field: dai_StereoDepthConfig::filtersBackend"]
        [::std::mem::offset_of!(dai_StereoDepthConfig, filtersBackend) - 280usize];
};
unsafe extern "C" {
    #[doc = " @param align Set the disparity/depth alignment: centered (between the 'left' and 'right' inputs),\n or from the perspective of a rectified output stream"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig13setDepthAlignENS0_16AlgorithmControl10DepthAlignE"]
    pub fn dai_StereoDepthConfig_setDepthAlign(
        this: *mut dai_StereoDepthConfig,
        align: dai_StereoDepthConfig_AlgorithmControl_DepthAlign,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Confidence threshold for disparity calculation\n @param confThr Confidence threshold value 0..255"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig22setConfidenceThresholdEi"]
    pub fn dai_StereoDepthConfig_setConfidenceThreshold(
        this: *mut dai_StereoDepthConfig,
        confThr: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get confidence threshold for disparity calculation"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig22getConfidenceThresholdEv"]
    pub fn dai_StereoDepthConfig_getConfidenceThreshold(
        this: *const dai_StereoDepthConfig,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " @param median Set kernel size for disparity/depth median filtering, or disable"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig15setMedianFilterENS0_12MedianFilterE"]
    pub fn dai_StereoDepthConfig_setMedianFilter(
        this: *mut dai_StereoDepthConfig,
        median: dai_StereoDepthConfig_MedianFilter,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get median filter setting"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig15getMedianFilterEv"]
    pub fn dai_StereoDepthConfig_getMedianFilter(
        this: *const dai_StereoDepthConfig,
    ) -> dai_StereoDepthConfig_MedianFilter;
}
unsafe extern "C" {
    #[doc = " A larger value of the parameter means that farther colors within the pixel neighborhood will be mixed together,\n resulting in larger areas of semi-equal color.\n @param sigma Set sigma value for 5x5 bilateral filter. 0..65535"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig23setBilateralFilterSigmaEt"]
    pub fn dai_StereoDepthConfig_setBilateralFilterSigma(
        this: *mut dai_StereoDepthConfig,
        sigma: u16,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get sigma value for 5x5 bilateral filter"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig23getBilateralFilterSigmaEv"]
    pub fn dai_StereoDepthConfig_getBilateralFilterSigma(this: *const dai_StereoDepthConfig)
    -> u16;
}
unsafe extern "C" {
    #[doc = " @param threshold Set threshold for left-right, right-left disparity map combine, 0..255"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig26setLeftRightCheckThresholdEi"]
    pub fn dai_StereoDepthConfig_setLeftRightCheckThreshold(
        this: *mut dai_StereoDepthConfig,
        threshold: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get threshold for left-right check combine"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig26getLeftRightCheckThresholdEv"]
    pub fn dai_StereoDepthConfig_getLeftRightCheckThreshold(
        this: *const dai_StereoDepthConfig,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Computes and combines disparities in both L-R and R-L directions, and combine them.\n\n For better occlusion handling, discarding invalid disparity values"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig17setLeftRightCheckEb"]
    pub fn dai_StereoDepthConfig_setLeftRightCheck(
        this: *mut dai_StereoDepthConfig,
        enable: bool,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get left-right check setting"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig17getLeftRightCheckEv"]
    pub fn dai_StereoDepthConfig_getLeftRightCheck(this: *const dai_StereoDepthConfig) -> bool;
}
unsafe extern "C" {
    #[doc = " Disparity range increased from 95 to 190, combined from full resolution and downscaled images.\n Suitable for short range objects"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig20setExtendedDisparityEb"]
    pub fn dai_StereoDepthConfig_setExtendedDisparity(
        this: *mut dai_StereoDepthConfig,
        enable: bool,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get extended disparity setting"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig20getExtendedDisparityEv"]
    pub fn dai_StereoDepthConfig_getExtendedDisparity(this: *const dai_StereoDepthConfig) -> bool;
}
unsafe extern "C" {
    #[doc = " Computes disparity with sub-pixel interpolation (3 fractional bits by default).\n\n Suitable for long range. Currently incompatible with extended disparity"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig11setSubpixelEb"]
    pub fn dai_StereoDepthConfig_setSubpixel(
        this: *mut dai_StereoDepthConfig,
        enable: bool,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get subpixel setting"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig11getSubpixelEv"]
    pub fn dai_StereoDepthConfig_getSubpixel(this: *const dai_StereoDepthConfig) -> bool;
}
unsafe extern "C" {
    #[doc = " Number of fractional bits for subpixel mode.\n Default value: 3.\n Valid values: 3,4,5.\n Defines the number of fractional disparities: 2^x.\n Median filter postprocessing is supported only for 3 fractional bits."]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig25setSubpixelFractionalBitsEi"]
    pub fn dai_StereoDepthConfig_setSubpixelFractionalBits(
        this: *mut dai_StereoDepthConfig,
        subpixelFractionalBits: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get number of fractional bits for subpixel mode"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig25getSubpixelFractionalBitsEv"]
    pub fn dai_StereoDepthConfig_getSubpixelFractionalBits(
        this: *const dai_StereoDepthConfig,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Set depth unit of depth map.\n\n Meter, centimeter, millimeter, inch, foot or custom unit is available."]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig12setDepthUnitENS0_16AlgorithmControl9DepthUnitE"]
    pub fn dai_StereoDepthConfig_setDepthUnit(
        this: *mut dai_StereoDepthConfig,
        depthUnit: dai_StereoDepthConfig_AlgorithmControl_DepthUnit,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get depth unit of depth map."]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig12getDepthUnitEv"]
    pub fn dai_StereoDepthConfig_getDepthUnit(
        this: *mut dai_StereoDepthConfig,
    ) -> dai_StereoDepthConfig_AlgorithmControl_DepthUnit;
}
unsafe extern "C" {
    #[doc = " Shift input frame by a number of pixels to increase minimum depth.\n For example shifting by 48 will change effective disparity search range from (0,95] to [48,143].\n An alternative approach to reducing the minZ.\n We normally only recommend doing this when it is known that there will be no objects\n farther away than MaxZ, such as having a depth camera mounted above a table\n pointing down at the table surface."]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig17setDisparityShiftEi"]
    pub fn dai_StereoDepthConfig_setDisparityShift(
        this: *mut dai_StereoDepthConfig,
        disparityShift: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Invalidate X amount of pixels at the edge of disparity frame.\n For right and center alignment X pixels will be invalidated from the right edge,\n for left alignment from the left edge."]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig26setNumInvalidateEdgePixelsEi"]
    pub fn dai_StereoDepthConfig_setNumInvalidateEdgePixels(
        this: *mut dai_StereoDepthConfig,
        numInvalidateEdgePixels: i32,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Set filters compute backend"]
    #[link_name = "\u{1}_ZN3dai17StereoDepthConfig24setFiltersComputeBackendENS_13ProcessorTypeE"]
    pub fn dai_StereoDepthConfig_setFiltersComputeBackend(
        this: *mut dai_StereoDepthConfig,
        filtersBackend: dai_ProcessorType,
    ) -> *mut dai_StereoDepthConfig;
}
unsafe extern "C" {
    #[doc = " Get filters compute backend"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig24getFiltersComputeBackendEv"]
    pub fn dai_StereoDepthConfig_getFiltersComputeBackend(
        this: *const dai_StereoDepthConfig,
    ) -> dai_ProcessorType;
}
unsafe extern "C" {
    #[doc = " Useful for normalization of the disparity map.\n @returns Maximum disparity value that the node can return"]
    #[link_name = "\u{1}_ZNK3dai17StereoDepthConfig15getMaxDisparityEv"]
    pub fn dai_StereoDepthConfig_getMaxDisparity(this: *const dai_StereoDepthConfig) -> f32;
}
impl dai_StereoDepthConfig {
    #[inline]
    pub unsafe fn setDepthAlign(
        &mut self,
        align: dai_StereoDepthConfig_AlgorithmControl_DepthAlign,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setDepthAlign(self, align)
    }
    #[inline]
    pub unsafe fn setConfidenceThreshold(
        &mut self,
        confThr: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setConfidenceThreshold(self, confThr)
    }
    #[inline]
    pub unsafe fn getConfidenceThreshold(&self) -> ::std::os::raw::c_int {
        dai_StereoDepthConfig_getConfidenceThreshold(self)
    }
    #[inline]
    pub unsafe fn setMedianFilter(
        &mut self,
        median: dai_StereoDepthConfig_MedianFilter,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setMedianFilter(self, median)
    }
    #[inline]
    pub unsafe fn getMedianFilter(&self) -> dai_StereoDepthConfig_MedianFilter {
        dai_StereoDepthConfig_getMedianFilter(self)
    }
    #[inline]
    pub unsafe fn setBilateralFilterSigma(&mut self, sigma: u16) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setBilateralFilterSigma(self, sigma)
    }
    #[inline]
    pub unsafe fn getBilateralFilterSigma(&self) -> u16 {
        dai_StereoDepthConfig_getBilateralFilterSigma(self)
    }
    #[inline]
    pub unsafe fn setLeftRightCheckThreshold(
        &mut self,
        threshold: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setLeftRightCheckThreshold(self, threshold)
    }
    #[inline]
    pub unsafe fn getLeftRightCheckThreshold(&self) -> ::std::os::raw::c_int {
        dai_StereoDepthConfig_getLeftRightCheckThreshold(self)
    }
    #[inline]
    pub unsafe fn setLeftRightCheck(&mut self, enable: bool) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setLeftRightCheck(self, enable)
    }
    #[inline]
    pub unsafe fn getLeftRightCheck(&self) -> bool {
        dai_StereoDepthConfig_getLeftRightCheck(self)
    }
    #[inline]
    pub unsafe fn setExtendedDisparity(&mut self, enable: bool) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setExtendedDisparity(self, enable)
    }
    #[inline]
    pub unsafe fn getExtendedDisparity(&self) -> bool {
        dai_StereoDepthConfig_getExtendedDisparity(self)
    }
    #[inline]
    pub unsafe fn setSubpixel(&mut self, enable: bool) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setSubpixel(self, enable)
    }
    #[inline]
    pub unsafe fn getSubpixel(&self) -> bool {
        dai_StereoDepthConfig_getSubpixel(self)
    }
    #[inline]
    pub unsafe fn setSubpixelFractionalBits(
        &mut self,
        subpixelFractionalBits: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setSubpixelFractionalBits(self, subpixelFractionalBits)
    }
    #[inline]
    pub unsafe fn getSubpixelFractionalBits(&self) -> ::std::os::raw::c_int {
        dai_StereoDepthConfig_getSubpixelFractionalBits(self)
    }
    #[inline]
    pub unsafe fn setDepthUnit(
        &mut self,
        depthUnit: dai_StereoDepthConfig_AlgorithmControl_DepthUnit,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setDepthUnit(self, depthUnit)
    }
    #[inline]
    pub unsafe fn getDepthUnit(&mut self) -> dai_StereoDepthConfig_AlgorithmControl_DepthUnit {
        dai_StereoDepthConfig_getDepthUnit(self)
    }
    #[inline]
    pub unsafe fn setDisparityShift(
        &mut self,
        disparityShift: ::std::os::raw::c_int,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setDisparityShift(self, disparityShift)
    }
    #[inline]
    pub unsafe fn setNumInvalidateEdgePixels(
        &mut self,
        numInvalidateEdgePixels: i32,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setNumInvalidateEdgePixels(self, numInvalidateEdgePixels)
    }
    #[inline]
    pub unsafe fn setFiltersComputeBackend(
        &mut self,
        filtersBackend: dai_ProcessorType,
    ) -> *mut dai_StereoDepthConfig {
        dai_StereoDepthConfig_setFiltersComputeBackend(self, filtersBackend)
    }
    #[inline]
    pub unsafe fn getFiltersComputeBackend(&self) -> dai_ProcessorType {
        dai_StereoDepthConfig_getFiltersComputeBackend(self)
    }
    #[inline]
    pub unsafe fn getMaxDisparity(&self) -> f32 {
        dai_StereoDepthConfig_getMaxDisparity(self)
    }
}
#[doc = " Specify properties for StereoDepth"]
#[repr(C)]
pub struct dai_StereoDepthProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Initial stereo config"]
    pub initialConfig: dai_StereoDepthConfig,
    #[doc = " Which camera to align disparity/depth to.\n When configured (not AUTO), takes precedence over 'depthAlign'"]
    pub depthAlignCamera: dai_CameraBoardSocket,
    #[doc = " Enable stereo rectification/dewarp or not.\n Useful to disable when replaying pre-recorded rectified frames."]
    pub enableRectification: bool,
    #[doc = " Fill color for missing data at frame edges - grayscale 0..255, or -1 to replicate pixels"]
    pub rectifyEdgeFillColor: ::std::os::raw::c_int,
    #[doc = " Input frame width. Optional (taken from MonoCamera nodes if they exist)"]
    pub width: std_optional,
    #[doc = " Input frame height. Optional (taken from MonoCamera nodes if they exist)"]
    pub height: std_optional,
    #[doc = " Output disparity/depth width. Currently only used when aligning to RGB"]
    pub outWidth: std_optional,
    #[doc = " Output disparity/depth height. Currently only used when aligning to RGB"]
    pub outHeight: std_optional,
    #[doc = " Whether to keep aspect ratio of the input (rectified) or not"]
    pub outKeepAspectRatio: bool,
    #[doc = " Specify a direct warp mesh to be used for rectification,\n instead of intrinsics + extrinsic matrices"]
    pub mesh: dai_StereoDepthProperties_RectificationMesh,
    #[doc = " Whether to enable switching stereo modes at runtime or not.\n E.g. standard to subpixel, standard+LR-check to subpixel + LR-check.\n Note: It will allocate resources for worst cases scenario,\n should be enabled only if dynamic mode switch is required.\n Default value: false."]
    pub enableRuntimeStereoModeSwitch: bool,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Number of shaves reserved for stereo depth post processing.\n Post processing can use multiple shaves to increase performance.\n -1 means auto, resources will be allocated based on enabled filters.\n 0 means that it will reuse the shave assigned for main stereo algorithm.\n For optimal performance it's recommended to allocate more than 0,\n so post processing will run in parallel with main stereo algorithm.\n Minimum 1, maximum 10."]
    pub numPostProcessingShaves: ::std::os::raw::c_int,
    #[doc = " Number of memory slices reserved for stereo depth post processing.\n -1 means auto, memory will be allocated based on initial stereo settings and number of shaves.\n 0 means that it will reuse the memory slices assigned for main stereo algorithm.\n For optimal performance it's recommended to allocate more than 0,\n so post processing will run in parallel with main stereo algorithm.\n Minimum 1, maximum 6."]
    pub numPostProcessingMemorySlices: ::std::os::raw::c_int,
    #[doc = " Whether to use horizontal focal length from calibration intrinsics (fx) or calculate based on calibration FOV.\n Default value is true.\n If set to false it's calculated from FOV and image resolution: focalLength = calib.width / (2.f * tan(calib.fov / 2 / 180.f * pi));"]
    pub focalLengthFromCalibration: bool,
    #[doc = " Use 3x3 homography matrix for stereo rectification instead of sparse mesh generated on device.\n Default behaviour is AUTO, for lenses with FOV over 85 degrees sparse mesh is used, otherwise 3x3 homography.\n If custom mesh data is provided through loadMeshData or loadMeshFiles this option is ignored.\n true: 3x3 homography matrix generated from calibration data is used for stereo rectification, can't correct lens\n distortion.\n false: sparse mesh is generated on-device from calibration data with mesh step specified with setMeshStep (Default: (16, 16)), can correct lens\n distortion. Implementation for generating the mesh is same as opencv's initUndistortRectifyMap function. Only the first 8 distortion coefficients are\n used from calibration data."]
    pub useHomographyRectification: std_optional,
    #[doc = " Whether to enable frame syncing inside stereo node or not. Suitable if inputs are known to be synced."]
    pub enableFrameSync: bool,
    pub baseline: std_optional,
    #[doc = " Override focal length from calibration.\n Used only in disparity to depth conversion.\n Units are pixels."]
    pub focalLength: std_optional,
    #[doc = " Use baseline information for disparity to depth conversion from specs (design data) or from calibration.\n Suitable for debugging. Utilizes calibrated value as default"]
    pub disparityToDepthUseSpecTranslation: std_optional,
    #[doc = " Obtain rectification matrices using spec translation (design data) or from calibration in calculations.\n Suitable for debugging.\n Default: false"]
    pub rectificationUseSpecTranslation: std_optional,
    #[doc = " Use baseline information for depth alignment from specs (design data) or from calibration.\n Suitable for debugging. Utilizes calibrated value as default"]
    pub depthAlignmentUseSpecTranslation: std_optional,
    #[doc = " Free scaling parameter between 0 (when all the pixels in the undistorted image are valid)\n and 1 (when all the source image pixels are retained in the undistorted image).\n On some high distortion lenses, and/or due to rectification (image rotated) invalid areas may appear even with alpha=0,\n in these cases alpha < 0.0 helps removing invalid areas.\n See getOptimalNewCameraMatrix from opencv for more details."]
    pub alphaScaling: std_optional,
}
#[repr(C)]
pub struct dai_StereoDepthProperties_RectificationMesh {
    #[doc = " Uri which points to the mesh array for 'left' input rectification"]
    pub meshLeftUri: std_string,
    #[doc = " Uri which points to the mesh array for 'right' input rectification"]
    pub meshRightUri: std_string,
    #[doc = " Mesh array size in bytes, for each of 'left' and 'right' (need to match)"]
    pub meshSize: std_optional,
    #[doc = " Distance between mesh points, in the horizontal direction"]
    pub stepWidth: u16,
    #[doc = " Distance between mesh points, in the vertical direction"]
    pub stepHeight: u16,
}
pub type dai_StereoDepthProperties_RectificationMesh_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthProperties_RectificationMesh"]
        [::std::mem::size_of::<dai_StereoDepthProperties_RectificationMesh>() - 80usize];
    ["Alignment of dai_StereoDepthProperties_RectificationMesh"]
        [::std::mem::align_of::<dai_StereoDepthProperties_RectificationMesh>() - 8usize];
    ["Offset of field: dai_StereoDepthProperties_RectificationMesh::meshLeftUri"]
        [::std::mem::offset_of!(dai_StereoDepthProperties_RectificationMesh, meshLeftUri) - 0usize];
    ["Offset of field: dai_StereoDepthProperties_RectificationMesh::meshRightUri"][::std::mem::offset_of!(
        dai_StereoDepthProperties_RectificationMesh,
        meshRightUri
    ) - 32usize];
    ["Offset of field: dai_StereoDepthProperties_RectificationMesh::meshSize"]
        [::std::mem::offset_of!(dai_StereoDepthProperties_RectificationMesh, meshSize) - 64usize];
    ["Offset of field: dai_StereoDepthProperties_RectificationMesh::stepWidth"]
        [::std::mem::offset_of!(dai_StereoDepthProperties_RectificationMesh, stepWidth) - 72usize];
    ["Offset of field: dai_StereoDepthProperties_RectificationMesh::stepHeight"]
        [::std::mem::offset_of!(dai_StereoDepthProperties_RectificationMesh, stepHeight) - 74usize];
};
#[doc = " Align the disparity/depth to the perspective of a rectified output, or center it"]
pub use self::dai_StereoDepthConfig_AlgorithmControl_DepthAlign as dai_StereoDepthProperties_DepthAlign;
#[doc = " Median filter config for disparity post-processing"]
pub use self::dai_StereoDepthConfig_MedianFilter as dai_StereoDepthProperties_MedianFilter;
pub const dai_StereoDepthProperties_AUTO: ::std::os::raw::c_int = -1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_StereoDepthProperties"]
        [::std::mem::size_of::<dai_StereoDepthProperties>() - 480usize];
    ["Alignment of dai_StereoDepthProperties"]
        [::std::mem::align_of::<dai_StereoDepthProperties>() - 8usize];
    ["Offset of field: dai_StereoDepthProperties::initialConfig"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, initialConfig) - 8usize];
    ["Offset of field: dai_StereoDepthProperties::depthAlignCamera"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, depthAlignCamera) - 296usize];
    ["Offset of field: dai_StereoDepthProperties::enableRectification"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, enableRectification) - 300usize];
    ["Offset of field: dai_StereoDepthProperties::rectifyEdgeFillColor"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, rectifyEdgeFillColor) - 304usize];
    ["Offset of field: dai_StereoDepthProperties::width"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, width) - 308usize];
    ["Offset of field: dai_StereoDepthProperties::height"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, height) - 316usize];
    ["Offset of field: dai_StereoDepthProperties::outWidth"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, outWidth) - 324usize];
    ["Offset of field: dai_StereoDepthProperties::outHeight"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, outHeight) - 332usize];
    ["Offset of field: dai_StereoDepthProperties::outKeepAspectRatio"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, outKeepAspectRatio) - 340usize];
    ["Offset of field: dai_StereoDepthProperties::mesh"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, mesh) - 344usize];
    ["Offset of field: dai_StereoDepthProperties::enableRuntimeStereoModeSwitch"][::std::mem::offset_of!(
        dai_StereoDepthProperties,
        enableRuntimeStereoModeSwitch
    ) - 424usize];
    ["Offset of field: dai_StereoDepthProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, numFramesPool) - 428usize];
    ["Offset of field: dai_StereoDepthProperties::numPostProcessingShaves"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, numPostProcessingShaves) - 432usize];
    ["Offset of field: dai_StereoDepthProperties::numPostProcessingMemorySlices"][::std::mem::offset_of!(
        dai_StereoDepthProperties,
        numPostProcessingMemorySlices
    ) - 436usize];
    ["Offset of field: dai_StereoDepthProperties::focalLengthFromCalibration"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, focalLengthFromCalibration) - 440usize];
    ["Offset of field: dai_StereoDepthProperties::useHomographyRectification"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, useHomographyRectification) - 441usize];
    ["Offset of field: dai_StereoDepthProperties::enableFrameSync"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, enableFrameSync) - 443usize];
    ["Offset of field: dai_StereoDepthProperties::baseline"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, baseline) - 444usize];
    ["Offset of field: dai_StereoDepthProperties::focalLength"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, focalLength) - 452usize];
    ["Offset of field: dai_StereoDepthProperties::disparityToDepthUseSpecTranslation"][::std::mem::offset_of!(
        dai_StereoDepthProperties,
        disparityToDepthUseSpecTranslation
    )
        - 460usize];
    ["Offset of field: dai_StereoDepthProperties::rectificationUseSpecTranslation"][::std::mem::offset_of!(
        dai_StereoDepthProperties,
        rectificationUseSpecTranslation
    ) - 462usize];
    ["Offset of field: dai_StereoDepthProperties::depthAlignmentUseSpecTranslation"][::std::mem::offset_of!(
        dai_StereoDepthProperties,
        depthAlignmentUseSpecTranslation
    ) - 464usize];
    ["Offset of field: dai_StereoDepthProperties::alphaScaling"]
        [::std::mem::offset_of!(dai_StereoDepthProperties, alphaScaling) - 468usize];
};
#[doc = " SpatialLocation configuration thresholds structure\n\n Contains configuration data for lower and upper threshold in depth units (millimeter by default) for ROI.\n Values outside of threshold range will be ignored when calculating spatial coordinates from depth map."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_SpatialLocationCalculatorConfigThresholds {
    #[doc = " Values less or equal than this threshold are not taken into calculation."]
    pub lowerThreshold: u32,
    #[doc = " Values greater or equal than this threshold are not taken into calculation."]
    pub upperThreshold: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialLocationCalculatorConfigThresholds"]
        [::std::mem::size_of::<dai_SpatialLocationCalculatorConfigThresholds>() - 8usize];
    ["Alignment of dai_SpatialLocationCalculatorConfigThresholds"]
        [::std::mem::align_of::<dai_SpatialLocationCalculatorConfigThresholds>() - 4usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfigThresholds::lowerThreshold"][::std::mem::offset_of!(
        dai_SpatialLocationCalculatorConfigThresholds,
        lowerThreshold
    ) - 0usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfigThresholds::upperThreshold"][::std::mem::offset_of!(
        dai_SpatialLocationCalculatorConfigThresholds,
        upperThreshold
    ) - 4usize];
};
pub const dai_SpatialLocationCalculatorAlgorithm_AVERAGE: dai_SpatialLocationCalculatorAlgorithm =
    0;
pub const dai_SpatialLocationCalculatorAlgorithm_MEAN: dai_SpatialLocationCalculatorAlgorithm = 0;
pub const dai_SpatialLocationCalculatorAlgorithm_MIN: dai_SpatialLocationCalculatorAlgorithm = 1;
pub const dai_SpatialLocationCalculatorAlgorithm_MAX: dai_SpatialLocationCalculatorAlgorithm = 2;
pub const dai_SpatialLocationCalculatorAlgorithm_MODE: dai_SpatialLocationCalculatorAlgorithm = 3;
pub const dai_SpatialLocationCalculatorAlgorithm_MEDIAN: dai_SpatialLocationCalculatorAlgorithm = 4;
#[doc = " SpatialLocationCalculatorAlgorithm configuration modes\n\n Contains calculation method used to obtain spatial locations."]
pub type dai_SpatialLocationCalculatorAlgorithm = u32;
#[doc = " SpatialLocation configuration data structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_SpatialLocationCalculatorConfigData {
    #[doc = " Region of interest for spatial location calculation."]
    pub roi: dai_Rect,
    #[doc = " Upper and lower thresholds for depth values to take into consideration."]
    pub depthThresholds: dai_SpatialLocationCalculatorConfigThresholds,
    #[doc = " Calculation method used to obtain spatial locations\n Average/mean: the average of ROI is used for calculation.\n Min: the minimum value inside ROI is used for calculation.\n Max: the maximum value inside ROI is used for calculation.\n Mode: the most frequent value inside ROI is used for calculation.\n Median: the median value inside ROI is used for calculation.\n Default: median."]
    pub calculationAlgorithm: dai_SpatialLocationCalculatorAlgorithm,
    #[doc = " Step size for calculation.\n Step size 1 means that every pixel is taken into calculation, size 2 means every second etc.\n Default value AUTO: for AVERAGE, MIN, MAX step size is 1; for MODE/MEDIAN it's 2."]
    pub stepSize: ::std::os::raw::c_int,
}
pub const dai_SpatialLocationCalculatorConfigData_AUTO: ::std::os::raw::c_int = -1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialLocationCalculatorConfigData"]
        [::std::mem::size_of::<dai_SpatialLocationCalculatorConfigData>() - 36usize];
    ["Alignment of dai_SpatialLocationCalculatorConfigData"]
        [::std::mem::align_of::<dai_SpatialLocationCalculatorConfigData>() - 4usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfigData::roi"]
        [::std::mem::offset_of!(dai_SpatialLocationCalculatorConfigData, roi) - 0usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfigData::depthThresholds"][::std::mem::offset_of!(
        dai_SpatialLocationCalculatorConfigData,
        depthThresholds
    ) - 20usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfigData::calculationAlgorithm"][::std::mem::offset_of!(
        dai_SpatialLocationCalculatorConfigData,
        calculationAlgorithm
    ) - 28usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfigData::stepSize"]
        [::std::mem::offset_of!(dai_SpatialLocationCalculatorConfigData, stepSize) - 32usize];
};
#[doc = " SpatialLocationCalculatorConfig message. Carries ROI (region of interest) and threshold for depth calculation"]
#[repr(C)]
pub struct dai_SpatialLocationCalculatorConfig {
    pub _base: dai_Buffer,
    pub config: std_vector,
}
pub type dai_SpatialLocationCalculatorConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialLocationCalculatorConfig"]
        [::std::mem::size_of::<dai_SpatialLocationCalculatorConfig>() - 88usize];
    ["Alignment of dai_SpatialLocationCalculatorConfig"]
        [::std::mem::align_of::<dai_SpatialLocationCalculatorConfig>() - 8usize];
    ["Offset of field: dai_SpatialLocationCalculatorConfig::config"]
        [::std::mem::offset_of!(dai_SpatialLocationCalculatorConfig, config) - 64usize];
};
unsafe extern "C" {
    #[doc = " Set a vector of ROIs as configuration data.\n @param ROIs Vector of configuration parameters for ROIs (region of interests)"]
    #[link_name = "\u{1}_ZN3dai31SpatialLocationCalculatorConfig7setROIsESt6vectorINS_35SpatialLocationCalculatorConfigDataESaIS2_EE"]
    pub fn dai_SpatialLocationCalculatorConfig_setROIs(
        this: *mut dai_SpatialLocationCalculatorConfig,
        ROIs: std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Add a new ROI to configuration data.\n @param roi Configuration parameters for ROI (region of interest)"]
    #[link_name = "\u{1}_ZN3dai31SpatialLocationCalculatorConfig6addROIERNS_35SpatialLocationCalculatorConfigDataE"]
    pub fn dai_SpatialLocationCalculatorConfig_addROI(
        this: *mut dai_SpatialLocationCalculatorConfig,
        ROI: *mut dai_SpatialLocationCalculatorConfigData,
    );
}
unsafe extern "C" {
    #[doc = " Retrieve configuration data for SpatialLocationCalculator\n @returns Vector of configuration parameters for ROIs (region of interests)"]
    #[link_name = "\u{1}_ZNK3dai31SpatialLocationCalculatorConfig13getConfigDataEv"]
    pub fn dai_SpatialLocationCalculatorConfig_getConfigData(
        this: *const dai_SpatialLocationCalculatorConfig,
    ) -> std_vector;
}
impl dai_SpatialLocationCalculatorConfig {
    #[inline]
    pub unsafe fn setROIs(&mut self, ROIs: std_vector) {
        dai_SpatialLocationCalculatorConfig_setROIs(self, ROIs)
    }
    #[inline]
    pub unsafe fn addROI(&mut self, ROI: *mut dai_SpatialLocationCalculatorConfigData) {
        dai_SpatialLocationCalculatorConfig_addROI(self, ROI)
    }
    #[inline]
    pub unsafe fn getConfigData(&self) -> std_vector {
        dai_SpatialLocationCalculatorConfig_getConfigData(self)
    }
}
#[doc = " Specify properties for SpatialDetectionNetwork"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_SpatialDetectionNetworkProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub detectedBBScaleFactor: f32,
    pub depthThresholds: dai_SpatialLocationCalculatorConfigThresholds,
    pub calculationAlgorithm: dai_SpatialLocationCalculatorAlgorithm,
    pub stepSize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialDetectionNetworkProperties"]
        [::std::mem::size_of::<dai_SpatialDetectionNetworkProperties>() - 32usize];
    ["Alignment of dai_SpatialDetectionNetworkProperties"]
        [::std::mem::align_of::<dai_SpatialDetectionNetworkProperties>() - 8usize];
    ["Offset of field: dai_SpatialDetectionNetworkProperties::detectedBBScaleFactor"][::std::mem::offset_of!(
        dai_SpatialDetectionNetworkProperties,
        detectedBBScaleFactor
    ) - 8usize];
    ["Offset of field: dai_SpatialDetectionNetworkProperties::depthThresholds"]
        [::std::mem::offset_of!(dai_SpatialDetectionNetworkProperties, depthThresholds) - 12usize];
    ["Offset of field: dai_SpatialDetectionNetworkProperties::calculationAlgorithm"][::std::mem::offset_of!(
        dai_SpatialDetectionNetworkProperties,
        calculationAlgorithm
    ) - 20usize];
    ["Offset of field: dai_SpatialDetectionNetworkProperties::stepSize"]
        [::std::mem::offset_of!(dai_SpatialDetectionNetworkProperties, stepSize) - 24usize];
};
#[doc = " Specify properties for SpatialLocationCalculator"]
#[repr(C)]
pub struct dai_SpatialLocationCalculatorProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    pub roiConfig: dai_SpatialLocationCalculatorConfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialLocationCalculatorProperties"]
        [::std::mem::size_of::<dai_SpatialLocationCalculatorProperties>() - 96usize];
    ["Alignment of dai_SpatialLocationCalculatorProperties"]
        [::std::mem::align_of::<dai_SpatialLocationCalculatorProperties>() - 8usize];
    ["Offset of field: dai_SpatialLocationCalculatorProperties::roiConfig"]
        [::std::mem::offset_of!(dai_SpatialLocationCalculatorProperties, roiConfig) - 8usize];
};
#[doc = " Specify properties for Sync."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_SyncProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " The maximal interval the messages can be apart in nanoseconds."]
    pub syncThresholdNs: i64,
    #[doc = " The number of syncing attempts before fail (num of replaced messages)."]
    pub syncAttempts: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SyncProperties"][::std::mem::size_of::<dai_SyncProperties>() - 24usize];
    ["Alignment of dai_SyncProperties"][::std::mem::align_of::<dai_SyncProperties>() - 8usize];
    ["Offset of field: dai_SyncProperties::syncThresholdNs"]
        [::std::mem::offset_of!(dai_SyncProperties, syncThresholdNs) - 8usize];
    ["Offset of field: dai_SyncProperties::syncAttempts"]
        [::std::mem::offset_of!(dai_SyncProperties, syncAttempts) - 16usize];
};
#[doc = " SystemLoggerProperties structure"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_SystemLoggerProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Rate at which the messages are going to be sent in hertz"]
    pub rateHz: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SystemLoggerProperties"]
        [::std::mem::size_of::<dai_SystemLoggerProperties>() - 16usize];
    ["Alignment of dai_SystemLoggerProperties"]
        [::std::mem::align_of::<dai_SystemLoggerProperties>() - 8usize];
    ["Offset of field: dai_SystemLoggerProperties::rateHz"]
        [::std::mem::offset_of!(dai_SystemLoggerProperties, rateHz) - 8usize];
};
#[doc = " ThermalConfig message. Currently unused."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_ThermalConfig {
    pub _base: dai_Buffer,
    #[doc = " Ambient factors that affect the temperature measurement of a Thermal sensor."]
    pub ambientParams: dai_ThermalConfig_ThermalAmbientParams,
    #[doc = " Parameters for Flat-Field-Correction."]
    pub ffcParams: dai_ThermalConfig_ThermalFFCParams,
    #[doc = " Image signal processing parameters on the sensor."]
    pub imageParams: dai_ThermalConfig_ThermalImageParams,
}
pub const dai_ThermalConfig_ThermalImageOrientation_Normal:
    dai_ThermalConfig_ThermalImageOrientation = 0;
pub const dai_ThermalConfig_ThermalImageOrientation_Mirror:
    dai_ThermalConfig_ThermalImageOrientation = 1;
pub const dai_ThermalConfig_ThermalImageOrientation_Flip:
    dai_ThermalConfig_ThermalImageOrientation = 2;
pub const dai_ThermalConfig_ThermalImageOrientation_MirrorFlip:
    dai_ThermalConfig_ThermalImageOrientation = 3;
#[doc = " Orientation of the image."]
pub type dai_ThermalConfig_ThermalImageOrientation = ::std::os::raw::c_uint;
pub const dai_ThermalConfig_ThermalGainMode_LOW: dai_ThermalConfig_ThermalGainMode = 0;
pub const dai_ThermalConfig_ThermalGainMode_HIGH: dai_ThermalConfig_ThermalGainMode = 1;
#[doc = " Thermal sensor gain mode.\n Use low gain in high energy environments."]
pub type dai_ThermalConfig_ThermalGainMode = ::std::os::raw::c_uint;
#[doc = " Ambient factors that affect the temperature measurement of a Thermal sensor."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ThermalConfig_ThermalAmbientParams {
    #[doc = " Distance to the measured object. unit:cnt(128cnt=1m), range:0-25600(0-200m)"]
    pub distance: std_optional,
    #[doc = " Reflection temperature. unit:K, range:230-500(high gain), 230-900(low gain)"]
    pub reflectionTemperature: std_optional,
    #[doc = " Atmospheric temperature. unit:K, range:230-500(high gain), 230-900(low gain)"]
    pub atmosphericTemperature: std_optional,
    #[doc = " Emissivity. unit:1/128, range:1-128(0.01-1)"]
    pub targetEmissivity: std_optional,
    #[doc = " Atmospheric transmittance. unit:1/128, range:1-128(0.01-1)"]
    pub atmosphericTransmittance: std_optional,
    #[doc = " Gain mode, low or high."]
    pub gainMode: std_optional,
}
pub type dai_ThermalConfig_ThermalAmbientParams_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ThermalConfig_ThermalAmbientParams"]
        [::std::mem::size_of::<dai_ThermalConfig_ThermalAmbientParams>() - 24usize];
    ["Alignment of dai_ThermalConfig_ThermalAmbientParams"]
        [::std::mem::align_of::<dai_ThermalConfig_ThermalAmbientParams>() - 4usize];
    ["Offset of field: dai_ThermalConfig_ThermalAmbientParams::distance"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalAmbientParams, distance) - 0usize];
    ["Offset of field: dai_ThermalConfig_ThermalAmbientParams::reflectionTemperature"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalAmbientParams,
        reflectionTemperature
    ) - 4usize];
    ["Offset of field: dai_ThermalConfig_ThermalAmbientParams::atmosphericTemperature"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalAmbientParams,
        atmosphericTemperature
    ) - 8usize];
    ["Offset of field: dai_ThermalConfig_ThermalAmbientParams::targetEmissivity"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalAmbientParams,
        targetEmissivity
    ) - 12usize];
    ["Offset of field: dai_ThermalConfig_ThermalAmbientParams::atmosphericTransmittance"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalAmbientParams,
        atmosphericTransmittance
    )
        - 14usize];
    ["Offset of field: dai_ThermalConfig_ThermalAmbientParams::gainMode"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalAmbientParams, gainMode) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ThermalConfig_ThermalFFCParams {
    #[doc = " Auto Flat-Field-Correction. Controls wheather the shutter is controlled by the sensor module automatically or not."]
    pub autoFFC: std_optional,
    #[doc = " Minimum FFC interval when auto FFC is enabled.\n The time interval between two FFC should not be less than this value."]
    pub minFFCInterval: std_optional,
    #[doc = " Maximum FFC interval when auto FFC is enabled.\n The time interval between two FFC should not be more than this value."]
    pub maxFFCInterval: std_optional,
    #[doc = " Auto FFC trigger threshold.\n The condition for triggering the auto FFC is that the change of Vtemp value exceeds a certain threshold, which is called the Auto FFC trigger\n threshold."]
    pub autoFFCTempThreshold: std_optional,
    #[doc = " The shutter blade may open/close abnormally during strong mechanical shock (such as fall), and a monitoring process is designed in the firmware to\n correct the abnormal shutter switch in time. Turn on or off the fall protect mechanism."]
    pub fallProtection: std_optional,
    #[doc = " Frequent FFC will cause shutter heating, resulting in abnormal FFC effect and abnormal temperature measurement.\n Regardless of which mechanism triggers FFC, the minimum trigger interval must be limited."]
    pub minShutterInterval: std_optional,
    #[doc = " Set this to True/False to close/open the shutter when autoFFC is disabled."]
    pub closeManualShutter: std_optional,
    pub antiFallProtectionThresholdHighGainMode: std_optional,
    pub antiFallProtectionThresholdLowGainMode: std_optional,
}
pub type dai_ThermalConfig_ThermalFFCParams_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ThermalConfig_ThermalFFCParams"]
        [::std::mem::size_of::<dai_ThermalConfig_ThermalFFCParams>() - 30usize];
    ["Alignment of dai_ThermalConfig_ThermalFFCParams"]
        [::std::mem::align_of::<dai_ThermalConfig_ThermalFFCParams>() - 2usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::autoFFC"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalFFCParams, autoFFC) - 0usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::minFFCInterval"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalFFCParams, minFFCInterval) - 2usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::maxFFCInterval"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalFFCParams, maxFFCInterval) - 6usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::autoFFCTempThreshold"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalFFCParams,
        autoFFCTempThreshold
    ) - 10usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::fallProtection"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalFFCParams, fallProtection) - 14usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::minShutterInterval"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalFFCParams, minShutterInterval) - 16usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::closeManualShutter"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalFFCParams, closeManualShutter) - 20usize];
    [
        "Offset of field: dai_ThermalConfig_ThermalFFCParams::antiFallProtectionThresholdHighGainMode",
    ][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalFFCParams,
        antiFallProtectionThresholdHighGainMode
    ) - 22usize];
    ["Offset of field: dai_ThermalConfig_ThermalFFCParams::antiFallProtectionThresholdLowGainMode"]
        [::std::mem::offset_of!(
            dai_ThermalConfig_ThermalFFCParams,
            antiFallProtectionThresholdLowGainMode
        ) - 26usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ThermalConfig_ThermalImageParams {
    #[doc = " 0-3. Time noise filter level. Filters out the noise that appears over time."]
    pub timeNoiseFilterLevel: std_optional,
    #[doc = " 0-3. Spatial noise filter level."]
    pub spatialNoiseFilterLevel: std_optional,
    #[doc = " 0-4 Digital etail enhance level."]
    pub digitalDetailEnhanceLevel: std_optional,
    #[doc = " Image brightness level, 0-255."]
    pub brightnessLevel: std_optional,
    #[doc = " Image contrast level, 0-255."]
    pub contrastLevel: std_optional,
    #[doc = " Orientation of the image. Computed on the sensor."]
    pub orientation: std_optional,
}
pub type dai_ThermalConfig_ThermalImageParams_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ThermalConfig_ThermalImageParams"]
        [::std::mem::size_of::<dai_ThermalConfig_ThermalImageParams>() - 20usize];
    ["Alignment of dai_ThermalConfig_ThermalImageParams"]
        [::std::mem::align_of::<dai_ThermalConfig_ThermalImageParams>() - 4usize];
    ["Offset of field: dai_ThermalConfig_ThermalImageParams::timeNoiseFilterLevel"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalImageParams,
        timeNoiseFilterLevel
    ) - 0usize];
    ["Offset of field: dai_ThermalConfig_ThermalImageParams::spatialNoiseFilterLevel"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalImageParams,
        spatialNoiseFilterLevel
    ) - 2usize];
    ["Offset of field: dai_ThermalConfig_ThermalImageParams::digitalDetailEnhanceLevel"][::std::mem::offset_of!(
        dai_ThermalConfig_ThermalImageParams,
        digitalDetailEnhanceLevel
    )
        - 4usize];
    ["Offset of field: dai_ThermalConfig_ThermalImageParams::brightnessLevel"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalImageParams, brightnessLevel) - 6usize];
    ["Offset of field: dai_ThermalConfig_ThermalImageParams::contrastLevel"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalImageParams, contrastLevel) - 8usize];
    ["Offset of field: dai_ThermalConfig_ThermalImageParams::orientation"]
        [::std::mem::offset_of!(dai_ThermalConfig_ThermalImageParams, orientation) - 12usize];
};
pub type dai_ThermalConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ThermalConfig"][::std::mem::size_of::<dai_ThermalConfig>() - 144usize];
    ["Alignment of dai_ThermalConfig"][::std::mem::align_of::<dai_ThermalConfig>() - 8usize];
    ["Offset of field: dai_ThermalConfig::ambientParams"]
        [::std::mem::offset_of!(dai_ThermalConfig, ambientParams) - 64usize];
    ["Offset of field: dai_ThermalConfig::ffcParams"]
        [::std::mem::offset_of!(dai_ThermalConfig, ffcParams) - 88usize];
    ["Offset of field: dai_ThermalConfig::imageParams"]
        [::std::mem::offset_of!(dai_ThermalConfig, imageParams) - 120usize];
};
#[doc = " Specify properties for Thermal"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_ThermalProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Initial Thermal config"]
    pub initialConfig: dai_ThermalConfig,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Which socket will color camera use"]
    pub boardSocket: dai_CameraBoardSocket,
    #[doc = " Camera sensor FPS"]
    pub fps: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ThermalProperties"][::std::mem::size_of::<dai_ThermalProperties>() - 168usize];
    ["Alignment of dai_ThermalProperties"]
        [::std::mem::align_of::<dai_ThermalProperties>() - 8usize];
    ["Offset of field: dai_ThermalProperties::initialConfig"]
        [::std::mem::offset_of!(dai_ThermalProperties, initialConfig) - 8usize];
    ["Offset of field: dai_ThermalProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_ThermalProperties, numFramesPool) - 152usize];
    ["Offset of field: dai_ThermalProperties::boardSocket"]
        [::std::mem::offset_of!(dai_ThermalProperties, boardSocket) - 156usize];
    ["Offset of field: dai_ThermalProperties::fps"]
        [::std::mem::offset_of!(dai_ThermalProperties, fps) - 160usize];
};
pub const dai_MedianFilter_MEDIAN_OFF: dai_MedianFilter = 0;
pub const dai_MedianFilter_KERNEL_3x3: dai_MedianFilter = 3;
pub const dai_MedianFilter_KERNEL_5x5: dai_MedianFilter = 5;
pub const dai_MedianFilter_KERNEL_7x7: dai_MedianFilter = 7;
#[doc = " Median filter config"]
pub type dai_MedianFilter = i32;
#[doc = " ToFConfig message. Carries config for feature tracking algorithm"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_ToFConfig {
    pub _base: dai_Buffer,
    #[doc = " Set kernel size for depth median filtering, or disable"]
    pub median: dai_MedianFilter,
    pub phaseUnwrappingLevel: ::std::os::raw::c_int,
    pub phaseUnwrapErrorThreshold: u16,
    pub enablePhaseShuffleTemporalFilter: bool,
    pub enableBurstMode: bool,
    pub enableDistortionCorrection: bool,
    pub enableFPPNCorrection: std_optional,
    pub enableOpticalCorrection: std_optional,
    pub enableTemperatureCorrection: std_optional,
    pub enableWiggleCorrection: std_optional,
    pub enablePhaseUnwrapping: std_optional,
}
pub type dai_ToFConfig_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ToFConfig"][::std::mem::size_of::<dai_ToFConfig>() - 88usize];
    ["Alignment of dai_ToFConfig"][::std::mem::align_of::<dai_ToFConfig>() - 8usize];
    ["Offset of field: dai_ToFConfig::median"]
        [::std::mem::offset_of!(dai_ToFConfig, median) - 64usize];
    ["Offset of field: dai_ToFConfig::phaseUnwrappingLevel"]
        [::std::mem::offset_of!(dai_ToFConfig, phaseUnwrappingLevel) - 68usize];
    ["Offset of field: dai_ToFConfig::phaseUnwrapErrorThreshold"]
        [::std::mem::offset_of!(dai_ToFConfig, phaseUnwrapErrorThreshold) - 72usize];
    ["Offset of field: dai_ToFConfig::enablePhaseShuffleTemporalFilter"]
        [::std::mem::offset_of!(dai_ToFConfig, enablePhaseShuffleTemporalFilter) - 74usize];
    ["Offset of field: dai_ToFConfig::enableBurstMode"]
        [::std::mem::offset_of!(dai_ToFConfig, enableBurstMode) - 75usize];
    ["Offset of field: dai_ToFConfig::enableDistortionCorrection"]
        [::std::mem::offset_of!(dai_ToFConfig, enableDistortionCorrection) - 76usize];
    ["Offset of field: dai_ToFConfig::enableFPPNCorrection"]
        [::std::mem::offset_of!(dai_ToFConfig, enableFPPNCorrection) - 77usize];
    ["Offset of field: dai_ToFConfig::enableOpticalCorrection"]
        [::std::mem::offset_of!(dai_ToFConfig, enableOpticalCorrection) - 79usize];
    ["Offset of field: dai_ToFConfig::enableTemperatureCorrection"]
        [::std::mem::offset_of!(dai_ToFConfig, enableTemperatureCorrection) - 81usize];
    ["Offset of field: dai_ToFConfig::enableWiggleCorrection"]
        [::std::mem::offset_of!(dai_ToFConfig, enableWiggleCorrection) - 83usize];
    ["Offset of field: dai_ToFConfig::enablePhaseUnwrapping"]
        [::std::mem::offset_of!(dai_ToFConfig, enablePhaseUnwrapping) - 85usize];
};
unsafe extern "C" {
    #[doc = " @param median Set kernel size for median filtering, or disable"]
    #[link_name = "\u{1}_ZN3dai9ToFConfig15setMedianFilterENS_12MedianFilterE"]
    pub fn dai_ToFConfig_setMedianFilter(
        this: *mut dai_ToFConfig,
        median: dai_MedianFilter,
    ) -> *mut dai_ToFConfig;
}
impl dai_ToFConfig {
    #[inline]
    pub unsafe fn setMedianFilter(&mut self, median: dai_MedianFilter) -> *mut dai_ToFConfig {
        dai_ToFConfig_setMedianFilter(self, median)
    }
}
#[doc = " Specify properties for ToF"]
#[repr(C)]
pub struct dai_ToFProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Initial ToF config"]
    pub initialConfig: dai_ToFConfig,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Number of shaves reserved for ToF decoding."]
    pub numShaves: ::std::os::raw::c_int,
    #[doc = " Warp HW IDs to use for undistortion, if empty, use auto/default"]
    pub warpHwIds: std_vector,
    #[doc = " Which socket will color camera use"]
    pub boardSocket: dai_CameraBoardSocket,
    #[doc = " Which camera name will color camera use"]
    pub cameraName: std_string,
    #[doc = " Camera sensor image orientation / pixel readout"]
    pub imageOrientation: dai_CameraImageOrientation,
    #[doc = " Camera sensor FPS"]
    pub fps: f32,
    #[doc = " Pool sizes"]
    pub numFramesPoolRaw: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ToFProperties"][::std::mem::size_of::<dai_ToFProperties>() - 184usize];
    ["Alignment of dai_ToFProperties"][::std::mem::align_of::<dai_ToFProperties>() - 8usize];
    ["Offset of field: dai_ToFProperties::initialConfig"]
        [::std::mem::offset_of!(dai_ToFProperties, initialConfig) - 8usize];
    ["Offset of field: dai_ToFProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_ToFProperties, numFramesPool) - 96usize];
    ["Offset of field: dai_ToFProperties::numShaves"]
        [::std::mem::offset_of!(dai_ToFProperties, numShaves) - 100usize];
    ["Offset of field: dai_ToFProperties::warpHwIds"]
        [::std::mem::offset_of!(dai_ToFProperties, warpHwIds) - 104usize];
    ["Offset of field: dai_ToFProperties::boardSocket"]
        [::std::mem::offset_of!(dai_ToFProperties, boardSocket) - 128usize];
    ["Offset of field: dai_ToFProperties::cameraName"]
        [::std::mem::offset_of!(dai_ToFProperties, cameraName) - 136usize];
    ["Offset of field: dai_ToFProperties::imageOrientation"]
        [::std::mem::offset_of!(dai_ToFProperties, imageOrientation) - 168usize];
    ["Offset of field: dai_ToFProperties::fps"]
        [::std::mem::offset_of!(dai_ToFProperties, fps) - 172usize];
    ["Offset of field: dai_ToFProperties::numFramesPoolRaw"]
        [::std::mem::offset_of!(dai_ToFProperties, numFramesPoolRaw) - 176usize];
};
#[doc = " Properties for UVC node"]
#[repr(C)]
#[derive(Debug)]
pub struct dai_UVCProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " <gpio_number, value> list for GPIOs to set at init"]
    pub gpioInit: std_unordered_map,
    #[doc = " <gpio_number, value> list for GPIOs to set when streaming is enabled"]
    pub gpioStreamOn: std_unordered_map,
    #[doc = " <gpio_number, value> list for GPIOs to set when streaming is disabled"]
    pub gpioStreamOff: std_unordered_map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_UVCProperties"][::std::mem::size_of::<dai_UVCProperties>() - 176usize];
    ["Alignment of dai_UVCProperties"][::std::mem::align_of::<dai_UVCProperties>() - 8usize];
    ["Offset of field: dai_UVCProperties::gpioInit"]
        [::std::mem::offset_of!(dai_UVCProperties, gpioInit) - 8usize];
    ["Offset of field: dai_UVCProperties::gpioStreamOn"]
        [::std::mem::offset_of!(dai_UVCProperties, gpioStreamOn) - 64usize];
    ["Offset of field: dai_UVCProperties::gpioStreamOff"]
        [::std::mem::offset_of!(dai_UVCProperties, gpioStreamOff) - 120usize];
};
#[doc = " Specify properties for Warp"]
#[repr(C)]
pub struct dai_WarpProperties {
    pub _base: dai_PropertiesSerializable<dai_Properties>,
    #[doc = " Output width"]
    pub outputWidth: ::std::os::raw::c_int,
    #[doc = " Output height"]
    pub outputHeight: ::std::os::raw::c_int,
    #[doc = " Maximum output frame size in bytes (eg: 300x300 BGR image -> 300*300*3 bytes)"]
    pub outputFrameSize: ::std::os::raw::c_int,
    #[doc = " Num frames in output pool"]
    pub numFramesPool: ::std::os::raw::c_int,
    #[doc = " Custom warp mesh width. Set to zero to disable"]
    pub meshWidth: ::std::os::raw::c_int,
    #[doc = " Custom warp mesh height. Set to zero to disable."]
    pub meshHeight: ::std::os::raw::c_int,
    #[doc = " Custom warp mesh uri. Set to empty string to disable."]
    pub meshUri: std_string,
    #[doc = " Warp HW IDs to use, if empty, use auto/default"]
    pub warpHwIds: std_vector,
    pub interpolation: dai_Interpolation,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_WarpProperties"][::std::mem::size_of::<dai_WarpProperties>() - 96usize];
    ["Alignment of dai_WarpProperties"][::std::mem::align_of::<dai_WarpProperties>() - 8usize];
    ["Offset of field: dai_WarpProperties::outputWidth"]
        [::std::mem::offset_of!(dai_WarpProperties, outputWidth) - 8usize];
    ["Offset of field: dai_WarpProperties::outputHeight"]
        [::std::mem::offset_of!(dai_WarpProperties, outputHeight) - 12usize];
    ["Offset of field: dai_WarpProperties::outputFrameSize"]
        [::std::mem::offset_of!(dai_WarpProperties, outputFrameSize) - 16usize];
    ["Offset of field: dai_WarpProperties::numFramesPool"]
        [::std::mem::offset_of!(dai_WarpProperties, numFramesPool) - 20usize];
    ["Offset of field: dai_WarpProperties::meshWidth"]
        [::std::mem::offset_of!(dai_WarpProperties, meshWidth) - 24usize];
    ["Offset of field: dai_WarpProperties::meshHeight"]
        [::std::mem::offset_of!(dai_WarpProperties, meshHeight) - 28usize];
    ["Offset of field: dai_WarpProperties::meshUri"]
        [::std::mem::offset_of!(dai_WarpProperties, meshUri) - 32usize];
    ["Offset of field: dai_WarpProperties::warpHwIds"]
        [::std::mem::offset_of!(dai_WarpProperties, warpHwIds) - 64usize];
    ["Offset of field: dai_WarpProperties::interpolation"]
        [::std::mem::offset_of!(dai_WarpProperties, interpolation) - 88usize];
};
#[doc = " MessageGroup message. Carries multiple messages in one."]
#[repr(C)]
pub struct dai_MessageGroup {
    pub _base: dai_Buffer,
    pub group: std_map,
}
pub type dai_MessageGroup_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_MessageGroup"][::std::mem::size_of::<dai_MessageGroup>() - 112usize];
    ["Alignment of dai_MessageGroup"][::std::mem::align_of::<dai_MessageGroup>() - 8usize];
    ["Offset of field: dai_MessageGroup::group"]
        [::std::mem::offset_of!(dai_MessageGroup, group) - 64usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12MessageGroup3addERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt10shared_ptrINS_9ADatatypeEE"]
    pub fn dai_MessageGroup_add(
        this: *mut dai_MessageGroup,
        name: *const std_string,
        value: *const std_shared_ptr,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12MessageGroup5beginB5cxx11Ev"]
    pub fn dai_MessageGroup_begin(this: *mut dai_MessageGroup) -> u64;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai12MessageGroup3endB5cxx11Ev"]
    pub fn dai_MessageGroup_end(this: *mut dai_MessageGroup) -> u64;
}
unsafe extern "C" {
    #[doc = " True if all messages in the group are in the interval\n @param thresholdNs Maximal interval between messages"]
    #[link_name = "\u{1}_ZNK3dai12MessageGroup8isSyncedEl"]
    pub fn dai_MessageGroup_isSynced(this: *const dai_MessageGroup, thresholdNs: i64) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves interval between the first and the last message in the group."]
    #[link_name = "\u{1}_ZNK3dai12MessageGroup13getIntervalNsEv"]
    pub fn dai_MessageGroup_getIntervalNs(this: *const dai_MessageGroup) -> i64;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai12MessageGroup14getNumMessagesEv"]
    pub fn dai_MessageGroup_getNumMessages(this: *const dai_MessageGroup) -> i64;
}
unsafe extern "C" {
    #[doc = " Gets the names of messages in the group"]
    #[link_name = "\u{1}_ZNK3dai12MessageGroup15getMessageNamesB5cxx11Ev"]
    pub fn dai_MessageGroup_getMessageNames(this: *const dai_MessageGroup) -> std_vector;
}
impl dai_MessageGroup {
    #[inline]
    pub unsafe fn add(&mut self, name: *const std_string, value: *const std_shared_ptr) {
        dai_MessageGroup_add(self, name, value)
    }
    #[inline]
    pub unsafe fn begin(&mut self) -> u64 {
        dai_MessageGroup_begin(self)
    }
    #[inline]
    pub unsafe fn end(&mut self) -> u64 {
        dai_MessageGroup_end(self)
    }
    #[inline]
    pub unsafe fn isSynced(&self, thresholdNs: i64) -> bool {
        dai_MessageGroup_isSynced(self, thresholdNs)
    }
    #[inline]
    pub unsafe fn getIntervalNs(&self) -> i64 {
        dai_MessageGroup_getIntervalNs(self)
    }
    #[inline]
    pub unsafe fn getNumMessages(&self) -> i64 {
        dai_MessageGroup_getNumMessages(self)
    }
    #[inline]
    pub unsafe fn getMessageNames(&self) -> std_vector {
        dai_MessageGroup_getMessageNames(self)
    }
}
#[doc = " Point3fRGBA structure\n\n x,y,z coordinates and RGB color values that define a 3D point with color."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Point3fRGBA {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Point3fRGBA"][::std::mem::size_of::<dai_Point3fRGBA>() - 16usize];
    ["Alignment of dai_Point3fRGBA"][::std::mem::align_of::<dai_Point3fRGBA>() - 4usize];
    ["Offset of field: dai_Point3fRGBA::x"][::std::mem::offset_of!(dai_Point3fRGBA, x) - 0usize];
    ["Offset of field: dai_Point3fRGBA::y"][::std::mem::offset_of!(dai_Point3fRGBA, y) - 4usize];
    ["Offset of field: dai_Point3fRGBA::z"][::std::mem::offset_of!(dai_Point3fRGBA, z) - 8usize];
    ["Offset of field: dai_Point3fRGBA::r"][::std::mem::offset_of!(dai_Point3fRGBA, r) - 12usize];
    ["Offset of field: dai_Point3fRGBA::g"][::std::mem::offset_of!(dai_Point3fRGBA, g) - 13usize];
    ["Offset of field: dai_Point3fRGBA::b"][::std::mem::offset_of!(dai_Point3fRGBA, b) - 14usize];
    ["Offset of field: dai_Point3fRGBA::a"][::std::mem::offset_of!(dai_Point3fRGBA, a) - 15usize];
};
#[doc = " PointCloudData message. Carries point cloud data."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_PointCloudData {
    pub _base: dai_Buffer,
    pub _base_1: dai_ProtoSerializable,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub instanceNum: u32,
    pub minx: f32,
    pub miny: f32,
    pub minz: f32,
    pub maxx: f32,
    pub maxy: f32,
    pub maxz: f32,
    pub sparse: bool,
    pub color: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_PointCloudData_dependent_false {
    pub _address: u8,
}
pub type dai_PointCloudData_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_PointCloudData"][::std::mem::size_of::<dai_PointCloudData>() - 112usize];
    ["Alignment of dai_PointCloudData"][::std::mem::align_of::<dai_PointCloudData>() - 8usize];
    ["Offset of field: dai_PointCloudData::width"]
        [::std::mem::offset_of!(dai_PointCloudData, width) - 72usize];
    ["Offset of field: dai_PointCloudData::height"]
        [::std::mem::offset_of!(dai_PointCloudData, height) - 76usize];
    ["Offset of field: dai_PointCloudData::instanceNum"]
        [::std::mem::offset_of!(dai_PointCloudData, instanceNum) - 80usize];
    ["Offset of field: dai_PointCloudData::minx"]
        [::std::mem::offset_of!(dai_PointCloudData, minx) - 84usize];
    ["Offset of field: dai_PointCloudData::miny"]
        [::std::mem::offset_of!(dai_PointCloudData, miny) - 88usize];
    ["Offset of field: dai_PointCloudData::minz"]
        [::std::mem::offset_of!(dai_PointCloudData, minz) - 92usize];
    ["Offset of field: dai_PointCloudData::maxx"]
        [::std::mem::offset_of!(dai_PointCloudData, maxx) - 96usize];
    ["Offset of field: dai_PointCloudData::maxy"]
        [::std::mem::offset_of!(dai_PointCloudData, maxy) - 100usize];
    ["Offset of field: dai_PointCloudData::maxz"]
        [::std::mem::offset_of!(dai_PointCloudData, maxz) - 104usize];
    ["Offset of field: dai_PointCloudData::sparse"]
        [::std::mem::offset_of!(dai_PointCloudData, sparse) - 108usize];
    ["Offset of field: dai_PointCloudData::color"]
        [::std::mem::offset_of!(dai_PointCloudData, color) - 109usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14PointCloudData9getPointsEv"]
    pub fn dai_PointCloudData_getPoints(this: *mut dai_PointCloudData) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14PointCloudData12getPointsRGBEv"]
    pub fn dai_PointCloudData_getPointsRGB(this: *mut dai_PointCloudData) -> std_vector;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14PointCloudData9setPointsERKSt6vectorINS_7Point3fESaIS2_EE"]
    pub fn dai_PointCloudData_setPoints(this: *mut dai_PointCloudData, points: *const std_vector);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai14PointCloudData12setPointsRGBERKSt6vectorINS_11Point3fRGBAESaIS2_EE"]
    pub fn dai_PointCloudData_setPointsRGB(
        this: *mut dai_PointCloudData,
        points: *const std_vector,
    );
}
unsafe extern "C" {
    #[doc = " Retrieves instance number"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData14getInstanceNumEv"]
    pub fn dai_PointCloudData_getInstanceNum(
        this: *const dai_PointCloudData,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves the height in pixels - in case of a sparse point cloud, this represents the hight of the frame which was used to generate the point cloud"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData8getWidthEv"]
    pub fn dai_PointCloudData_getWidth(this: *const dai_PointCloudData) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves the height in pixels - in case of a sparse point cloud, this represents the hight of the frame which was used to generate the point cloud"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData9getHeightEv"]
    pub fn dai_PointCloudData_getHeight(this: *const dai_PointCloudData) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves minimal x coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7getMinXEv"]
    pub fn dai_PointCloudData_getMinX(this: *const dai_PointCloudData) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves minimal y coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7getMinYEv"]
    pub fn dai_PointCloudData_getMinY(this: *const dai_PointCloudData) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves minimal z coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7getMinZEv"]
    pub fn dai_PointCloudData_getMinZ(this: *const dai_PointCloudData) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves maximal x coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7getMaxXEv"]
    pub fn dai_PointCloudData_getMaxX(this: *const dai_PointCloudData) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves maximal y coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7getMaxYEv"]
    pub fn dai_PointCloudData_getMaxY(this: *const dai_PointCloudData) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves maximal z coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7getMaxZEv"]
    pub fn dai_PointCloudData_getMaxZ(this: *const dai_PointCloudData) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves whether point cloud is sparse"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData8isSparseEv"]
    pub fn dai_PointCloudData_isSparse(this: *const dai_PointCloudData) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves whether point cloud is color"]
    #[link_name = "\u{1}_ZNK3dai14PointCloudData7isColorEv"]
    pub fn dai_PointCloudData_isColor(this: *const dai_PointCloudData) -> bool;
}
unsafe extern "C" {
    #[doc = " Specifies frame width\n\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData8setWidthEj"]
    pub fn dai_PointCloudData_setWidth(
        this: *mut dai_PointCloudData,
        width: ::std::os::raw::c_uint,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies frame height\n\n @param height frame height"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData9setHeightEj"]
    pub fn dai_PointCloudData_setHeight(
        this: *mut dai_PointCloudData,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies frame size\n\n @param height frame height\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setSizeEjj"]
    pub fn dai_PointCloudData_setSize(
        this: *mut dai_PointCloudData,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies frame size\n\n @param size frame size"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setSizeESt5tupleIJjjEE"]
    pub fn dai_PointCloudData_setSize1(
        this: *mut dai_PointCloudData,
        size: std_tuple,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies minimal x coordinate in depth units (millimeter by default)\n\n @param val minimal x coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setMinXEf"]
    pub fn dai_PointCloudData_setMinX(
        this: *mut dai_PointCloudData,
        val: f32,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies minimal y coordinate in depth units (millimeter by default)\n\n @param val minimal y coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setMinYEf"]
    pub fn dai_PointCloudData_setMinY(
        this: *mut dai_PointCloudData,
        val: f32,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies minimal z coordinate in depth units (millimeter by default)\n\n @param val minimal z coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setMinZEf"]
    pub fn dai_PointCloudData_setMinZ(
        this: *mut dai_PointCloudData,
        val: f32,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies maximal x coordinate in depth units (millimeter by default)\n\n @param val maximal x coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setMaxXEf"]
    pub fn dai_PointCloudData_setMaxX(
        this: *mut dai_PointCloudData,
        val: f32,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies maximal y coordinate in depth units (millimeter by default)\n\n @param val maximal y coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setMaxYEf"]
    pub fn dai_PointCloudData_setMaxY(
        this: *mut dai_PointCloudData,
        val: f32,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies maximal z coordinate in depth units (millimeter by default)\n\n @param val maximal z coordinate in depth units (millimeter by default)"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData7setMaxZEf"]
    pub fn dai_PointCloudData_setMaxZ(
        this: *mut dai_PointCloudData,
        val: f32,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies whether point cloud is sparse\n\n @param val whether point cloud is sparse"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData9setSparseEb"]
    pub fn dai_PointCloudData_setSparse(
        this: *mut dai_PointCloudData,
        val: bool,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies whether point cloud is color\n\n @param val whether point cloud is color"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData8setColorEb"]
    pub fn dai_PointCloudData_setColor(
        this: *mut dai_PointCloudData,
        val: bool,
    ) -> *mut dai_PointCloudData;
}
unsafe extern "C" {
    #[doc = " Specifies instance number\n\n @param instanceNum instance number"]
    #[link_name = "\u{1}_ZN3dai14PointCloudData14setInstanceNumEj"]
    pub fn dai_PointCloudData_setInstanceNum(
        this: *mut dai_PointCloudData,
        instanceNum: ::std::os::raw::c_uint,
    ) -> *mut dai_PointCloudData;
}
impl dai_PointCloudData {
    #[inline]
    pub unsafe fn getPoints(&mut self) -> std_vector {
        dai_PointCloudData_getPoints(self)
    }
    #[inline]
    pub unsafe fn getPointsRGB(&mut self) -> std_vector {
        dai_PointCloudData_getPointsRGB(self)
    }
    #[inline]
    pub unsafe fn setPoints(&mut self, points: *const std_vector) {
        dai_PointCloudData_setPoints(self, points)
    }
    #[inline]
    pub unsafe fn setPointsRGB(&mut self, points: *const std_vector) {
        dai_PointCloudData_setPointsRGB(self, points)
    }
    #[inline]
    pub unsafe fn getInstanceNum(&self) -> ::std::os::raw::c_uint {
        dai_PointCloudData_getInstanceNum(self)
    }
    #[inline]
    pub unsafe fn getWidth(&self) -> ::std::os::raw::c_uint {
        dai_PointCloudData_getWidth(self)
    }
    #[inline]
    pub unsafe fn getHeight(&self) -> ::std::os::raw::c_uint {
        dai_PointCloudData_getHeight(self)
    }
    #[inline]
    pub unsafe fn getMinX(&self) -> f32 {
        dai_PointCloudData_getMinX(self)
    }
    #[inline]
    pub unsafe fn getMinY(&self) -> f32 {
        dai_PointCloudData_getMinY(self)
    }
    #[inline]
    pub unsafe fn getMinZ(&self) -> f32 {
        dai_PointCloudData_getMinZ(self)
    }
    #[inline]
    pub unsafe fn getMaxX(&self) -> f32 {
        dai_PointCloudData_getMaxX(self)
    }
    #[inline]
    pub unsafe fn getMaxY(&self) -> f32 {
        dai_PointCloudData_getMaxY(self)
    }
    #[inline]
    pub unsafe fn getMaxZ(&self) -> f32 {
        dai_PointCloudData_getMaxZ(self)
    }
    #[inline]
    pub unsafe fn isSparse(&self) -> bool {
        dai_PointCloudData_isSparse(self)
    }
    #[inline]
    pub unsafe fn isColor(&self) -> bool {
        dai_PointCloudData_isColor(self)
    }
    #[inline]
    pub unsafe fn setWidth(&mut self, width: ::std::os::raw::c_uint) -> *mut dai_PointCloudData {
        dai_PointCloudData_setWidth(self, width)
    }
    #[inline]
    pub unsafe fn setHeight(&mut self, height: ::std::os::raw::c_uint) -> *mut dai_PointCloudData {
        dai_PointCloudData_setHeight(self, height)
    }
    #[inline]
    pub unsafe fn setSize(
        &mut self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_PointCloudData {
        dai_PointCloudData_setSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setSize1(&mut self, size: std_tuple) -> *mut dai_PointCloudData {
        dai_PointCloudData_setSize1(self, size)
    }
    #[inline]
    pub unsafe fn setMinX(&mut self, val: f32) -> *mut dai_PointCloudData {
        dai_PointCloudData_setMinX(self, val)
    }
    #[inline]
    pub unsafe fn setMinY(&mut self, val: f32) -> *mut dai_PointCloudData {
        dai_PointCloudData_setMinY(self, val)
    }
    #[inline]
    pub unsafe fn setMinZ(&mut self, val: f32) -> *mut dai_PointCloudData {
        dai_PointCloudData_setMinZ(self, val)
    }
    #[inline]
    pub unsafe fn setMaxX(&mut self, val: f32) -> *mut dai_PointCloudData {
        dai_PointCloudData_setMaxX(self, val)
    }
    #[inline]
    pub unsafe fn setMaxY(&mut self, val: f32) -> *mut dai_PointCloudData {
        dai_PointCloudData_setMaxY(self, val)
    }
    #[inline]
    pub unsafe fn setMaxZ(&mut self, val: f32) -> *mut dai_PointCloudData {
        dai_PointCloudData_setMaxZ(self, val)
    }
    #[inline]
    pub unsafe fn setSparse(&mut self, val: bool) -> *mut dai_PointCloudData {
        dai_PointCloudData_setSparse(self, val)
    }
    #[inline]
    pub unsafe fn setColor(&mut self, val: bool) -> *mut dai_PointCloudData {
        dai_PointCloudData_setColor(self, val)
    }
    #[inline]
    pub unsafe fn setInstanceNum(
        &mut self,
        instanceNum: ::std::os::raw::c_uint,
    ) -> *mut dai_PointCloudData {
        dai_PointCloudData_setInstanceNum(self, instanceNum)
    }
}
#[doc = " RGBD message. Carries RGB and Depth frames."]
#[repr(C)]
pub struct dai_RGBDData {
    pub _base: dai_Buffer,
    pub frames: std_map,
}
pub type dai_RGBDData_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_RGBDData"][::std::mem::size_of::<dai_RGBDData>() - 112usize];
    ["Alignment of dai_RGBDData"][::std::mem::align_of::<dai_RGBDData>() - 8usize];
    ["Offset of field: dai_RGBDData::frames"]
        [::std::mem::offset_of!(dai_RGBDData, frames) - 64usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8RGBDData11setRGBFrameERKSt10shared_ptrINS_8ImgFrameEE"]
    pub fn dai_RGBDData_setRGBFrame(this: *mut dai_RGBDData, frame: *const std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8RGBDData13setDepthFrameERKSt10shared_ptrINS_8ImgFrameEE"]
    pub fn dai_RGBDData_setDepthFrame(this: *mut dai_RGBDData, frame: *const std_shared_ptr);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8RGBDData11getRGBFrameEv"]
    pub fn dai_RGBDData_getRGBFrame(this: *mut dai_RGBDData) -> std_shared_ptr;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai8RGBDData13getDepthFrameEv"]
    pub fn dai_RGBDData_getDepthFrame(this: *mut dai_RGBDData) -> std_shared_ptr;
}
impl dai_RGBDData {
    #[inline]
    pub unsafe fn setRGBFrame(&mut self, frame: *const std_shared_ptr) {
        dai_RGBDData_setRGBFrame(self, frame)
    }
    #[inline]
    pub unsafe fn setDepthFrame(&mut self, frame: *const std_shared_ptr) {
        dai_RGBDData_setDepthFrame(self, frame)
    }
    #[inline]
    pub unsafe fn getRGBFrame(&mut self) -> std_shared_ptr {
        dai_RGBDData_getRGBFrame(self)
    }
    #[inline]
    pub unsafe fn getDepthFrame(&mut self) -> std_shared_ptr {
        dai_RGBDData_getDepthFrame(self)
    }
}
#[doc = " AprilTag structure."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_AprilTag {
    #[doc = " The decoded ID of the tag"]
    pub id: ::std::os::raw::c_int,
    #[doc = " How many error bits were corrected? Note: accepting large numbers of\n corrected errors leads to greatly increased false positive rates.\n As of this implementation, the detector cannot detect tags with\n a hamming distance greater than 2."]
    pub hamming: ::std::os::raw::c_int,
    #[doc = " A measure of the quality of the binary decoding process; the\n average difference between the intensity of a data bit versus\n the decision threshold. Higher numbers roughly indicate better\n decodes. This is a reasonable measure of detection accuracy\n only for very small tags-- not effective for larger tags (where\n we could have sampled anywhere within a bit cell and still\n gotten a good detection."]
    pub decisionMargin: f32,
    #[doc = " The detected top left coordinates."]
    pub topLeft: dai_Point2f,
    #[doc = " The detected top right coordinates."]
    pub topRight: dai_Point2f,
    #[doc = " The detected bottom right coordinates."]
    pub bottomRight: dai_Point2f,
    #[doc = " The detected bottom left coordinates."]
    pub bottomLeft: dai_Point2f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AprilTag"][::std::mem::size_of::<dai_AprilTag>() - 60usize];
    ["Alignment of dai_AprilTag"][::std::mem::align_of::<dai_AprilTag>() - 4usize];
    ["Offset of field: dai_AprilTag::id"][::std::mem::offset_of!(dai_AprilTag, id) - 0usize];
    ["Offset of field: dai_AprilTag::hamming"]
        [::std::mem::offset_of!(dai_AprilTag, hamming) - 4usize];
    ["Offset of field: dai_AprilTag::decisionMargin"]
        [::std::mem::offset_of!(dai_AprilTag, decisionMargin) - 8usize];
    ["Offset of field: dai_AprilTag::topLeft"]
        [::std::mem::offset_of!(dai_AprilTag, topLeft) - 12usize];
    ["Offset of field: dai_AprilTag::topRight"]
        [::std::mem::offset_of!(dai_AprilTag, topRight) - 24usize];
    ["Offset of field: dai_AprilTag::bottomRight"]
        [::std::mem::offset_of!(dai_AprilTag, bottomRight) - 36usize];
    ["Offset of field: dai_AprilTag::bottomLeft"]
        [::std::mem::offset_of!(dai_AprilTag, bottomLeft) - 48usize];
};
#[doc = " AprilTags message."]
#[repr(C)]
pub struct dai_AprilTags {
    pub _base: dai_Buffer,
    pub aprilTags: std_vector,
}
pub type dai_AprilTags_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_AprilTags"][::std::mem::size_of::<dai_AprilTags>() - 88usize];
    ["Alignment of dai_AprilTags"][::std::mem::align_of::<dai_AprilTags>() - 8usize];
    ["Offset of field: dai_AprilTags::aprilTags"]
        [::std::mem::offset_of!(dai_AprilTags, aprilTags) - 64usize];
};
#[doc = " BenchmarkReport message."]
#[repr(C)]
pub struct dai_BenchmarkReport {
    pub _base: dai_Buffer,
    pub fps: f32,
    pub timeTotal: f32,
    pub numMessagesReceived: f32,
    pub averageLatency: f32,
    pub latencies: std_vector,
}
pub type dai_BenchmarkReport_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_BenchmarkReport"][::std::mem::size_of::<dai_BenchmarkReport>() - 104usize];
    ["Alignment of dai_BenchmarkReport"][::std::mem::align_of::<dai_BenchmarkReport>() - 8usize];
    ["Offset of field: dai_BenchmarkReport::fps"]
        [::std::mem::offset_of!(dai_BenchmarkReport, fps) - 64usize];
    ["Offset of field: dai_BenchmarkReport::timeTotal"]
        [::std::mem::offset_of!(dai_BenchmarkReport, timeTotal) - 68usize];
    ["Offset of field: dai_BenchmarkReport::numMessagesReceived"]
        [::std::mem::offset_of!(dai_BenchmarkReport, numMessagesReceived) - 72usize];
    ["Offset of field: dai_BenchmarkReport::averageLatency"]
        [::std::mem::offset_of!(dai_BenchmarkReport, averageLatency) - 76usize];
    ["Offset of field: dai_BenchmarkReport::latencies"]
        [::std::mem::offset_of!(dai_BenchmarkReport, latencies) - 80usize];
};
#[repr(C)]
pub struct dai_EncodedFrame {
    pub _base: dai_Buffer,
    pub _base_1: dai_ProtoSerializable,
    pub cam: dai_EncodedFrame_CameraSettings,
    pub instanceNum: u32,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub quality: u32,
    pub bitrate: u32,
    pub profile: dai_EncodedFrame_Profile,
    pub lossless: bool,
    pub type_: dai_EncodedFrame_FrameType,
    pub frameOffset: u32,
    pub frameSize: u32,
    pub transformation: dai_ImgTransformation,
}
pub const dai_EncodedFrame_Profile_JPEG: dai_EncodedFrame_Profile = 0;
pub const dai_EncodedFrame_Profile_AVC: dai_EncodedFrame_Profile = 1;
pub const dai_EncodedFrame_Profile_HEVC: dai_EncodedFrame_Profile = 2;
pub type dai_EncodedFrame_Profile = ::std::os::raw::c_uchar;
pub const dai_EncodedFrame_FrameType_I: dai_EncodedFrame_FrameType = 0;
pub const dai_EncodedFrame_FrameType_P: dai_EncodedFrame_FrameType = 1;
pub const dai_EncodedFrame_FrameType_B: dai_EncodedFrame_FrameType = 2;
pub const dai_EncodedFrame_FrameType_Unknown: dai_EncodedFrame_FrameType = 3;
pub type dai_EncodedFrame_FrameType = ::std::os::raw::c_uchar;
pub type dai_EncodedFrame_CameraSettings = dai_ImgFrame_CameraSettings;
pub type dai_EncodedFrame_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_EncodedFrame"][::std::mem::size_of::<dai_EncodedFrame>() - 424usize];
    ["Alignment of dai_EncodedFrame"][::std::mem::align_of::<dai_EncodedFrame>() - 8usize];
    ["Offset of field: dai_EncodedFrame::cam"]
        [::std::mem::offset_of!(dai_EncodedFrame, cam) - 72usize];
    ["Offset of field: dai_EncodedFrame::instanceNum"]
        [::std::mem::offset_of!(dai_EncodedFrame, instanceNum) - 92usize];
    ["Offset of field: dai_EncodedFrame::width"]
        [::std::mem::offset_of!(dai_EncodedFrame, width) - 96usize];
    ["Offset of field: dai_EncodedFrame::height"]
        [::std::mem::offset_of!(dai_EncodedFrame, height) - 100usize];
    ["Offset of field: dai_EncodedFrame::quality"]
        [::std::mem::offset_of!(dai_EncodedFrame, quality) - 104usize];
    ["Offset of field: dai_EncodedFrame::bitrate"]
        [::std::mem::offset_of!(dai_EncodedFrame, bitrate) - 108usize];
    ["Offset of field: dai_EncodedFrame::profile"]
        [::std::mem::offset_of!(dai_EncodedFrame, profile) - 112usize];
    ["Offset of field: dai_EncodedFrame::lossless"]
        [::std::mem::offset_of!(dai_EncodedFrame, lossless) - 113usize];
    ["Offset of field: dai_EncodedFrame::type_"]
        [::std::mem::offset_of!(dai_EncodedFrame, type_) - 114usize];
    ["Offset of field: dai_EncodedFrame::frameOffset"]
        [::std::mem::offset_of!(dai_EncodedFrame, frameOffset) - 116usize];
    ["Offset of field: dai_EncodedFrame::frameSize"]
        [::std::mem::offset_of!(dai_EncodedFrame, frameSize) - 120usize];
    ["Offset of field: dai_EncodedFrame::transformation"]
        [::std::mem::offset_of!(dai_EncodedFrame, transformation) - 128usize];
};
unsafe extern "C" {
    #[doc = " Retrieves instance number"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame14getInstanceNumEv"]
    pub fn dai_EncodedFrame_getInstanceNum(this: *const dai_EncodedFrame)
    -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image width in pixels"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame8getWidthEv"]
    pub fn dai_EncodedFrame_getWidth(this: *const dai_EncodedFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves image height in pixels"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame9getHeightEv"]
    pub fn dai_EncodedFrame_getHeight(this: *const dai_EncodedFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves exposure time"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame15getExposureTimeEv"]
    pub fn dai_EncodedFrame_getExposureTime(
        this: *const dai_EncodedFrame,
    ) -> std_chrono_microseconds;
}
unsafe extern "C" {
    #[doc = " Retrieves sensitivity, as an ISO value"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame14getSensitivityEv"]
    pub fn dai_EncodedFrame_getSensitivity(this: *const dai_EncodedFrame) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves white-balance color temperature of the light source, in kelvins"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame19getColorTemperatureEv"]
    pub fn dai_EncodedFrame_getColorTemperature(
        this: *const dai_EncodedFrame,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves lens position, range 0..255. Returns -1 if not available"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame15getLensPositionEv"]
    pub fn dai_EncodedFrame_getLensPosition(this: *const dai_EncodedFrame)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Retrieves lens position, range 0.0f..1.0f. Returns -1 if not available"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame18getLensPositionRawEv"]
    pub fn dai_EncodedFrame_getLensPositionRaw(this: *const dai_EncodedFrame) -> f32;
}
unsafe extern "C" {
    #[doc = " Retrieves the encoding quality"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame10getQualityEv"]
    pub fn dai_EncodedFrame_getQuality(this: *const dai_EncodedFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Retrieves the encoding bitrate"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame10getBitrateEv"]
    pub fn dai_EncodedFrame_getBitrate(this: *const dai_EncodedFrame) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    #[doc = " Returns true if encoding is lossless (JPEG only)"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame11getLosslessEv"]
    pub fn dai_EncodedFrame_getLossless(this: *const dai_EncodedFrame) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieves frame type (H26x only)"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame12getFrameTypeEv"]
    pub fn dai_EncodedFrame_getFrameType(this: *mut dai_EncodedFrame)
    -> dai_EncodedFrame_FrameType;
}
unsafe extern "C" {
    #[doc = " Retrieves the encoding profile (JPEG, AVC or HEVC)"]
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame10getProfileEv"]
    pub fn dai_EncodedFrame_getProfile(this: *const dai_EncodedFrame) -> dai_EncodedFrame_Profile;
}
unsafe extern "C" {
    #[doc = " Instance number relates to the origin of the frame (which camera)\n\n @param instance Instance number"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame14setInstanceNumEj"]
    pub fn dai_EncodedFrame_setInstanceNum(
        this: *mut dai_EncodedFrame,
        instance: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame width\n\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame8setWidthEj"]
    pub fn dai_EncodedFrame_setWidth(
        this: *mut dai_EncodedFrame,
        width: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame height\n\n @param height frame height"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame9setHeightEj"]
    pub fn dai_EncodedFrame_setHeight(
        this: *mut dai_EncodedFrame,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame size\n\n @param height frame height\n @param width frame width"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame7setSizeEjj"]
    pub fn dai_EncodedFrame_setSize(
        this: *mut dai_EncodedFrame,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies frame size\n\n @param size frame size"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame7setSizeESt5tupleIJjjEE"]
    pub fn dai_EncodedFrame_setSize1(
        this: *mut dai_EncodedFrame,
        size: std_tuple,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies the encoding quality\n\n @param quality Encoding quality"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame10setQualityEj"]
    pub fn dai_EncodedFrame_setQuality(
        this: *mut dai_EncodedFrame,
        quality: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies the encoding quality\n\n @param quality Encoding quality"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame10setBitrateEj"]
    pub fn dai_EncodedFrame_setBitrate(
        this: *mut dai_EncodedFrame,
        bitrate: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies if encoding is lossless (JPEG only)\n\n @param lossless True if lossless"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame11setLosslessEb"]
    pub fn dai_EncodedFrame_setLossless(
        this: *mut dai_EncodedFrame,
        lossless: bool,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies the frame type (H26x only)\n\n @param type Type of h26x frame (I, P, B)"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame12setFrameTypeENS0_9FrameTypeE"]
    pub fn dai_EncodedFrame_setFrameType(
        this: *mut dai_EncodedFrame,
        type_: dai_EncodedFrame_FrameType,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[doc = " Specifies the encoding profile\n\n @param profile Encoding profile"]
    #[link_name = "\u{1}_ZN3dai12EncodedFrame10setProfileENS0_7ProfileE"]
    pub fn dai_EncodedFrame_setProfile(
        this: *mut dai_EncodedFrame,
        profile: dai_EncodedFrame_Profile,
    ) -> *mut dai_EncodedFrame;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai12EncodedFrame15getImgFrameMetaEv"]
    pub fn dai_EncodedFrame_getImgFrameMeta(this: *const dai_EncodedFrame) -> dai_ImgFrame;
}
impl dai_EncodedFrame {
    #[inline]
    pub unsafe fn getInstanceNum(&self) -> ::std::os::raw::c_uint {
        dai_EncodedFrame_getInstanceNum(self)
    }
    #[inline]
    pub unsafe fn getWidth(&self) -> ::std::os::raw::c_uint {
        dai_EncodedFrame_getWidth(self)
    }
    #[inline]
    pub unsafe fn getHeight(&self) -> ::std::os::raw::c_uint {
        dai_EncodedFrame_getHeight(self)
    }
    #[inline]
    pub unsafe fn getExposureTime(&self) -> std_chrono_microseconds {
        dai_EncodedFrame_getExposureTime(self)
    }
    #[inline]
    pub unsafe fn getSensitivity(&self) -> ::std::os::raw::c_int {
        dai_EncodedFrame_getSensitivity(self)
    }
    #[inline]
    pub unsafe fn getColorTemperature(&self) -> ::std::os::raw::c_int {
        dai_EncodedFrame_getColorTemperature(self)
    }
    #[inline]
    pub unsafe fn getLensPosition(&self) -> ::std::os::raw::c_int {
        dai_EncodedFrame_getLensPosition(self)
    }
    #[inline]
    pub unsafe fn getLensPositionRaw(&self) -> f32 {
        dai_EncodedFrame_getLensPositionRaw(self)
    }
    #[inline]
    pub unsafe fn getQuality(&self) -> ::std::os::raw::c_uint {
        dai_EncodedFrame_getQuality(self)
    }
    #[inline]
    pub unsafe fn getBitrate(&self) -> ::std::os::raw::c_uint {
        dai_EncodedFrame_getBitrate(self)
    }
    #[inline]
    pub unsafe fn getLossless(&self) -> bool {
        dai_EncodedFrame_getLossless(self)
    }
    #[inline]
    pub unsafe fn getFrameType(&mut self) -> dai_EncodedFrame_FrameType {
        dai_EncodedFrame_getFrameType(self)
    }
    #[inline]
    pub unsafe fn getProfile(&self) -> dai_EncodedFrame_Profile {
        dai_EncodedFrame_getProfile(self)
    }
    #[inline]
    pub unsafe fn setInstanceNum(
        &mut self,
        instance: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setInstanceNum(self, instance)
    }
    #[inline]
    pub unsafe fn setWidth(&mut self, width: ::std::os::raw::c_uint) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setWidth(self, width)
    }
    #[inline]
    pub unsafe fn setHeight(&mut self, height: ::std::os::raw::c_uint) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setHeight(self, height)
    }
    #[inline]
    pub unsafe fn setSize(
        &mut self,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
    ) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setSize(self, width, height)
    }
    #[inline]
    pub unsafe fn setSize1(&mut self, size: std_tuple) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setSize1(self, size)
    }
    #[inline]
    pub unsafe fn setQuality(&mut self, quality: ::std::os::raw::c_uint) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setQuality(self, quality)
    }
    #[inline]
    pub unsafe fn setBitrate(&mut self, bitrate: ::std::os::raw::c_uint) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setBitrate(self, bitrate)
    }
    #[inline]
    pub unsafe fn setLossless(&mut self, lossless: bool) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setLossless(self, lossless)
    }
    #[inline]
    pub unsafe fn setFrameType(
        &mut self,
        type_: dai_EncodedFrame_FrameType,
    ) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setFrameType(self, type_)
    }
    #[inline]
    pub unsafe fn setProfile(
        &mut self,
        profile: dai_EncodedFrame_Profile,
    ) -> *mut dai_EncodedFrame {
        dai_EncodedFrame_setProfile(self, profile)
    }
    #[inline]
    pub unsafe fn getImgFrameMeta(&self) -> dai_ImgFrame {
        dai_EncodedFrame_getImgFrameMeta(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUReport {
    #[doc = " The sequence number increments once for each report sent.  Gaps\n in the sequence numbers indicate missing or dropped reports.\n Max value 2^32 after which resets to 0."]
    pub sequence: i32,
    #[doc = " Accuracy of sensor"]
    pub accuracy: dai_IMUReport_Accuracy,
    #[doc = " Generation timestamp, synced to host time"]
    pub timestamp: dai_Timestamp,
    #[doc = " Generation timestamp, direct device monotonic clock"]
    pub tsDevice: dai_Timestamp,
}
pub const dai_IMUReport_Accuracy_UNRELIABLE: dai_IMUReport_Accuracy = 0;
pub const dai_IMUReport_Accuracy_LOW: dai_IMUReport_Accuracy = 1;
pub const dai_IMUReport_Accuracy_MEDIUM: dai_IMUReport_Accuracy = 2;
pub const dai_IMUReport_Accuracy_HIGH: dai_IMUReport_Accuracy = 3;
pub type dai_IMUReport_Accuracy = ::std::os::raw::c_uchar;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUReport"][::std::mem::size_of::<dai_IMUReport>() - 40usize];
    ["Alignment of dai_IMUReport"][::std::mem::align_of::<dai_IMUReport>() - 8usize];
    ["Offset of field: dai_IMUReport::sequence"]
        [::std::mem::offset_of!(dai_IMUReport, sequence) - 0usize];
    ["Offset of field: dai_IMUReport::accuracy"]
        [::std::mem::offset_of!(dai_IMUReport, accuracy) - 4usize];
    ["Offset of field: dai_IMUReport::timestamp"]
        [::std::mem::offset_of!(dai_IMUReport, timestamp) - 8usize];
    ["Offset of field: dai_IMUReport::tsDevice"]
        [::std::mem::offset_of!(dai_IMUReport, tsDevice) - 24usize];
};
#[doc = " @brief Accelerometer\n\n Units are [m/s^2]"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUReportAccelerometer {
    pub _base: dai_IMUReport,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUReportAccelerometer"]
        [::std::mem::size_of::<dai_IMUReportAccelerometer>() - 56usize];
    ["Alignment of dai_IMUReportAccelerometer"]
        [::std::mem::align_of::<dai_IMUReportAccelerometer>() - 8usize];
    ["Offset of field: dai_IMUReportAccelerometer::x"]
        [::std::mem::offset_of!(dai_IMUReportAccelerometer, x) - 40usize];
    ["Offset of field: dai_IMUReportAccelerometer::y"]
        [::std::mem::offset_of!(dai_IMUReportAccelerometer, y) - 44usize];
    ["Offset of field: dai_IMUReportAccelerometer::z"]
        [::std::mem::offset_of!(dai_IMUReportAccelerometer, z) - 48usize];
};
#[doc = " @brief Gyroscope\n\n Units are [rad/s]"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUReportGyroscope {
    pub _base: dai_IMUReport,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUReportGyroscope"][::std::mem::size_of::<dai_IMUReportGyroscope>() - 56usize];
    ["Alignment of dai_IMUReportGyroscope"]
        [::std::mem::align_of::<dai_IMUReportGyroscope>() - 8usize];
    ["Offset of field: dai_IMUReportGyroscope::x"]
        [::std::mem::offset_of!(dai_IMUReportGyroscope, x) - 40usize];
    ["Offset of field: dai_IMUReportGyroscope::y"]
        [::std::mem::offset_of!(dai_IMUReportGyroscope, y) - 44usize];
    ["Offset of field: dai_IMUReportGyroscope::z"]
        [::std::mem::offset_of!(dai_IMUReportGyroscope, z) - 48usize];
};
#[doc = " @brief Magnetic field\n\n Units are [uTesla]"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUReportMagneticField {
    pub _base: dai_IMUReport,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUReportMagneticField"]
        [::std::mem::size_of::<dai_IMUReportMagneticField>() - 56usize];
    ["Alignment of dai_IMUReportMagneticField"]
        [::std::mem::align_of::<dai_IMUReportMagneticField>() - 8usize];
    ["Offset of field: dai_IMUReportMagneticField::x"]
        [::std::mem::offset_of!(dai_IMUReportMagneticField, x) - 40usize];
    ["Offset of field: dai_IMUReportMagneticField::y"]
        [::std::mem::offset_of!(dai_IMUReportMagneticField, y) - 44usize];
    ["Offset of field: dai_IMUReportMagneticField::z"]
        [::std::mem::offset_of!(dai_IMUReportMagneticField, z) - 48usize];
};
#[doc = " @brief Rotation Vector with Accuracy\n\n Contains quaternion components: i,j,k,real"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUReportRotationVectorWAcc {
    pub _base: dai_IMUReport,
    #[doc = "< @brief Quaternion component i"]
    pub i: f32,
    #[doc = "< @brief Quaternion component j"]
    pub j: f32,
    #[doc = "< @brief Quaternion component k"]
    pub k: f32,
    #[doc = "< @brief Quaternion component, real"]
    pub real: f32,
    #[doc = "< @brief Accuracy estimate [radians], 0 means no estimate"]
    pub rotationVectorAccuracy: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUReportRotationVectorWAcc"]
        [::std::mem::size_of::<dai_IMUReportRotationVectorWAcc>() - 64usize];
    ["Alignment of dai_IMUReportRotationVectorWAcc"]
        [::std::mem::align_of::<dai_IMUReportRotationVectorWAcc>() - 8usize];
    ["Offset of field: dai_IMUReportRotationVectorWAcc::i"]
        [::std::mem::offset_of!(dai_IMUReportRotationVectorWAcc, i) - 40usize];
    ["Offset of field: dai_IMUReportRotationVectorWAcc::j"]
        [::std::mem::offset_of!(dai_IMUReportRotationVectorWAcc, j) - 44usize];
    ["Offset of field: dai_IMUReportRotationVectorWAcc::k"]
        [::std::mem::offset_of!(dai_IMUReportRotationVectorWAcc, k) - 48usize];
    ["Offset of field: dai_IMUReportRotationVectorWAcc::real"]
        [::std::mem::offset_of!(dai_IMUReportRotationVectorWAcc, real) - 52usize];
    ["Offset of field: dai_IMUReportRotationVectorWAcc::rotationVectorAccuracy"]
        [::std::mem::offset_of!(dai_IMUReportRotationVectorWAcc, rotationVectorAccuracy) - 56usize];
};
#[doc = " IMU output\n\n Contains combined output for all possible modes. Only the enabled outputs are populated."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_IMUPacket {
    pub acceleroMeter: dai_IMUReportAccelerometer,
    pub gyroscope: dai_IMUReportGyroscope,
    pub magneticField: dai_IMUReportMagneticField,
    pub rotationVector: dai_IMUReportRotationVectorWAcc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUPacket"][::std::mem::size_of::<dai_IMUPacket>() - 232usize];
    ["Alignment of dai_IMUPacket"][::std::mem::align_of::<dai_IMUPacket>() - 8usize];
    ["Offset of field: dai_IMUPacket::acceleroMeter"]
        [::std::mem::offset_of!(dai_IMUPacket, acceleroMeter) - 0usize];
    ["Offset of field: dai_IMUPacket::gyroscope"]
        [::std::mem::offset_of!(dai_IMUPacket, gyroscope) - 56usize];
    ["Offset of field: dai_IMUPacket::magneticField"]
        [::std::mem::offset_of!(dai_IMUPacket, magneticField) - 112usize];
    ["Offset of field: dai_IMUPacket::rotationVector"]
        [::std::mem::offset_of!(dai_IMUPacket, rotationVector) - 168usize];
};
#[doc = " IMUData message. Carries normalized detection results"]
#[repr(C)]
pub struct dai_IMUData {
    pub _base: dai_Buffer,
    pub _base_1: dai_ProtoSerializable,
    #[doc = " Detections"]
    pub packets: std_vector,
}
pub type dai_IMUData_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_IMUData"][::std::mem::size_of::<dai_IMUData>() - 96usize];
    ["Alignment of dai_IMUData"][::std::mem::align_of::<dai_IMUData>() - 8usize];
    ["Offset of field: dai_IMUData::packets"]
        [::std::mem::offset_of!(dai_IMUData, packets) - 72usize];
};
#[doc = " NNData message. Carries tensors and their metadata"]
#[repr(C)]
pub struct dai_NNData {
    pub _base: dai_Buffer,
    pub tensors: std_vector,
    pub batchSize: ::std::os::raw::c_uint,
    pub transformation: std_optional,
}
pub type dai_NNData_NOP__MEMBERS = nop_MemberList;
pub const dai_NNData_DATA_ALIGNMENT: ::std::os::raw::c_int = 64;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_NNData"][::std::mem::size_of::<dai_NNData>() - 400usize];
    ["Alignment of dai_NNData"][::std::mem::align_of::<dai_NNData>() - 8usize];
    ["Offset of field: dai_NNData::tensors"][::std::mem::offset_of!(dai_NNData, tensors) - 64usize];
    ["Offset of field: dai_NNData::batchSize"]
        [::std::mem::offset_of!(dai_NNData, batchSize) - 88usize];
    ["Offset of field: dai_NNData::transformation"]
        [::std::mem::offset_of!(dai_NNData, transformation) - 96usize];
};
unsafe extern "C" {
    #[doc = " @returns Names of all layers added"]
    #[link_name = "\u{1}_ZNK3dai6NNData16getAllLayerNamesB5cxx11Ev"]
    pub fn dai_NNData_getAllLayerNames(this: *const dai_NNData) -> std_vector;
}
unsafe extern "C" {
    #[doc = " @returns All layers and their information"]
    #[link_name = "\u{1}_ZNK3dai6NNData12getAllLayersEv"]
    pub fn dai_NNData_getAllLayers(this: *const dai_NNData) -> std_vector;
}
unsafe extern "C" {
    #[doc = " Retrieve tensor information\n @param name Name of the tensor\n @returns Tensor information"]
    #[link_name = "\u{1}_ZNK3dai6NNData13getTensorInfoERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_NNData_getTensorInfo(
        this: *const dai_NNData,
        name: *const std_string,
    ) -> std_optional;
}
unsafe extern "C" {
    #[doc = " Retrieve layers tensor information\n @param name Name of the layer\n @param[out] tensor Outputs tensor information of that layer\n @returns True if layer exists, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai6NNData8getLayerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_10TensorInfoE"]
    pub fn dai_NNData_getLayer(
        this: *const dai_NNData,
        name: *const std_string,
        tensor: *mut dai_TensorInfo,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Checks if given layer exists\n @param name Name of the layer\n @returns True if layer exists, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai6NNData8hasLayerERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_NNData_hasLayer(this: *const dai_NNData, name: *const std_string) -> bool;
}
unsafe extern "C" {
    #[doc = " Retrieve datatype of a layers tensor\n @param name Name of the layer\n @param[out] datatype Datatype of layers tensor\n @returns True if layer exists, false otherwise"]
    #[link_name = "\u{1}_ZNK3dai6NNData16getLayerDatatypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_10TensorInfo8DataTypeE"]
    pub fn dai_NNData_getLayerDatatype(
        this: *const dai_NNData,
        name: *const std_string,
        datatype: *mut dai_TensorInfo_DataType,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Get the datatype of a given tensor\n @returns TensorInfo::DataType tensor datatype"]
    #[link_name = "\u{1}_ZN3dai6NNData17getTensorDatatypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"]
    pub fn dai_NNData_getTensorDatatype(
        this: *mut dai_NNData,
        name: *const std_string,
    ) -> dai_TensorInfo_DataType;
}
unsafe extern "C" {
    #[doc = " Get the datatype of the first tensor\n @returns TensorInfo::DataType tensor datatype"]
    #[link_name = "\u{1}_ZN3dai6NNData22getFirstTensorDatatypeEv"]
    pub fn dai_NNData_getFirstTensorDatatype(this: *mut dai_NNData) -> dai_TensorInfo_DataType;
}
unsafe extern "C" {
    #[doc = " Emplace a tensor\n This function allocates memory for the tensor and return over the said memory.\n It is up to the caller to fill the memory out with meaningful data.\n @return Span over the allocated memory"]
    #[link_name = "\u{1}_ZN3dai6NNData13emplaceTensorERNS_10TensorInfoE"]
    pub fn dai_NNData_emplaceTensor(
        this: *mut dai_NNData,
        tensor: *mut dai_TensorInfo,
    ) -> __BindgenOpaqueArray<u64, 2usize>;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai6NNDataC1Em"]
    pub fn dai_NNData_NNData(this: *mut dai_NNData, size: usize);
}
impl dai_NNData {
    #[inline]
    pub unsafe fn getAllLayerNames(&self) -> std_vector {
        dai_NNData_getAllLayerNames(self)
    }
    #[inline]
    pub unsafe fn getAllLayers(&self) -> std_vector {
        dai_NNData_getAllLayers(self)
    }
    #[inline]
    pub unsafe fn getTensorInfo(&self, name: *const std_string) -> std_optional {
        dai_NNData_getTensorInfo(self, name)
    }
    #[inline]
    pub unsafe fn getLayer(&self, name: *const std_string, tensor: *mut dai_TensorInfo) -> bool {
        dai_NNData_getLayer(self, name, tensor)
    }
    #[inline]
    pub unsafe fn hasLayer(&self, name: *const std_string) -> bool {
        dai_NNData_hasLayer(self, name)
    }
    #[inline]
    pub unsafe fn getLayerDatatype(
        &self,
        name: *const std_string,
        datatype: *mut dai_TensorInfo_DataType,
    ) -> bool {
        dai_NNData_getLayerDatatype(self, name, datatype)
    }
    #[inline]
    pub unsafe fn getTensorDatatype(&mut self, name: *const std_string) -> dai_TensorInfo_DataType {
        dai_NNData_getTensorDatatype(self, name)
    }
    #[inline]
    pub unsafe fn getFirstTensorDatatype(&mut self) -> dai_TensorInfo_DataType {
        dai_NNData_getFirstTensorDatatype(self)
    }
    #[inline]
    pub unsafe fn emplaceTensor(
        &mut self,
        tensor: *mut dai_TensorInfo,
    ) -> __BindgenOpaqueArray<u64, 2usize> {
        dai_NNData_emplaceTensor(self, tensor)
    }
    #[inline]
    pub unsafe fn new(size: usize) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_NNData_NNData(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
}
#[doc = " SpatialImgDetection structure\n\n Contains image detection results together with spatial location data."]
#[repr(C)]
pub struct dai_SpatialImgDetection {
    pub _base: dai_ImgDetection,
    pub spatialCoordinates: dai_Point3f,
    pub boundingBoxMapping: dai_SpatialLocationCalculatorConfigData,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialImgDetection"]
        [::std::mem::size_of::<dai_SpatialImgDetection>() - 112usize];
    ["Alignment of dai_SpatialImgDetection"]
        [::std::mem::align_of::<dai_SpatialImgDetection>() - 8usize];
    ["Offset of field: dai_SpatialImgDetection::spatialCoordinates"]
        [::std::mem::offset_of!(dai_SpatialImgDetection, spatialCoordinates) - 60usize];
    ["Offset of field: dai_SpatialImgDetection::boundingBoxMapping"]
        [::std::mem::offset_of!(dai_SpatialImgDetection, boundingBoxMapping) - 72usize];
};
#[doc = " SpatialImgDetections message. Carries detection results together with spatial location data"]
#[repr(C)]
pub struct dai_SpatialImgDetections {
    pub _base: dai_Buffer,
    pub _base_1: dai_ProtoSerializable,
    #[doc = " Detection results."]
    pub detections: std_vector,
    pub transformation: std_optional,
}
pub type dai_SpatialImgDetections_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialImgDetections"]
        [::std::mem::size_of::<dai_SpatialImgDetections>() - 400usize];
    ["Alignment of dai_SpatialImgDetections"]
        [::std::mem::align_of::<dai_SpatialImgDetections>() - 8usize];
    ["Offset of field: dai_SpatialImgDetections::detections"]
        [::std::mem::offset_of!(dai_SpatialImgDetections, detections) - 72usize];
    ["Offset of field: dai_SpatialImgDetections::transformation"]
        [::std::mem::offset_of!(dai_SpatialImgDetections, transformation) - 96usize];
};
#[doc = " SpatialLocations structure\n\n Contains configuration data, average depth for the calculated ROI on depth map.\n Together with spatial coordinates: x,y,z relative to the center of depth map.\n Units are in depth units (millimeter by default)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_SpatialLocations {
    #[doc = "  Configuration for selected ROI"]
    pub config: dai_SpatialLocationCalculatorConfigData,
    #[doc = "  Average of depth values inside the ROI between the specified thresholds in config.\n  Calculated only if calculation method is set to AVERAGE or MIN oR MAX."]
    pub depthAverage: f32,
    #[doc = "  Most frequent of depth values inside the ROI between the specified thresholds in config.\n Calculated only if calculation method is set to MODE."]
    pub depthMode: f32,
    #[doc = "  Median of depth values inside the ROI between the specified thresholds in config.\n Calculated only if calculation method is set to MEDIAN."]
    pub depthMedian: f32,
    #[doc = "  Minimum of depth values inside the ROI between the specified thresholds in config.\n Calculated only if calculation method is set to AVERAGE or MIN oR MAX."]
    pub depthMin: ::std::os::raw::c_ushort,
    #[doc = "  Maximum of depth values inside the ROI between the specified thresholds in config.\n Calculated only if calculation method is set to AVERAGE or MIN oR MAX."]
    pub depthMax: ::std::os::raw::c_ushort,
    #[doc = "  Number of depth values used in calculations."]
    pub depthAveragePixelCount: ::std::os::raw::c_uint,
    #[doc = "  Spatial coordinates - x,y,z; x,y are the relative positions of the center of ROI to the center of depth map"]
    pub spatialCoordinates: dai_Point3f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialLocations"][::std::mem::size_of::<dai_SpatialLocations>() - 68usize];
    ["Alignment of dai_SpatialLocations"][::std::mem::align_of::<dai_SpatialLocations>() - 4usize];
    ["Offset of field: dai_SpatialLocations::config"]
        [::std::mem::offset_of!(dai_SpatialLocations, config) - 0usize];
    ["Offset of field: dai_SpatialLocations::depthAverage"]
        [::std::mem::offset_of!(dai_SpatialLocations, depthAverage) - 36usize];
    ["Offset of field: dai_SpatialLocations::depthMode"]
        [::std::mem::offset_of!(dai_SpatialLocations, depthMode) - 40usize];
    ["Offset of field: dai_SpatialLocations::depthMedian"]
        [::std::mem::offset_of!(dai_SpatialLocations, depthMedian) - 44usize];
    ["Offset of field: dai_SpatialLocations::depthMin"]
        [::std::mem::offset_of!(dai_SpatialLocations, depthMin) - 48usize];
    ["Offset of field: dai_SpatialLocations::depthMax"]
        [::std::mem::offset_of!(dai_SpatialLocations, depthMax) - 50usize];
    ["Offset of field: dai_SpatialLocations::depthAveragePixelCount"]
        [::std::mem::offset_of!(dai_SpatialLocations, depthAveragePixelCount) - 52usize];
    ["Offset of field: dai_SpatialLocations::spatialCoordinates"]
        [::std::mem::offset_of!(dai_SpatialLocations, spatialCoordinates) - 56usize];
};
#[doc = " SpatialLocationCalculatorData message. Carries spatial information (X,Y,Z) and their configuration parameters"]
#[repr(C)]
pub struct dai_SpatialLocationCalculatorData {
    pub _base: dai_Buffer,
    pub spatialLocations: std_vector,
}
pub type dai_SpatialLocationCalculatorData_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SpatialLocationCalculatorData"]
        [::std::mem::size_of::<dai_SpatialLocationCalculatorData>() - 88usize];
    ["Alignment of dai_SpatialLocationCalculatorData"]
        [::std::mem::align_of::<dai_SpatialLocationCalculatorData>() - 8usize];
    ["Offset of field: dai_SpatialLocationCalculatorData::spatialLocations"]
        [::std::mem::offset_of!(dai_SpatialLocationCalculatorData, spatialLocations) - 64usize];
};
unsafe extern "C" {
    #[doc = " Retrieve configuration data for SpatialLocationCalculatorData.\n @returns Vector of spatial location data, carrying spatial information (X,Y,Z)"]
    #[link_name = "\u{1}_ZNK3dai29SpatialLocationCalculatorData19getSpatialLocationsEv"]
    pub fn dai_SpatialLocationCalculatorData_getSpatialLocations(
        this: *const dai_SpatialLocationCalculatorData,
    ) -> std_vector;
}
impl dai_SpatialLocationCalculatorData {
    #[inline]
    pub unsafe fn getSpatialLocations(&self) -> std_vector {
        dai_SpatialLocationCalculatorData_getSpatialLocations(self)
    }
}
#[doc = " SystemInformation message. Carries memory usage, cpu usage and chip temperatures."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_SystemInformation {
    pub _base: dai_Buffer,
    pub ddrMemoryUsage: dai_MemoryInfo,
    pub cmxMemoryUsage: dai_MemoryInfo,
    pub leonCssMemoryUsage: dai_MemoryInfo,
    pub leonMssMemoryUsage: dai_MemoryInfo,
    pub leonCssCpuUsage: dai_CpuUsage,
    pub leonMssCpuUsage: dai_CpuUsage,
    pub chipTemperature: dai_ChipTemperature,
}
pub type dai_SystemInformation_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SystemInformation"][::std::mem::size_of::<dai_SystemInformation>() - 200usize];
    ["Alignment of dai_SystemInformation"]
        [::std::mem::align_of::<dai_SystemInformation>() - 8usize];
    ["Offset of field: dai_SystemInformation::ddrMemoryUsage"]
        [::std::mem::offset_of!(dai_SystemInformation, ddrMemoryUsage) - 64usize];
    ["Offset of field: dai_SystemInformation::cmxMemoryUsage"]
        [::std::mem::offset_of!(dai_SystemInformation, cmxMemoryUsage) - 88usize];
    ["Offset of field: dai_SystemInformation::leonCssMemoryUsage"]
        [::std::mem::offset_of!(dai_SystemInformation, leonCssMemoryUsage) - 112usize];
    ["Offset of field: dai_SystemInformation::leonMssMemoryUsage"]
        [::std::mem::offset_of!(dai_SystemInformation, leonMssMemoryUsage) - 136usize];
    ["Offset of field: dai_SystemInformation::leonCssCpuUsage"]
        [::std::mem::offset_of!(dai_SystemInformation, leonCssCpuUsage) - 160usize];
    ["Offset of field: dai_SystemInformation::leonMssCpuUsage"]
        [::std::mem::offset_of!(dai_SystemInformation, leonMssCpuUsage) - 168usize];
    ["Offset of field: dai_SystemInformation::chipTemperature"]
        [::std::mem::offset_of!(dai_SystemInformation, chipTemperature) - 176usize];
};
#[doc = " Chip temperature information.\n\n Multiple temperature measurement points and their average"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_ChipTemperatureS3 {
    #[doc = "  CPU Subsystem"]
    pub css: f32,
    #[doc = "  Media Subsystem"]
    pub mss: f32,
    #[doc = "  TODO: What does nce stand for?"]
    pub nce: f32,
    #[doc = "  SoC"]
    pub soc: f32,
    #[doc = "  Average of measurements"]
    pub average: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_ChipTemperatureS3"][::std::mem::size_of::<dai_ChipTemperatureS3>() - 20usize];
    ["Alignment of dai_ChipTemperatureS3"]
        [::std::mem::align_of::<dai_ChipTemperatureS3>() - 4usize];
    ["Offset of field: dai_ChipTemperatureS3::css"]
        [::std::mem::offset_of!(dai_ChipTemperatureS3, css) - 0usize];
    ["Offset of field: dai_ChipTemperatureS3::mss"]
        [::std::mem::offset_of!(dai_ChipTemperatureS3, mss) - 4usize];
    ["Offset of field: dai_ChipTemperatureS3::nce"]
        [::std::mem::offset_of!(dai_ChipTemperatureS3, nce) - 8usize];
    ["Offset of field: dai_ChipTemperatureS3::soc"]
        [::std::mem::offset_of!(dai_ChipTemperatureS3, soc) - 12usize];
    ["Offset of field: dai_ChipTemperatureS3::average"]
        [::std::mem::offset_of!(dai_ChipTemperatureS3, average) - 16usize];
};
#[doc = " SystemInformation message for series 3 devices.\n Carries memory usage, cpu usage and chip temperatures."]
#[repr(C)]
pub struct dai_SystemInformationS3 {
    pub _base: dai_Buffer,
    pub ddrMemoryUsage: dai_MemoryInfo,
    pub cpuAvgUsage: dai_CpuUsage,
    pub cpuUsages: std_vector,
    pub chipTemperature: dai_ChipTemperatureS3,
}
pub type dai_SystemInformationS3_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_SystemInformationS3"]
        [::std::mem::size_of::<dai_SystemInformationS3>() - 144usize];
    ["Alignment of dai_SystemInformationS3"]
        [::std::mem::align_of::<dai_SystemInformationS3>() - 8usize];
    ["Offset of field: dai_SystemInformationS3::ddrMemoryUsage"]
        [::std::mem::offset_of!(dai_SystemInformationS3, ddrMemoryUsage) - 64usize];
    ["Offset of field: dai_SystemInformationS3::cpuAvgUsage"]
        [::std::mem::offset_of!(dai_SystemInformationS3, cpuAvgUsage) - 88usize];
    ["Offset of field: dai_SystemInformationS3::cpuUsages"]
        [::std::mem::offset_of!(dai_SystemInformationS3, cpuUsages) - 96usize];
    ["Offset of field: dai_SystemInformationS3::chipTemperature"]
        [::std::mem::offset_of!(dai_SystemInformationS3, chipTemperature) - 120usize];
};
#[doc = " TrackedFeature structure\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_TrackedFeature {
    #[doc = "  x, y position of the detected feature"]
    pub position: dai_Point2f,
    #[doc = "  Feature ID. Persistent between frames if motion estimation is enabled."]
    pub id: u32,
    #[doc = "  Feature age in frames"]
    pub age: u32,
    #[doc = "  Feature harris score"]
    pub harrisScore: f32,
    #[doc = "  Feature tracking error"]
    pub trackingError: f32,
    #[doc = "  Feature descriptor"]
    pub descriptor: __BindgenOpaqueArray<u8, 32usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_TrackedFeature"][::std::mem::size_of::<dai_TrackedFeature>() - 60usize];
    ["Alignment of dai_TrackedFeature"][::std::mem::align_of::<dai_TrackedFeature>() - 4usize];
    ["Offset of field: dai_TrackedFeature::position"]
        [::std::mem::offset_of!(dai_TrackedFeature, position) - 0usize];
    ["Offset of field: dai_TrackedFeature::id"]
        [::std::mem::offset_of!(dai_TrackedFeature, id) - 12usize];
    ["Offset of field: dai_TrackedFeature::age"]
        [::std::mem::offset_of!(dai_TrackedFeature, age) - 16usize];
    ["Offset of field: dai_TrackedFeature::harrisScore"]
        [::std::mem::offset_of!(dai_TrackedFeature, harrisScore) - 20usize];
    ["Offset of field: dai_TrackedFeature::trackingError"]
        [::std::mem::offset_of!(dai_TrackedFeature, trackingError) - 24usize];
    ["Offset of field: dai_TrackedFeature::descriptor"]
        [::std::mem::offset_of!(dai_TrackedFeature, descriptor) - 28usize];
};
#[doc = " TrackedFeatures message. Carries position (X, Y) of tracked features and their ID."]
#[repr(C)]
pub struct dai_TrackedFeatures {
    pub _base: dai_Buffer,
    pub trackedFeatures: std_vector,
}
pub type dai_TrackedFeatures_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_TrackedFeatures"][::std::mem::size_of::<dai_TrackedFeatures>() - 88usize];
    ["Alignment of dai_TrackedFeatures"][::std::mem::align_of::<dai_TrackedFeatures>() - 8usize];
    ["Offset of field: dai_TrackedFeatures::trackedFeatures"]
        [::std::mem::offset_of!(dai_TrackedFeatures, trackedFeatures) - 64usize];
};
#[doc = " Point3d structure\n\n x,y,z coordinates that define a 3D point."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Point3d {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Point3d"][::std::mem::size_of::<dai_Point3d>() - 24usize];
    ["Alignment of dai_Point3d"][::std::mem::align_of::<dai_Point3d>() - 8usize];
    ["Offset of field: dai_Point3d::x"][::std::mem::offset_of!(dai_Point3d, x) - 0usize];
    ["Offset of field: dai_Point3d::y"][::std::mem::offset_of!(dai_Point3d, y) - 8usize];
    ["Offset of field: dai_Point3d::z"][::std::mem::offset_of!(dai_Point3d, z) - 16usize];
};
#[doc = " Quaterniond structure\n\n qx,qy,qz,qw coordinates that define a 3D point orientation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Quaterniond {
    pub qx: f64,
    pub qy: f64,
    pub qz: f64,
    pub qw: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Quaterniond"][::std::mem::size_of::<dai_Quaterniond>() - 32usize];
    ["Alignment of dai_Quaterniond"][::std::mem::align_of::<dai_Quaterniond>() - 8usize];
    ["Offset of field: dai_Quaterniond::qx"][::std::mem::offset_of!(dai_Quaterniond, qx) - 0usize];
    ["Offset of field: dai_Quaterniond::qy"][::std::mem::offset_of!(dai_Quaterniond, qy) - 8usize];
    ["Offset of field: dai_Quaterniond::qz"][::std::mem::offset_of!(dai_Quaterniond, qz) - 16usize];
    ["Offset of field: dai_Quaterniond::qw"][::std::mem::offset_of!(dai_Quaterniond, qw) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dai_Transform {
    pub matrix: __BindgenOpaqueArray<u64, 16usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_Transform"][::std::mem::size_of::<dai_Transform>() - 128usize];
    ["Alignment of dai_Transform"][::std::mem::align_of::<dai_Transform>() - 8usize];
    ["Offset of field: dai_Transform::matrix"]
        [::std::mem::offset_of!(dai_Transform, matrix) - 0usize];
};
#[doc = " TransformData message. Carries transform in x,y,z,qx,qy,qz,qw format."]
#[repr(C)]
#[derive(Debug)]
pub struct dai_TransformData {
    pub _base: dai_Buffer,
    #[doc = " Transform"]
    pub transform: dai_Transform,
}
pub type dai_TransformData_NOP__MEMBERS = nop_MemberList;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dai_TransformData"][::std::mem::size_of::<dai_TransformData>() - 192usize];
    ["Alignment of dai_TransformData"][::std::mem::align_of::<dai_TransformData>() - 8usize];
    ["Offset of field: dai_TransformData::transform"]
        [::std::mem::offset_of!(dai_TransformData, transform) - 64usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai13TransformData14getTranslationEv"]
    pub fn dai_TransformData_getTranslation(this: *const dai_TransformData) -> dai_Point3d;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai13TransformData16getRotationEulerEv"]
    pub fn dai_TransformData_getRotationEuler(this: *const dai_TransformData) -> dai_Point3d;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZNK3dai13TransformData13getQuaternionEv"]
    pub fn dai_TransformData_getQuaternion(this: *const dai_TransformData) -> dai_Quaterniond;
}
unsafe extern "C" {
    #[doc = " Construct TransformData message."]
    #[link_name = "\u{1}_ZN3dai13TransformDataC1Ev"]
    pub fn dai_TransformData_TransformData(this: *mut dai_TransformData);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai13TransformDataC1ERKNS_9TransformE"]
    pub fn dai_TransformData_TransformData1(
        this: *mut dai_TransformData,
        transform: *const dai_Transform,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai13TransformDataC1ERKSt5arrayIS1_IdLm4EELm4EE"]
    pub fn dai_TransformData_TransformData2(
        this: *mut dai_TransformData,
        data: *const __BindgenOpaqueArray<u64, 16usize>,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai13TransformDataC1Eddddddd"]
    pub fn dai_TransformData_TransformData3(
        this: *mut dai_TransformData,
        x: f64,
        y: f64,
        z: f64,
        qx: f64,
        qy: f64,
        qz: f64,
        qw: f64,
    );
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN3dai13TransformDataC1Edddddd"]
    pub fn dai_TransformData_TransformData4(
        this: *mut dai_TransformData,
        x: f64,
        y: f64,
        z: f64,
        roll: f64,
        pitch: f64,
        yaw: f64,
    );
}
impl dai_TransformData {
    #[inline]
    pub unsafe fn getTranslation(&self) -> dai_Point3d {
        dai_TransformData_getTranslation(self)
    }
    #[inline]
    pub unsafe fn getRotationEuler(&self) -> dai_Point3d {
        dai_TransformData_getRotationEuler(self)
    }
    #[inline]
    pub unsafe fn getQuaternion(&self) -> dai_Quaterniond {
        dai_TransformData_getQuaternion(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_TransformData_TransformData(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(transform: *const dai_Transform) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_TransformData_TransformData1(__bindgen_tmp.as_mut_ptr(), transform);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(data: *const __BindgenOpaqueArray<u64, 16usize>) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_TransformData_TransformData2(__bindgen_tmp.as_mut_ptr(), data);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(x: f64, y: f64, z: f64, qx: f64, qy: f64, qz: f64, qw: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_TransformData_TransformData3(__bindgen_tmp.as_mut_ptr(), x, y, z, qx, qy, qz, qw);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(x: f64, y: f64, z: f64, roll: f64, pitch: f64, yaw: f64) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        dai_TransformData_TransformData4(__bindgen_tmp.as_mut_ptr(), x, y, z, roll, pitch, yaw);
        __bindgen_tmp.assume_init()
    }
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
unsafe extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getcpu(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
unsafe extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
unsafe extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
unsafe extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timex"][::std::mem::size_of::<timex>() - 208usize];
    ["Alignment of timex"][::std::mem::align_of::<timex>() - 8usize];
    ["Offset of field: timex::modes"][::std::mem::offset_of!(timex, modes) - 0usize];
    ["Offset of field: timex::offset"][::std::mem::offset_of!(timex, offset) - 8usize];
    ["Offset of field: timex::freq"][::std::mem::offset_of!(timex, freq) - 16usize];
    ["Offset of field: timex::maxerror"][::std::mem::offset_of!(timex, maxerror) - 24usize];
    ["Offset of field: timex::esterror"][::std::mem::offset_of!(timex, esterror) - 32usize];
    ["Offset of field: timex::status"][::std::mem::offset_of!(timex, status) - 40usize];
    ["Offset of field: timex::constant"][::std::mem::offset_of!(timex, constant) - 48usize];
    ["Offset of field: timex::precision"][::std::mem::offset_of!(timex, precision) - 56usize];
    ["Offset of field: timex::tolerance"][::std::mem::offset_of!(timex, tolerance) - 64usize];
    ["Offset of field: timex::time"][::std::mem::offset_of!(timex, time) - 72usize];
    ["Offset of field: timex::tick"][::std::mem::offset_of!(timex, tick) - 88usize];
    ["Offset of field: timex::ppsfreq"][::std::mem::offset_of!(timex, ppsfreq) - 96usize];
    ["Offset of field: timex::jitter"][::std::mem::offset_of!(timex, jitter) - 104usize];
    ["Offset of field: timex::shift"][::std::mem::offset_of!(timex, shift) - 112usize];
    ["Offset of field: timex::stabil"][::std::mem::offset_of!(timex, stabil) - 120usize];
    ["Offset of field: timex::jitcnt"][::std::mem::offset_of!(timex, jitcnt) - 128usize];
    ["Offset of field: timex::calcnt"][::std::mem::offset_of!(timex, calcnt) - 136usize];
    ["Offset of field: timex::errcnt"][::std::mem::offset_of!(timex, errcnt) - 144usize];
    ["Offset of field: timex::stbcnt"][::std::mem::offset_of!(timex, stbcnt) - 152usize];
    ["Offset of field: timex::tai"][::std::mem::offset_of!(timex, tai) - 160usize];
};
unsafe extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
unsafe extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
unsafe extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_41 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_41 = 1;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_42 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_42 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_42 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_42 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_42 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_42 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_42 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_42 = 0;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_42 = 0;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_43 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_43 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_43 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_43 = 1;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_44 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_44 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_44 = 2;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_45 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_45 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_45 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_45 = 0;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_46 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_46 = 1;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_47 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_47 = 1;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_48 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_48 = 1;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_49 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_49 = 1;
pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_50 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_50 = 1;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
unsafe extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_clockjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_self() -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setsigmask_np(
        __attr: *mut pthread_attr_t,
        sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getsigmask_np(
        __attr: *const pthread_attr_t,
        sigmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_class"][::std::mem::size_of::<__pthread_cleanup_class>() - 24usize];
    ["Alignment of __pthread_cleanup_class"]
        [::std::mem::align_of::<__pthread_cleanup_class>() - 8usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_class::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_type) - 20usize];
};
unsafe extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_clocklock(
        __mutex: *mut pthread_mutex_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_clockrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_clockwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_clockwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __clock_id: __clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type __gthread_t = pthread_t;
pub type __gthread_key_t = pthread_key_t;
pub type __gthread_once_t = pthread_once_t;
pub type __gthread_mutex_t = pthread_mutex_t;
pub type __gthread_recursive_mutex_t = pthread_mutex_t;
pub type __gthread_cond_t = pthread_cond_t;
pub type __gthread_time_t = timespec;
pub type _Atomic_word = ::std::os::raw::c_int;
unsafe extern "C" {
    pub static mut __libc_single_threaded: ::std::os::raw::c_char;
}
pub type wctype_t = ::std::os::raw::c_ulong;
pub const __ISwupper: _bindgen_ty_51 = 0;
pub const __ISwlower: _bindgen_ty_51 = 1;
pub const __ISwalpha: _bindgen_ty_51 = 2;
pub const __ISwdigit: _bindgen_ty_51 = 3;
pub const __ISwxdigit: _bindgen_ty_51 = 4;
pub const __ISwspace: _bindgen_ty_51 = 5;
pub const __ISwprint: _bindgen_ty_51 = 6;
pub const __ISwgraph: _bindgen_ty_51 = 7;
pub const __ISwblank: _bindgen_ty_51 = 8;
pub const __ISwcntrl: _bindgen_ty_51 = 9;
pub const __ISwpunct: _bindgen_ty_51 = 10;
pub const __ISwalnum: _bindgen_ty_51 = 11;
pub const _ISwupper: _bindgen_ty_51 = 16777216;
pub const _ISwlower: _bindgen_ty_51 = 33554432;
pub const _ISwalpha: _bindgen_ty_51 = 67108864;
pub const _ISwdigit: _bindgen_ty_51 = 134217728;
pub const _ISwxdigit: _bindgen_ty_51 = 268435456;
pub const _ISwspace: _bindgen_ty_51 = 536870912;
pub const _ISwprint: _bindgen_ty_51 = 1073741824;
pub const _ISwgraph: _bindgen_ty_51 = -2147483648;
pub const _ISwblank: _bindgen_ty_51 = 65536;
pub const _ISwcntrl: _bindgen_ty_51 = 131072;
pub const _ISwpunct: _bindgen_ty_51 = 262144;
pub const _ISwalnum: _bindgen_ty_51 = 524288;
pub type _bindgen_ty_51 = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn iswalnum(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswalpha(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswgraph(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswlower(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswprint(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswpunct(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswspace(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswupper(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswblank(__wc: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctype(__property: *const ::std::os::raw::c_char) -> wctype_t;
}
unsafe extern "C" {
    pub fn iswctype(__wc: wint_t, __desc: wctype_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn towlower(__wc: wint_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towupper(__wc: wint_t) -> wint_t;
}
pub type wctrans_t = *const __int32_t;
unsafe extern "C" {
    pub fn wctrans(__property: *const ::std::os::raw::c_char) -> wctrans_t;
}
unsafe extern "C" {
    pub fn towctrans(__wc: wint_t, __desc: wctrans_t) -> wint_t;
}
unsafe extern "C" {
    pub fn iswalnum_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswalpha_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswdigit_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswgraph_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswlower_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswprint_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswpunct_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswspace_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswupper_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswblank_l(__wc: wint_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctype_l(__property: *const ::std::os::raw::c_char, __locale: locale_t) -> wctype_t;
}
unsafe extern "C" {
    pub fn iswctype_l(__wc: wint_t, __desc: wctype_t, __locale: locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn towlower_l(__wc: wint_t, __locale: locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towupper_l(__wc: wint_t, __locale: locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn wctrans_l(__property: *const ::std::os::raw::c_char, __locale: locale_t) -> wctrans_t;
}
unsafe extern "C" {
    pub fn towctrans_l(__wc: wint_t, __desc: wctrans_t, __locale: locale_t) -> wint_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_sequenced_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_sequenced_policy"]
        [::std::mem::size_of::<__pstl_execution_sequenced_policy>() - 1usize];
    ["Alignment of __pstl_execution_sequenced_policy"]
        [::std::mem::align_of::<__pstl_execution_sequenced_policy>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_parallel_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_parallel_policy"]
        [::std::mem::size_of::<__pstl_execution_parallel_policy>() - 1usize];
    ["Alignment of __pstl_execution_parallel_policy"]
        [::std::mem::align_of::<__pstl_execution_parallel_policy>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_parallel_unsequenced_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_parallel_unsequenced_policy"]
        [::std::mem::size_of::<__pstl_execution_parallel_unsequenced_policy>() - 1usize];
    ["Alignment of __pstl_execution_parallel_unsequenced_policy"]
        [::std::mem::align_of::<__pstl_execution_parallel_unsequenced_policy>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_unsequenced_policy {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pstl_execution_unsequenced_policy"]
        [::std::mem::size_of::<__pstl_execution_unsequenced_policy>() - 1usize];
    ["Alignment of __pstl_execution_unsequenced_policy"]
        [::std::mem::align_of::<__pstl_execution_unsequenced_policy>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v13seqE"]
    pub static __pstl_execution_seq: __pstl_execution_sequenced_policy;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v13parE"]
    pub static __pstl_execution_par: __pstl_execution_parallel_policy;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v19par_unseqE"]
    pub static __pstl_execution_par_unseq: __pstl_execution_parallel_unsequenced_policy;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN6__pstl9execution2v15unseqE"]
    pub static __pstl_execution_unseq: __pstl_execution_unsequenced_policy;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pstl_execution_is_execution_policy {
    pub _base: std_false_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_sequenced_policy_close0",
    ][::std::mem::size_of::<__pstl_execution_is_execution_policy>() - 1usize];
    [
        "Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_sequenced_policy_close0",
    ][::std::mem::align_of::<__pstl_execution_is_execution_policy>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_policy_close0",
    ][::std::mem::size_of::<__pstl_execution_is_execution_policy>() - 1usize];
    [
        "Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_policy_close0",
    ][::std::mem::align_of::<__pstl_execution_is_execution_policy>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_unsequenced_policy_close0",
    ][::std::mem::size_of::<__pstl_execution_is_execution_policy>() - 1usize];
    [
        "Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_parallel_unsequenced_policy_close0",
    ][::std::mem::align_of::<__pstl_execution_is_execution_policy>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_unsequenced_policy_close0",
    ][::std::mem::size_of::<__pstl_execution_is_execution_policy>() - 1usize];
    [
        "Align of template specialization: __pstl_execution_is_execution_policy_open0___pstl_execution_unsequenced_policy_close0",
    ][::std::mem::align_of::<__pstl_execution_is_execution_policy>() - 1usize];
};
pub type __pstl___internal___enable_if_execution_policy = u8;
pub type float_t = f32;
pub type double_t = f64;
pub const FP_INT_UPWARD: _bindgen_ty_55 = 0;
pub const FP_INT_DOWNWARD: _bindgen_ty_55 = 1;
pub const FP_INT_TOWARDZERO: _bindgen_ty_55 = 2;
pub const FP_INT_TONEARESTFROMZERO: _bindgen_ty_55 = 3;
pub const FP_INT_TONEAREST: _bindgen_ty_55 = 4;
pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
unsafe extern "C" {
    pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
unsafe extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn exp10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn nextdown(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nextdown(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextup(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nextup(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn roundeven(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __roundeven(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmaxmag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminmag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fminmag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaximum(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmaximum(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminimum(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fminimum(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaximum_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmaximum_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminimum_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fminimum_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaximum_mag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmaximum_mag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminimum_mag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fminimum_mag(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmaximum_mag_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fminimum_mag_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fminimum_mag_num(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn totalorder(__x: *const f64, __y: *const f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermag(__x: *const f64, __y: *const f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayload(__x: *const f64) -> f64;
}
unsafe extern "C" {
    pub fn __getpayload(__x: *const f64) -> f64;
}
unsafe extern "C" {
    pub fn setpayload(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsig(__x: *mut f64, __payload: f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
unsafe extern "C" {
    pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
unsafe extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn exp10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
unsafe extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn nextdownf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nextdownf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextupf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nextupf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundevenf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __roundevenf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmagf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaxmagf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminmagf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminmagf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaximumf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaximumf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminimumf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminimumf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaximum_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaximum_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminimum_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminimum_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaximum_magf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaximum_magf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminimum_magf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminimum_magf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminimum_mag_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminimum_mag_numf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn totalorderf(__x: *const f32, __y: *const f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermagf(__x: *const f32, __y: *const f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayloadf(__x: *const f32) -> f32;
}
unsafe extern "C" {
    pub fn __getpayloadf(__x: *const f32) -> f32;
}
unsafe extern "C" {
    pub fn setpayloadf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsigf(__x: *mut f32, __payload: f32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
unsafe extern "C" {
    pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
unsafe extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn exp10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __exp10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
unsafe extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextdownl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nextdownl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextupl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nextupl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogbl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogbl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
unsafe extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
unsafe extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn roundevenl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __roundevenl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmagl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaxmagl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminmagl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminmagl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaximuml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaximuml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminimuml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminimuml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaximum_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaximum_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminimum_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminimum_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaximum_magl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaximum_magl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminimum_magl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminimum_magl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminimum_mag_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminimum_mag_numl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn totalorderl(__x: *const u128, __y: *const u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermagl(__x: *const u128, __y: *const u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayloadl(__x: *const u128) -> u128;
}
unsafe extern "C" {
    pub fn __getpayloadl(__x: *const u128) -> u128;
}
unsafe extern "C" {
    pub fn setpayloadl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsigl(__x: *mut u128, __payload: u128) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub fn acosf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __acosf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn asinf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __asinf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn atanf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __atanf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __atan2f32(__y: _Float32, __x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn cosf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __cosf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn sinf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __sinf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn tanf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __tanf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn coshf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __coshf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn sinhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __sinhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn tanhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __tanhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
unsafe extern "C" {
    pub fn __sincosf32(__x: _Float32, __sinx: *mut _Float32, __cosx: *mut _Float32);
}
unsafe extern "C" {
    pub fn acoshf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __acoshf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn asinhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __asinhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn atanhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __atanhf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn expf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __expf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn __frexpf32(__x: _Float32, __exponent: *mut ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn __ldexpf32(__x: _Float32, __exponent: ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn logf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __logf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn log10f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __log10f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __modff32(__x: _Float32, __iptr: *mut _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn exp10f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __exp10f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn expm1f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __expm1f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn log1pf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __log1pf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn logbf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __logbf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn exp2f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __exp2f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn log2f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __log2f32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __powf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn sqrtf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __sqrtf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __hypotf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn cbrtf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __cbrtf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn ceilf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __ceilf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fabsf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fabsf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn floorf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __floorf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmodf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __copysignf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
unsafe extern "C" {
    pub fn __nanf32(__tagb: *const ::std::os::raw::c_char) -> _Float32;
}
unsafe extern "C" {
    pub fn j0f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __j0f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn j1f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __j1f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __jnf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn y0f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __y0f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn y1f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __y1f32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __ynf32(arg1: ::std::os::raw::c_int, arg2: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn erff32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __erff32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn erfcf32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __erfcf32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn lgammaf32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __lgammaf32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn tgammaf32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __tgammaf32(arg1: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn __lgammaf32_r(arg1: _Float32, __signgamp: *mut ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn rintf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __rintf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __nextafterf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn nextdownf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __nextdownf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn nextupf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __nextupf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __remainderf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn __scalbnf32(__x: _Float32, __n: ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf32(__x: _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogbf32(__x: _Float32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
unsafe extern "C" {
    pub fn __scalblnf32(__x: _Float32, __n: ::std::os::raw::c_long) -> _Float32;
}
unsafe extern "C" {
    pub fn nearbyintf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __nearbyintf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn roundf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __roundf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn truncf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __truncf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int) -> _Float32;
}
unsafe extern "C" {
    pub fn __remquof32(__x: _Float32, __y: _Float32, __quo: *mut ::std::os::raw::c_int)
    -> _Float32;
}
unsafe extern "C" {
    pub fn lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf32(__x: _Float32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf32(__x: _Float32) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf32(__x: _Float32) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fdimf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaxf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fminf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaf32(__x: _Float32, __y: _Float32, __z: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn roundevenf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __roundevenf32(__x: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpxf32(
        __x: _Float32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalizef32(__cx: *mut _Float32, __x: *const _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaxmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fminmagf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmaximumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaximumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fminimumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fminimumf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmaximum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaximum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fminimum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fminimum_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmaximum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaximum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fminimum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fminimum_magf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fmaximum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn fminimum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __fminimum_mag_numf32(__x: _Float32, __y: _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn totalorderf32(__x: *const _Float32, __y: *const _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermagf32(__x: *const _Float32, __y: *const _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayloadf32(__x: *const _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn __getpayloadf32(__x: *const _Float32) -> _Float32;
}
unsafe extern "C" {
    pub fn setpayloadf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsigf32(__x: *mut _Float32, __payload: _Float32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __acosf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn asinf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __asinf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn atanf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __atanf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __atan2f64(__y: _Float64, __x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn cosf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __cosf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn sinf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __sinf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn tanf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __tanf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn coshf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __coshf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn sinhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __sinhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn tanhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __tanhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
unsafe extern "C" {
    pub fn __sincosf64(__x: _Float64, __sinx: *mut _Float64, __cosx: *mut _Float64);
}
unsafe extern "C" {
    pub fn acoshf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __acoshf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn asinhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __asinhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn atanhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __atanhf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn expf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __expf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn __frexpf64(__x: _Float64, __exponent: *mut ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn __ldexpf64(__x: _Float64, __exponent: ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn logf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __logf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn log10f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __log10f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __modff64(__x: _Float64, __iptr: *mut _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn exp10f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __exp10f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn expm1f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __expm1f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn log1pf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __log1pf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn logbf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __logbf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn exp2f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __exp2f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn log2f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __log2f64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __powf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn sqrtf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __sqrtf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __hypotf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn cbrtf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __cbrtf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn ceilf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __ceilf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fabsf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fabsf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn floorf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __floorf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmodf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __copysignf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
unsafe extern "C" {
    pub fn __nanf64(__tagb: *const ::std::os::raw::c_char) -> _Float64;
}
unsafe extern "C" {
    pub fn j0f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __j0f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn j1f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __j1f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __jnf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn y0f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __y0f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn y1f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __y1f64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __ynf64(arg1: ::std::os::raw::c_int, arg2: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn erff64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __erff64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn erfcf64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __erfcf64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn lgammaf64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __lgammaf64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn tgammaf64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __tgammaf64(arg1: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn __lgammaf64_r(arg1: _Float64, __signgamp: *mut ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn rintf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __rintf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __nextafterf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn nextdownf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __nextdownf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn nextupf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __nextupf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __remainderf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn __scalbnf64(__x: _Float64, __n: ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf64(__x: _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogbf64(__x: _Float64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
unsafe extern "C" {
    pub fn __scalblnf64(__x: _Float64, __n: ::std::os::raw::c_long) -> _Float64;
}
unsafe extern "C" {
    pub fn nearbyintf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __nearbyintf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn roundf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __roundf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn truncf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __truncf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int) -> _Float64;
}
unsafe extern "C" {
    pub fn __remquof64(__x: _Float64, __y: _Float64, __quo: *mut ::std::os::raw::c_int)
    -> _Float64;
}
unsafe extern "C" {
    pub fn lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf64(__x: _Float64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf64(__x: _Float64) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf64(__x: _Float64) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fdimf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaxf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fminf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn roundevenf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __roundevenf64(__x: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpxf64(
        __x: _Float64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalizef64(__cx: *mut _Float64, __x: *const _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaxmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fminmagf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmaximumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaximumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fminimumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fminimumf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmaximum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaximum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fminimum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fminimum_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmaximum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaximum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fminimum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fminimum_magf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fmaximum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn fminimum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __fminimum_mag_numf64(__x: _Float64, __y: _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn totalorderf64(__x: *const _Float64, __y: *const _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermagf64(__x: *const _Float64, __y: *const _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayloadf64(__x: *const _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn __getpayloadf64(__x: *const _Float64) -> _Float64;
}
unsafe extern "C" {
    pub fn setpayloadf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsigf64(__x: *mut _Float64, __payload: _Float64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __acosf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn asinf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __asinf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn atanf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __atanf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __atan2f32x(__y: _Float32x, __x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn cosf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __cosf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn sinf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __sinf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn tanf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __tanf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn coshf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __coshf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn sinhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __sinhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn tanhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __tanhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
unsafe extern "C" {
    pub fn __sincosf32x(__x: _Float32x, __sinx: *mut _Float32x, __cosx: *mut _Float32x);
}
unsafe extern "C" {
    pub fn acoshf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __acoshf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn asinhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __asinhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn atanhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __atanhf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn expf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __expf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn __frexpf32x(__x: _Float32x, __exponent: *mut ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn __ldexpf32x(__x: _Float32x, __exponent: ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn logf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __logf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn log10f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __log10f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __modff32x(__x: _Float32x, __iptr: *mut _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn exp10f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __exp10f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn expm1f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __expm1f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn log1pf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __log1pf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn logbf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __logbf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn exp2f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __exp2f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn log2f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __log2f32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __powf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn sqrtf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __sqrtf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __hypotf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn cbrtf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __cbrtf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn ceilf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __ceilf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fabsf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fabsf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn floorf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __floorf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmodf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __copysignf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
unsafe extern "C" {
    pub fn __nanf32x(__tagb: *const ::std::os::raw::c_char) -> _Float32x;
}
unsafe extern "C" {
    pub fn j0f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __j0f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn j1f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __j1f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __jnf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn y0f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __y0f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn y1f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __y1f32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __ynf32x(arg1: ::std::os::raw::c_int, arg2: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn erff32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __erff32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn erfcf32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __erfcf32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn lgammaf32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __lgammaf32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn tgammaf32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __tgammaf32x(arg1: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn __lgammaf32x_r(arg1: _Float32x, __signgamp: *mut ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn rintf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __rintf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __nextafterf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn nextdownf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __nextdownf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn nextupf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __nextupf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __remainderf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn __scalbnf32x(__x: _Float32x, __n: ::std::os::raw::c_int) -> _Float32x;
}
unsafe extern "C" {
    pub fn ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf32x(__x: _Float32x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogbf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
unsafe extern "C" {
    pub fn __scalblnf32x(__x: _Float32x, __n: ::std::os::raw::c_long) -> _Float32x;
}
unsafe extern "C" {
    pub fn nearbyintf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __nearbyintf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn roundf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __roundf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn truncf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __truncf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn __remquof32x(
        __x: _Float32x,
        __y: _Float32x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float32x;
}
unsafe extern "C" {
    pub fn lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf32x(__x: _Float32x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf32x(__x: _Float32x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fdimf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaxf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fminf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn roundevenf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __roundevenf32x(__x: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpxf32x(
        __x: _Float32x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalizef32x(__cx: *mut _Float32x, __x: *const _Float32x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaxmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fminmagf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmaximumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaximumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fminimumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fminimumf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmaximum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaximum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fminimum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fminimum_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmaximum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaximum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fminimum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fminimum_magf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fmaximum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn fminimum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __fminimum_mag_numf32x(__x: _Float32x, __y: _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn totalorderf32x(__x: *const _Float32x, __y: *const _Float32x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermagf32x(__x: *const _Float32x, __y: *const _Float32x)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn __getpayloadf32x(__x: *const _Float32x) -> _Float32x;
}
unsafe extern "C" {
    pub fn setpayloadf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsigf32x(__x: *mut _Float32x, __payload: _Float32x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn acosf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __acosf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn asinf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __asinf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn atanf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __atanf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __atan2f64x(__y: _Float64x, __x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn cosf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __cosf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn sinf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __sinf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn tanf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __tanf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn coshf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __coshf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn sinhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __sinhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn tanhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __tanhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
unsafe extern "C" {
    pub fn __sincosf64x(__x: _Float64x, __sinx: *mut _Float64x, __cosx: *mut _Float64x);
}
unsafe extern "C" {
    pub fn acoshf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __acoshf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn asinhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __asinhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn atanhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __atanhf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn expf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __expf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn __frexpf64x(__x: _Float64x, __exponent: *mut ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn __ldexpf64x(__x: _Float64x, __exponent: ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn logf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __logf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn log10f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __log10f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __modff64x(__x: _Float64x, __iptr: *mut _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn exp10f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __exp10f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn expm1f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __expm1f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn log1pf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __log1pf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn logbf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __logbf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn exp2f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __exp2f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn log2f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __log2f64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __powf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn sqrtf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __sqrtf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __hypotf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn cbrtf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __cbrtf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn ceilf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __ceilf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fabsf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fabsf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn floorf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __floorf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmodf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __copysignf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
unsafe extern "C" {
    pub fn __nanf64x(__tagb: *const ::std::os::raw::c_char) -> _Float64x;
}
unsafe extern "C" {
    pub fn j0f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __j0f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn j1f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __j1f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __jnf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn y0f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __y0f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn y1f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __y1f64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __ynf64x(arg1: ::std::os::raw::c_int, arg2: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn erff64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __erff64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn erfcf64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __erfcf64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn lgammaf64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __lgammaf64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn tgammaf64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __tgammaf64x(arg1: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn __lgammaf64x_r(arg1: _Float64x, __signgamp: *mut ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn rintf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __rintf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __nextafterf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn nextdownf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __nextdownf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn nextupf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __nextupf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __remainderf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn __scalbnf64x(__x: _Float64x, __n: ::std::os::raw::c_int) -> _Float64x;
}
unsafe extern "C" {
    pub fn ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf64x(__x: _Float64x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __llogbf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
unsafe extern "C" {
    pub fn __scalblnf64x(__x: _Float64x, __n: ::std::os::raw::c_long) -> _Float64x;
}
unsafe extern "C" {
    pub fn nearbyintf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __nearbyintf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn roundf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __roundf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn truncf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __truncf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn __remquof64x(
        __x: _Float64x,
        __y: _Float64x,
        __quo: *mut ::std::os::raw::c_int,
    ) -> _Float64x;
}
unsafe extern "C" {
    pub fn lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lrintf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __lroundf64x(__x: _Float64x) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf64x(__x: _Float64x) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fdimf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaxf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fminf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn roundevenf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __roundevenf64x(__x: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn __fromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
}
unsafe extern "C" {
    pub fn ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn __ufromfpxf64x(
        __x: _Float64x,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
}
unsafe extern "C" {
    pub fn canonicalizef64x(__cx: *mut _Float64x, __x: *const _Float64x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaxmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fminmagf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmaximumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaximumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fminimumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fminimumf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmaximum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaximum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fminimum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fminimum_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmaximum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaximum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fminimum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fminimum_magf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fmaximum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fmaximum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn fminimum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __fminimum_mag_numf64x(__x: _Float64x, __y: _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn totalorderf64x(__x: *const _Float64x, __y: *const _Float64x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn totalordermagf64x(__x: *const _Float64x, __y: *const _Float64x)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn __getpayloadf64x(__x: *const _Float64x) -> _Float64x;
}
unsafe extern "C" {
    pub fn setpayloadf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setpayloadsigf64x(__x: *mut _Float64x, __payload: _Float64x) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fadd(__x: f64, __y: f64) -> f32;
}
unsafe extern "C" {
    pub fn fdiv(__x: f64, __y: f64) -> f32;
}
unsafe extern "C" {
    pub fn ffma(__x: f64, __y: f64, __z: f64) -> f32;
}
unsafe extern "C" {
    pub fn fmul(__x: f64, __y: f64) -> f32;
}
unsafe extern "C" {
    pub fn fsqrt(__x: f64) -> f32;
}
unsafe extern "C" {
    pub fn fsub(__x: f64, __y: f64) -> f32;
}
unsafe extern "C" {
    pub fn faddl(__x: u128, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn fdivl(__x: u128, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn ffmal(__x: u128, __y: u128, __z: u128) -> f32;
}
unsafe extern "C" {
    pub fn fmull(__x: u128, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn fsqrtl(__x: u128) -> f32;
}
unsafe extern "C" {
    pub fn fsubl(__x: u128, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn daddl(__x: u128, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn ddivl(__x: u128, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn dfmal(__x: u128, __y: u128, __z: u128) -> f64;
}
unsafe extern "C" {
    pub fn dmull(__x: u128, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn dsqrtl(__x: u128) -> f64;
}
unsafe extern "C" {
    pub fn dsubl(__x: u128, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn f32addf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32divf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32fmaf32x(__x: _Float32x, __y: _Float32x, __z: _Float32x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32mulf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32sqrtf32x(__x: _Float32x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32subf32x(__x: _Float32x, __y: _Float32x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32addf64(__x: _Float64, __y: _Float64) -> _Float32;
}
unsafe extern "C" {
    pub fn f32divf64(__x: _Float64, __y: _Float64) -> _Float32;
}
unsafe extern "C" {
    pub fn f32fmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float32;
}
unsafe extern "C" {
    pub fn f32mulf64(__x: _Float64, __y: _Float64) -> _Float32;
}
unsafe extern "C" {
    pub fn f32sqrtf64(__x: _Float64) -> _Float32;
}
unsafe extern "C" {
    pub fn f32subf64(__x: _Float64, __y: _Float64) -> _Float32;
}
unsafe extern "C" {
    pub fn f32addf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32divf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32mulf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32sqrtf64x(__x: _Float64x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32subf64x(__x: _Float64x, __y: _Float64x) -> _Float32;
}
unsafe extern "C" {
    pub fn f32xaddf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xdivf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xfmaf64(__x: _Float64, __y: _Float64, __z: _Float64) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xmulf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xsqrtf64(__x: _Float64) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xsubf64(__x: _Float64, __y: _Float64) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xaddf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xdivf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xfmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xmulf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xsqrtf64x(__x: _Float64x) -> _Float32x;
}
unsafe extern "C" {
    pub fn f32xsubf64x(__x: _Float64x, __y: _Float64x) -> _Float32x;
}
unsafe extern "C" {
    pub fn f64addf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
unsafe extern "C" {
    pub fn f64divf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
unsafe extern "C" {
    pub fn f64fmaf64x(__x: _Float64x, __y: _Float64x, __z: _Float64x) -> _Float64;
}
unsafe extern "C" {
    pub fn f64mulf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
unsafe extern "C" {
    pub fn f64sqrtf64x(__x: _Float64x) -> _Float64;
}
unsafe extern "C" {
    pub fn f64subf64x(__x: _Float64x, __y: _Float64x) -> _Float64;
}
unsafe extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_56 = 0;
pub const FP_INFINITE: _bindgen_ty_56 = 1;
pub const FP_ZERO: _bindgen_ty_56 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_56 = 3;
pub const FP_NORMAL: _bindgen_ty_56 = 4;
pub type _bindgen_ty_56 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn __iscanonicall(__x: u128) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __iseqsig_type {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __iseqsig_type_open0_float_close0"]
        [::std::mem::size_of::<__iseqsig_type>() - 1usize];
    ["Align of template specialization: __iseqsig_type_open0_float_close0"]
        [::std::mem::align_of::<__iseqsig_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __iseqsig_type_open0_double_close0"]
        [::std::mem::size_of::<__iseqsig_type>() - 1usize];
    ["Align of template specialization: __iseqsig_type_open0_double_close0"]
        [::std::mem::align_of::<__iseqsig_type>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: __iseqsig_type_open0_long_double_close0"]
        [::std::mem::size_of::<__iseqsig_type>() - 1usize];
    ["Align of template specialization: __iseqsig_type_open0_long_double_close0"]
        [::std::mem::align_of::<__iseqsig_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_make_void {
    pub _address: u8,
}
pub type nlohmann_detail_make_void_type = ::std::os::raw::c_void;
pub type nlohmann_detail_void_t = nlohmann_detail_make_void;
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_nonesuch {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_nonesuch"]
        [::std::mem::size_of::<nlohmann_detail_nonesuch>() - 1usize];
    ["Alignment of nlohmann_detail_nonesuch"]
        [::std::mem::align_of::<nlohmann_detail_nonesuch>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_detector {
    pub _address: u8,
}
pub type nlohmann_detail_detector_value_t = std_false_type;
pub type nlohmann_detail_detector_type<Default> = Default;
pub type nlohmann_detail_is_detected = nlohmann_detail_detector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_detected_lazy {
    pub _address: u8,
}
pub type nlohmann_detail_detected_t = nlohmann_detail_detector;
pub type nlohmann_detail_detected_or = nlohmann_detail_detector;
pub type nlohmann_detail_detected_or_t = nlohmann_detail_detected_or;
pub type nlohmann_detail_is_detected_exact = std_is_same;
pub type nlohmann_detail_is_detected_convertible = std_is_convertible;
#[doc = "< null value"]
pub const nlohmann_detail_value_t_null: nlohmann_detail_value_t = 0;
#[doc = "< object (unordered set of name/value pairs)"]
pub const nlohmann_detail_value_t_object: nlohmann_detail_value_t = 1;
#[doc = "< array (ordered collection of values)"]
pub const nlohmann_detail_value_t_array: nlohmann_detail_value_t = 2;
#[doc = "< string value"]
pub const nlohmann_detail_value_t_string: nlohmann_detail_value_t = 3;
#[doc = "< boolean value"]
pub const nlohmann_detail_value_t_boolean: nlohmann_detail_value_t = 4;
#[doc = "< number value (signed integer)"]
pub const nlohmann_detail_value_t_number_integer: nlohmann_detail_value_t = 5;
#[doc = "< number value (unsigned integer)"]
pub const nlohmann_detail_value_t_number_unsigned: nlohmann_detail_value_t = 6;
#[doc = "< number value (floating-point)"]
pub const nlohmann_detail_value_t_number_float: nlohmann_detail_value_t = 7;
#[doc = "< binary array (ordered collection of bytes)"]
pub const nlohmann_detail_value_t_binary: nlohmann_detail_value_t = 8;
#[doc = "< discarded by the parser callback function"]
pub const nlohmann_detail_value_t_discarded: nlohmann_detail_value_t = 9;
#[doc = "@brief the JSON type enumeration\n\nThis enumeration collects the different JSON types. It is internally used to\ndistinguish the stored values, and the functions @ref basic_json::is_null(),\n@ref basic_json::is_object(), @ref basic_json::is_array(),\n@ref basic_json::is_string(), @ref basic_json::is_boolean(),\n@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),\n@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),\n@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and\n@ref basic_json::is_structured() rely on it.\n\n@note There are three enumeration entries (number_integer, number_unsigned, and\nnumber_float), because the library distinguishes these three types for numbers:\n@ref basic_json::number_unsigned_t is used for unsigned integers,\n@ref basic_json::number_integer_t is used for signed integers, and\n@ref basic_json::number_float_t is used for floating-point numbers or to\napproximate integers which do not fit in the limits of their respective type.\n\n@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON\nvalue with the default value for a given type\n\n@since version 1.0.0"]
pub type nlohmann_detail_value_t = ::std::os::raw::c_uchar;
#[doc = " struct to capture the start position of the current token"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_position_t {
    #[doc = " the total number of characters read"]
    pub chars_read_total: usize,
    #[doc = " the number of characters read in the current line"]
    pub chars_read_current_line: usize,
    #[doc = " the number of lines read"]
    pub lines_read: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_position_t"]
        [::std::mem::size_of::<nlohmann_detail_position_t>() - 24usize];
    ["Alignment of nlohmann_detail_position_t"]
        [::std::mem::align_of::<nlohmann_detail_position_t>() - 8usize];
    ["Offset of field: nlohmann_detail_position_t::chars_read_total"]
        [::std::mem::offset_of!(nlohmann_detail_position_t, chars_read_total) - 0usize];
    ["Offset of field: nlohmann_detail_position_t::chars_read_current_line"]
        [::std::mem::offset_of!(nlohmann_detail_position_t, chars_read_current_line) - 8usize];
    ["Offset of field: nlohmann_detail_position_t::lines_read"]
        [::std::mem::offset_of!(nlohmann_detail_position_t, lines_read) - 16usize];
};
pub type nlohmann_detail_uncvref_t = std_remove_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_static_const {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_iterator_types {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_iterator_traits {
    pub _address: u8,
}
pub type nlohmann_detail_result_of_begin<T> = T;
pub type nlohmann_detail_result_of_end<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_basic_json {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_basic_json_context {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_json_ref {
    pub _base: std_false_type,
}
pub type nlohmann_detail_mapped_type_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_key_type_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_value_type_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_difference_type_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_pointer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_reference_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_iterator_category_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_to_json_function<T> = T;
pub type nlohmann_detail_from_json_function<T> = T;
pub type nlohmann_detail_get_template_function<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_has_from_json {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_getable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_has_non_default_from_json {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_has_to_json {
    pub _base: std_false_type,
}
pub type nlohmann_detail_detect_key_compare = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_has_key_compare {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_actual_object_comparator {
    pub _address: u8,
}
pub type nlohmann_detail_actual_object_comparator_object_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_actual_object_comparator_object_comparator_t =
    __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_actual_object_comparator_type = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_actual_object_comparator_t = nlohmann_detail_actual_object_comparator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_char_traits {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nlohmann_detail_char_traits_open0_unsigned_char_close0"]
        [::std::mem::size_of::<nlohmann_detail_char_traits>() - 1usize];
    ["Align of template specialization: nlohmann_detail_char_traits_open0_unsigned_char_close0"]
        [::std::mem::align_of::<nlohmann_detail_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nlohmann_detail_char_traits_open0_signed_char_close0"]
        [::std::mem::size_of::<nlohmann_detail_char_traits>() - 1usize];
    ["Align of template specialization: nlohmann_detail_char_traits_open0_signed_char_close0"]
        [::std::mem::align_of::<nlohmann_detail_char_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_conjunction {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_negation {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_iterator_traits {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_range {
    pub _address: u8,
}
pub type nlohmann_detail_is_range_t_ref = std_add_lvalue_reference;
pub type nlohmann_detail_is_range_iterator = nlohmann_detail_detected_t;
pub type nlohmann_detail_is_range_sentinel = nlohmann_detail_detected_t;
pub type nlohmann_detail_iterator_t = std_enable_if_t;
pub type nlohmann_detail_range_value_t = nlohmann_detail_value_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_complete_type {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_object_type_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_object_type {
    pub _base: nlohmann_detail_is_compatible_object_type_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible_object_type_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible_object_type {
    pub _base: nlohmann_detail_is_constructible_object_type_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_string_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible_string_type {
    pub _address: u8,
}
pub type nlohmann_detail_is_constructible_string_type_laundered_type<ConstructibleStringType> =
    ConstructibleStringType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_array_type_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_array_type {
    pub _base: nlohmann_detail_is_compatible_array_type_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible_array_type_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible_array_type {
    pub _base: nlohmann_detail_is_constructible_array_type_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_integer_type_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_integer_type {
    pub _base: nlohmann_detail_is_compatible_integer_type_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_type_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_compatible_type {
    pub _base: nlohmann_detail_is_compatible_type_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_constructible_tuple {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_json_iterator_of {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_specialization_of {
    pub _base: std_false_type,
}
pub type nlohmann_detail_is_json_pointer = nlohmann_detail_is_specialization_of;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_comparable {
    pub _base: std_false_type,
}
pub type nlohmann_detail_detect_is_transparent = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_usable_as_key_type = u8;
pub type nlohmann_detail_is_usable_as_basic_json_key_type = u8;
pub type nlohmann_detail_detect_erase_with_key_type<ObjectType> = ObjectType;
pub type nlohmann_detail_has_erase_with_key_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_ordered_map {
    pub _address: u8,
}
pub type nlohmann_detail_is_ordered_map_one = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_ordered_map_two {
    pub x: [::std::os::raw::c_char; 2usize],
}
pub const nlohmann_detail_is_ordered_map_value: nlohmann_detail_is_ordered_map__bindgen_ty_1 = 0;
pub type nlohmann_detail_is_ordered_map__bindgen_ty_1 = i32;
pub type nlohmann_detail_all_integral = nlohmann_detail_conjunction;
pub type nlohmann_detail_all_signed = nlohmann_detail_conjunction;
pub type nlohmann_detail_all_unsigned = nlohmann_detail_conjunction;
pub type nlohmann_detail_same_sign = u8;
pub type nlohmann_detail_never_out_of_range = u8;
pub type nlohmann_detail_bool_constant = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_c_string {
    pub _address: u8,
}
pub type nlohmann_detail_is_c_string_uncvref = nlohmann_detail_is_c_string;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_transparent {
    pub _address: u8,
}
pub type nlohmann_detail_string_can_append<StringType> = StringType;
pub type nlohmann_detail_detect_string_can_append = nlohmann_detail_is_detected;
pub type nlohmann_detail_string_can_append_op<StringType> = StringType;
pub type nlohmann_detail_detect_string_can_append_op = nlohmann_detail_is_detected;
pub type nlohmann_detail_string_can_append_iter<StringType> = StringType;
pub type nlohmann_detail_detect_string_can_append_iter = nlohmann_detail_is_detected;
pub type nlohmann_detail_string_can_append_data<StringType> = StringType;
pub type nlohmann_detail_detect_string_can_append_data = nlohmann_detail_is_detected;
#[doc = " @brief general exception of the @ref basic_json class\n @sa https://json.nlohmann.me/api/basic_json/exception/"]
#[repr(C)]
pub struct nlohmann_detail_exception {
    pub _base: std_exception,
    #[doc = " the id of the exception"]
    pub id: ::std::os::raw::c_int,
    #[doc = " an exception object as storage for error messages"]
    pub m: std_runtime_error,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_exception"]
        [::std::mem::size_of::<nlohmann_detail_exception>() - 32usize];
    ["Alignment of nlohmann_detail_exception"]
        [::std::mem::align_of::<nlohmann_detail_exception>() - 8usize];
    ["Offset of field: nlohmann_detail_exception::id"]
        [::std::mem::offset_of!(nlohmann_detail_exception, id) - 8usize];
    ["Offset of field: nlohmann_detail_exception::m"]
        [::std::mem::offset_of!(nlohmann_detail_exception, m) - 16usize];
};
#[doc = " @brief exception indicating a parse error\n @sa https://json.nlohmann.me/api/basic_json/parse_error/"]
#[repr(C)]
pub struct nlohmann_detail_parse_error {
    pub _base: nlohmann_detail_exception,
    #[doc = "@brief byte index of the parse error\n\nThe byte index of the last read character in the input file.\n\n@note For an input with n bytes, 1 is the index of the first character and\nn+1 is the index of the terminating null byte or the end of file.\nThis also holds true when reading a byte vector (CBOR or MessagePack)."]
    pub byte: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_parse_error"]
        [::std::mem::size_of::<nlohmann_detail_parse_error>() - 40usize];
    ["Alignment of nlohmann_detail_parse_error"]
        [::std::mem::align_of::<nlohmann_detail_parse_error>() - 8usize];
    ["Offset of field: nlohmann_detail_parse_error::byte"]
        [::std::mem::offset_of!(nlohmann_detail_parse_error, byte) - 32usize];
};
#[doc = " @brief exception indicating errors with iterators\n @sa https://json.nlohmann.me/api/basic_json/invalid_iterator/"]
#[repr(C)]
pub struct nlohmann_detail_invalid_iterator {
    pub _base: nlohmann_detail_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_invalid_iterator"]
        [::std::mem::size_of::<nlohmann_detail_invalid_iterator>() - 32usize];
    ["Alignment of nlohmann_detail_invalid_iterator"]
        [::std::mem::align_of::<nlohmann_detail_invalid_iterator>() - 8usize];
};
#[doc = " @brief exception indicating executing a member function with a wrong type\n @sa https://json.nlohmann.me/api/basic_json/type_error/"]
#[repr(C)]
pub struct nlohmann_detail_type_error {
    pub _base: nlohmann_detail_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_type_error"]
        [::std::mem::size_of::<nlohmann_detail_type_error>() - 32usize];
    ["Alignment of nlohmann_detail_type_error"]
        [::std::mem::align_of::<nlohmann_detail_type_error>() - 8usize];
};
#[doc = " @brief exception indicating access out of the defined range\n @sa https://json.nlohmann.me/api/basic_json/out_of_range/"]
#[repr(C)]
pub struct nlohmann_detail_out_of_range {
    pub _base: nlohmann_detail_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_out_of_range"]
        [::std::mem::size_of::<nlohmann_detail_out_of_range>() - 32usize];
    ["Alignment of nlohmann_detail_out_of_range"]
        [::std::mem::align_of::<nlohmann_detail_out_of_range>() - 8usize];
};
#[doc = " @brief exception indicating other library errors\n @sa https://json.nlohmann.me/api/basic_json/other_error/"]
#[repr(C)]
pub struct nlohmann_detail_other_error {
    pub _base: nlohmann_detail_exception,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_other_error"]
        [::std::mem::size_of::<nlohmann_detail_other_error>() - 32usize];
    ["Alignment of nlohmann_detail_other_error"]
        [::std::mem::align_of::<nlohmann_detail_other_error>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_identity_tag {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_from_json_fn {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_from_json_fn"]
        [::std::mem::size_of::<nlohmann_detail_from_json_fn>() - 1usize];
    ["Alignment of nlohmann_detail_from_json_fn"]
        [::std::mem::align_of::<nlohmann_detail_from_json_fn>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_iteration_proxy_value<IteratorType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<IteratorType>>,
    #[doc = " the iterator"]
    pub anchor: IteratorType,
    #[doc = " an index for arrays (used to create key names)"]
    pub array_index: usize,
    #[doc = " last stringified array index"]
    pub array_index_last: usize,
    #[doc = " a string representation of the array index"]
    pub array_index_str: nlohmann_detail_iteration_proxy_value_string_type,
    #[doc = " an empty string (to return a reference for primitive values)"]
    pub empty_str: nlohmann_detail_iteration_proxy_value_string_type,
}
pub type nlohmann_detail_iteration_proxy_value_difference_type = isize;
pub type nlohmann_detail_iteration_proxy_value_value_type<IteratorType> =
    nlohmann_detail_iteration_proxy_value<IteratorType>;
pub type nlohmann_detail_iteration_proxy_value_pointer<IteratorType> =
    *mut nlohmann_detail_iteration_proxy_value_value_type<IteratorType>;
pub type nlohmann_detail_iteration_proxy_value_reference<IteratorType> =
    *mut nlohmann_detail_iteration_proxy_value_value_type<IteratorType>;
pub type nlohmann_detail_iteration_proxy_value_iterator_category = std_forward_iterator_tag;
pub type nlohmann_detail_iteration_proxy_value_string_type = std_remove_cv;
#[doc = " proxy class for the items() function"]
#[repr(C)]
pub struct nlohmann_detail_iteration_proxy {
    #[doc = " the container to iterate"]
    pub container: __BindgenOpaqueArray<u8, 0usize>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_to_json_fn {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_to_json_fn"]
        [::std::mem::size_of::<nlohmann_detail_to_json_fn>() - 1usize];
    ["Alignment of nlohmann_detail_to_json_fn"]
        [::std::mem::align_of::<nlohmann_detail_to_json_fn>() - 1usize];
};
pub const nlohmann_detail_input_format_t_json: nlohmann_detail_input_format_t = 0;
pub const nlohmann_detail_input_format_t_cbor: nlohmann_detail_input_format_t = 1;
pub const nlohmann_detail_input_format_t_msgpack: nlohmann_detail_input_format_t = 2;
pub const nlohmann_detail_input_format_t_ubjson: nlohmann_detail_input_format_t = 3;
pub const nlohmann_detail_input_format_t_bson: nlohmann_detail_input_format_t = 4;
pub const nlohmann_detail_input_format_t_bjdata: nlohmann_detail_input_format_t = 5;
#[doc = " the supported input formats"]
pub type nlohmann_detail_input_format_t = ::std::os::raw::c_int;
#[doc = "Input adapter for stdio file access. This adapter read only 1 byte and do not use any\nbuffer. This adapter is a very low level adapter."]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_file_input_adapter {
    #[doc = " the file pointer to read from"]
    pub m_file: *mut _IO_FILE,
}
pub type nlohmann_detail_file_input_adapter_char_type = ::std::os::raw::c_char;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_file_input_adapter"]
        [::std::mem::size_of::<nlohmann_detail_file_input_adapter>() - 8usize];
    ["Alignment of nlohmann_detail_file_input_adapter"]
        [::std::mem::align_of::<nlohmann_detail_file_input_adapter>() - 8usize];
    ["Offset of field: nlohmann_detail_file_input_adapter::m_file"]
        [::std::mem::offset_of!(nlohmann_detail_file_input_adapter, m_file) - 0usize];
};
#[doc = "Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at\nbeginning of input. Does not support changing the underlying std::streambuf\nin mid-input. Maintains underlying std::istream and std::streambuf to support\nsubsequent use of standard std::istream operations to process any input\ncharacters following those used in parsing the JSON input.  Clears the\nstd::istream flags; any input errors (e.g., EOF) will be detected by the first\nsubsequent call for input from the std::istream."]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_input_stream_adapter {
    #[doc = " the associated input stream"]
    pub is: *mut std_istream,
    pub sb: *mut std_streambuf,
}
pub type nlohmann_detail_input_stream_adapter_char_type = ::std::os::raw::c_char;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_input_stream_adapter"]
        [::std::mem::size_of::<nlohmann_detail_input_stream_adapter>() - 16usize];
    ["Alignment of nlohmann_detail_input_stream_adapter"]
        [::std::mem::align_of::<nlohmann_detail_input_stream_adapter>() - 8usize];
    ["Offset of field: nlohmann_detail_input_stream_adapter::is"]
        [::std::mem::offset_of!(nlohmann_detail_input_stream_adapter, is) - 0usize];
    ["Offset of field: nlohmann_detail_input_stream_adapter::sb"]
        [::std::mem::offset_of!(nlohmann_detail_input_stream_adapter, sb) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_iterator_input_adapter<IteratorType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<IteratorType>>,
    pub current: IteratorType,
    pub end: IteratorType,
}
pub type nlohmann_detail_iterator_input_adapter_char_type = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_wide_string_input_adapter<BaseInputAdapter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BaseInputAdapter>>,
    pub base_adapter: BaseInputAdapter,
    #[doc = " a buffer for UTF-8 bytes"]
    pub utf8_bytes: __BindgenOpaqueArray<u32, 4usize>,
    #[doc = " index to the utf8_codes array for the next valid byte"]
    pub utf8_bytes_index: usize,
    #[doc = " number of valid bytes in the utf8_codes array"]
    pub utf8_bytes_filled: usize,
}
pub type nlohmann_detail_wide_string_input_adapter_char_type = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_iterator_input_adapter_factory {
    pub _address: u8,
}
pub type nlohmann_detail_iterator_input_adapter_factory_iterator_type<IteratorType> = IteratorType;
pub type nlohmann_detail_iterator_input_adapter_factory_char_type = std_iterator_traits;
pub type nlohmann_detail_iterator_input_adapter_factory_adapter_type<IteratorType> =
    nlohmann_detail_iterator_input_adapter<
        nlohmann_detail_iterator_input_adapter_factory_iterator_type<IteratorType>,
    >;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_iterator_of_multibyte {
    pub _address: u8,
}
pub type nlohmann_detail_is_iterator_of_multibyte_value_type = std_iterator_traits;
pub const nlohmann_detail_is_iterator_of_multibyte_value:
    nlohmann_detail_is_iterator_of_multibyte__bindgen_ty_1 = 0;
pub type nlohmann_detail_is_iterator_of_multibyte__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_container_input_adapter_factory_impl_container_input_adapter_factory {
    pub _address: u8,
}
pub type nlohmann_detail_string_input_adapter_type = u8;
pub type nlohmann_detail_contiguous_bytes_input_adapter = __BindgenOpaqueArray<u64, 2usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_span_input_adapter {
    pub ia: nlohmann_detail_contiguous_bytes_input_adapter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_span_input_adapter"]
        [::std::mem::size_of::<nlohmann_detail_span_input_adapter>() - 16usize];
    ["Alignment of nlohmann_detail_span_input_adapter"]
        [::std::mem::align_of::<nlohmann_detail_span_input_adapter>() - 8usize];
    ["Offset of field: nlohmann_detail_span_input_adapter::ia"]
        [::std::mem::offset_of!(nlohmann_detail_span_input_adapter, ia) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_lexer_base {
    pub _address: u8,
}
#[doc = "< indicating the scanner is uninitialized"]
pub const nlohmann_detail_lexer_base_token_type_uninitialized:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< the `true` literal"]
pub const nlohmann_detail_lexer_base_token_type_literal_true:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< the `false` literal"]
pub const nlohmann_detail_lexer_base_token_type_literal_false:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< the `null` literal"]
pub const nlohmann_detail_lexer_base_token_type_literal_null:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< a string -- use get_string() for actual value"]
pub const nlohmann_detail_lexer_base_token_type_value_string:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< an unsigned integer -- use get_number_unsigned() for actual value"]
pub const nlohmann_detail_lexer_base_token_type_value_unsigned:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< a signed integer -- use get_number_integer() for actual value"]
pub const nlohmann_detail_lexer_base_token_type_value_integer:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< an floating point number -- use get_number_float() for actual value"]
pub const nlohmann_detail_lexer_base_token_type_value_float: nlohmann_detail_lexer_base_token_type =
    0;
#[doc = "< the character for array begin `[`"]
pub const nlohmann_detail_lexer_base_token_type_begin_array: nlohmann_detail_lexer_base_token_type =
    0;
#[doc = "< the character for object begin `{`"]
pub const nlohmann_detail_lexer_base_token_type_begin_object:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< the character for array end `]`"]
pub const nlohmann_detail_lexer_base_token_type_end_array: nlohmann_detail_lexer_base_token_type =
    0;
#[doc = "< the character for object end `}`"]
pub const nlohmann_detail_lexer_base_token_type_end_object: nlohmann_detail_lexer_base_token_type =
    0;
#[doc = "< the name separator `:`"]
pub const nlohmann_detail_lexer_base_token_type_name_separator:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< the value separator `,`"]
pub const nlohmann_detail_lexer_base_token_type_value_separator:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< indicating a parse error"]
pub const nlohmann_detail_lexer_base_token_type_parse_error: nlohmann_detail_lexer_base_token_type =
    0;
#[doc = "< indicating the end of the input buffer"]
pub const nlohmann_detail_lexer_base_token_type_end_of_input:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = "< a literal or the begin of a value (only for diagnostics)"]
pub const nlohmann_detail_lexer_base_token_type_literal_or_value:
    nlohmann_detail_lexer_base_token_type = 0;
#[doc = " token types for the parser"]
pub type nlohmann_detail_lexer_base_token_type = ::std::os::raw::c_int;
#[doc = "@brief lexical analysis\n\nThis class organizes the lexical analysis during JSON deserialization."]
#[repr(C)]
pub struct nlohmann_detail_lexer<InputAdapterType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<InputAdapterType>>,
    #[doc = " input adapter"]
    pub ia: InputAdapterType,
    #[doc = " whether comments should be ignored (true) or signaled as errors (false)"]
    pub ignore_comments: bool,
    #[doc = " the current character"]
    pub current: nlohmann_detail_lexer_char_int_type,
    #[doc = " whether the next get() call should just return current"]
    pub next_unget: bool,
    #[doc = " the start position of the current token"]
    pub position: nlohmann_detail_position_t,
    #[doc = " raw input token string (for error messages)"]
    pub token_string: std_vector,
    #[doc = " buffer for variable-length tokens (numbers, strings)"]
    pub token_buffer: nlohmann_detail_lexer_string_t,
    #[doc = " a description of occurred lexer errors"]
    pub error_message: *const ::std::os::raw::c_char,
    pub value_integer: nlohmann_detail_lexer_number_integer_t,
    pub value_unsigned: nlohmann_detail_lexer_number_unsigned_t,
    pub value_float: nlohmann_detail_lexer_number_float_t,
    #[doc = " the decimal point"]
    pub decimal_point_char: nlohmann_detail_lexer_char_int_type,
    #[doc = " the position of the decimal point in the input"]
    pub decimal_point_position: usize,
}
pub type nlohmann_detail_lexer_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_lexer_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_lexer_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_lexer_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_lexer_char_type = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_lexer_char_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_lexer_token_type = nlohmann_detail_lexer_base;
#[doc = "@brief SAX implementation to create a JSON value from SAX events\n\nThis class implements the @ref json_sax interface and processes the SAX events\nto create a JSON value which makes it basically a DOM parser. The structure or\nhierarchy of the JSON value is managed by the stack `ref_stack` which contains\na pointer to the respective array or object for each recursion depth.\n\nAfter successful parsing, the value that is passed by reference to the\nconstructor contains the parsed value.\n\n@tparam BasicJsonType  the JSON type"]
#[repr(C)]
pub struct nlohmann_detail_json_sax_dom_parser<BasicJsonType, InputAdapterType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BasicJsonType>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<InputAdapterType>>,
    #[doc = " the parsed JSON value"]
    pub root: *mut BasicJsonType,
    #[doc = " stack to model hierarchy of values"]
    pub ref_stack: std_vector,
    #[doc = " helper to hold the reference for the next object element"]
    pub object_element: *mut BasicJsonType,
    #[doc = " whether a syntax error occurred"]
    pub errored: bool,
    #[doc = " whether to throw exceptions in case of errors"]
    pub allow_exceptions: bool,
    #[doc = " the lexer reference to obtain the current position"]
    pub m_lexer_ref: *mut nlohmann_detail_json_sax_dom_parser_lexer_t<InputAdapterType>,
}
pub type nlohmann_detail_json_sax_dom_parser_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_parser_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_parser_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_parser_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_parser_binary_t = __BindgenOpaqueArray<u8, 0usize>;
#[doc = "@brief lexical analysis\n\nThis class organizes the lexical analysis during JSON deserialization."]
pub type nlohmann_detail_json_sax_dom_parser_lexer_t<InputAdapterType> =
    nlohmann_detail_lexer<InputAdapterType>;
#[repr(C)]
pub struct nlohmann_detail_json_sax_dom_callback_parser<BasicJsonType, InputAdapterType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BasicJsonType>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<InputAdapterType>>,
    #[doc = " the parsed JSON value"]
    pub root: *mut BasicJsonType,
    #[doc = " stack to model hierarchy of values"]
    pub ref_stack: std_vector,
    #[doc = " stack to manage which values to keep"]
    pub keep_stack: __BindgenOpaqueArray<u64, 5usize>,
    #[doc = " stack to manage which object keys to keep"]
    pub key_keep_stack: __BindgenOpaqueArray<u64, 5usize>,
    #[doc = " helper to hold the reference for the next object element"]
    pub object_element: *mut BasicJsonType,
    #[doc = " whether a syntax error occurred"]
    pub errored: bool,
    #[doc = " callback function"]
    pub callback: nlohmann_detail_json_sax_dom_callback_parser_parser_callback_t,
    #[doc = " whether to throw exceptions in case of errors"]
    pub allow_exceptions: bool,
    #[doc = " a discarded value for the callback"]
    pub discarded: BasicJsonType,
    #[doc = " the lexer reference to obtain the current position"]
    pub m_lexer_ref: *mut nlohmann_detail_json_sax_dom_callback_parser_lexer_t<InputAdapterType>,
}
pub type nlohmann_detail_json_sax_dom_callback_parser_number_integer_t =
    __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_callback_parser_number_unsigned_t =
    __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_callback_parser_number_float_t =
    __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_callback_parser_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_callback_parser_binary_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_callback_parser_parser_callback_t =
    __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_dom_callback_parser_parse_event_t =
    __BindgenOpaqueArray<u8, 0usize>;
#[doc = "@brief lexical analysis\n\nThis class organizes the lexical analysis during JSON deserialization."]
pub type nlohmann_detail_json_sax_dom_callback_parser_lexer_t<InputAdapterType> =
    nlohmann_detail_lexer<InputAdapterType>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_json_sax_acceptor {
    pub _address: u8,
}
pub type nlohmann_detail_json_sax_acceptor_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_acceptor_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_acceptor_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_acceptor_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_json_sax_acceptor_binary_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_null_function_t<T> = T;
pub type nlohmann_detail_boolean_function_t<T> = T;
pub type nlohmann_detail_number_integer_function_t<T> = T;
pub type nlohmann_detail_number_unsigned_function_t<T> = T;
pub type nlohmann_detail_number_float_function_t<T> = T;
pub type nlohmann_detail_string_function_t<T> = T;
pub type nlohmann_detail_binary_function_t<T> = T;
pub type nlohmann_detail_start_object_function_t<T> = T;
pub type nlohmann_detail_key_function_t<T> = T;
pub type nlohmann_detail_end_object_function_t<T> = T;
pub type nlohmann_detail_start_array_function_t<T> = T;
pub type nlohmann_detail_end_array_function_t<T> = T;
pub type nlohmann_detail_parse_error_function_t<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_sax {
    pub _address: u8,
}
pub type nlohmann_detail_is_sax_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_binary_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_exception_t = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_is_sax_static_asserts {
    pub _address: u8,
}
pub type nlohmann_detail_is_sax_static_asserts_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_static_asserts_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_static_asserts_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_static_asserts_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_static_asserts_binary_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_is_sax_static_asserts_exception_t = __BindgenOpaqueArray<u8, 0usize>;
#[doc = "< throw a parse_error exception in case of a tag"]
pub const nlohmann_detail_cbor_tag_handler_t_error: nlohmann_detail_cbor_tag_handler_t = 0;
#[doc = "< ignore tags"]
pub const nlohmann_detail_cbor_tag_handler_t_ignore: nlohmann_detail_cbor_tag_handler_t = 1;
#[doc = "< store tags as binary type"]
pub const nlohmann_detail_cbor_tag_handler_t_store: nlohmann_detail_cbor_tag_handler_t = 2;
#[doc = " how to treat CBOR tags"]
pub type nlohmann_detail_cbor_tag_handler_t = ::std::os::raw::c_int;
#[doc = "@brief deserialization of CBOR, MessagePack, and UBJSON values"]
#[repr(C)]
pub struct nlohmann_detail_binary_reader<InputAdapterType, SAX> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<InputAdapterType>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<SAX>>,
    #[doc = " input adapter"]
    pub ia: InputAdapterType,
    #[doc = " the current character"]
    pub current: nlohmann_detail_binary_reader_char_int_type,
    #[doc = " the number of characters read"]
    pub chars_read: usize,
    #[doc = " whether we can assume little endianness"]
    pub is_little_endian: bool,
    #[doc = " input format"]
    pub input_format: nlohmann_detail_input_format_t,
    #[doc = " the SAX parser"]
    pub sax: *mut nlohmann_detail_binary_reader_json_sax_t<SAX>,
    pub bjd_optimized_type_markers: nlohmann_detail_binary_reader_char_int_type,
    pub bjd_types_map: nlohmann_detail_binary_reader_bjd_type,
}
pub type nlohmann_detail_binary_reader_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_binary_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_json_sax_t<SAX> = SAX;
pub type nlohmann_detail_binary_reader_char_type = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_char_int_type = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_reader_bjd_type =
    std_pair<nlohmann_detail_binary_reader_char_int_type, nlohmann_detail_binary_reader_string_t>;
#[doc = " the parser read `{` and started to process a JSON object"]
pub const nlohmann_detail_parse_event_t_object_start: nlohmann_detail_parse_event_t = 0;
#[doc = " the parser read `}` and finished processing a JSON object"]
pub const nlohmann_detail_parse_event_t_object_end: nlohmann_detail_parse_event_t = 1;
#[doc = " the parser read `[` and started to process a JSON array"]
pub const nlohmann_detail_parse_event_t_array_start: nlohmann_detail_parse_event_t = 2;
#[doc = " the parser read `]` and finished processing a JSON array"]
pub const nlohmann_detail_parse_event_t_array_end: nlohmann_detail_parse_event_t = 3;
#[doc = " the parser read a key of a value in an object"]
pub const nlohmann_detail_parse_event_t_key: nlohmann_detail_parse_event_t = 4;
#[doc = " the parser finished reading a JSON value"]
pub const nlohmann_detail_parse_event_t_value: nlohmann_detail_parse_event_t = 5;
pub type nlohmann_detail_parse_event_t = ::std::os::raw::c_uchar;
pub type nlohmann_detail_parser_callback_t = std_function;
#[doc = "@brief syntax analysis\n\nThis class implements a recursive descent parser."]
#[repr(C)]
pub struct nlohmann_detail_parser<InputAdapterType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<InputAdapterType>>,
    #[doc = " callback function"]
    pub callback: nlohmann_detail_parser_callback_t,
    #[doc = " the type of the last read token"]
    pub last_token: nlohmann_detail_parser_token_type<InputAdapterType>,
    #[doc = " the lexer"]
    pub m_lexer: nlohmann_detail_parser_lexer_t<InputAdapterType>,
    #[doc = " whether to throw exceptions in case of errors"]
    pub allow_exceptions: bool,
}
pub type nlohmann_detail_parser_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_parser_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_parser_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_parser_string_t = __BindgenOpaqueArray<u8, 0usize>;
#[doc = "@brief lexical analysis\n\nThis class organizes the lexical analysis during JSON deserialization."]
pub type nlohmann_detail_parser_lexer_t<InputAdapterType> = nlohmann_detail_lexer<InputAdapterType>;
pub type nlohmann_detail_parser_token_type<InputAdapterType> =
    nlohmann_detail_parser_lexer_t<InputAdapterType>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_primitive_iterator_t {
    #[doc = " iterator as signed integer type"]
    pub m_it: nlohmann_detail_primitive_iterator_t_difference_type,
}
pub type nlohmann_detail_primitive_iterator_t_difference_type = isize;
pub const nlohmann_detail_primitive_iterator_t_begin_value:
    nlohmann_detail_primitive_iterator_t_difference_type = 0;
pub const nlohmann_detail_primitive_iterator_t_end_value:
    nlohmann_detail_primitive_iterator_t_difference_type = 1;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_primitive_iterator_t"]
        [::std::mem::size_of::<nlohmann_detail_primitive_iterator_t>() - 8usize];
    ["Alignment of nlohmann_detail_primitive_iterator_t"]
        [::std::mem::align_of::<nlohmann_detail_primitive_iterator_t>() - 8usize];
    ["Offset of field: nlohmann_detail_primitive_iterator_t::m_it"]
        [::std::mem::offset_of!(nlohmann_detail_primitive_iterator_t, m_it) - 0usize];
};
#[doc = "@brief an iterator value\n\n@note This structure could easily be a union, but MSVC currently does not allow\nunions members with complex constructors, see https://github.com/nlohmann/json/pull/105."]
#[repr(C)]
pub struct nlohmann_detail_internal_iterator {
    #[doc = " iterator for JSON objects"]
    pub object_iterator: __BindgenOpaqueArray<u8, 0usize>,
    #[doc = " iterator for JSON arrays"]
    pub array_iterator: __BindgenOpaqueArray<u8, 0usize>,
    #[doc = " generic iterator for all other types"]
    pub primitive_iterator: nlohmann_detail_primitive_iterator_t,
}
#[doc = "@brief a template for a bidirectional iterator for the @ref basic_json class\nThis class implements a both iterators (iterator and const_iterator) for the\n@ref basic_json class.\n@note An iterator is called *initialized* when a pointer to a JSON value has\nbeen set (e.g., by a constructor or a copy assignment). If the iterator is\ndefault-constructed, it is *uninitialized* and most methods are undefined.\nThe library uses assertions to detect calls on uninitialized iterators.**\n@requirement The class satisfies the following concept requirements:\n-\n[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):\nThe iterator that can be moved can be moved in both directions (i.e.\nincremented and decremented).\n@since version 1.0.0, simplified in version 2.0.9, change to bidirectional\niterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)"]
#[repr(C)]
pub struct nlohmann_detail_iter_impl {
    #[doc = " associated JSON instance"]
    pub m_object: nlohmann_detail_iter_impl_pointer,
    #[doc = " the actual iterator of the associated instance"]
    pub m_it: nlohmann_detail_internal_iterator,
}
pub type nlohmann_detail_iter_impl_object_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_iter_impl_array_t = __BindgenOpaqueArray<u8, 0usize>;
#[doc = " The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.\n The C++ Standard has never required user-defined iterators to derive from std::iterator.\n A user-defined iterator should provide publicly accessible typedefs named\n iterator_category, value_type, difference_type, pointer, and reference.\n Note that value_type is required to be non-const, even for constant iterators."]
pub type nlohmann_detail_iter_impl_iterator_category = std_bidirectional_iterator_tag;
#[doc = " the type of the values when the iterator is dereferenced"]
pub type nlohmann_detail_iter_impl_value_type = __BindgenOpaqueArray<u8, 0usize>;
#[doc = " a type to represent differences between iterators"]
pub type nlohmann_detail_iter_impl_difference_type = __BindgenOpaqueArray<u8, 0usize>;
#[doc = " defines a pointer to the type iterated over (value_type)"]
pub type nlohmann_detail_iter_impl_pointer = __BindgenOpaqueArray<u8, 0usize>;
#[doc = " defines a reference to the type iterated over (value_type)"]
pub type nlohmann_detail_iter_impl_reference = __BindgenOpaqueArray<u8, 0usize>;
#[doc = "@brief a template for a reverse iterator class\n\n@tparam Base the base iterator type to reverse. Valid types are @ref\niterator (to create @ref reverse_iterator) and @ref const_iterator (to\ncreate @ref const_reverse_iterator).\n\n@requirement The class satisfies the following concept requirements:\n-\n[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):\nThe iterator that can be moved can be moved in both directions (i.e.\nincremented and decremented).\n- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):\nIt is possible to write to the pointed-to element (only if @a Base is\n@ref iterator).\n\n@since version 1.0.0"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_json_reverse_iterator<Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Base>>,
    pub _base: std_reverse_iterator<Base>,
}
pub type nlohmann_detail_json_reverse_iterator_difference_type = isize;
#[doc = " shortcut to the reverse iterator adapter"]
pub type nlohmann_detail_json_reverse_iterator_base_iterator<Base> = std_reverse_iterator<Base>;
#[doc = " the reference type for the pointed-to element"]
pub type nlohmann_detail_json_reverse_iterator_reference = __BindgenOpaqueArray<u8, 0usize>;
#[doc = "@brief Default base class of the @ref basic_json class.\n\nSo that the correct implementations of the copy / move ctors / assign operators\nof @ref basic_json do not require complex case distinctions\n(no base class / custom base class used as customization point),\n@ref basic_json always has a base class.\nBy default, this class is used because it is empty and thus has no effect\non the behavior of @ref basic_json."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_json_default_base {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_json_default_base"]
        [::std::mem::size_of::<nlohmann_detail_json_default_base>() - 1usize];
    ["Alignment of nlohmann_detail_json_default_base"]
        [::std::mem::align_of::<nlohmann_detail_json_default_base>() - 1usize];
};
pub type nlohmann_detail_json_base_class = u8;
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_json_ref<BasicJsonType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BasicJsonType>>,
    pub owned_value: nlohmann_detail_json_ref_value_type<BasicJsonType>,
    pub value_ref: *const nlohmann_detail_json_ref_value_type<BasicJsonType>,
}
pub type nlohmann_detail_json_ref_value_type<BasicJsonType> = BasicJsonType;
#[repr(C)]
pub struct nlohmann_detail_output_adapter_protocol__bindgen_vtable(::std::os::raw::c_void);
#[doc = " abstract output adapter interface"]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_output_adapter_protocol {
    pub vtable_: *const nlohmann_detail_output_adapter_protocol__bindgen_vtable,
}
#[doc = " a type to simplify interfaces"]
pub type nlohmann_detail_output_adapter_t = std_shared_ptr;
#[doc = " output adapter for byte vectors"]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_output_vector_adapter {
    pub _base: nlohmann_detail_output_adapter_protocol,
    pub v: *mut std_vector,
}
#[doc = " output adapter for output streams"]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_output_stream_adapter {
    pub _base: nlohmann_detail_output_adapter_protocol,
    pub stream: *mut std_basic_ostream<_CharT>,
}
#[doc = " output adapter for basic_string"]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_output_string_adapter<StringType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<StringType>>,
    pub _base: nlohmann_detail_output_adapter_protocol,
    pub str_: *mut StringType,
}
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_output_adapter {
    pub oa: nlohmann_detail_output_adapter_t,
}
pub const nlohmann_detail_bjdata_version_t_draft2: nlohmann_detail_bjdata_version_t = 0;
pub const nlohmann_detail_bjdata_version_t_draft3: nlohmann_detail_bjdata_version_t = 1;
#[doc = " how to encode BJData"]
pub type nlohmann_detail_bjdata_version_t = ::std::os::raw::c_int;
#[doc = "@brief serialization to CBOR and MessagePack values"]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_detail_binary_writer {
    #[doc = " whether we can assume little endianness"]
    pub is_little_endian: bool,
    #[doc = " the output"]
    pub oa: nlohmann_detail_output_adapter_t,
}
pub type nlohmann_detail_binary_writer_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_writer_binary_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_binary_writer_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_dtoa_impl_diyfp {
    pub f: ::std::os::raw::c_ulong,
    pub e: ::std::os::raw::c_int,
}
pub const nlohmann_detail_dtoa_impl_diyfp_kPrecision: ::std::os::raw::c_int = 64;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_dtoa_impl_diyfp"]
        [::std::mem::size_of::<nlohmann_detail_dtoa_impl_diyfp>() - 16usize];
    ["Alignment of nlohmann_detail_dtoa_impl_diyfp"]
        [::std::mem::align_of::<nlohmann_detail_dtoa_impl_diyfp>() - 8usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_diyfp::f"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_diyfp, f) - 0usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_diyfp::e"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_diyfp, e) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_dtoa_impl_boundaries {
    pub w: nlohmann_detail_dtoa_impl_diyfp,
    pub minus: nlohmann_detail_dtoa_impl_diyfp,
    pub plus: nlohmann_detail_dtoa_impl_diyfp,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_dtoa_impl_boundaries"]
        [::std::mem::size_of::<nlohmann_detail_dtoa_impl_boundaries>() - 48usize];
    ["Alignment of nlohmann_detail_dtoa_impl_boundaries"]
        [::std::mem::align_of::<nlohmann_detail_dtoa_impl_boundaries>() - 8usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_boundaries::w"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_boundaries, w) - 0usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_boundaries::minus"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_boundaries, minus) - 16usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_boundaries::plus"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_boundaries, plus) - 32usize];
};
pub const nlohmann_detail_dtoa_impl_kAlpha: ::std::os::raw::c_int = -60;
pub const nlohmann_detail_dtoa_impl_kGamma: ::std::os::raw::c_int = -32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail_dtoa_impl_cached_power {
    pub f: ::std::os::raw::c_ulong,
    pub e: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail_dtoa_impl_cached_power"]
        [::std::mem::size_of::<nlohmann_detail_dtoa_impl_cached_power>() - 16usize];
    ["Alignment of nlohmann_detail_dtoa_impl_cached_power"]
        [::std::mem::align_of::<nlohmann_detail_dtoa_impl_cached_power>() - 8usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_cached_power::f"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_cached_power, f) - 0usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_cached_power::e"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_cached_power, e) - 8usize];
    ["Offset of field: nlohmann_detail_dtoa_impl_cached_power::k"]
        [::std::mem::offset_of!(nlohmann_detail_dtoa_impl_cached_power, k) - 12usize];
};
#[doc = "< throw a type_error exception in case of invalid UTF-8"]
pub const nlohmann_detail_error_handler_t_strict: nlohmann_detail_error_handler_t = 0;
#[doc = "< replace invalid UTF-8 sequences with U+FFFD"]
pub const nlohmann_detail_error_handler_t_replace: nlohmann_detail_error_handler_t = 1;
#[doc = "< ignore invalid UTF-8 sequences"]
pub const nlohmann_detail_error_handler_t_ignore: nlohmann_detail_error_handler_t = 2;
#[doc = " how to treat decoding errors"]
pub type nlohmann_detail_error_handler_t = ::std::os::raw::c_int;
#[repr(C)]
pub struct nlohmann_detail_serializer {
    #[doc = " the output of the serializer"]
    pub o: std_shared_ptr,
    #[doc = " a (hopefully) large enough character buffer"]
    pub number_buffer: __BindgenOpaqueArray<u8, 64usize>,
    #[doc = " the locale"]
    pub loc: *mut lconv,
    #[doc = " the locale's thousand separator character"]
    pub thousands_sep: ::std::os::raw::c_char,
    #[doc = " the locale's decimal point character"]
    pub decimal_point: ::std::os::raw::c_char,
    #[doc = " string buffer"]
    pub string_buffer: __BindgenOpaqueArray<u8, 512usize>,
    #[doc = " the indentation character"]
    pub indent_char: ::std::os::raw::c_char,
    #[doc = " the indentation string"]
    pub indent_string: nlohmann_detail_serializer_string_t,
    #[doc = " error_handler how to react on decoding errors"]
    pub error_handler: nlohmann_detail_error_handler_t,
}
pub type nlohmann_detail_serializer_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_serializer_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_serializer_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_serializer_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_detail_serializer_binary_char_t = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail2_begin_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail2_begin_tag"]
        [::std::mem::size_of::<nlohmann_detail2_begin_tag>() - 1usize];
    ["Alignment of nlohmann_detail2_begin_tag"]
        [::std::mem::align_of::<nlohmann_detail2_begin_tag>() - 1usize];
};
pub type nlohmann_detail2_result_of_begin<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail2_would_call_std_begin {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail2_end_tag {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nlohmann_detail2_end_tag"]
        [::std::mem::size_of::<nlohmann_detail2_end_tag>() - 1usize];
    ["Alignment of nlohmann_detail2_end_tag"]
        [::std::mem::align_of::<nlohmann_detail2_end_tag>() - 1usize];
};
pub type nlohmann_detail2_result_of_end<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_detail2_would_call_std_end {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_would_call_std_begin {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_would_call_std_end {
    pub _address: u8,
}
#[doc = "@brief default specialization\n@sa https://json.nlohmann.me/api/json/"]
pub type nlohmann_json = nlohmann_basic_json<
    std_basic_string<::std::os::raw::c_char>,
    bool,
    ::std::os::raw::c_long,
    ::std::os::raw::c_ulong,
    f64,
    std_vector,
>;
#[doc = " @brief specialization that maintains the insertion order of object keys\n @sa https://json.nlohmann.me/api/ordered_json/"]
pub type nlohmann_ordered_json = nlohmann_basic_json<
    std_basic_string<::std::os::raw::c_char>,
    bool,
    ::std::os::raw::c_long,
    ::std::os::raw::c_ulong,
    f64,
    std_vector,
>;
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8nlohmann16json_abi_v3_12_09from_jsonE"]
    pub static mut nlohmann_from_json: *const nlohmann_detail_from_json_fn;
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8nlohmann16json_abi_v3_12_07to_jsonE"]
    pub static mut nlohmann_to_json: *const nlohmann_detail_to_json_fn;
}
#[doc = "@brief default JSONSerializer template argument\n\nThis serializer ignores the template arguments and uses ADL\n([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))\nfor serialization."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_adl_serializer {
    pub _address: u8,
}
#[doc = " @brief an internal type for a backed binary type\n @sa https://json.nlohmann.me/api/byte_container_with_subtype/"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_byte_container_with_subtype<BinaryType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<BinaryType>>,
    pub _base: BinaryType,
    pub m_subtype: nlohmann_byte_container_with_subtype_subtype_type,
    pub m_has_subtype: bool,
}
pub type nlohmann_byte_container_with_subtype_container_type<BinaryType> = BinaryType;
pub type nlohmann_byte_container_with_subtype_subtype_type = ::std::os::raw::c_ulong;
#[repr(C)]
pub struct nlohmann_json_sax__bindgen_vtable(::std::os::raw::c_void);
#[doc = "@brief SAX interface\n\nThis class describes the SAX interface used by @ref nlohmann::json::sax_parse.\nEach function is called in different situations while the input is parsed. The\nboolean return value informs the parser whether to continue processing the\ninput."]
#[repr(C)]
#[derive(Debug)]
pub struct nlohmann_json_sax {
    pub vtable_: *const nlohmann_json_sax__bindgen_vtable,
}
pub type nlohmann_json_sax_number_integer_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_json_sax_number_unsigned_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_json_sax_number_float_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_json_sax_string_t = __BindgenOpaqueArray<u8, 0usize>;
pub type nlohmann_json_sax_binary_t = __BindgenOpaqueArray<u8, 0usize>;
#[doc = " @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document\n @sa https://json.nlohmann.me/api/json_pointer/"]
#[repr(C)]
pub struct nlohmann_json_pointer {
    #[doc = " the reference tokens"]
    pub reference_tokens: std_vector,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlohmann_json_pointer_string_t_helper {
    pub _address: u8,
}
pub type nlohmann_json_pointer_string_t_helper_type<T> = T;
pub type nlohmann_json_pointer_string_t = nlohmann_json_pointer_string_t_helper;
#[doc = " @brief a minimal map-like container that preserves insertion order\n @sa https://json.nlohmann.me/api/ordered_map/"]
#[repr(C)]
pub struct nlohmann_ordered_map {
    pub _base: std_vector,
    pub m_compare: nlohmann_ordered_map_key_compare,
}
pub type nlohmann_ordered_map_key_type<Key> = Key;
pub type nlohmann_ordered_map_mapped_type<T> = T;
pub type nlohmann_ordered_map_Container = std_vector;
pub type nlohmann_ordered_map_iterator = nlohmann_ordered_map_Container;
pub type nlohmann_ordered_map_const_iterator = nlohmann_ordered_map_Container;
pub type nlohmann_ordered_map_size_type = nlohmann_ordered_map_Container;
pub type nlohmann_ordered_map_value_type = nlohmann_ordered_map_Container;
pub type nlohmann_ordered_map_key_compare = std_equal_to;
pub type nlohmann_ordered_map_require_input_iter = u8;
#[doc = " a class to store JSON values\n @sa https://json.nlohmann.me/api/basic_json/"]
#[repr(C)]
pub struct nlohmann_basic_json<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<StringType>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<BooleanType>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberIntegerType>>,
    pub _phantom_3: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberUnsignedType>>,
    pub _phantom_4: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberFloatType>>,
    pub _phantom_5: ::std::marker::PhantomData<::std::cell::UnsafeCell<BinaryType>>,
    pub m_data: nlohmann_basic_json_data<
        StringType,
        BooleanType,
        NumberIntegerType,
        NumberUnsignedType,
        NumberFloatType,
        BinaryType,
    >,
}
#[doc = " workaround type for MSVC"]
pub type nlohmann_basic_json_basic_json_t<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> = nlohmann_basic_json<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
>;
pub type nlohmann_basic_json_json_base_class_t = nlohmann_detail_json_base_class;
pub type nlohmann_basic_json_lexer = nlohmann_detail_lexer_base;
pub type nlohmann_basic_json_primitive_iterator_t = nlohmann_detail_primitive_iterator_t;
pub type nlohmann_basic_json_internal_iterator = nlohmann_detail_internal_iterator;
pub type nlohmann_basic_json_iter_impl = nlohmann_detail_iter_impl;
pub type nlohmann_basic_json_iteration_proxy = nlohmann_detail_iteration_proxy;
pub type nlohmann_basic_json_json_reverse_iterator<Base> =
    nlohmann_detail_json_reverse_iterator<Base>;
pub type nlohmann_basic_json_output_adapter_t = nlohmann_detail_output_adapter_t;
pub type nlohmann_basic_json_binary_reader = nlohmann_detail_binary_reader<InputAdapterType, SAX>;
pub type nlohmann_basic_json_binary_writer = nlohmann_detail_binary_writer;
pub type nlohmann_basic_json_serializer = nlohmann_detail_serializer;
#[doc = "@brief the JSON type enumeration\n\nThis enumeration collects the different JSON types. It is internally used to\ndistinguish the stored values, and the functions @ref basic_json::is_null(),\n@ref basic_json::is_object(), @ref basic_json::is_array(),\n@ref basic_json::is_string(), @ref basic_json::is_boolean(),\n@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),\n@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),\n@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and\n@ref basic_json::is_structured() rely on it.\n\n@note There are three enumeration entries (number_integer, number_unsigned, and\nnumber_float), because the library distinguishes these three types for numbers:\n@ref basic_json::number_unsigned_t is used for unsigned integers,\n@ref basic_json::number_integer_t is used for signed integers, and\n@ref basic_json::number_float_t is used for floating-point numbers or to\napproximate integers which do not fit in the limits of their respective type.\n\n@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON\nvalue with the default value for a given type\n\n@since version 1.0.0"]
pub use self::nlohmann_detail_value_t as nlohmann_basic_json_value_t;
#[doc = " JSON Pointer, see @ref nlohmann::json_pointer"]
pub type nlohmann_basic_json_json_pointer = nlohmann_json_pointer;
pub type nlohmann_basic_json_json_serializer = u8;
#[doc = " how to encode BJData"]
pub use self::nlohmann_detail_bjdata_version_t as nlohmann_basic_json_bjdata_version_t;
#[doc = " how to treat CBOR tags"]
pub use self::nlohmann_detail_cbor_tag_handler_t as nlohmann_basic_json_cbor_tag_handler_t;
#[doc = " how to treat decoding errors"]
pub use self::nlohmann_detail_error_handler_t as nlohmann_basic_json_error_handler_t;
#[doc = " helper type for initializer lists of basic_json values"]
pub type nlohmann_basic_json_initializer_list_t = std_initializer_list<_E>;
#[doc = " the supported input formats"]
pub use self::nlohmann_detail_input_format_t as nlohmann_basic_json_input_format_t;
#[doc = " SAX interface type, see @ref nlohmann::json_sax"]
pub type nlohmann_basic_json_json_sax_t = nlohmann_json_sax;
#[doc = " @name exceptions\n Classes to implement user-defined exceptions.\n @{"]
pub type nlohmann_basic_json_exception = nlohmann_detail_exception;
#[doc = " @brief exception indicating a parse error\n @sa https://json.nlohmann.me/api/basic_json/parse_error/"]
pub type nlohmann_basic_json_parse_error = nlohmann_detail_parse_error;
#[doc = " @brief exception indicating errors with iterators\n @sa https://json.nlohmann.me/api/basic_json/invalid_iterator/"]
pub type nlohmann_basic_json_invalid_iterator = nlohmann_detail_invalid_iterator;
#[doc = " @brief exception indicating executing a member function with a wrong type\n @sa https://json.nlohmann.me/api/basic_json/type_error/"]
pub type nlohmann_basic_json_type_error = nlohmann_detail_type_error;
#[doc = " @brief exception indicating access out of the defined range\n @sa https://json.nlohmann.me/api/basic_json/out_of_range/"]
pub type nlohmann_basic_json_out_of_range = nlohmann_detail_out_of_range;
#[doc = " @brief exception indicating other library errors\n @sa https://json.nlohmann.me/api/basic_json/other_error/"]
pub type nlohmann_basic_json_other_error = nlohmann_detail_other_error;
#[doc = " the type of elements in a basic_json container"]
pub type nlohmann_basic_json_value_type<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> = nlohmann_basic_json<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
>;
#[doc = " the type of an element reference"]
pub type nlohmann_basic_json_reference<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> = *mut nlohmann_basic_json_value_type<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
>;
#[doc = " the type of an element const reference"]
pub type nlohmann_basic_json_const_reference<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> = *const nlohmann_basic_json_value_type<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
>;
#[doc = " a type to represent differences between iterators"]
pub type nlohmann_basic_json_difference_type = isize;
#[doc = " a type to represent container sizes"]
pub type nlohmann_basic_json_size_type = usize;
#[doc = " the allocator type"]
pub type nlohmann_basic_json_allocator_type = u8;
#[doc = " the type of an element pointer"]
pub type nlohmann_basic_json_pointer = std_allocator_traits;
#[doc = " the type of an element const pointer"]
pub type nlohmann_basic_json_const_pointer = std_allocator_traits;
#[doc = " an iterator for a basic_json container"]
pub type nlohmann_basic_json_iterator = nlohmann_basic_json_iter_impl;
#[doc = " a const iterator for a basic_json container"]
pub type nlohmann_basic_json_const_iterator = nlohmann_basic_json_iter_impl;
#[doc = " a reverse iterator for a basic_json container"]
pub type nlohmann_basic_json_reverse_iterator = nlohmann_basic_json_json_reverse_iterator<Base>;
#[doc = " a const reverse iterator for a basic_json container"]
pub type nlohmann_basic_json_const_reverse_iterator =
    nlohmann_basic_json_json_reverse_iterator<Base>;
pub type nlohmann_basic_json_default_object_comparator_t = std_less;
#[doc = " @brief a type for an object\n @sa https://json.nlohmann.me/api/basic_json/object_t/"]
pub type nlohmann_basic_json_object_t = u8;
#[doc = " @brief a type for an array\n @sa https://json.nlohmann.me/api/basic_json/array_t/"]
pub type nlohmann_basic_json_array_t = u8;
#[doc = " @brief a type for a string\n @sa https://json.nlohmann.me/api/basic_json/string_t/"]
pub type nlohmann_basic_json_string_t<StringType> = StringType;
#[doc = " @brief a type for a boolean\n @sa https://json.nlohmann.me/api/basic_json/boolean_t/"]
pub type nlohmann_basic_json_boolean_t<BooleanType> = BooleanType;
#[doc = " @brief a type for a number (integer)\n @sa https://json.nlohmann.me/api/basic_json/number_integer_t/"]
pub type nlohmann_basic_json_number_integer_t<NumberIntegerType> = NumberIntegerType;
#[doc = " @brief a type for a number (unsigned)\n @sa https://json.nlohmann.me/api/basic_json/number_unsigned_t/"]
pub type nlohmann_basic_json_number_unsigned_t<NumberUnsignedType> = NumberUnsignedType;
#[doc = " @brief a type for a number (floating-point)\n @sa https://json.nlohmann.me/api/basic_json/number_float_t/"]
pub type nlohmann_basic_json_number_float_t<NumberFloatType> = NumberFloatType;
#[doc = " @brief a type for a packed binary type\n @sa https://json.nlohmann.me/api/basic_json/binary_t/"]
pub type nlohmann_basic_json_binary_t<BinaryType> =
    nlohmann_byte_container_with_subtype<BinaryType>;
#[doc = " @brief object key comparator type\n @sa https://json.nlohmann.me/api/basic_json/object_comparator_t/"]
pub type nlohmann_basic_json_object_comparator_t = nlohmann_detail_actual_object_comparator_t;
#[doc = "@brief a JSON value\n\nThe actual storage for a JSON value of the @ref basic_json class. This\nunion combines the different storage types for the JSON value types\ndefined in @ref value_t.\n\nJSON type | value_t type    | used type\n--------- | --------------- | ------------------------\nobject    | object          | pointer to @ref object_t\narray     | array           | pointer to @ref array_t\nstring    | string          | pointer to @ref string_t\nboolean   | boolean         | @ref boolean_t\nnumber    | number_integer  | @ref number_integer_t\nnumber    | number_unsigned | @ref number_unsigned_t\nnumber    | number_float    | @ref number_float_t\nbinary    | binary          | pointer to @ref binary_t\nnull      | null            | *no value is stored*\n\n@note Variable-length types (objects, arrays, and strings) are stored as\npointers. The size of the union should not exceed 64 bits if the default\nvalue types are used.\n\n@since version 1.0.0"]
#[repr(C)]
pub union nlohmann_basic_json_json_value<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<StringType>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<BooleanType>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberIntegerType>>,
    pub _phantom_3: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberUnsignedType>>,
    pub _phantom_4: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberFloatType>>,
    pub _phantom_5: ::std::marker::PhantomData<::std::cell::UnsafeCell<BinaryType>>,
    #[doc = " object (stored with pointer to save storage)"]
    pub object: *mut nlohmann_basic_json_object_t,
    #[doc = " array (stored with pointer to save storage)"]
    pub array: *mut nlohmann_basic_json_array_t,
    #[doc = " string (stored with pointer to save storage)"]
    pub string: *mut nlohmann_basic_json_string_t<StringType>,
    #[doc = " binary (stored with pointer to save storage)"]
    pub binary: *mut nlohmann_basic_json_binary_t<BinaryType>,
    #[doc = " boolean"]
    pub boolean: nlohmann_basic_json_boolean_t<BooleanType>,
    #[doc = " number (integer)"]
    pub number_integer: nlohmann_basic_json_number_integer_t<NumberIntegerType>,
    #[doc = " number (unsigned integer)"]
    pub number_unsigned: nlohmann_basic_json_number_unsigned_t<NumberUnsignedType>,
    #[doc = " number (floating-point)"]
    pub number_float: nlohmann_basic_json_number_float_t<NumberFloatType>,
}
#[doc = " @brief parser event types\n @sa https://json.nlohmann.me/api/basic_json/parse_event_t/"]
pub use self::nlohmann_detail_parse_event_t as nlohmann_basic_json_parse_event_t;
#[doc = " @brief per-element parser callback type\n @sa https://json.nlohmann.me/api/basic_json/parser_callback_t/"]
pub type nlohmann_basic_json_parser_callback_t = nlohmann_detail_parser_callback_t;
pub type nlohmann_basic_json_is_comparable_with_object_key = nlohmann_detail_is_comparable;
pub type nlohmann_basic_json_value_return_type = u8;
#[repr(C)]
pub struct nlohmann_basic_json_data<
    StringType,
    BooleanType,
    NumberIntegerType,
    NumberUnsignedType,
    NumberFloatType,
    BinaryType,
> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<StringType>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<BooleanType>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberIntegerType>>,
    pub _phantom_3: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberUnsignedType>>,
    pub _phantom_4: ::std::marker::PhantomData<::std::cell::UnsafeCell<NumberFloatType>>,
    pub _phantom_5: ::std::marker::PhantomData<::std::cell::UnsafeCell<BinaryType>>,
    #[doc = " the type of the current element"]
    pub m_type: nlohmann_basic_json_value_t,
    #[doc = " the value of the current element"]
    pub m_value: nlohmann_basic_json_json_value<
        StringType,
        BooleanType,
        NumberIntegerType,
        NumberUnsignedType,
        NumberFloatType,
        BinaryType,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nlohmann_adl_serializer_open0_dai_RecordConfig_void_close0"]
        [::std::mem::size_of::<nlohmann_adl_serializer>() - 1usize];
    [
        "Align of template specialization: nlohmann_adl_serializer_open0_dai_RecordConfig_void_close0",
    ][::std::mem::align_of::<nlohmann_adl_serializer>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nlohmann_adl_serializer_open0_std_shared_ptr_open1_dai_ADatatype_close1_void_close0",
    ][::std::mem::size_of::<nlohmann_adl_serializer>() - 1usize];
    [
        "Align of template specialization: nlohmann_adl_serializer_open0_std_shared_ptr_open1_dai_ADatatype_close1_void_close0",
    ][::std::mem::align_of::<nlohmann_adl_serializer>() - 1usize];
};
unsafe extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn rawmemchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memrchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *mut ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcasestr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerrordesc_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerrorname_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
unsafe extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sigabbrev_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn sigdescr_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn basename(__filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gettext(__msgid: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __dgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __dcgettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid: *const ::std::os::raw::c_char,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ngettext(
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn dcngettext(
        __domainname: *const ::std::os::raw::c_char,
        __msgid1: *const ::std::os::raw::c_char,
        __msgid2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
        __category: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn textdomain(__domainname: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bindtextdomain(
        __domainname: *const ::std::os::raw::c_char,
        __dirname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bind_textdomain_codeset(
        __domainname: *const ::std::os::raw::c_char,
        __codeset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const nop_EncodingByte_PositiveFixInt: nop_EncodingByte = 0;
pub const nop_EncodingByte_PositiveFixIntMin: nop_EncodingByte = 0;
pub const nop_EncodingByte_PositiveFixIntMax: nop_EncodingByte = 127;
pub const nop_EncodingByte_PositiveFixIntMask: nop_EncodingByte = 127;
pub const nop_EncodingByte_False: nop_EncodingByte = 0;
pub const nop_EncodingByte_True: nop_EncodingByte = 1;
pub const nop_EncodingByte_U8: nop_EncodingByte = 128;
pub const nop_EncodingByte_U16: nop_EncodingByte = 129;
pub const nop_EncodingByte_U32: nop_EncodingByte = 130;
pub const nop_EncodingByte_U64: nop_EncodingByte = 131;
pub const nop_EncodingByte_I8: nop_EncodingByte = 132;
pub const nop_EncodingByte_I16: nop_EncodingByte = 133;
pub const nop_EncodingByte_I32: nop_EncodingByte = 134;
pub const nop_EncodingByte_I64: nop_EncodingByte = 135;
pub const nop_EncodingByte_F32: nop_EncodingByte = 136;
pub const nop_EncodingByte_F64: nop_EncodingByte = 137;
pub const nop_EncodingByte_ReservedMin: nop_EncodingByte = 138;
pub const nop_EncodingByte_ReservedMax: nop_EncodingByte = 180;
pub const nop_EncodingByte_Table: nop_EncodingByte = 181;
pub const nop_EncodingByte_Error: nop_EncodingByte = 182;
pub const nop_EncodingByte_Handle: nop_EncodingByte = 183;
pub const nop_EncodingByte_Variant: nop_EncodingByte = 184;
pub const nop_EncodingByte_Structure: nop_EncodingByte = 185;
pub const nop_EncodingByte_Array: nop_EncodingByte = 186;
pub const nop_EncodingByte_Map: nop_EncodingByte = 187;
pub const nop_EncodingByte_Binary: nop_EncodingByte = 188;
pub const nop_EncodingByte_String: nop_EncodingByte = 189;
pub const nop_EncodingByte_Empty: nop_EncodingByte = 190;
pub const nop_EncodingByte_Extension: nop_EncodingByte = 191;
pub const nop_EncodingByte_NegativeFixInt: nop_EncodingByte = 192;
pub const nop_EncodingByte_NegativeFixIntMin: nop_EncodingByte = 192;
pub const nop_EncodingByte_NegativeFixIntMax: nop_EncodingByte = 255;
pub type nop_EncodingByte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_MakeVoid {
    pub _address: u8,
}
pub type nop_detail_MakeVoid_Type = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_IsDetectedType {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_TypeTag {
    pub _address: u8,
}
pub type nop_detail_TypeForIndex = std_tuple_element_t;
pub type nop_detail_TypeTagForIndex = nop_detail_TypeTag;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_IsConstructible {
    pub _address: u8,
}
pub type nop_detail_EnableIfConstructible = u8;
pub type nop_detail_EnableIfNotConstructible = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_HasType {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_Set {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_Set_IsSubset {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_detail_ConstructibleCount {
    pub _address: u8,
}
pub type nop_detail_EnableIfElement = u8;
pub type nop_detail_EnableIfNotElement = u8;
pub type nop_detail_EnableIfConvertible = u8;
pub type nop_detail_EnableIfAssignable = u8;
pub type nop_detail_Select = std_conditional_t;
#[repr(C)]
pub union nop_detail_Union {
    pub _address: u8,
}
pub type nop_IsTemplateBaseOf = u8;
pub type nop_Void = nop_detail_MakeVoid;
pub type nop_Identity<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsIntegral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsArithmetic {
    pub _address: u8,
}
pub type nop_EnableIfIntegral = u8;
pub type nop_EnableIfNotIntegral = u8;
pub type nop_EnableIfArithmetic = u8;
pub type nop_EnableIfNotArithmetic = u8;
pub type nop_EnableIfConvertible = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_FirstType {
    pub _address: u8,
}
pub type nop_First = nop_FirstType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_ArrayTraits {
    pub _base: std_false_type,
}
pub type nop_EnableIfArray = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_And {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Or {
    pub _base: std_true_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsUnique {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsSame {
    pub _address: u8,
}
#[repr(C)]
pub struct nop_Result<ErrorEnum, T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<ErrorEnum>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub __bindgen_anon_1: nop_Result__bindgen_ty_1<ErrorEnum, T>,
    pub state_: nop_Result_State,
}
pub const nop_Result_State_Empty: nop_Result_State = 0;
pub const nop_Result_State_Error: nop_Result_State = 0;
pub const nop_Result_State_Value: nop_Result_State = 0;
pub type nop_Result_State = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(1))]
pub struct nop_Result__bindgen_ty_1<ErrorEnum, T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<ErrorEnum>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub error_: __BindgenUnionField<ErrorEnum>,
    pub value_: __BindgenUnionField<T>,
    pub bindgen_union_field: [u8; 0usize],
}
pub const nop_ErrorStatus_None: nop_ErrorStatus = 0;
pub const nop_ErrorStatus_UnexpectedEncodingType: nop_ErrorStatus = 1;
pub const nop_ErrorStatus_UnexpectedHandleType: nop_ErrorStatus = 2;
pub const nop_ErrorStatus_UnexpectedVariantType: nop_ErrorStatus = 3;
pub const nop_ErrorStatus_InvalidContainerLength: nop_ErrorStatus = 4;
pub const nop_ErrorStatus_InvalidMemberCount: nop_ErrorStatus = 5;
pub const nop_ErrorStatus_InvalidStringLength: nop_ErrorStatus = 6;
pub const nop_ErrorStatus_InvalidTableHash: nop_ErrorStatus = 7;
pub const nop_ErrorStatus_InvalidHandleReference: nop_ErrorStatus = 8;
pub const nop_ErrorStatus_InvalidHandleValue: nop_ErrorStatus = 9;
pub const nop_ErrorStatus_InvalidInterfaceMethod: nop_ErrorStatus = 10;
pub const nop_ErrorStatus_DuplicateTableEntry: nop_ErrorStatus = 11;
pub const nop_ErrorStatus_ReadLimitReached: nop_ErrorStatus = 12;
pub const nop_ErrorStatus_WriteLimitReached: nop_ErrorStatus = 13;
pub const nop_ErrorStatus_StreamError: nop_ErrorStatus = 14;
pub const nop_ErrorStatus_ProtocolError: nop_ErrorStatus = 15;
pub const nop_ErrorStatus_IOError: nop_ErrorStatus = 16;
pub const nop_ErrorStatus_SystemError: nop_ErrorStatus = 17;
pub const nop_ErrorStatus_DebugError: nop_ErrorStatus = 18;
pub type nop_ErrorStatus = ::std::os::raw::c_int;
#[repr(C)]
pub struct nop_Status<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub _base: nop_Result<nop_ErrorStatus, T>,
}
pub type nop_SizeType = std_conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Encoding {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_EncodingIO {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_bool__void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_bool__void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_char_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_char_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_unsigned_char_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_unsigned_char_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_signed_char_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_signed_char_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_unsigned_short_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_unsigned_short_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_short_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_short_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_unsigned_int_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_unsigned_int_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_int_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_int_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_unsigned_long_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_unsigned_long_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_long_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_long_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_float_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_float_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_double_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_double_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
pub type nop_EnableIfEnum = u8;
pub type nop_HandleReference = ::std::os::raw::c_long;
pub const kEmptyHandleReference: nop__bindgen_ty_1 = -1;
pub type nop__bindgen_ty_1 = nop_HandleReference;
pub type nop_DefaultHandlePolicy_Type<T> = T;
#[repr(C)]
pub struct nop_Handle {
    pub value_: nop_Handle_Type,
}
pub type nop_Handle_Type = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
pub struct nop_UniqueHandle {
    pub _base: nop_Handle,
}
pub type nop_UniqueHandle_Type = __BindgenOpaqueArray<u8, 0usize>;
pub type nop_UniqueHandle_Base = nop_Handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsLogicalBufferPair {
    pub _base: std_false_type,
}
pub type nop_EnableIfLogicalBufferPair = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_LogicalBufferStaticConstraints {
    pub _address: u8,
}
pub type nop_IsDetected = nop_detail_IsDetectedType;
pub type nop_ExternalUnboundedBufferTest<Class> = Class;
pub type nop_InternalUnboundedBufferTest = __BindgenOpaqueArray<u8, 0usize>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsUnboundedBuffer {
    pub _base: nop_Or,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_MemberList {
    pub _address: u8,
}
pub type nop_MemberList_Members = std_tuple;
pub const nop_MemberList_Count: nop_MemberList__bindgen_ty_1 = 0;
pub type nop_MemberList__bindgen_ty_1 = usize;
pub type nop_MemberList_At = u8;
pub type nop_ExternalMemberTraits<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_HasInternalMemberList {
    pub _address: u8,
}
pub const nop_HasInternalMemberList_value: nop_HasInternalMemberList__bindgen_ty_1 = false;
pub type nop_HasInternalMemberList__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_HasExternalMemberList {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_HasMemberList {
    pub _address: u8,
}
pub type nop_EnableIfHasInternalMemberList = u8;
pub type nop_EnableIfHasExternalMemberList = u8;
pub type nop_EnableIfHasMemberList = u8;
pub type nop_EnableIfNotHasMemberList = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_MemberListTraits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsValueWrapper {
    pub _address: u8,
}
pub const nop_IsValueWrapper_value: nop_IsValueWrapper__bindgen_ty_1 = false;
pub type nop_IsValueWrapper__bindgen_ty_1 = bool;
pub type nop_EnableIfIsValueWrapper = u8;
pub type nop_EnableIfIsNotValueWrapper = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_ValueWrapperTraits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsComparableEqual {
    pub _base: std_false_type,
}
pub type nop_EnableIfComparableEqual = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsComparableLess {
    pub _base: std_false_type,
}
pub type nop_EnableIfComparableLess = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_InPlace {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_InPlace"][::std::mem::size_of::<nop_InPlace>() - 1usize];
    ["Alignment of nop_InPlace"][::std::mem::align_of::<nop_InPlace>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct nop_Optional {
    pub state_: nop_Optional_State,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Optional_TrivialInit {
    pub _address: u8,
}
#[repr(C)]
pub union nop_Optional_Storage {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Optional_State {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IsResultType {
    pub _base: std_false_type,
}
pub type nop_EnableIfResultType = u8;
pub type nop_ResultType<T> = T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_SerializerCommon {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_SerializerCommon"][::std::mem::size_of::<nop_SerializerCommon>() - 1usize];
    ["Alignment of nop_SerializerCommon"][::std::mem::align_of::<nop_SerializerCommon>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Serializer<Writer> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Writer>>,
    pub writer_: Writer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Deserializer<Reader> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Reader>>,
    pub reader_: Reader,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_BlockReader<T> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    pub data_: *const nop_BlockReader_ValueType<T>,
    pub size_: usize,
}
pub type nop_BlockReader_ValueType<T> = T;
pub const nop_HashValue_Value: nop_HashValue__bindgen_ty_1 = 0;
pub type nop_HashValue__bindgen_ty_1 = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_SipHash {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_SipHash"][::std::mem::size_of::<nop_SipHash>() - 1usize];
    ["Alignment of nop_SipHash"][::std::mem::align_of::<nop_SipHash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_ActiveEntry {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_ActiveEntry"][::std::mem::size_of::<nop_ActiveEntry>() - 1usize];
    ["Alignment of nop_ActiveEntry"][::std::mem::align_of::<nop_ActiveEntry>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_DeletedEntry {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_DeletedEntry"][::std::mem::size_of::<nop_DeletedEntry>() - 1usize];
    ["Alignment of nop_DeletedEntry"][::std::mem::align_of::<nop_DeletedEntry>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_SameEntryId {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_EntryList {
    pub _address: u8,
}
pub const nop_EntryList_Hash: nop_EntryList__bindgen_ty_1 = 0;
pub type nop_EntryList__bindgen_ty_1 = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_HasEntryList {
    pub _address: u8,
}
pub const nop_HasEntryList_value: nop_HasEntryList__bindgen_ty_1 = false;
pub type nop_HasEntryList__bindgen_ty_1 = bool;
pub type nop_EnableIfHasEntryList = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_EntryListTraits {
    pub _address: u8,
}
pub type nop_EntryListTraits_EntryList = __BindgenOpaqueArray<u8, 0usize>;
pub const kNopTableKey0: nop__bindgen_ty_2 = 13451671604386709231;
pub const kNopTableKey1: nop__bindgen_ty_2 = 81985529216486895;
pub type nop__bindgen_ty_2 = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_BoundedReader<Reader> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Reader>>,
    pub reader_: *mut Reader,
    pub size_: usize,
    pub index_: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_BoundedWriter<Writer> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Writer>>,
    pub writer_: *mut Writer,
    pub size_: usize,
    pub index_: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_EmptyVariant {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_EmptyVariant"][::std::mem::size_of::<nop_EmptyVariant>() - 1usize];
    ["Alignment of nop_EmptyVariant"][::std::mem::align_of::<nop_EmptyVariant>() - 1usize];
};
#[repr(C)]
pub struct nop_Variant {
    pub index_: ::std::os::raw::c_int,
    pub value_: nop_detail_Union,
}
pub type nop_Variant_TypeTag = nop_detail_TypeTag;
pub type nop_Variant_DecayedTypeTag = nop_Variant_TypeTag;
pub type nop_Variant_TypeForIndex = nop_detail_TypeForIndex;
pub type nop_Variant_TypeTagForIndex = nop_detail_TypeTagForIndex;
pub type nop_Variant_HasType = nop_detail_HasType;
pub type nop_Variant_EnableIfElement = nop_detail_EnableIfElement;
pub type nop_Variant_EnableIfConvertible = nop_detail_EnableIfConvertible;
pub type nop_Variant_EnableIfAssignable = nop_detail_EnableIfAssignable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Variant_Direct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_Variant_Convert {
    pub _address: u8,
}
pub type nop_Variant_SelectConstructor = nop_detail_Select;
pub const nop_Variant_kEmptyIndex: nop_Variant__bindgen_ty_1 = 0;
pub type nop_Variant__bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IfAnyOf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_IfAnyOf_CallOp<Op> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<Op>>,
    pub op: *mut Op,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Encoding_open0_nop_EmptyVariant_void_close0"]
        [::std::mem::size_of::<nop_Encoding>() - 1usize];
    ["Align of template specialization: nop_Encoding_open0_nop_EmptyVariant_void_close0"]
        [::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_BufferReader {
    pub buffer_: *mut ::std::os::raw::c_uchar,
    pub size_: usize,
    pub index_: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nop_BufferReader"][::std::mem::size_of::<nop_BufferReader>() - 24usize];
    ["Alignment of nop_BufferReader"][::std::mem::align_of::<nop_BufferReader>() - 8usize];
    ["Offset of field: nop_BufferReader::buffer_"]
        [::std::mem::offset_of!(nop_BufferReader, buffer_) - 0usize];
    ["Offset of field: nop_BufferReader::size_"]
        [::std::mem::offset_of!(nop_BufferReader, size_) - 8usize];
    ["Offset of field: nop_BufferReader::index_"]
        [::std::mem::offset_of!(nop_BufferReader, index_) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nop_StreamWriter<OStream> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<OStream>>,
    pub stream_: OStream,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_Encoding_open0_std_shared_ptr_open1_dai_ADatatype_close1_void_close0",
    ][::std::mem::size_of::<nop_Encoding>() - 1usize];
    [
        "Align of template specialization: nop_Encoding_open0_std_shared_ptr_open1_dai_ADatatype_close1_void_close0",
    ][::std::mem::align_of::<nop_Encoding>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLinkTimespec {
    pub tv_sec: u64,
    pub tv_nsec: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLinkTimespec"][::std::mem::size_of::<XLinkTimespec>() - 16usize];
    ["Alignment of XLinkTimespec"][::std::mem::align_of::<XLinkTimespec>() - 8usize];
    ["Offset of field: XLinkTimespec::tv_sec"]
        [::std::mem::offset_of!(XLinkTimespec, tv_sec) - 0usize];
    ["Offset of field: XLinkTimespec::tv_nsec"]
        [::std::mem::offset_of!(XLinkTimespec, tv_nsec) - 8usize];
};
unsafe extern "C" {
    pub fn getMonotonicTimestamp(ts: *mut XLinkTimespec);
}
pub const UsbSpeed_t_X_LINK_USB_SPEED_UNKNOWN: UsbSpeed_t = 0;
pub const UsbSpeed_t_X_LINK_USB_SPEED_LOW: UsbSpeed_t = 1;
pub const UsbSpeed_t_X_LINK_USB_SPEED_FULL: UsbSpeed_t = 2;
pub const UsbSpeed_t_X_LINK_USB_SPEED_HIGH: UsbSpeed_t = 3;
pub const UsbSpeed_t_X_LINK_USB_SPEED_SUPER: UsbSpeed_t = 4;
pub const UsbSpeed_t_X_LINK_USB_SPEED_SUPER_PLUS: UsbSpeed_t = 5;
pub type UsbSpeed_t = ::std::os::raw::c_uint;
pub const XLinkError_t_X_LINK_SUCCESS: XLinkError_t = 0;
pub const XLinkError_t_X_LINK_ALREADY_OPEN: XLinkError_t = 1;
pub const XLinkError_t_X_LINK_COMMUNICATION_NOT_OPEN: XLinkError_t = 2;
pub const XLinkError_t_X_LINK_COMMUNICATION_FAIL: XLinkError_t = 3;
pub const XLinkError_t_X_LINK_COMMUNICATION_UNKNOWN_ERROR: XLinkError_t = 4;
pub const XLinkError_t_X_LINK_DEVICE_NOT_FOUND: XLinkError_t = 5;
pub const XLinkError_t_X_LINK_TIMEOUT: XLinkError_t = 6;
pub const XLinkError_t_X_LINK_ERROR: XLinkError_t = 7;
pub const XLinkError_t_X_LINK_OUT_OF_MEMORY: XLinkError_t = 8;
pub const XLinkError_t_X_LINK_INSUFFICIENT_PERMISSIONS: XLinkError_t = 9;
pub const XLinkError_t_X_LINK_DEVICE_ALREADY_IN_USE: XLinkError_t = 10;
pub const XLinkError_t_X_LINK_NOT_IMPLEMENTED: XLinkError_t = 11;
pub const XLinkError_t_X_LINK_INIT_USB_ERROR: XLinkError_t = 12;
pub const XLinkError_t_X_LINK_INIT_TCP_IP_ERROR: XLinkError_t = 13;
pub const XLinkError_t_X_LINK_INIT_LOCAL_SHDMEM_ERROR: XLinkError_t = 14;
pub const XLinkError_t_X_LINK_INIT_TCP_IP_OR_LOCAL_SHDMEM_ERROR: XLinkError_t = 15;
pub const XLinkError_t_X_LINK_INIT_PCIE_ERROR: XLinkError_t = 16;
pub type XLinkError_t = ::std::os::raw::c_uint;
pub const XLinkProtocol_t_X_LINK_USB_VSC: XLinkProtocol_t = 0;
pub const XLinkProtocol_t_X_LINK_USB_CDC: XLinkProtocol_t = 1;
pub const XLinkProtocol_t_X_LINK_PCIE: XLinkProtocol_t = 2;
pub const XLinkProtocol_t_X_LINK_IPC: XLinkProtocol_t = 3;
pub const XLinkProtocol_t_X_LINK_TCP_IP: XLinkProtocol_t = 4;
pub const XLinkProtocol_t_X_LINK_LOCAL_SHDMEM: XLinkProtocol_t = 5;
pub const XLinkProtocol_t_X_LINK_TCP_IP_OR_LOCAL_SHDMEM: XLinkProtocol_t = 6;
pub const XLinkProtocol_t_X_LINK_NMB_OF_PROTOCOLS: XLinkProtocol_t = 7;
pub const XLinkProtocol_t_X_LINK_ANY_PROTOCOL: XLinkProtocol_t = 8;
pub type XLinkProtocol_t = ::std::os::raw::c_uint;
pub const XLinkPlatform_t_X_LINK_ANY_PLATFORM: XLinkPlatform_t = 0;
pub const XLinkPlatform_t_X_LINK_MYRIAD_2: XLinkPlatform_t = 2450;
pub const XLinkPlatform_t_X_LINK_MYRIAD_X: XLinkPlatform_t = 2480;
pub const XLinkPlatform_t_X_LINK_RVC3: XLinkPlatform_t = 3000;
pub const XLinkPlatform_t_X_LINK_RVC4: XLinkPlatform_t = 4000;
pub type XLinkPlatform_t = ::std::os::raw::c_uint;
#[doc = " Used only for searching devices. It means that the device state is not important."]
pub const XLinkDeviceState_t_X_LINK_ANY_STATE: XLinkDeviceState_t = 0;
#[doc = " The device is booted (firmware is loaded) and the pipeline is running."]
pub const XLinkDeviceState_t_X_LINK_BOOTED: XLinkDeviceState_t = 1;
#[doc = " Device isn't booted, e.g. for USB devices with no bootloader flashed. In such case it's waiting for the USB boot."]
pub const XLinkDeviceState_t_X_LINK_UNBOOTED: XLinkDeviceState_t = 2;
#[doc = " The device is in bootloader and waiting for a connection. After the connection the state will change to BOOTED."]
pub const XLinkDeviceState_t_X_LINK_BOOTLOADER: XLinkDeviceState_t = 3;
#[doc = " The device has booted the flashed firmware/pipeline (e.g. in case of OAK POE devices in standalone mode)."]
pub const XLinkDeviceState_t_X_LINK_FLASH_BOOTED: XLinkDeviceState_t = 4;
#[doc = " The device has booted the flashed firmware/pipeline (e.g. in case of OAK POE devices in standalone mode)."]
pub const XLinkDeviceState_t_X_LINK_BOOTED_NON_EXCLUSIVE: XLinkDeviceState_t = 4;
#[doc = " The device is running Gate"]
pub const XLinkDeviceState_t_X_LINK_GATE: XLinkDeviceState_t = 5;
#[doc = " The device is running Gate and already booted"]
pub const XLinkDeviceState_t_X_LINK_GATE_BOOTED: XLinkDeviceState_t = 6;
#[doc = " The device is in setup mode"]
pub const XLinkDeviceState_t_X_LINK_GATE_SETUP: XLinkDeviceState_t = 7;
pub type XLinkDeviceState_t = ::std::os::raw::c_uint;
pub const XLinkPCIEBootloader_X_LINK_PCIE_UNKNOWN_BOOTLOADER: XLinkPCIEBootloader = 0;
pub const XLinkPCIEBootloader_X_LINK_PCIE_SIMPLIFIED_BOOTLOADER: XLinkPCIEBootloader = 1;
pub const XLinkPCIEBootloader_X_LINK_PCIE_UNIFIED_BOOTLOADER: XLinkPCIEBootloader = 2;
pub type XLinkPCIEBootloader = ::std::os::raw::c_uint;
pub type streamId_t = u32;
pub type linkId_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct deviceDesc_t {
    pub protocol: XLinkProtocol_t,
    pub platform: XLinkPlatform_t,
    pub name: [::std::os::raw::c_char; 64usize],
    pub state: XLinkDeviceState_t,
    pub mxid: [::std::os::raw::c_char; 32usize],
    pub status: XLinkError_t,
    pub nameHintOnly: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of deviceDesc_t"][::std::mem::size_of::<deviceDesc_t>() - 116usize];
    ["Alignment of deviceDesc_t"][::std::mem::align_of::<deviceDesc_t>() - 4usize];
    ["Offset of field: deviceDesc_t::protocol"]
        [::std::mem::offset_of!(deviceDesc_t, protocol) - 0usize];
    ["Offset of field: deviceDesc_t::platform"]
        [::std::mem::offset_of!(deviceDesc_t, platform) - 4usize];
    ["Offset of field: deviceDesc_t::name"][::std::mem::offset_of!(deviceDesc_t, name) - 8usize];
    ["Offset of field: deviceDesc_t::state"][::std::mem::offset_of!(deviceDesc_t, state) - 72usize];
    ["Offset of field: deviceDesc_t::mxid"][::std::mem::offset_of!(deviceDesc_t, mxid) - 76usize];
    ["Offset of field: deviceDesc_t::status"]
        [::std::mem::offset_of!(deviceDesc_t, status) - 108usize];
    ["Offset of field: deviceDesc_t::nameHintOnly"]
        [::std::mem::offset_of!(deviceDesc_t, nameHintOnly) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct streamPacketDesc_t {
    pub data: *mut u8,
    pub length: u32,
    pub fd: i32,
    pub tRemoteSent: XLinkTimespec,
    #[doc = " remote timestamp of when the packet was sent. Related to remote clock. Note: not directly related to local clock"]
    pub tReceived: XLinkTimespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of streamPacketDesc_t"][::std::mem::size_of::<streamPacketDesc_t>() - 48usize];
    ["Alignment of streamPacketDesc_t"][::std::mem::align_of::<streamPacketDesc_t>() - 8usize];
    ["Offset of field: streamPacketDesc_t::data"]
        [::std::mem::offset_of!(streamPacketDesc_t, data) - 0usize];
    ["Offset of field: streamPacketDesc_t::length"]
        [::std::mem::offset_of!(streamPacketDesc_t, length) - 8usize];
    ["Offset of field: streamPacketDesc_t::fd"]
        [::std::mem::offset_of!(streamPacketDesc_t, fd) - 12usize];
    ["Offset of field: streamPacketDesc_t::tRemoteSent"]
        [::std::mem::offset_of!(streamPacketDesc_t, tRemoteSent) - 16usize];
    ["Offset of field: streamPacketDesc_t::tReceived"]
        [::std::mem::offset_of!(streamPacketDesc_t, tReceived) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLinkProf_t {
    pub totalReadTime: f32,
    pub totalWriteTime: f32,
    pub totalReadBytes: u64,
    pub totalWriteBytes: u64,
    pub totalBootCount: ::std::os::raw::c_ulong,
    pub totalBootTime: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLinkProf_t"][::std::mem::size_of::<XLinkProf_t>() - 40usize];
    ["Alignment of XLinkProf_t"][::std::mem::align_of::<XLinkProf_t>() - 8usize];
    ["Offset of field: XLinkProf_t::totalReadTime"]
        [::std::mem::offset_of!(XLinkProf_t, totalReadTime) - 0usize];
    ["Offset of field: XLinkProf_t::totalWriteTime"]
        [::std::mem::offset_of!(XLinkProf_t, totalWriteTime) - 4usize];
    ["Offset of field: XLinkProf_t::totalReadBytes"]
        [::std::mem::offset_of!(XLinkProf_t, totalReadBytes) - 8usize];
    ["Offset of field: XLinkProf_t::totalWriteBytes"]
        [::std::mem::offset_of!(XLinkProf_t, totalWriteBytes) - 16usize];
    ["Offset of field: XLinkProf_t::totalBootCount"]
        [::std::mem::offset_of!(XLinkProf_t, totalBootCount) - 24usize];
    ["Offset of field: XLinkProf_t::totalBootTime"]
        [::std::mem::offset_of!(XLinkProf_t, totalBootTime) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLinkGlobalHandler_t {
    pub profEnable: ::std::os::raw::c_int,
    pub profilingData: XLinkProf_t,
    pub options: *mut ::std::os::raw::c_void,
    pub loglevel: ::std::os::raw::c_int,
    pub protocol: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLinkGlobalHandler_t"][::std::mem::size_of::<XLinkGlobalHandler_t>() - 64usize];
    ["Alignment of XLinkGlobalHandler_t"][::std::mem::align_of::<XLinkGlobalHandler_t>() - 8usize];
    ["Offset of field: XLinkGlobalHandler_t::profEnable"]
        [::std::mem::offset_of!(XLinkGlobalHandler_t, profEnable) - 0usize];
    ["Offset of field: XLinkGlobalHandler_t::profilingData"]
        [::std::mem::offset_of!(XLinkGlobalHandler_t, profilingData) - 8usize];
    ["Offset of field: XLinkGlobalHandler_t::options"]
        [::std::mem::offset_of!(XLinkGlobalHandler_t, options) - 48usize];
    ["Offset of field: XLinkGlobalHandler_t::loglevel"]
        [::std::mem::offset_of!(XLinkGlobalHandler_t, loglevel) - 56usize];
    ["Offset of field: XLinkGlobalHandler_t::protocol"]
        [::std::mem::offset_of!(XLinkGlobalHandler_t, protocol) - 60usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XLinkHandler_t {
    pub devicePath: *mut ::std::os::raw::c_char,
    pub devicePath2: *mut ::std::os::raw::c_char,
    pub linkId: ::std::os::raw::c_int,
    pub protocol: XLinkProtocol_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of XLinkHandler_t"][::std::mem::size_of::<XLinkHandler_t>() - 24usize];
    ["Alignment of XLinkHandler_t"][::std::mem::align_of::<XLinkHandler_t>() - 8usize];
    ["Offset of field: XLinkHandler_t::devicePath"]
        [::std::mem::offset_of!(XLinkHandler_t, devicePath) - 0usize];
    ["Offset of field: XLinkHandler_t::devicePath2"]
        [::std::mem::offset_of!(XLinkHandler_t, devicePath2) - 8usize];
    ["Offset of field: XLinkHandler_t::linkId"]
        [::std::mem::offset_of!(XLinkHandler_t, linkId) - 16usize];
    ["Offset of field: XLinkHandler_t::protocol"]
        [::std::mem::offset_of!(XLinkHandler_t, protocol) - 20usize];
};
pub const XLinkProtocol_deprecated_t_USB_VSC: XLinkProtocol_deprecated_t = 0;
pub const XLinkProtocol_deprecated_t_USB_CDC: XLinkProtocol_deprecated_t = 1;
pub const XLinkProtocol_deprecated_t_PCIE: XLinkProtocol_deprecated_t = 2;
pub const XLinkProtocol_deprecated_t_IPC: XLinkProtocol_deprecated_t = 3;
pub const XLinkProtocol_deprecated_t_NMB_OF_PROTOCOLS: XLinkProtocol_deprecated_t = 4;
pub type XLinkProtocol_deprecated_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spimpl_details_default_deleter {
    pub _address: u8,
}
pub type spimpl_details_default_deleter_type<T> =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut T)>;
pub type spimpl_details_default_deleter_t = spimpl_details_default_deleter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spimpl_details_default_copier {
    pub _address: u8,
}
pub type spimpl_details_default_copier_type<T> =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut T) -> *mut T>;
pub type spimpl_details_default_copier_t = spimpl_details_default_copier;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spimpl_details_is_default_manageable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct spimpl_unique_impl_ptr {
    pub ptr_: spimpl_unique_impl_ptr_unique_ptr_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spimpl_unique_impl_ptr_dummy_t_ {
    pub dummy__: ::std::os::raw::c_int,
}
pub type spimpl_unique_impl_ptr_pointer<T> = *mut T;
pub type spimpl_unique_impl_ptr_const_pointer = *mut std_add_const;
pub type spimpl_unique_impl_ptr_reference<T> = *mut T;
pub type spimpl_unique_impl_ptr_const_reference = *mut std_add_const;
pub type spimpl_unique_impl_ptr_element_type<T> = T;
pub type spimpl_unique_impl_ptr_deleter_type = std_decay;
pub type spimpl_unique_impl_ptr_unique_ptr_type = std_unique_ptr;
pub type spimpl_unique_impl_ptr_is_default_manageable = spimpl_details_is_default_manageable;
#[repr(C)]
#[derive(Debug)]
pub struct spimpl_impl_ptr {
    pub _base: spimpl_unique_impl_ptr,
    pub copier_: spimpl_impl_ptr_copier_type,
}
pub type spimpl_impl_ptr_base_type = spimpl_unique_impl_ptr;
pub type spimpl_impl_ptr_dummy_t_ = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_pointer = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_const_pointer = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_reference = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_const_reference = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_element_type = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_deleter_type = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_unique_ptr_type = spimpl_impl_ptr_base_type;
pub type spimpl_impl_ptr_copier_type = std_decay;
pub type spimpl_impl_ptr_is_default_manageable = spimpl_details_is_default_manageable;
#[doc = " a class to store JSON values\n @sa https://json.nlohmann.me/api/basic_json/"]
pub type json = nlohmann_json;
pub const DetectionNetworkType_YOLO: DetectionNetworkType = 0;
pub const DetectionNetworkType_MOBILENET: DetectionNetworkType = 1;
pub type DetectionNetworkType = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u32>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u16>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u32>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_5 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_6 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_7 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_8 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_9 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_10 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_11 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_12 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_13 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_14 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_15 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_16 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_17 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_18 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_19 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_20 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_21 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_22 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_23 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_24 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_25 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_26 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_27 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_28 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_29 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_30 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_31 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_32 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_33 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_34 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_35 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_36 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_37 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_38 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ios<::std::os::raw::c_char>>() - 264usize];
    [
        "Align of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ios<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<::std::os::raw::c_char>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ostream<::std::os::raw::c_char>>() - 272usize];
    [
        "Align of template specialization: std_basic_ostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ostream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_iostream<::std::os::raw::c_char>>() - 288usize];
    [
        "Align of template specialization: std_basic_iostream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_iostream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_stringbuf<::std::os::raw::c_char>>() - 104usize];
    [
        "Align of template specialization: std_basic_stringbuf_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_stringbuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_istringstream<::std::os::raw::c_char>>() - 384usize];
    [
        "Align of template specialization: std_basic_istringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_istringstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ostringstream<::std::os::raw::c_char>>() - 376usize];
    [
        "Align of template specialization: std_basic_ostringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ostringstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_stringstream<::std::os::raw::c_char>>() - 392usize];
    [
        "Align of template specialization: std_basic_stringstream_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_stringstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_filebuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_filebuf<::std::os::raw::c_char>>() - 240usize];
    [
        "Align of template specialization: std_basic_filebuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_filebuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ifstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ifstream<::std::os::raw::c_char>>() - 520usize];
    [
        "Align of template specialization: std_basic_ifstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ifstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ofstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_ofstream<::std::os::raw::c_char>>() - 512usize];
    [
        "Align of template specialization: std_basic_ofstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_ofstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_fstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_fstream<::std::os::raw::c_char>>() - 528usize];
    [
        "Align of template specialization: std_basic_fstream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_fstream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ios<u32>>() - 264usize];
    [
        "Align of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ios<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<u32>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<u32>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ostream<u32>>() - 272usize];
    [
        "Align of template specialization: std_basic_ostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ostream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_iostream<u32>>() - 288usize];
    [
        "Align of template specialization: std_basic_iostream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_iostream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_stringbuf<u32>>() - 104usize];
    [
        "Align of template specialization: std_basic_stringbuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_stringbuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_istringstream<u32>>() - 384usize];
    [
        "Align of template specialization: std_basic_istringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_istringstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ostringstream<u32>>() - 376usize];
    [
        "Align of template specialization: std_basic_ostringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ostringstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_stringstream<u32>>() - 392usize];
    [
        "Align of template specialization: std_basic_stringstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_stringstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_filebuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_filebuf<u32>>() - 240usize];
    [
        "Align of template specialization: std_basic_filebuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_filebuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ifstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ifstream<u32>>() - 520usize];
    [
        "Align of template specialization: std_basic_ifstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ifstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_ofstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_ofstream<u32>>() - 512usize];
    [
        "Align of template specialization: std_basic_ofstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_ofstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_fstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_fstream<u32>>() - 528usize];
    [
        "Align of template specialization: std_basic_fstream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_fstream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<::std::os::raw::c_char>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u32>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u16>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u32>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<::std::os::raw::c_char>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<::std::os::raw::c_char>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u32>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u32>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u16>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u16>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u32>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0",
    ][::std::mem::size_of::<std_hash>() - 1usize];
    [
        "Align of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0",
    ][::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<u32>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<::std::os::raw::c_char>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<::std::os::raw::c_char>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<u32>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u32>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_istream<u32>>() - 280usize];
    [
        "Align of template specialization: std_basic_istream_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_istream<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u32>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u16>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u16>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0",
    ][::std::mem::size_of::<std_basic_string<u32>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0",
    ][::std::mem::align_of::<std_basic_string<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type size_type = size_type;
pub type size_type = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_40 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<u32>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::size_of::<std_basic_streambuf<u32>>() - 64usize];
    [
        "Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0",
    ][::std::mem::align_of::<std_basic_streambuf<u32>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type char_type = ::std::os::raw::c_char;
pub type int_type = int_type;
pub type int_type = ::std::os::raw::c_int;
pub type char_type = u32;
pub type int_type = int_type;
pub type int_type = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_bool__std_size_t_close0"]
        [::std::mem::size_of::<std_pair<bool, usize>>() - 16usize];
    ["Align of template specialization: std_pair_open0_bool__std_size_t_close0"]
        [::std::mem::align_of::<std_pair<bool, usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_bool__std_size_t_close0"]
        [::std::mem::size_of::<std_pair<bool, usize>>() - 16usize];
    ["Align of template specialization: std_pair_open0_bool__std_size_t_close0"]
        [::std::mem::align_of::<std_pair<bool, usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_random_access_iterator_tag_bool__long_ptr_bool_ref_bool_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
pub type iterator = std__Bit_iterator;
pub type size_type = usize;
pub type iterator = std__Bit_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_52 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_53 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::size_of::<std_iterator>() - 1usize];
    [
        "Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0",
    ][::std::mem::align_of::<std_iterator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_54 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std__Rb_tree__Base_ptr_std__Rb_tree__Base_ptr_close0",
    ][::std::mem::size_of::<std_pair<std__Rb_tree__Base_ptr, std__Rb_tree__Base_ptr>>() - 16usize];
    [
        "Align of template specialization: std_pair_open0_std__Rb_tree__Base_ptr_std__Rb_tree__Base_ptr_close0",
    ][::std::mem::align_of::<std_pair<std__Rb_tree__Base_ptr, std__Rb_tree__Base_ptr>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_valarray<usize>>() - 16usize];
    ["Align of template specialization: std_valarray_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_valarray<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Array_open0_bool__close0"]
        [::std::mem::size_of::<std__Array<bool>>() - 8usize];
    ["Align of template specialization: std__Array_open0_bool__close0"]
        [::std::mem::align_of::<std__Array<bool>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std__Array_open0_std_size_t_close0"]
        [::std::mem::size_of::<std__Array<usize>>() - 8usize];
    ["Align of template specialization: std__Array_open0_std_size_t_close0"]
        [::std::mem::align_of::<std__Array<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nlohmann_basic_json_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_bool__long_unsigned_long_double_std_vector_open1_unsigned_char_std_allocator_open2_unsigned_char_close2_close1_void_close0",
    ][::std::mem::size_of::<
        nlohmann_basic_json<
            std_basic_string<::std::os::raw::c_char>,
            bool,
            ::std::os::raw::c_long,
            ::std::os::raw::c_ulong,
            f64,
            std_vector,
        >,
    >() - 16usize];
    [
        "Align of template specialization: nlohmann_basic_json_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_bool__long_unsigned_long_double_std_vector_open1_unsigned_char_std_allocator_open2_unsigned_char_close2_close1_void_close0",
    ][::std::mem::align_of::<
        nlohmann_basic_json<
            std_basic_string<::std::os::raw::c_char>,
            bool,
            ::std::os::raw::c_long,
            ::std::os::raw::c_ulong,
            f64,
            std_vector,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_57 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_58 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_59 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_60 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_61 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_std_nano_close0"]
        [::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_chrono_duration_open0_long_std_nano_close0"]
        [::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_std_micro_close0"]
        [::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_chrono_duration_open0_long_std_micro_close0"]
        [::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_std_milli_close0"]
        [::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_chrono_duration_open0_long_std_milli_close0"]
        [::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    [
        "Align of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    [
        "Align of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    [
        "Align of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
pub type rep = ::std::os::raw::c_long;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_system_clock_std_chrono_system_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_system_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_system_clock_std_chrono_system_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_system_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_filesystem___file_clock_std_chrono_duration_open1_long_std_ratio_open2_close2_close1_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_duration<::std::os::raw::c_long>>>()
        - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_filesystem___file_clock_std_chrono_duration_open1_long_std_ratio_open2_close2_close1_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_duration<::std::os::raw::c_long>>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
    [
        "Align of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0",
    ][::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<std_filesystem_path_value_type>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<std_filesystem_path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_ptr_const_string_type_std_size_t_close0"]
        [::std::mem::size_of::<std_pair<*const std_filesystem_path_string_type, usize>>()
            - 16usize];
    ["Align of template specialization: std_pair_open0_ptr_const_string_type_std_size_t_close0"]
        [::std::mem::align_of::<std_pair<*const std_filesystem_path_string_type, usize>>()
            - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_std_filesystem_path__List__Impl_std_filesystem_path__List__Impl_deleter_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_std_filesystem_path__List__Impl_std_filesystem_path__List__Impl_deleter_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 16usize];
    [
        "Align of template specialization: std_basic_string_view_open0_std_filesystem_path_value_type_std_char_traits_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string_view<std_filesystem_path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type iterator_type = *const ::std::os::raw::c_char;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_bool__close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_bool__close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_bool__close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_bool__close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_char_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_char_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_any__Storage_type {
    pub __data: [::std::os::raw::c_uchar; 8usize],
    pub __align: std_any__Storage_type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_any__Storage_type__bindgen_ty_1 {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_any__Storage_type__bindgen_ty_1"]
        [::std::mem::size_of::<std_any__Storage_type__bindgen_ty_1>() - 8usize];
    ["Alignment of std_any__Storage_type__bindgen_ty_1"]
        [::std::mem::align_of::<std_any__Storage_type__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of std_any__Storage_type"][::std::mem::size_of::<std_any__Storage_type>() - 8usize];
    ["Alignment of std_any__Storage_type"]
        [::std::mem::align_of::<std_any__Storage_type>() - 8usize];
    ["Offset of field: std_any__Storage_type::__data"]
        [::std::mem::offset_of!(std_any__Storage_type, __data) - 0usize];
    ["Offset of field: std_any__Storage_type::__align"]
        [::std::mem::offset_of!(std_any__Storage_type, __align) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_less_open0_void_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_void_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_conditional_t_open0_unsigned_long_unsigned_int_close0"]
        [::std::mem::size_of::<std_conditional_t>() - 8usize];
    ["Align of template specialization: std_conditional_t_open0_unsigned_long_unsigned_int_close0"]
        [::std::mem::align_of::<std_conditional_t>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::size_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
    ["Align of template specialization: nop_Status_open0_void_close0"]
        [::std::mem::align_of::<nop_Status<::std::os::raw::c_void>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_125158_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_125167_open1_ptr_Point3f_ptr_void_void_close1__bindgen_ty_id_125176_open1_ptr_Point3f_ptr_void_void_close1__bindgen_ty_id_125185_open1_ptr_CameraBoardSocket_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_125158_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_125167_open1_ptr_Point3f_ptr_void_void_close1__bindgen_ty_id_125176_open1_ptr_Point3f_ptr_void_void_close1__bindgen_ty_id_125185_open1_ptr_CameraBoardSocket_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_125224_open1_ptr_CameraModel_ptr_void_void_close1__bindgen_ty_id_125234_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_125244_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_125254_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_125264_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_125292_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_125308_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_125317_open1_ptr_Extrinsics_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_125224_open1_ptr_CameraModel_ptr_void_void_close1__bindgen_ty_id_125234_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_125244_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_125254_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_125264_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_125292_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_125308_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_125317_open1_ptr_Extrinsics_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_dai_CameraBoardSocket_dai_CameraInfo_std_hash_open1_dai_CameraBoardSocket_close1_std_equal_to_open1_dai_CameraBoardSocket_close1_std_allocator_open1_std_pair_open2_dai_CameraBoardSocket_dai_CameraInfo_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_dai_CameraBoardSocket_dai_CameraInfo_std_hash_open1_dai_CameraBoardSocket_close1_std_equal_to_open1_dai_CameraBoardSocket_close1_std_allocator_open1_std_pair_open2_dai_CameraBoardSocket_dai_CameraInfo_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_dai_CameraBoardSocket_dai_CameraInfo_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_dai_CameraBoardSocket_dai_CameraInfo_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_dai_CameraBoardSocket_dai_CameraInfo_close0"]
        [::std::mem::size_of::<std_pair<dai_CameraBoardSocket, dai_CameraInfo>>() - 128usize];
    [
        "Align of template specialization: std_pair_open0_dai_CameraBoardSocket_dai_CameraInfo_close0",
    ][::std::mem::align_of::<std_pair<dai_CameraBoardSocket, dai_CameraInfo>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_dai_Path_value_type_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<dai_Path_value_type>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_dai_Path_value_type_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<dai_Path_value_type>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::size_of::<std_unique_lock<std_mutex>>() - 16usize];
    ["Align of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::align_of::<std_unique_lock<std_mutex>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::size_of::<std_unique_lock<std_mutex>>() - 16usize];
    ["Align of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::align_of::<std_unique_lock<std_mutex>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_std_mutex_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_std_mutex_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___timed_mutex_impl_open0_std_timed_mutex_close0"]
        [::std::mem::size_of::<std___timed_mutex_impl>() - 1usize];
    ["Align of template specialization: std___timed_mutex_impl_open0_std_timed_mutex_close0"]
        [::std::mem::align_of::<std___timed_mutex_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std___timed_mutex_impl_open0_std_recursive_timed_mutex_close0",
    ][::std::mem::size_of::<std___timed_mutex_impl>() - 1usize];
    [
        "Align of template specialization: std___timed_mutex_impl_open0_std_recursive_timed_mutex_close0",
    ][::std::mem::align_of::<std___timed_mutex_impl>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_char>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_char>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_longlong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_longlong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulonglong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulonglong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_atomic<u32>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_atomic<u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_char16_t_close0"]
        [::std::mem::size_of::<std_atomic<u16>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_char16_t_close0"]
        [::std::mem::align_of::<std_atomic<u16>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_char32_t_close0"]
        [::std::mem::size_of::<std_atomic<u32>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_char32_t_close0"]
        [::std::mem::align_of::<std_atomic<u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_short>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
    ["Align of template specialization: std_atomic_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ushort>>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
    ["Align of template specialization: std_atomic_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uint>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_signed_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_schar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_uchar>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_std_size_t_close0"]
        [::std::mem::size_of::<std_atomic<usize>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_std_size_t_close0"]
        [::std::mem::align_of::<std_atomic<usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_std_ptrdiff_t_close0"]
        [::std::mem::size_of::<std_atomic<isize>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_std_ptrdiff_t_close0"]
        [::std::mem::align_of::<std_atomic<isize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_long>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std_atomic_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_atomic<::std::os::raw::c_ulong>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_std_thread__State_std_default_delete_open1_std_thread__State_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_std_thread__State_std_default_delete_open1_std_thread__State_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_std_thread__State_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_std_thread__State_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CameraSensorType_std_allocator_open1_dai_CameraSensorType_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CameraSensorType_std_allocator_open1_dai_CameraSensorType_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CameraSensorType_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CameraSensorType_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CameraSensorConfig_std_allocator_open1_dai_CameraSensorConfig_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CameraSensorConfig_std_allocator_open1_dai_CameraSensorConfig_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::size_of::<std_optional>() - 44usize];
    ["Align of template specialization: std_optional_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CameraSensorType_std_allocator_open1_dai_CameraSensorType_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CameraSensorType_std_allocator_open1_dai_CameraSensorType_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CameraSensorType_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CameraSensorType_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CameraSensorConfig_std_allocator_open1_dai_CameraSensorConfig_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CameraSensorConfig_std_allocator_open1_dai_CameraSensorConfig_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::size_of::<std_optional>() - 44usize];
    ["Align of template specialization: std_optional_open0_dai_CameraSensorConfig_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: spimpl_impl_ptr_open0_dai_Version_Impl__bindgen_ty_id_126613__bindgen_ty_id_126619_close0",
    ][::std::mem::size_of::<spimpl_impl_ptr>() - 24usize];
    [
        "Align of template specialization: spimpl_impl_ptr_open0_dai_Version_Impl__bindgen_ty_id_126613__bindgen_ty_id_126619_close0",
    ][::std::mem::align_of::<spimpl_impl_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Pimpl_open0_dai_DeviceGate_Impl_close0"]
        [::std::mem::size_of::<dai_Pimpl>() - 8usize];
    ["Align of template specialization: dai_Pimpl_open0_dai_DeviceGate_Impl_close0"]
        [::std::mem::align_of::<dai_Pimpl>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_string_dai_TensorInfo__bindgen_ty_id_126889_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_TensorInfo_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_string_dai_TensorInfo__bindgen_ty_id_126889_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_TensorInfo_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_TensorInfo_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_TensorInfo_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_TensorInfo_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_TensorInfo>>()
        - 144usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_TensorInfo_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_TensorInfo>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_string_dai_TensorInfo__bindgen_ty_id_126938_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_TensorInfo_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_string_dai_TensorInfo__bindgen_ty_id_126938_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_TensorInfo_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_TensorInfo_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_TensorInfo_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_TensorInfo_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_TensorInfo>>()
        - 144usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_TensorInfo_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_TensorInfo>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_int64_t_std_allocator_open1_long_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int64_t_std_allocator_open1_long_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_long_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_long_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0__bindgen_ty_id_127138_open1_std_string_std_string_close1_dai_NodeIoInfo_dai_NodeObjInfo_IoInfoKey_std_equal_to_open1__bindgen_ty_id_127167_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2__bindgen_ty_id_127196_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_dai_NodeIoInfo_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0__bindgen_ty_id_127138_open1_std_string_std_string_close1_dai_NodeIoInfo_dai_NodeObjInfo_IoInfoKey_std_equal_to_open1__bindgen_ty_id_127167_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2__bindgen_ty_id_127196_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_dai_NodeIoInfo_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0__bindgen_ty_id_127167_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0__bindgen_ty_id_127167_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1__bindgen_ty_id_127196_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_dai_NodeIoInfo_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1__bindgen_ty_id_127196_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_dai_NodeIoInfo_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0__bindgen_ty_id_127196_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_dai_NodeIoInfo_close0",
    ][::std::mem::size_of::<__BindgenOpaqueArray<u64, 19usize>>() - 152usize];
    [
        "Align of template specialization: std_pair_open0__bindgen_ty_id_127196_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_dai_NodeIoInfo_close0",
    ][::std::mem::align_of::<__BindgenOpaqueArray<u64, 19usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_Properties_std_default_delete_open1_dai_Properties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_Properties_std_default_delete_open1_dai_Properties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_Properties_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_Properties_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_GlobalProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_GlobalProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::size_of::<std_optional>() - 544usize];
    ["Align of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_NodeConnectionSchema_std_allocator_open1_dai_NodeConnectionSchema_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_NodeConnectionSchema_std_allocator_open1_dai_NodeConnectionSchema_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_NodeConnectionSchema_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_NodeConnectionSchema_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int64_t_dai_NodeObjInfo_std_hash_open1_long_close1_std_equal_to_open1_long_close1_std_allocator_open1_std_pair_open2_const_long_dai_NodeObjInfo_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int64_t_dai_NodeObjInfo_std_hash_open1_long_close1_std_equal_to_open1_long_close1_std_allocator_open1_std_pair_open2_const_long_dai_NodeObjInfo_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_long_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_long_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_long_dai_NodeObjInfo_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_long_dai_NodeObjInfo_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_long_dai_NodeObjInfo_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_long, dai_NodeObjInfo>>() - 176usize];
    ["Align of template specialization: std_pair_open0_const_long_dai_NodeObjInfo_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_long, dai_NodeObjInfo>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Memory_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Memory_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_127730_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_127739_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_127748_open1_ptr_Timestamp_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_127730_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_127739_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_127748_open1_ptr_Timestamp_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_127977_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_127991_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_128005_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_128019_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_128028_open1_ptr_CameraModel_ptr_void_void_close1__bindgen_ty_id_128044_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_128054_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128064_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128074_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128084_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128098_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_127977_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_127991_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_128005_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_128019_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_128028_open1_ptr_CameraModel_ptr_void_void_close1__bindgen_ty_id_128044_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_128054_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128064_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128074_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128084_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_128098_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_RotatedRect_std_allocator_open1_dai_RotatedRect_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_RotatedRect_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_128190_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_128200_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128210_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128220_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128230_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128240_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128250_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128260_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_128190_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_128200_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128210_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128220_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128230_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128240_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128250_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128260_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_128272_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128282_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128292_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128302_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128312_open1_ptr_float_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_128272_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128282_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128292_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128302_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_128312_open1_ptr_float_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_128323_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_128332_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_128342_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_128351_open1_ptr_Specs_ptr_void_void_close1__bindgen_ty_id_128360_open1_ptr_Specs_ptr_void_void_close1__bindgen_ty_id_128369_open1_ptr_CameraSettings_ptr_void_void_close1__bindgen_ty_id_128379_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128389_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128398_open1_ptr_ImgTransformation_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_128323_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_128332_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_128342_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_128351_open1_ptr_Specs_ptr_void_void_close1__bindgen_ty_id_128360_open1_ptr_Specs_ptr_void_void_close1__bindgen_ty_id_128369_open1_ptr_CameraSettings_ptr_void_void_close1__bindgen_ty_id_128379_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128389_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_128398_open1_ptr_ImgTransformation_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_signed_char_dai_BoardConfig_GPIO_std_hash_open1_signed_char_close1_std_equal_to_open1_signed_char_close1_std_allocator_open1_std_pair_open2_const_signed_char_dai_BoardConfig_GPIO_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_signed_char_dai_BoardConfig_GPIO_std_hash_open1_signed_char_close1_std_equal_to_open1_signed_char_close1_std_allocator_open1_std_pair_open2_const_signed_char_dai_BoardConfig_GPIO_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_signed_char_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_signed_char_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_signed_char_dai_BoardConfig_GPIO_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_signed_char_dai_BoardConfig_GPIO_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_const_signed_char_dai_BoardConfig_GPIO_close0",
    ][::std::mem::size_of::<std_pair<::std::os::raw::c_schar, dai_BoardConfig_GPIO>>() - 8usize];
    [
        "Align of template specialization: std_pair_open0_const_signed_char_dai_BoardConfig_GPIO_close0",
    ][::std::mem::align_of::<std_pair<::std::os::raw::c_schar, dai_BoardConfig_GPIO>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_signed_char_dai_BoardConfig_UART_std_hash_open1_signed_char_close1_std_equal_to_open1_signed_char_close1_std_allocator_open1_std_pair_open2_const_signed_char_dai_BoardConfig_UART_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_signed_char_dai_BoardConfig_UART_std_hash_open1_signed_char_close1_std_equal_to_open1_signed_char_close1_std_allocator_open1_std_pair_open2_const_signed_char_dai_BoardConfig_UART_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_signed_char_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_signed_char_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_signed_char_dai_BoardConfig_UART_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_signed_char_dai_BoardConfig_UART_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_const_signed_char_dai_BoardConfig_UART_close0",
    ][::std::mem::size_of::<std_pair<::std::os::raw::c_schar, dai_BoardConfig_UART>>() - 2usize];
    [
        "Align of template specialization: std_pair_open0_const_signed_char_dai_BoardConfig_UART_close0",
    ][::std::mem::align_of::<std_pair<::std::os::raw::c_schar, dai_BoardConfig_UART>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_size_t_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_size_t_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_LogLevel_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_LogLevel_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_CameraSensorType_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_CameraSensorType_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_CameraImageOrientation_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_CameraImageOrientation_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_dai_CameraBoardSocket_dai_BoardConfig_Camera_std_hash_open1_dai_CameraBoardSocket_close1_std_equal_to_open1_dai_CameraBoardSocket_close1_std_allocator_open1_std_pair_open2_dai_CameraBoardSocket_dai_BoardConfig_Camera_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_dai_CameraBoardSocket_dai_BoardConfig_Camera_std_hash_open1_dai_CameraBoardSocket_close1_std_equal_to_open1_dai_CameraBoardSocket_close1_std_allocator_open1_std_pair_open2_dai_CameraBoardSocket_dai_BoardConfig_Camera_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_dai_CameraBoardSocket_dai_BoardConfig_Camera_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_dai_CameraBoardSocket_dai_BoardConfig_Camera_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_dai_CameraBoardSocket_dai_BoardConfig_Camera_close0",
    ][::std::mem::size_of::<std_pair<dai_CameraBoardSocket, dai_BoardConfig_Camera>>() - 56usize];
    [
        "Align of template specialization: std_pair_open0_dai_CameraBoardSocket_dai_BoardConfig_Camera_close0",
    ][::std::mem::align_of::<std_pair<dai_CameraBoardSocket, dai_BoardConfig_Camera>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_BoardConfig_IMU_close0"]
        [::std::mem::size_of::<std_optional>() - 7usize];
    ["Align of template specialization: std_optional_open0_dai_BoardConfig_IMU_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_BoardConfig_UVC_close0"]
        [::std::mem::size_of::<std_optional>() - 56usize];
    ["Align of template specialization: std_optional_open0_dai_BoardConfig_UVC_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_string_dai_Extrinsics__bindgen_ty_id_128538_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_Extrinsics_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_string_dai_Extrinsics__bindgen_ty_id_128538_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_Extrinsics_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_Extrinsics_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_Extrinsics_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Extrinsics_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_Extrinsics>>()
        - 88usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Extrinsics_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_Extrinsics>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_CallstackContext_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CrashDump_CrashReport_ThreadCallstack_std_allocator_open1_dai_CrashDump_CrashReport_ThreadCallstack_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_ThreadCallstack_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CrashDump_CrashReport_std_allocator_open1_dai_CrashDump_CrashReport_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CrashDump_CrashReport_std_allocator_open1_dai_CrashDump_CrashReport_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CrashDump_CrashReport_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_LogLevel_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_LogLevel_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_LogLevel_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_LogLevel_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_Version_close0"]
        [::std::mem::size_of::<std_optional>() - 32usize];
    ["Align of template specialization: std_optional_open0_dai_Version_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CameraFeatures_std_allocator_open1_dai_CameraFeatures_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CameraFeatures_std_allocator_open1_dai_CameraFeatures_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CameraFeatures_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CameraFeatures_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_StereoPair_std_allocator_open1_dai_StereoPair_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_StereoPair_std_allocator_open1_dai_StereoPair_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_StereoPair_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_StereoPair_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_StereoPair_std_allocator_open1_dai_StereoPair_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_StereoPair_std_allocator_open1_dai_StereoPair_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_StereoPair_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_StereoPair_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_CameraBoardSocket_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_Version_close0"]
        [::std::mem::size_of::<std_optional>() - 32usize];
    ["Align of template specialization: std_optional_open0_dai_Version_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_std_function_open1__bindgen_ty_id_129290_close1_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_std_function_open3__bindgen_ty_id_129308_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_std_function_open1__bindgen_ty_id_129290_close1_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_std_function_open3__bindgen_ty_id_129308_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_std_function_open2__bindgen_ty_id_129308_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_std_function_open2__bindgen_ty_id_129308_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_XLinkStream_std_default_delete_open1_dai_XLinkStream_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_XLinkStream_std_default_delete_open1_dai_XLinkStream_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_XLinkStream_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_XLinkStream_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_DeviceGate_std_default_delete_open1_dai_DeviceGate_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_DeviceGate_std_default_delete_open1_dai_DeviceGate_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_DeviceGate_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_DeviceGate_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Pimpl_open0_dai_DeviceBase_Impl_close0"]
        [::std::mem::size_of::<dai_Pimpl>() - 8usize];
    ["Align of template specialization: dai_Pimpl_open0_dai_DeviceBase_Impl_close0"]
        [::std::mem::align_of::<dai_Pimpl>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_PipelineSchema_close0"]
        [::std::mem::size_of::<std_optional>() - 792usize];
    ["Align of template specialization: std_optional_open0_dai_PipelineSchema_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_weak_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::size_of::<std_weak_ptr>() - 16usize];
    ["Align of template specialization: std_weak_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::align_of::<std_weak_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_VideoEncoderProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_VideoEncoderProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_string_dai_Assets_AssetInternal__bindgen_ty_id_129559_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_Assets_AssetInternal_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_string_dai_Assets_AssetInternal__bindgen_ty_id_129559_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_Assets_AssetInternal_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_Assets_AssetInternal_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_Assets_AssetInternal_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Assets_AssetInternal_close0",
    ][::std::mem::size_of::<
        std_pair<std_basic_string<::std::os::raw::c_char>, dai_Assets_AssetInternal>,
    >() - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Assets_AssetInternal_close0",
    ][::std::mem::align_of::<
        std_pair<std_basic_string<::std::os::raw::c_char>, dai_Assets_AssetInternal>,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_pair_open1_std_string_dai_AssetView_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_AssetView_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_pair_open1_std_string_dai_AssetView_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_AssetView_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_std_string_dai_AssetView_close0"]
        [::std::mem::size_of::<std_pair<std_string, dai_AssetView>>() - 48usize];
    ["Align of template specialization: std_pair_open0_std_string_dai_AssetView_close0"]
        [::std::mem::align_of::<std_pair<std_string, dai_AssetView>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_AssetView_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_AssetView_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_AssetView_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_AssetView>>()
        - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_AssetView_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_AssetView>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Assets_AssetInternal__bindgen_ty_id_129652_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_Assets_AssetInternal_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Assets_AssetInternal__bindgen_ty_id_129652_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_Assets_AssetInternal_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_Assets_AssetInternal_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_Assets_AssetInternal_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Assets_AssetInternal_close0",
    ][::std::mem::size_of::<
        std_pair<std_basic_string<::std::os::raw::c_char>, dai_Assets_AssetInternal>,
    >() - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_Assets_AssetInternal_close0",
    ][::std::mem::align_of::<
        std_pair<std_basic_string<::std::os::raw::c_char>, dai_Assets_AssetInternal>,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_shared_ptr_open1_dai_Asset_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_Asset_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_shared_ptr_open1_dai_Asset_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_Asset_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_Asset_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_Asset_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_Asset_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_Asset_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Asset_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_enable_shared_from_this_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_enable_shared_from_this>() - 16usize];
    ["Align of template specialization: std_enable_shared_from_this_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_enable_shared_from_this>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_LockingQueue_open0_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<dai_LockingQueue>() - 232usize];
    [
        "Align of template specialization: dai_LockingQueue_open0_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<dai_LockingQueue>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_dai_MessageQueue_CallbackId__bindgen_ty_id_129924_open1__bindgen_ty_id_129917_close1_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int__bindgen_ty_id_129956_open3__bindgen_ty_id_129938_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_dai_MessageQueue_CallbackId__bindgen_ty_id_129924_open1__bindgen_ty_id_129917_close1_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int__bindgen_ty_id_129956_open3__bindgen_ty_id_129938_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int__bindgen_ty_id_129956_open2__bindgen_ty_id_129938_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int__bindgen_ty_id_129956_open2__bindgen_ty_id_129938_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_const_int__bindgen_ty_id_129956_open1__bindgen_ty_id_129938_close1_close0",
    ][::std::mem::size_of::<__BindgenOpaqueArray<u64, 5usize>>() - 40usize];
    [
        "Align of template specialization: std_pair_open0_const_int__bindgen_ty_id_129956_open1__bindgen_ty_id_129938_close1_close0",
    ][::std::mem::align_of::<__BindgenOpaqueArray<u64, 5usize>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_ADatatype_close1_std_allocator_open1_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_ADatatype_close1_std_allocator_open1_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_ADatatype_close1_std_allocator_open1_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_ADatatype_close1_std_allocator_open1_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_enable_shared_from_this_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_enable_shared_from_this>() - 16usize];
    ["Align of template specialization: std_enable_shared_from_this_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_enable_shared_from_this>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_Output_std_allocator_open1_ptr_Output_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_Output_std_allocator_open1_ptr_Output_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_Output_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_Output_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_Input_std_allocator_open1_ptr_Input_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_Input_std_allocator_open1_ptr_Input_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_Input_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_Input_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_OutputMap_std_allocator_open1_ptr_OutputMap_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_OutputMap_std_allocator_open1_ptr_OutputMap_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_OutputMap_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_OutputMap_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_InputMap_std_allocator_open1_ptr_InputMap_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_InputMap_std_allocator_open1_ptr_InputMap_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_InputMap_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_InputMap_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_shared_ptr_std_allocator_open1_ptr_shared_ptr_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_shared_ptr_std_allocator_open1_ptr_shared_ptr_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_shared_ptr_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_shared_ptr_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_ptr_Output_close0"]
        [::std::mem::size_of::<std_initializer_list<*mut dai_Node_Output>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_ptr_Output_close0"]
        [::std::mem::align_of::<std_initializer_list<*mut dai_Node_Output>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_initializer_list_open0_ptr_Input_close0"]
        [::std::mem::size_of::<std_initializer_list<*mut dai_Node_Input>>() - 16usize];
    ["Align of template specialization: std_initializer_list_open0_ptr_Input_close0"]
        [::std::mem::align_of::<std_initializer_list<*mut dai_Node_Input>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_reference_wrapper<dai_Node>>() - 8usize];
    ["Align of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_reference_wrapper<dai_Node>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_MessageQueue_std_allocator_open1_ptr_MessageQueue_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_MessageQueue_std_allocator_open1_ptr_MessageQueue_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_MessageQueue_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_MessageQueue_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_Output_QueueConnection_std_allocator_open1_dai_Node_Output_QueueConnection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_Output_QueueConnection_std_allocator_open1_dai_Node_Output_QueueConnection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_Output_QueueConnection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_Node_Output_QueueConnection_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_Output_QueueConnection_std_allocator_open1_dai_Node_Output_QueueConnection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_Output_QueueConnection_std_allocator_open1_dai_Node_Output_QueueConnection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_Output_QueueConnection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_Node_Output_QueueConnection_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_pair_open1_std_string_std_string_close1_dai_Node_Output_dai_Node_PairHash_std_equal_to_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2_std_pair_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_dai_Node_Output_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_pair_open1_std_string_std_string_close1_dai_Node_Output_dai_Node_PairHash_std_equal_to_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2_std_pair_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_dai_Node_Output_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::size_of::<std_pair<std_string, std_string>>() - 64usize];
    ["Align of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::align_of::<std_pair<std_string, std_string>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_dai_Node_Output_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_dai_Node_Output_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_dai_Node_Output_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_pair<
                std_basic_string<::std::os::raw::c_char>,
                std_basic_string<::std::os::raw::c_char>,
            >,
            dai_Node_Output,
        >,
    >() - 224usize];
    [
        "Align of template specialization: std_pair_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_dai_Node_Output_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_pair<
                std_basic_string<::std::os::raw::c_char>,
                std_basic_string<::std::os::raw::c_char>,
            >,
            dai_Node_Output,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_reference_wrapper<dai_Node>>() - 8usize];
    ["Align of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_reference_wrapper<dai_Node>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_Output_std_allocator_open1_ptr_Output_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_Output_std_allocator_open1_ptr_Output_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_Output_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_Output_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_reference_wrapper<dai_Node>>() - 8usize];
    ["Align of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_reference_wrapper<dai_Node>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_DatatypeHierarchy_std_allocator_open1_dai_Node_DatatypeHierarchy_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_DatatypeHierarchy_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_pair_open1_std_string_std_string_close1_dai_Node_Input_dai_Node_PairHash_std_equal_to_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2_std_pair_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_dai_Node_Input_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_pair_open1_std_string_std_string_close1_dai_Node_Input_dai_Node_PairHash_std_equal_to_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_std_allocator_open1_std_pair_open2_std_pair_open3_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_std_basic_string_open4_char_std_char_traits_open5_char_close5_std_allocator_open5_char_close5_close4_close3_dai_Node_Input_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::size_of::<std_pair<std_string, std_string>>() - 64usize];
    ["Align of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::align_of::<std_pair<std_string, std_string>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_dai_Node_Input_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_dai_Node_Input_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_dai_Node_Input_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_pair<
                std_basic_string<::std::os::raw::c_char>,
                std_basic_string<::std::os::raw::c_char>,
            >,
            dai_Node_Input,
        >,
    >() - 560usize];
    [
        "Align of template specialization: std_pair_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_dai_Node_Input_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_pair<
                std_basic_string<::std::os::raw::c_char>,
                std_basic_string<::std::os::raw::c_char>,
            >,
            dai_Node_Input,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_reference_wrapper<dai_Node>>() - 8usize];
    ["Align of template specialization: std_reference_wrapper_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_reference_wrapper<dai_Node>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_weak_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_weak_ptr>() - 16usize];
    ["Align of template specialization: std_weak_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_weak_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_weak_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_weak_ptr>() - 16usize];
    ["Align of template specialization: std_weak_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_weak_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_weak_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::size_of::<std_weak_ptr>() - 16usize];
    ["Align of template specialization: std_weak_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::align_of::<std_weak_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::size_of::<std_unordered_set>() - 56usize];
    [
        "Align of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::align_of::<std_unordered_set>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::size_of::<std_unordered_set>() - 56usize];
    [
        "Align of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::align_of::<std_unordered_set>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_Output_std_allocator_open1_ptr_Output_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_Output_std_allocator_open1_ptr_Output_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_Output_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_Output_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_Input_std_allocator_open1_ptr_Input_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_Input_std_allocator_open1_ptr_Input_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_Input_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_Input_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_OutputMap_std_allocator_open1_ptr_OutputMap_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_OutputMap_std_allocator_open1_ptr_OutputMap_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_OutputMap_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_OutputMap_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_ptr_InputMap_std_allocator_open1_ptr_InputMap_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_ptr_InputMap_std_allocator_open1_ptr_InputMap_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_ptr_InputMap_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_ptr_InputMap_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: spimpl_impl_ptr_open0_dai_ThreadedNode_Impl__bindgen_ty_id_130677__bindgen_ty_id_130683_close0",
    ][::std::mem::size_of::<spimpl_impl_ptr>() - 24usize];
    [
        "Align of template specialization: spimpl_impl_ptr_open0_dai_ThreadedNode_Impl__bindgen_ty_id_130677__bindgen_ty_id_130683_close0",
    ][::std::mem::align_of::<spimpl_impl_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_copyable_unique_ptr_open0_dai_Properties_close0"]
        [::std::mem::size_of::<dai_copyable_unique_ptr>() - 8usize];
    ["Align of template specialization: dai_copyable_unique_ptr_open0_dai_Properties_close0"]
        [::std::mem::align_of::<dai_copyable_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_Properties_std_default_delete_open1_dai_Properties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_Properties_std_default_delete_open1_dai_Properties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_Properties_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_Properties_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_Properties_std_default_delete_open1_dai_Properties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_Properties_std_default_delete_open1_dai_Properties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_Properties_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_Properties_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_enable_shared_from_this_open0_dai_PipelineImpl_close0"]
        [::std::mem::size_of::<std_enable_shared_from_this>() - 16usize];
    ["Align of template specialization: std_enable_shared_from_this_open0_dai_PipelineImpl_close0"]
        [::std::mem::align_of::<std_enable_shared_from_this>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_Connection_std_allocator_open1_dai_Node_Connection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_Connection_std_allocator_open1_dai_Node_Connection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_Connection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_Connection_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::size_of::<std_optional>() - 544usize];
    ["Align of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::size_of::<std_optional>() - 544usize];
    ["Align of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_OpenVINO_Version_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_OpenVINO_Version_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_dai_Node_Id_std_unordered_set_open1_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open2_dai_Node_ConnectionInternal_close2_std_allocator_open2_dai_Node_ConnectionInternal_close2_close1_std_hash_open1_long_close1_std_equal_to_open1_long_close1_std_allocator_open1_std_pair_open2_const_long_std_unordered_set_open3_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open4_dai_Node_ConnectionInternal_close4_std_allocator_open4_dai_Node_ConnectionInternal_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_dai_Node_Id_std_unordered_set_open1_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open2_dai_Node_ConnectionInternal_close2_std_allocator_open2_dai_Node_ConnectionInternal_close2_close1_std_hash_open1_long_close1_std_equal_to_open1_long_close1_std_allocator_open1_std_pair_open2_const_long_std_unordered_set_open3_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open4_dai_Node_ConnectionInternal_close4_std_allocator_open4_dai_Node_ConnectionInternal_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::size_of::<std_unordered_set>() - 56usize];
    [
        "Align of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::align_of::<std_unordered_set>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_long_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_long_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_long_std_unordered_set_open2_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open3_dai_Node_ConnectionInternal_close3_std_allocator_open3_dai_Node_ConnectionInternal_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_long_std_unordered_set_open2_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open3_dai_Node_ConnectionInternal_close3_std_allocator_open3_dai_Node_ConnectionInternal_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_const_long_std_unordered_set_open1_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open2_dai_Node_ConnectionInternal_close2_std_allocator_open2_dai_Node_ConnectionInternal_close2_close1_close0",
    ][::std::mem::size_of::<std_pair<::std::os::raw::c_long, std_unordered_set>>() - 64usize];
    [
        "Align of template specialization: std_pair_open0_const_long_std_unordered_set_open1_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open2_dai_Node_ConnectionInternal_close2_std_allocator_open2_dai_Node_ConnectionInternal_close2_close1_close0",
    ][::std::mem::align_of::<std_pair<::std::os::raw::c_long, std_unordered_set>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::size_of::<std_unordered_set>() - 56usize];
    [
        "Align of template specialization: std_unordered_set_open0_dai_Node_ConnectionInternal_dai_Node_ConnectionInternal_Hash_std_equal_to_open1_dai_Node_ConnectionInternal_close1_std_allocator_open1_dai_Node_ConnectionInternal_close1_close0",
    ][::std::mem::align_of::<std_unordered_set>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_ConnectionInternal_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_string_std_string__bindgen_ty_id_130879_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_string_std_string__bindgen_ty_id_130879_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_MessageQueue_close1_std_allocator_open1_std_shared_ptr_open2_dai_MessageQueue_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_MessageQueue_close1_std_allocator_open1_std_shared_ptr_open2_dai_MessageQueue_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_MessageQueue_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_MessageQueue_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_MessageQueue_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_LockingQueue_open0__bindgen_ty_id_130943_open1__bindgen_ty_id_130940_close1_close0",
    ][::std::mem::size_of::<dai_LockingQueue>() - 232usize];
    [
        "Align of template specialization: dai_LockingQueue_open0__bindgen_ty_id_130943_open1__bindgen_ty_id_130940_close1_close0",
    ][::std::mem::align_of::<dai_LockingQueue>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_PipelineImpl_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_shared_ptr_open1_dai_Node_close1_std_allocator_open1_std_shared_ptr_open2_dai_Node_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_shared_ptr_open1_dai_Node_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Node_Connection_std_allocator_open1_dai_Node_Connection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Node_Connection_std_allocator_open1_dai_Node_Connection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Node_Connection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Node_Connection_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::size_of::<std_optional>() - 544usize];
    ["Align of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::size_of::<std_optional>() - 544usize];
    ["Align of template specialization: std_optional_open0_dai_EepromData_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_XLinkConnection_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::size_of::<std_atomic<bool>>() - 1usize];
    ["Align of template specialization: std_atomic_open0_bool__close0"]
        [::std::mem::align_of::<std_atomic<bool>>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_XLinkStream_std_default_delete_open1_dai_XLinkStream_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_XLinkStream_std_default_delete_open1_dai_XLinkStream_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_XLinkStream_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_XLinkStream_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_InputQueue_InputQueueNode_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_InputQueue_InputQueueNode_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_AprilTagProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_AprilTagProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_AprilTag_dai_AprilTagProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_AprilTagProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_AprilTag_dai_AprilTagProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_AprilTagProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_AprilTagConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_AprilTagConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_BenchmarkInProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_BenchmarkInProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_BenchmarkIn_dai_BenchmarkInProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_BenchmarkInProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_BenchmarkIn_dai_BenchmarkInProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_BenchmarkInProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_BenchmarkOutProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_BenchmarkOutProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_BenchmarkOut_dai_BenchmarkOutProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_BenchmarkOutProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_BenchmarkOut_dai_BenchmarkOutProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_BenchmarkOutProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_CapabilityCRTP_open0_dai_Capability_dai_ImgFrameCapability_close0",
    ][::std::mem::size_of::<dai_CapabilityCRTP<dai_Capability>>() - 8usize];
    [
        "Align of template specialization: dai_CapabilityCRTP_open0_dai_Capability_dai_ImgFrameCapability_close0",
    ][::std::mem::align_of::<dai_CapabilityCRTP<dai_Capability>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_CapabilityRange_open0_std_pair_open1_uint32_t_uint32_t_close1_close0",
    ][::std::mem::size_of::<dai_CapabilityRange>() - 40usize];
    [
        "Align of template specialization: dai_CapabilityRange_open0_std_pair_open1_uint32_t_uint32_t_close1_close0",
    ][::std::mem::align_of::<dai_CapabilityRange>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::size_of::<std_pair<u32, u32>>() - 8usize];
    ["Align of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::align_of::<std_pair<u32, u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_CapabilityRange_open0_float_close0"]
        [::std::mem::size_of::<dai_CapabilityRange>() - 40usize];
    ["Align of template specialization: dai_CapabilityRange_open0_float_close0"]
        [::std::mem::align_of::<dai_CapabilityRange>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_CapabilityRange_open0_std_pair_open1_unsigned_int_unsigned_int_close1_close0",
    ][::std::mem::size_of::<dai_CapabilityRange>() - 40usize];
    [
        "Align of template specialization: dai_CapabilityRange_open0_std_pair_open1_unsigned_int_unsigned_int_close1_close0",
    ][::std::mem::align_of::<dai_CapabilityRange>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 8usize];
    ["Align of template specialization: std_pair_open0_unsigned_int_unsigned_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_uint, ::std::os::raw::c_uint>>()
            - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_CapabilityRange_open0_float_close0"]
        [::std::mem::size_of::<dai_CapabilityRange>() - 40usize];
    ["Align of template specialization: dai_CapabilityRange_open0_float_close0"]
        [::std::mem::align_of::<dai_CapabilityRange>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: spimpl_impl_ptr_open0_dai_ImgFrameCapability_Impl__bindgen_ty_id_131838__bindgen_ty_id_131844_close0",
    ][::std::mem::size_of::<spimpl_impl_ptr>() - 24usize];
    [
        "Align of template specialization: spimpl_impl_ptr_open0_dai_ImgFrameCapability_Impl__bindgen_ty_id_131838__bindgen_ty_id_131844_close0",
    ][::std::mem::align_of::<spimpl_impl_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_131861_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_131871_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_131881_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_131861_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_131871_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_131881_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_131893_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131903_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131913_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131923_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131933_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_131893_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131903_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131913_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131923_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_131933_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_131945_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_131955_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_131965_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_131945_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_131955_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_131965_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_131977_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_131987_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_131997_open1_ptr_signed_char_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_131977_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_131987_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_131997_open1_ptr_signed_char_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_pair_open1_std_string_std_string_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_pair_open1_std_string_std_string_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::size_of::<std_pair<std_string, std_string>>() - 64usize];
    ["Align of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::align_of::<std_pair<std_string, std_string>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_pair_open1_std_string_std_string_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_pair_open1_std_string_std_string_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::size_of::<std_pair<std_string, std_string>>() - 64usize];
    ["Align of template specialization: std_pair_open0_std_string_std_string_close0"]
        [::std::mem::align_of::<std_pair<std_string, std_string>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_132168_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_132177_open1_ptr_AutoFocusMode_ptr_void_void_close1__bindgen_ty_id_132187_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132197_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_132207_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132217_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132226_open1_ptr_ManualExposureParams_ptr_void_void_close1__bindgen_ty_id_132235_open1_ptr_RegionParams_ptr_void_void_close1__bindgen_ty_id_132244_open1_ptr_RegionParams_ptr_void_void_close1__bindgen_ty_id_132253_open1_ptr_AutoWhiteBalanceMode_ptr_void_void_close1__bindgen_ty_id_132262_open1_ptr_SceneMode_ptr_void_void_close1__bindgen_ty_id_132271_open1_ptr_AntiBandingMode_ptr_void_void_close1__bindgen_ty_id_132281_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_132291_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_132300_open1_ptr_CaptureIntent_ptr_void_void_close1__bindgen_ty_id_132309_open1_ptr_ControlMode_ptr_void_void_close1__bindgen_ty_id_132318_open1_ptr_EffectMode_ptr_void_void_close1__bindgen_ty_id_132327_open1_ptr_FrameSyncMode_ptr_void_void_close1__bindgen_ty_id_132336_open1_ptr_StrobeConfig_ptr_void_void_close1__bindgen_ty_id_132345_open1_ptr_StrobeTimings_ptr_void_void_close1__bindgen_ty_id_132355_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_132365_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132375_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132385_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132395_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132405_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132415_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132425_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132435_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_132445_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132455_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132465_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_132529_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_132168_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_132177_open1_ptr_AutoFocusMode_ptr_void_void_close1__bindgen_ty_id_132187_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132197_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_132207_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132217_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132226_open1_ptr_ManualExposureParams_ptr_void_void_close1__bindgen_ty_id_132235_open1_ptr_RegionParams_ptr_void_void_close1__bindgen_ty_id_132244_open1_ptr_RegionParams_ptr_void_void_close1__bindgen_ty_id_132253_open1_ptr_AutoWhiteBalanceMode_ptr_void_void_close1__bindgen_ty_id_132262_open1_ptr_SceneMode_ptr_void_void_close1__bindgen_ty_id_132271_open1_ptr_AntiBandingMode_ptr_void_void_close1__bindgen_ty_id_132281_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_132291_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_132300_open1_ptr_CaptureIntent_ptr_void_void_close1__bindgen_ty_id_132309_open1_ptr_ControlMode_ptr_void_void_close1__bindgen_ty_id_132318_open1_ptr_EffectMode_ptr_void_void_close1__bindgen_ty_id_132327_open1_ptr_FrameSyncMode_ptr_void_void_close1__bindgen_ty_id_132336_open1_ptr_StrobeConfig_ptr_void_void_close1__bindgen_ty_id_132345_open1_ptr_StrobeTimings_ptr_void_void_close1__bindgen_ty_id_132355_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_132365_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132375_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132385_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132395_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_132405_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132415_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132425_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132435_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_132445_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132455_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_132465_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_132529_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_CameraProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_CameraProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_ImgFrameCapability_std_allocator_open1_dai_ImgFrameCapability_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_ImgFrameCapability_std_allocator_open1_dai_ImgFrameCapability_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_ImgFrameCapability_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_ImgFrameCapability_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Camera_dai_CameraProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_CameraProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Camera_dai_CameraProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_CameraProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::size_of::<std_pair<u32, u32>>() - 8usize];
    ["Align of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::align_of::<std_pair<u32, u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_ImgFrame_Type_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_pair_open1_uint32_t_uint32_t_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 12usize];
    [
        "Align of template specialization: std_optional_open0_std_pair_open1_uint32_t_uint32_t_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::size_of::<std_pair<u32, u32>>() - 8usize];
    ["Align of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::align_of::<std_pair<u32, u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: spimpl_impl_ptr_open0_dai_node_Camera_Impl__bindgen_ty_id_132599__bindgen_ty_id_132605_close0",
    ][::std::mem::size_of::<spimpl_impl_ptr>() - 24usize];
    [
        "Align of template specialization: spimpl_impl_ptr_open0_dai_node_Camera_Impl__bindgen_ty_id_132599__bindgen_ty_id_132605_close0",
    ][::std::mem::align_of::<spimpl_impl_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_CameraProperties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_CameraProperties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_default_delete_open0_dai_CameraProperties_close0"]
        [::std::mem::size_of::<std_default_delete>() - 1usize];
    ["Align of template specialization: std_default_delete_open0_dai_CameraProperties_close0"]
        [::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ColorCameraProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ColorCameraProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ColorCamera_dai_ColorCameraProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ColorCameraProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ColorCamera_dai_ColorCameraProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ColorCameraProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_DeviceNodeGroupProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_DeviceNodeGroupProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Node_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std___basic_file_open0_char_close0"]
        [::std::mem::size_of::<std___basic_file>() - 16usize];
    ["Align of template specialization: std___basic_file_open0_char_close0"]
        [::std::mem::align_of::<std___basic_file>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_vector_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_std_allocator_open3_std_vector_open4_double_std_allocator_open5_double_close5_close4_close3_close2_std_allocator_open2_std_vector_open3_std_vector_open4_double_std_allocator_open5_double_close5_close4_std_allocator_open4_std_vector_open5_double_std_allocator_open6_double_close6_close5_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_vector_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_std_allocator_open3_std_vector_open4_double_std_allocator_open5_double_close5_close4_close3_close2_std_allocator_open2_std_vector_open3_std_vector_open4_double_std_allocator_open5_double_close5_close4_std_allocator_open4_std_vector_open5_double_std_allocator_open6_double_close6_close5_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_std_allocator_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_close2_close1_std_allocator_open1_std_vector_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_std_allocator_open3_std_vector_open4_double_std_allocator_open5_double_close5_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_std_allocator_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_close2_close1_std_allocator_open1_std_vector_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_std_allocator_open3_std_vector_open4_double_std_allocator_open5_double_close5_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_std_allocator_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_std_allocator_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_std_allocator_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_std_allocator_open2_std_vector_open3_double_std_allocator_open4_double_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_std_allocator_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_std_allocator_open1_std_vector_open2_double_std_allocator_open3_double_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_double_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_double_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_double_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_double_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::size_of::<std_optional>() - 16usize];
    ["Align of template specialization: std_optional_open0_int64_t_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_double_std_allocator_open2_double_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_double_std_allocator_open1_double_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_double_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_int64_t_std_allocator_open1_long_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int64_t_std_allocator_open1_long_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_long_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_long_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_nn_archive_v1_DataType_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_dai_nn_archive_v1_DataType_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_int64_t_std_allocator_open2_long_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_int64_t_std_allocator_open2_long_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_int64_t_std_allocator_open1_long_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int64_t_std_allocator_open1_long_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_long_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_long_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_dai_nn_archive_v1_Head_std_allocator_open2_dai_nn_archive_v1_Head_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_dai_nn_archive_v1_Head_std_allocator_open2_dai_nn_archive_v1_Head_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_nn_archive_v1_Head_std_allocator_open1_dai_nn_archive_v1_Head_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_nn_archive_v1_Head_std_allocator_open1_dai_nn_archive_v1_Head_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_nn_archive_v1_Head_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_nn_archive_v1_Head_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_nn_archive_v1_Input_std_allocator_open1_dai_nn_archive_v1_Input_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_nn_archive_v1_Input_std_allocator_open1_dai_nn_archive_v1_Input_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_nn_archive_v1_Input_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_nn_archive_v1_Input_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_nn_archive_v1_Output_std_allocator_open1_dai_nn_archive_v1_Output_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_nn_archive_v1_Output_std_allocator_open1_dai_nn_archive_v1_Output_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_nn_archive_v1_Output_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_nn_archive_v1_Output_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_variant_open0_dai_nn_archive_v1_Config_close0"]
        [::std::mem::size_of::<std_variant>() - 200usize];
    ["Align of template specialization: std_variant_open0_dai_nn_archive_v1_Config_close0"]
        [::std::mem::align_of::<std_variant>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::size_of::<std_optional>() - 40usize];
    ["Align of template specialization: std_optional_open0_std_string_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_pair_open1_uint32_t_uint32_t_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 12usize];
    [
        "Align of template specialization: std_optional_open0_std_pair_open1_uint32_t_uint32_t_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::size_of::<std_pair<u32, u32>>() - 8usize];
    ["Align of template specialization: std_pair_open0_uint32_t_uint32_t_close0"]
        [::std::mem::align_of::<std_pair<u32, u32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_uint32_t_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_uint8_t_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_NNArchiveVersionedConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_NNArchiveVersionedConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_OpenVINO_Blob_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_OpenVINO_Blob_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_OpenVINO_SuperBlob_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_OpenVINO_SuperBlob_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_vector_open3_int_std_allocator_open4_int_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_vector_open3_int_std_allocator_open4_int_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_vector>>()
        - 56usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_vector>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_std_allocator_open1_std_vector_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_std_allocator_open3_std_vector_open4_float_std_allocator_open5_float_close5_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_std_allocator_open1_std_vector_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_std_allocator_open3_std_vector_open4_float_std_allocator_open5_float_close5_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_DetectionParserProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_DetectionParserProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_std_string_dai_TensorInfo__bindgen_ty_id_133556_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_TensorInfo_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_std_string_dai_TensorInfo__bindgen_ty_id_133556_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_equal_to_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_dai_TensorInfo_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_equal_to>() - 1usize];
    [
        "Align of template specialization: std_equal_to_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_TensorInfo_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_dai_TensorInfo_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_TensorInfo_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_TensorInfo>>()
        - 144usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_dai_TensorInfo_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, dai_TensorInfo>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_DetectionParser_dai_DetectionParserProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_DetectionParserProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_DetectionParser_dai_DetectionParserProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_DetectionParserProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_DetectionParser_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_DetectionParser_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_vector_open3_int_std_allocator_open4_int_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_vector_open3_int_std_allocator_open4_int_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_vector>>()
        - 56usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_vector>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_std_allocator_open1_std_vector_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_std_allocator_open3_std_vector_open4_float_std_allocator_open5_float_close5_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_std_allocator_open1_std_vector_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_std_allocator_open3_std_vector_open4_float_std_allocator_open5_float_close5_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_std_allocator_open2_std_vector_open3_float_std_allocator_open4_float_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_std_allocator_open1_std_vector_open2_float_std_allocator_open3_float_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_float_std_allocator_open2_float_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_vector_open3_int_std_allocator_open4_int_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_vector_open3_int_std_allocator_open4_int_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_vector>>()
        - 56usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_vector>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_NNArchive_close0"]
        [::std::mem::size_of::<std_optional>() - 136usize];
    ["Align of template specialization: std_optional_open0_dai_NNArchive_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_NNArchiveVersionedConfig_close0"]
        [::std::mem::size_of::<std_optional>() - 216usize];
    ["Align of template specialization: std_optional_open0_dai_NNArchiveVersionedConfig_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_NeuralNetworkProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_NeuralNetworkProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_NeuralNetwork_dai_NeuralNetworkProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_NeuralNetworkProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_NeuralNetwork_dai_NeuralNetworkProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_NeuralNetworkProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_NNArchive_close0"]
        [::std::mem::size_of::<std_optional>() - 136usize];
    ["Align of template specialization: std_optional_open0_dai_NNArchive_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_DetectionNetwork_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_DetectionParser_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_DetectionParser_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134237_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_134265_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134237_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_134265_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_std_allocator_open1_std_vector_open2_int_std_allocator_open3_int_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_vector_open1_int_std_allocator_open2_int_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134330_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_134339_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_134348_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_134357_open1_ptr_EdgeDetectorConfigData_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134330_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_134339_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_134348_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_134357_open1_ptr_EdgeDetectorConfigData_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_EdgeDetectorProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_EdgeDetectorProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_EdgeDetector_dai_EdgeDetectorProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_EdgeDetectorProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_EdgeDetector_dai_EdgeDetectorProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_EdgeDetectorProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_EdgeDetectorConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_EdgeDetectorConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134404_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134414_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134424_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134434_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134444_open1_ptr_float_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134404_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134414_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134424_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134434_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134444_open1_ptr_float_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134455_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_134465_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134475_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134485_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134494_open1_ptr_Thresholds_ptr_void_void_close1__bindgen_ty_id_134504_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134514_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134455_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_134465_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134475_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134485_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134494_open1_ptr_Thresholds_ptr_void_void_close1__bindgen_ty_id_134504_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134514_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134534_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134544_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134554_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134564_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134574_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134534_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134544_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134554_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_134564_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134574_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134586_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134595_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_134604_open1_ptr_OpticalFlow_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134586_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134595_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_134604_open1_ptr_OpticalFlow_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134616_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134626_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134636_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134646_open1_ptr_float_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134616_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134626_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134636_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134646_open1_ptr_float_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134690_open1_ptr_CornerDetector_ptr_void_void_close1__bindgen_ty_id_134699_open1_ptr_MotionEstimator_ptr_void_void_close1__bindgen_ty_id_134708_open1_ptr_FeatureMaintainer_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134690_open1_ptr_CornerDetector_ptr_void_void_close1__bindgen_ty_id_134699_open1_ptr_MotionEstimator_ptr_void_void_close1__bindgen_ty_id_134708_open1_ptr_FeatureMaintainer_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_FeatureTrackerProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_FeatureTrackerProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_FeatureTracker_dai_FeatureTrackerProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_FeatureTrackerProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_FeatureTracker_dai_FeatureTrackerProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_FeatureTrackerProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_FeatureTrackerConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_FeatureTrackerConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_IMUProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_IMUProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_IMUSensorConfig_std_allocator_open1_dai_IMUSensorConfig_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_IMUSensorConfig_std_allocator_open1_dai_IMUSensorConfig_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_IMUSensorConfig_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_IMUSensorConfig_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_IMU_dai_IMUProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_IMUProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_IMU_dai_IMUProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_IMUProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_IMUSensorConfig_std_allocator_open1_dai_IMUSensorConfig_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_IMUSensorConfig_std_allocator_open1_dai_IMUSensorConfig_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_IMUSensorConfig_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_IMUSensorConfig_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134818_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134828_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134838_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134818_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134828_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134838_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134850_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134860_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134870_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134880_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134890_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134850_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134860_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134870_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134880_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134890_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134904_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134914_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134924_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134933_open1_ptr_Mode_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134904_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134914_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_134924_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_134933_open1_ptr_Mode_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134944_open1_ptr_Direction_ptr_void_void_close1__bindgen_ty_id_134954_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134944_open1_ptr_Direction_ptr_void_void_close1__bindgen_ty_id_134954_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134976_open1_ptr_array_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134976_open1_ptr_array_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_134998_open1_ptr_array_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_134998_open1_ptr_array_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135023_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_135034_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_135044_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135023_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_135034_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_135044_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135057_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_135067_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_135077_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135087_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135057_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_135067_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_135077_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135087_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_variant_open0_dai_Translate_dai_Rotate_dai_Resize_dai_Flip_dai_Affine_dai_Perspective_dai_FourPoints_dai_Crop_close0",
    ][::std::mem::size_of::<std_variant>() - 120usize];
    [
        "Align of template specialization: std_variant_open0_dai_Translate_dai_Rotate_dai_Resize_dai_Flip_dai_Affine_dai_Perspective_dai_FourPoints_dai_Crop_close0",
    ][::std::mem::align_of::<std_variant>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135117_open1_ptr_variant_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135117_open1_ptr_variant_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_variant_open0_dai_Translate_dai_Rotate_dai_Resize_dai_Flip_dai_Affine_dai_Perspective_dai_FourPoints_dai_Crop_close0",
    ][::std::mem::size_of::<std_variant>() - 120usize];
    [
        "Align of template specialization: std_variant_open0_dai_Translate_dai_Rotate_dai_Resize_dai_Flip_dai_Affine_dai_Perspective_dai_FourPoints_dai_Crop_close0",
    ][::std::mem::align_of::<std_variant>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_ManipOp_std_allocator_open1_dai_ManipOp_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_ManipOp_std_allocator_open1_dai_ManipOp_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_ManipOp_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_ManipOp_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_ImageManipOpsBase_open0_dai_ImageManipConfig_Container_close0",
    ][::std::mem::size_of::<dai_ImageManipOpsBase<dai_ImageManipConfig_Container>>() - 56usize];
    [
        "Align of template specialization: dai_ImageManipOpsBase_open0_dai_ImageManipConfig_Container_close0",
    ][::std::mem::align_of::<dai_ImageManipOpsBase<dai_ImageManipConfig_Container>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135201_open1_ptr_ImageManipOpsBase_ptr_void_void_close1__bindgen_ty_id_135210_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_135220_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135230_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135201_open1_ptr_ImageManipOpsBase_ptr_void_void_close1__bindgen_ty_id_135210_open1_ptr_Type_ptr_void_void_close1__bindgen_ty_id_135220_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135230_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_ImageManipOpsBase_open0_std_vector_open1_dai_ManipOp_std_allocator_open2_dai_ManipOp_close2_close1_close0",
    ][::std::mem::size_of::<dai_ImageManipOpsBase<std_vector>>() - 56usize];
    [
        "Align of template specialization: dai_ImageManipOpsBase_open0_std_vector_open1_dai_ManipOp_std_allocator_open2_dai_ManipOp_close2_close1_close0",
    ][::std::mem::align_of::<dai_ImageManipOpsBase<std_vector>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_ManipOp_std_allocator_open1_dai_ManipOp_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_ManipOp_std_allocator_open1_dai_ManipOp_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_ManipOp_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_ManipOp_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ImageManipProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ImageManipProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ImageManip_dai_ImageManipProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ImageManipProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ImageManip_dai_ImageManipProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ImageManipProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_ImageManip_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_ImageManip_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ImageManipConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ImageManipConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_MessageDemuxProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_MessageDemuxProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_MessageDemux_dai_MessageDemuxProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_MessageDemuxProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_MessageDemux_dai_MessageDemuxProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_MessageDemuxProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_MonoCameraProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_MonoCameraProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_MonoCamera_dai_MonoCameraProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_MonoCameraProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_MonoCamera_dai_MonoCameraProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_MonoCameraProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_FrameEvent_std_allocator_open1_dai_FrameEvent_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_FrameEvent_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_ImgDetection_std_allocator_open1_dai_ImgDetection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_ImgDetection_std_allocator_open1_dai_ImgDetection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_ImgDetection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_ImgDetection_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::size_of::<std_optional>() - 304usize];
    ["Align of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135395_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_135404_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135413_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135427_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_135438_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135395_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_135404_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135413_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135427_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_135438_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_ImgDetection_std_allocator_open1_dai_ImgDetection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_ImgDetection_std_allocator_open1_dai_ImgDetection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_ImgDetection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_ImgDetection_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::size_of::<std_optional>() - 304usize];
    ["Align of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135455_open1_ptr_Rect_ptr_void_void_close1__bindgen_ty_id_135465_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135475_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135485_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135494_open1_ptr_TrackingStatus_ptr_void_void_close1__bindgen_ty_id_135503_open1_ptr_ImgDetection_ptr_void_void_close1__bindgen_ty_id_135512_open1_ptr_Point3f_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135455_open1_ptr_Rect_ptr_void_void_close1__bindgen_ty_id_135465_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135475_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135485_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135494_open1_ptr_TrackingStatus_ptr_void_void_close1__bindgen_ty_id_135503_open1_ptr_ImgDetection_ptr_void_void_close1__bindgen_ty_id_135512_open1_ptr_Point3f_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Tracklet_std_allocator_open1_dai_Tracklet_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Tracklet_std_allocator_open1_dai_Tracklet_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Tracklet_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Tracklet_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135545_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_135554_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135563_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135573_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135545_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_135554_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135563_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135573_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_Tracklet_std_allocator_open1_dai_Tracklet_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_Tracklet_std_allocator_open1_dai_Tracklet_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_Tracklet_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_Tracklet_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ObjectTrackerProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ObjectTrackerProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ObjectTracker_dai_ObjectTrackerProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ObjectTrackerProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ObjectTracker_dai_ObjectTrackerProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ObjectTrackerProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_int_std_allocator_open1_unsigned_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135665_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_135674_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135683_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135693_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135707_open1_ptr_array_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135665_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_135674_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135683_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_135693_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135707_open1_ptr_array_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_PointCloudProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_PointCloudProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_PointCloud_dai_PointCloudProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_PointCloudProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_PointCloud_dai_PointCloudProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_PointCloudProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_PointCloudConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_PointCloudConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SPIInProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SPIInProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SPIIn_dai_SPIInProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SPIInProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SPIIn_dai_SPIInProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SPIInProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SPIOutProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SPIOutProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SPIOut_dai_SPIOutProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SPIOutProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SPIOut_dai_SPIOutProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SPIOutProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ScriptProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ScriptProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Script_dai_ScriptProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ScriptProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Script_dai_ScriptProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ScriptProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135837_open1_ptr_unsigned_short_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135837_open1_ptr_unsigned_short_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ImageAlignProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ImageAlignProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ImageAlign_dai_ImageAlignProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ImageAlignProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ImageAlign_dai_ImageAlignProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ImageAlignProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ImageAlignConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ImageAlignConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_135903_open1_ptr_DepthAlign_ptr_void_void_close1__bindgen_ty_id_135912_open1_ptr_DepthUnit_ptr_void_void_close1__bindgen_ty_id_135922_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_135932_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135942_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135952_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135962_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135972_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135982_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135992_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136004_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_136014_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_135903_open1_ptr_DepthAlign_ptr_void_void_close1__bindgen_ty_id_135912_open1_ptr_DepthUnit_ptr_void_void_close1__bindgen_ty_id_135922_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_135932_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135942_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135952_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135962_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_135972_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135982_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_135992_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136004_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_136014_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136026_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136036_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136046_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136056_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136066_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136076_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136026_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136036_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136046_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136056_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136066_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136076_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136099_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136109_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136119_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_136129_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136139_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136099_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136109_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136119_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_136129_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136139_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136153_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136162_open1_ptr_PersistencyMode_ptr_void_void_close1__bindgen_ty_id_136172_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_136182_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136153_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136162_open1_ptr_PersistencyMode_ptr_void_void_close1__bindgen_ty_id_136172_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_136182_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136198_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136208_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136198_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136208_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136224_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136234_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136224_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_136234_open1_ptr_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136250_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136260_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_136270_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136250_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136260_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_136270_open1_ptr_unsigned_int_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136284_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_136293_open1_ptr_DecimationMode_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136284_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_136293_open1_ptr_DecimationMode_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136305_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136315_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136325_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136335_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136345_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136305_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136315_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136325_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136335_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136345_open1_ptr_bool_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136357_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136367_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136357_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136367_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136380_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_136389_open1_ptr_MedianFilter_ptr_void_void_close1__bindgen_ty_id_136399_open1_ptr_short_ptr_void_void_close1__bindgen_ty_id_136408_open1_ptr_SpatialFilter_ptr_void_void_close1__bindgen_ty_id_136417_open1_ptr_TemporalFilter_ptr_void_void_close1__bindgen_ty_id_136426_open1_ptr_ThresholdFilter_ptr_void_void_close1__bindgen_ty_id_136435_open1_ptr_BrightnessFilter_ptr_void_void_close1__bindgen_ty_id_136444_open1_ptr_SpeckleFilter_ptr_void_void_close1__bindgen_ty_id_136453_open1_ptr_DecimationFilter_ptr_void_void_close1__bindgen_ty_id_136462_open1_ptr_HoleFilling_ptr_void_void_close1__bindgen_ty_id_136471_open1_ptr_AdaptiveMedianFilter_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136380_open1_ptr_array_ptr_void_void_close1__bindgen_ty_id_136389_open1_ptr_MedianFilter_ptr_void_void_close1__bindgen_ty_id_136399_open1_ptr_short_ptr_void_void_close1__bindgen_ty_id_136408_open1_ptr_SpatialFilter_ptr_void_void_close1__bindgen_ty_id_136417_open1_ptr_TemporalFilter_ptr_void_void_close1__bindgen_ty_id_136426_open1_ptr_ThresholdFilter_ptr_void_void_close1__bindgen_ty_id_136435_open1_ptr_BrightnessFilter_ptr_void_void_close1__bindgen_ty_id_136444_open1_ptr_SpeckleFilter_ptr_void_void_close1__bindgen_ty_id_136453_open1_ptr_DecimationFilter_ptr_void_void_close1__bindgen_ty_id_136462_open1_ptr_HoleFilling_ptr_void_void_close1__bindgen_ty_id_136471_open1_ptr_AdaptiveMedianFilter_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136482_open1_ptr_KernelSize_ptr_void_void_close1__bindgen_ty_id_136492_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_136502_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136512_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_136522_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_136532_open1_ptr_signed_char_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136482_open1_ptr_KernelSize_ptr_void_void_close1__bindgen_ty_id_136492_open1_ptr_unsigned_long_ptr_void_void_close1__bindgen_ty_id_136502_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136512_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_136522_open1_ptr_signed_char_ptr_void_void_close1__bindgen_ty_id_136532_open1_ptr_signed_char_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136544_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136554_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136564_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136544_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136554_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136564_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136575_open1_ptr_DisparityWidth_ptr_void_void_close1__bindgen_ty_id_136585_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136595_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136605_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136615_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136624_open1_ptr_LinearEquationParameters_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136575_open1_ptr_DisparityWidth_ptr_void_void_close1__bindgen_ty_id_136585_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136595_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136605_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136615_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136624_open1_ptr_LinearEquationParameters_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136636_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136646_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136656_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136666_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136676_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136686_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136636_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136646_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136656_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136666_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136676_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136686_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136698_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136708_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136718_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136728_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136698_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_136708_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136718_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136728_open1_ptr_unsigned_char_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136740_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136750_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136760_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136770_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136780_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136789_open1_ptr_P1Config_ptr_void_void_close1__bindgen_ty_id_136798_open1_ptr_P2Config_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136740_open1_ptr_unsigned_char_ptr_void_void_close1__bindgen_ty_id_136750_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136760_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136770_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136780_open1_ptr_unsigned_short_ptr_void_void_close1__bindgen_ty_id_136789_open1_ptr_P1Config_ptr_void_void_close1__bindgen_ty_id_136798_open1_ptr_P2Config_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_136846_open1_ptr_AlgorithmControl_ptr_void_void_close1__bindgen_ty_id_136855_open1_ptr_PostProcessing_ptr_void_void_close1__bindgen_ty_id_136864_open1_ptr_CensusTransform_ptr_void_void_close1__bindgen_ty_id_136873_open1_ptr_CostMatching_ptr_void_void_close1__bindgen_ty_id_136882_open1_ptr_CostAggregation_ptr_void_void_close1__bindgen_ty_id_136891_open1_ptr_ConfidenceMetrics_ptr_void_void_close1__bindgen_ty_id_136900_open1_ptr_ProcessorType_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_136846_open1_ptr_AlgorithmControl_ptr_void_void_close1__bindgen_ty_id_136855_open1_ptr_PostProcessing_ptr_void_void_close1__bindgen_ty_id_136864_open1_ptr_CensusTransform_ptr_void_void_close1__bindgen_ty_id_136873_open1_ptr_CostMatching_ptr_void_void_close1__bindgen_ty_id_136882_open1_ptr_CostAggregation_ptr_void_void_close1__bindgen_ty_id_136891_open1_ptr_ConfidenceMetrics_ptr_void_void_close1__bindgen_ty_id_136900_open1_ptr_ProcessorType_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_StereoDepthProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_StereoDepthProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_int_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_int_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_StereoDepth_dai_StereoDepthProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_StereoDepthProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_StereoDepth_dai_StereoDepthProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_StereoDepthProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_StereoDepthConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_StereoDepthConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_137162_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_137171_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_137180_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_137194_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_137162_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_137171_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_137180_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_137194_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocationCalculatorConfigData_std_allocator_open1_dai_SpatialLocationCalculatorConfigData_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_dai_SpatialLocationCalculatorConfigData_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SpatialDetectionNetwork_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::size_of::<
        dai_DeviceNodeCRTP<dai_DeviceNode, dai_SpatialDetectionNetworkProperties>,
    >() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SpatialDetectionNetwork_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::align_of::<
        dai_DeviceNodeCRTP<dai_DeviceNode, dai_SpatialDetectionNetworkProperties>,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_SpatialDetectionNetworkProperties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_SpatialDetectionNetworkProperties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_default_delete_open0_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::size_of::<std_default_delete>() - 1usize];
    [
        "Align of template specialization: std_default_delete_open0_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_SpatialDetectionNetworkProperties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_SpatialDetectionNetworkProperties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_default_delete_open0_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::size_of::<std_default_delete>() - 1usize];
    [
        "Align of template specialization: std_default_delete_open0_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_Device_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_SpatialDetectionNetworkProperties_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_Properties_std_default_delete_open1_dai_SpatialDetectionNetworkProperties_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_default_delete_open0_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::size_of::<std_default_delete>() - 1usize];
    [
        "Align of template specialization: std_default_delete_open0_dai_SpatialDetectionNetworkProperties_close0",
    ][::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_float_close0"]
        [::std::mem::size_of::<std_optional>() - 8usize];
    ["Align of template specialization: std_optional_open0_float_close0"]
        [::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_NeuralNetwork_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_DetectionParser_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_DetectionParser_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unique_ptr_open0_dai_Subnode_open1_dai_node_ImageAlign_close1_std_default_delete_open1_dai_Subnode_open2_dai_node_ImageAlign_close2_close1_close0",
    ][::std::mem::size_of::<std_unique_ptr>() - 8usize];
    [
        "Align of template specialization: std_unique_ptr_open0_dai_Subnode_open1_dai_node_ImageAlign_close1_std_default_delete_open1_dai_Subnode_open2_dai_node_ImageAlign_close2_close1_close0",
    ][::std::mem::align_of::<std_unique_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_ImageAlign_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_ImageAlign_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_default_delete_open0_dai_Subnode_open1_dai_node_ImageAlign_close1_close0",
    ][::std::mem::size_of::<std_default_delete>() - 1usize];
    [
        "Align of template specialization: std_default_delete_open0_dai_Subnode_open1_dai_node_ImageAlign_close1_close0",
    ][::std::mem::align_of::<std_default_delete>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_ImageAlign_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_ImageAlign_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_string_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 64usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<
        std_pair<
            std_basic_string<::std::os::raw::c_char>,
            std_basic_string<::std::os::raw::c_char>,
        >,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_optional>() - 32usize];
    [
        "Align of template specialization: std_optional_open0_std_vector_open1_std_string_std_allocator_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_StereoDepth_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_node_Camera_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SpatialLocationCalculatorProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SpatialLocationCalculatorProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SpatialLocationCalculator_dai_SpatialLocationCalculatorProperties_close0",
    ][::std::mem::size_of::<
        dai_DeviceNodeCRTP<dai_DeviceNode, dai_SpatialLocationCalculatorProperties>,
    >() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SpatialLocationCalculator_dai_SpatialLocationCalculatorProperties_close0",
    ][::std::mem::align_of::<
        dai_DeviceNodeCRTP<dai_DeviceNode, dai_SpatialLocationCalculatorProperties>,
    >() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_shared_ptr_open0_dai_SpatialLocationCalculatorConfig_close0",
    ][::std::mem::size_of::<std_shared_ptr>() - 16usize];
    [
        "Align of template specialization: std_shared_ptr_open0_dai_SpatialLocationCalculatorConfig_close0",
    ][::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SyncProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SyncProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Sync_dai_SyncProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SyncProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Sync_dai_SyncProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SyncProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SystemLoggerProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_SystemLoggerProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SystemLogger_dai_SystemLoggerProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SystemLoggerProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_SystemLogger_dai_SystemLoggerProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_SystemLoggerProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_dai_ThermalConfig_ThermalGainMode_close0",
    ][::std::mem::size_of::<std_optional>() - 8usize];
    [
        "Align of template specialization: std_optional_open0_dai_ThermalConfig_ThermalGainMode_close0",
    ][::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_137480_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137492_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137504_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137516_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137528_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137539_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_137480_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137492_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137504_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137516_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137528_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137539_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_dai_ThermalConfig_ThermalGainMode_close0",
    ][::std::mem::size_of::<std_optional>() - 8usize];
    [
        "Align of template specialization: std_optional_open0_dai_ThermalConfig_ThermalGainMode_close0",
    ][::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_uint16_t_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_137583_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137595_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137607_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137619_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137631_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137643_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137655_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137667_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137679_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_137583_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137595_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137607_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137619_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137631_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137643_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137655_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137667_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137679_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_optional>() - 4usize];
    ["Align of template specialization: std_optional_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_optional>() - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_uint8_t_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_dai_ThermalConfig_ThermalImageOrientation_close0",
    ][::std::mem::size_of::<std_optional>() - 8usize];
    [
        "Align of template specialization: std_optional_open0_dai_ThermalConfig_ThermalImageOrientation_close0",
    ][::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_137711_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137723_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137735_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137747_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137759_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137770_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_137711_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137723_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137735_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137747_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137759_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137770_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_optional_open0_dai_ThermalConfig_ThermalImageOrientation_close0",
    ][::std::mem::size_of::<std_optional>() - 8usize];
    [
        "Align of template specialization: std_optional_open0_dai_ThermalConfig_ThermalImageOrientation_close0",
    ][::std::mem::align_of::<std_optional>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_137792_open1_ptr_ThermalAmbientParams_ptr_void_void_close1__bindgen_ty_id_137801_open1_ptr_ThermalFFCParams_ptr_void_void_close1__bindgen_ty_id_137810_open1_ptr_ThermalImageParams_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_137792_open1_ptr_ThermalAmbientParams_ptr_void_void_close1__bindgen_ty_id_137801_open1_ptr_ThermalFFCParams_ptr_void_void_close1__bindgen_ty_id_137810_open1_ptr_ThermalImageParams_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ThermalProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ThermalProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Thermal_dai_ThermalProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ThermalProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Thermal_dai_ThermalProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ThermalProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ThermalConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ThermalConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_137886_open1_ptr_MedianFilter_ptr_void_void_close1__bindgen_ty_id_137896_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_137906_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_137916_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_137928_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137940_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137952_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137964_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137976_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137986_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_137996_open1_ptr_unsigned_short_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_137886_open1_ptr_MedianFilter_ptr_void_void_close1__bindgen_ty_id_137896_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_137906_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_137916_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_137928_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137940_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137952_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137964_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137976_open1_ptr_optional_ptr_void_void_close1__bindgen_ty_id_137986_open1_ptr_int_ptr_void_void_close1__bindgen_ty_id_137996_open1_ptr_unsigned_short_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ToFProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_ToFProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ToF_dai_ToFProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ToFProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_ToF_dai_ToFProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_ToFProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ToFConfig_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ToFConfig_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_UVCProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_UVCProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_UVC_dai_UVCProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_UVCProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_UVC_dai_UVCProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_UVCProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::size_of::<std_unordered_map>() - 56usize];
    [
        "Align of template specialization: std_unordered_map_open0_int_int_std_hash_open1_int_close1_std_equal_to_open1_int_close1_std_allocator_open1_std_pair_open2_const_int_int_close2_close1_close0",
    ][::std::mem::align_of::<std_unordered_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_int_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_const_int_int_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_const_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_VideoEncoder_dai_VideoEncoderProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_VideoEncoderProperties>>()
        - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_VideoEncoder_dai_VideoEncoderProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_VideoEncoderProperties>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_WarpProperties_close0",
    ][::std::mem::size_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
    [
        "Align of template specialization: dai_PropertiesSerializable_open0_dai_Properties_dai_WarpProperties_close0",
    ][::std::mem::align_of::<dai_PropertiesSerializable<dai_Properties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Warp_dai_WarpProperties_close0",
    ][::std::mem::size_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_WarpProperties>>() - 448usize];
    [
        "Align of template specialization: dai_DeviceNodeCRTP_open0_dai_DeviceNode_dai_node_Warp_dai_WarpProperties_close0",
    ][::std::mem::align_of::<dai_DeviceNodeCRTP<dai_DeviceNode, dai_WarpProperties>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_float_float_close0"]
        [::std::mem::size_of::<std_pair<f32, f32>>() - 8usize];
    ["Align of template specialization: std_pair_open0_float_float_close0"]
        [::std::mem::align_of::<std_pair<f32, f32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_float_float_close0"]
        [::std::mem::size_of::<std_pair<f32, f32>>() - 8usize];
    ["Align of template specialization: std_pair_open0_float_float_close0"]
        [::std::mem::align_of::<std_pair<f32, f32>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0"]
        [::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_int_std_allocator_open1_int_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_int_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_138440_open1_ptr_map_ptr_void_void_close1__bindgen_ty_id_138449_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138458_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138468_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_138440_open1_ptr_map_ptr_void_void_close1__bindgen_ty_id_138449_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138458_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138468_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_138557_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_138567_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_138577_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138587_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138597_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138607_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138617_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138627_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138637_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_138647_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_138656_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138665_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138675_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_138557_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_138567_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_138577_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138587_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138597_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138607_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138617_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138627_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_138637_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_138647_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_138656_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138665_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138675_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_string_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_string_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_138799_open1_ptr_map_ptr_void_void_close1__bindgen_ty_id_138808_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138817_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138827_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_138799_open1_ptr_map_ptr_void_void_close1__bindgen_ty_id_138808_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138817_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138827_open1_ptr_long_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_map_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_map>() - 48usize];
    [
        "Align of template specialization: std_map_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_std_less_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_std_allocator_open1_std_pair_open2_std_basic_string_open3_char_std_char_traits_open4_char_close4_std_allocator_open4_char_close4_close3_std_shared_ptr_open3_dai_ADatatype_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_map>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_less>() - 1usize];
    [
        "Align of template specialization: std_less_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_less>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_pair_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_std_shared_ptr_open2_dai_ADatatype_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::size_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 48usize];
    [
        "Align of template specialization: std_pair_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_std_shared_ptr_open1_dai_ADatatype_close1_close0",
    ][::std::mem::align_of::<std_pair<std_basic_string<::std::os::raw::c_char>, std_shared_ptr>>()
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::size_of::<std_shared_ptr>() - 16usize];
    ["Align of template specialization: std_shared_ptr_open0_dai_ADatatype_close0"]
        [::std::mem::align_of::<std_shared_ptr>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: dai_NodeCRTP_open0_dai_node_ThreadedHostNode_dai_node_RGBD_close0",
    ][::std::mem::size_of::<dai_NodeCRTP<dai_node_ThreadedHostNode>>() - 416usize];
    [
        "Align of template specialization: dai_NodeCRTP_open0_dai_node_ThreadedHostNode_dai_node_RGBD_close0",
    ][::std::mem::align_of::<dai_NodeCRTP<dai_node_ThreadedHostNode>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_Sync_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_Sync_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_pair_open0_int_int_close0"]
        [::std::mem::size_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 8usize];
    ["Align of template specialization: std_pair_open0_int_int_close0"]
        [::std::mem::align_of::<std_pair<::std::os::raw::c_int, ::std::os::raw::c_int>>() - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Pimpl_open0_dai_node_RGBD_Impl_close0"]
        [::std::mem::size_of::<dai_Pimpl>() - 8usize];
    ["Align of template specialization: dai_Pimpl_open0_dai_node_RGBD_Impl_close0"]
        [::std::mem::align_of::<dai_Pimpl>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::size_of::<std_optional>() - 2usize];
    ["Align of template specialization: std_optional_open0_bool__close0"]
        [::std::mem::align_of::<std_optional>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: dai_Subnode_open0_dai_node_Sync_close0"]
        [::std::mem::size_of::<dai_Subnode>() - 16usize];
    ["Align of template specialization: dai_Subnode_open0_dai_node_Sync_close0"]
        [::std::mem::align_of::<dai_Subnode>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_AprilTag_std_allocator_open1_dai_AprilTag_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_AprilTag_std_allocator_open1_dai_AprilTag_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_AprilTag_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_AprilTag_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_138900_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_138909_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138918_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138932_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_138900_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_138909_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138918_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138932_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_AprilTag_std_allocator_open1_dai_AprilTag_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_AprilTag_std_allocator_open1_dai_AprilTag_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_AprilTag_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_AprilTag_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_138974_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_138983_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138992_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139002_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139012_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139022_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139032_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139048_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_138974_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_138983_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_138992_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139002_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139012_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139022_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139032_open1_ptr_float_ptr_void_void_close1__bindgen_ty_id_139048_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_float_std_allocator_open1_float_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_float_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139096_open1_ptr_CameraSettings_ptr_void_void_close1__bindgen_ty_id_139106_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139116_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139126_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139136_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139146_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139155_open1_ptr_Profile_ptr_void_void_close1__bindgen_ty_id_139165_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_139174_open1_ptr_FrameType_ptr_void_void_close1__bindgen_ty_id_139184_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139194_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139203_open1_ptr_ImgTransformation_ptr_void_void_close1__bindgen_ty_id_139213_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139222_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139231_open1_ptr_Timestamp_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139096_open1_ptr_CameraSettings_ptr_void_void_close1__bindgen_ty_id_139106_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139116_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139126_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139136_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139146_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139155_open1_ptr_Profile_ptr_void_void_close1__bindgen_ty_id_139165_open1_ptr_bool_ptr_void_void_close1__bindgen_ty_id_139174_open1_ptr_FrameType_ptr_void_void_close1__bindgen_ty_id_139184_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139194_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139203_open1_ptr_ImgTransformation_ptr_void_void_close1__bindgen_ty_id_139213_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139222_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139231_open1_ptr_Timestamp_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::size_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
    [
        "Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0",
    ][::std::mem::align_of::<std_chrono_time_point<std_chrono_steady_clock_duration>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_IMUPacket_std_allocator_open1_dai_IMUPacket_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_IMUPacket_std_allocator_open1_dai_IMUPacket_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_IMUPacket_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_IMUPacket_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139315_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139324_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139334_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139348_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139315_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139324_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139334_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139348_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_IMUPacket_std_allocator_open1_dai_IMUPacket_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_IMUPacket_std_allocator_open1_dai_IMUPacket_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_IMUPacket_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_IMUPacket_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_TensorInfo_std_allocator_open1_dai_TensorInfo_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_TensorInfo_std_allocator_open1_dai_TensorInfo_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_TensorInfo_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_TensorInfo_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::size_of::<std_optional>() - 304usize];
    ["Align of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_std_string_std_allocator_open1_std_basic_string_open2_char_std_char_traits_open3_char_close3_std_allocator_open3_char_close3_close2_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::size_of::<std_allocator>() - 1usize];
    [
        "Align of template specialization: std_allocator_open0_std_basic_string_open1_char_std_char_traits_open2_char_close2_std_allocator_open2_char_close2_close1_close0",
    ][::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::size_of::<std_basic_string<::std::os::raw::c_char>>() - 32usize];
    [
        "Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0",
    ][::std::mem::align_of::<std_basic_string<::std::os::raw::c_char>>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_TensorInfo_std_allocator_open1_dai_TensorInfo_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_TensorInfo_std_allocator_open1_dai_TensorInfo_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_TensorInfo_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_TensorInfo_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139426_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139435_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139444_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139458_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139468_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139479_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139426_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139435_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139444_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139458_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139468_open1_ptr_unsigned_int_ptr_void_void_close1__bindgen_ty_id_139479_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_TensorInfo_std_allocator_open1_dai_TensorInfo_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_TensorInfo_std_allocator_open1_dai_TensorInfo_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_TensorInfo_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_TensorInfo_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::size_of::<std_optional>() - 304usize];
    ["Align of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialImgDetection_std_allocator_open1_dai_SpatialImgDetection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialImgDetection_std_allocator_open1_dai_SpatialImgDetection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_SpatialImgDetection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_SpatialImgDetection_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::size_of::<std_optional>() - 304usize];
    ["Align of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139519_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139528_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139537_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139551_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139562_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139519_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139528_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139537_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139551_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139562_open1_ptr_optional_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialImgDetection_std_allocator_open1_dai_SpatialImgDetection_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialImgDetection_std_allocator_open1_dai_SpatialImgDetection_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_SpatialImgDetection_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_SpatialImgDetection_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::size_of::<std_optional>() - 304usize];
    ["Align of template specialization: std_optional_open0_dai_ImgTransformation_close0"]
        [::std::mem::align_of::<std_optional>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocations_std_allocator_open1_dai_SpatialLocations_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocations_std_allocator_open1_dai_SpatialLocations_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_SpatialLocations_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_SpatialLocations_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocations_std_allocator_open1_dai_SpatialLocations_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocations_std_allocator_open1_dai_SpatialLocations_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_SpatialLocations_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_SpatialLocations_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139611_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139620_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139629_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139643_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139611_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139620_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139629_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139643_open1_ptr_vector_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_SpatialLocations_std_allocator_open1_dai_SpatialLocations_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_SpatialLocations_std_allocator_open1_dai_SpatialLocations_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_SpatialLocations_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_SpatialLocations_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139665_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139674_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139683_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139692_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139701_open1_ptr_CpuUsage_ptr_void_void_close1__bindgen_ty_id_139710_open1_ptr_CpuUsage_ptr_void_void_close1__bindgen_ty_id_139719_open1_ptr_ChipTemperature_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139665_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139674_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139683_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139692_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139701_open1_ptr_CpuUsage_ptr_void_void_close1__bindgen_ty_id_139710_open1_ptr_CpuUsage_ptr_void_void_close1__bindgen_ty_id_139719_open1_ptr_ChipTemperature_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CpuUsage_std_allocator_open1_dai_CpuUsage_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CpuUsage_std_allocator_open1_dai_CpuUsage_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CpuUsage_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CpuUsage_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139755_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139764_open1_ptr_CpuUsage_ptr_void_void_close1__bindgen_ty_id_139778_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139787_open1_ptr_ChipTemperatureS3_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139755_open1_ptr_MemoryInfo_ptr_void_void_close1__bindgen_ty_id_139764_open1_ptr_CpuUsage_ptr_void_void_close1__bindgen_ty_id_139778_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139787_open1_ptr_ChipTemperatureS3_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_CpuUsage_std_allocator_open1_dai_CpuUsage_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_CpuUsage_std_allocator_open1_dai_CpuUsage_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_CpuUsage_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_CpuUsage_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_TrackedFeature_std_allocator_open1_dai_TrackedFeature_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_TrackedFeature_std_allocator_open1_dai_TrackedFeature_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_TrackedFeature_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_TrackedFeature_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139831_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139841_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139850_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139859_open1_ptr_Timestamp_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139831_open1_ptr_vector_ptr_void_void_close1__bindgen_ty_id_139841_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139850_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139859_open1_ptr_Timestamp_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_dai_TrackedFeature_std_allocator_open1_dai_TrackedFeature_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_dai_TrackedFeature_std_allocator_open1_dai_TrackedFeature_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_dai_TrackedFeature_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_dai_TrackedFeature_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::size_of::<std_vector>() - 24usize];
    [
        "Align of template specialization: std_vector_open0_unsigned_char_std_allocator_open1_unsigned_char_close1_close0",
    ][::std::mem::align_of::<std_vector>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    [
        "Size of template specialization: nop_MemberList_open0__bindgen_ty_id_139921_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139930_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139939_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139948_open1_ptr_Transform_ptr_void_void_close1_close0",
    ][::std::mem::size_of::<nop_MemberList>() - 1usize];
    [
        "Align of template specialization: nop_MemberList_open0__bindgen_ty_id_139921_open1_ptr_long_ptr_void_void_close1__bindgen_ty_id_139930_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139939_open1_ptr_Timestamp_ptr_void_void_close1__bindgen_ty_id_139948_open1_ptr_Transform_ptr_void_void_close1_close0",
    ][::std::mem::align_of::<nop_MemberList>() - 1usize];
};
